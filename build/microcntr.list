
build/microcntr.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002fd 	.word	0x080002fd
 8000008:	080002ff 	.word	0x080002ff
 800000c:	080002ff 	.word	0x080002ff
 8000010:	080002ff 	.word	0x080002ff
 8000014:	080002ff 	.word	0x080002ff
 8000018:	080002ff 	.word	0x080002ff
 800001c:	080002ff 	.word	0x080002ff
 8000020:	080002ff 	.word	0x080002ff
 8000024:	080002ff 	.word	0x080002ff
 8000028:	080002ff 	.word	0x080002ff
 800002c:	080050c1 	.word	0x080050c1
 8000030:	080002ff 	.word	0x080002ff
 8000034:	080002ff 	.word	0x080002ff
 8000038:	080002ff 	.word	0x080002ff
 800003c:	080002ff 	.word	0x080002ff
 8000040:	080002ff 	.word	0x080002ff
 8000044:	080002ff 	.word	0x080002ff
 8000048:	080002ff 	.word	0x080002ff
 800004c:	080002ff 	.word	0x080002ff
 8000050:	080002ff 	.word	0x080002ff
 8000054:	080002ff 	.word	0x080002ff
 8000058:	080002ff 	.word	0x080002ff
 800005c:	080002ff 	.word	0x080002ff
 8000060:	080002ff 	.word	0x080002ff
 8000064:	080002ff 	.word	0x080002ff
 8000068:	080002ff 	.word	0x080002ff
 800006c:	080032e1 	.word	0x080032e1
 8000070:	08003381 	.word	0x08003381
 8000074:	08003421 	.word	0x08003421
 8000078:	080034c1 	.word	0x080034c1
 800007c:	08003561 	.word	0x08003561
 8000080:	08003601 	.word	0x08003601
 8000084:	080036a1 	.word	0x080036a1
 8000088:	08003181 	.word	0x08003181
 800008c:	080002ff 	.word	0x080002ff
 8000090:	080002ff 	.word	0x080002ff
 8000094:	080002ff 	.word	0x080002ff
 8000098:	080002ff 	.word	0x080002ff
 800009c:	080002ff 	.word	0x080002ff
 80000a0:	080002ff 	.word	0x080002ff
 80000a4:	080052c1 	.word	0x080052c1
 80000a8:	08002ee1 	.word	0x08002ee1
 80000ac:	080002ff 	.word	0x080002ff
 80000b0:	080002ff 	.word	0x080002ff
 80000b4:	080002ff 	.word	0x080002ff
 80000b8:	080002ff 	.word	0x080002ff
 80000bc:	080002ff 	.word	0x080002ff
 80000c0:	080002ff 	.word	0x080002ff
 80000c4:	08003ce1 	.word	0x08003ce1
 80000c8:	08003f11 	.word	0x08003f11
 80000cc:	080002ff 	.word	0x080002ff
 80000d0:	080002ff 	.word	0x080002ff
 80000d4:	08002de1 	.word	0x08002de1
 80000d8:	08002e61 	.word	0x08002e61
 80000dc:	080002ff 	.word	0x080002ff
 80000e0:	080002ff 	.word	0x080002ff
 80000e4:	080002ff 	.word	0x080002ff
 80000e8:	080002ff 	.word	0x080002ff
 80000ec:	080002ff 	.word	0x080002ff
 80000f0:	080002ff 	.word	0x080002ff
 80000f4:	080002ff 	.word	0x080002ff
 80000f8:	080002ff 	.word	0x080002ff
 80000fc:	08003741 	.word	0x08003741
 8000100:	080002ff 	.word	0x080002ff
 8000104:	080002ff 	.word	0x080002ff
 8000108:	080002ff 	.word	0x080002ff
 800010c:	080002ff 	.word	0x080002ff
 8000110:	080002ff 	.word	0x080002ff
 8000114:	080002ff 	.word	0x080002ff
 8000118:	080030c1 	.word	0x080030c1
 800011c:	080002ff 	.word	0x080002ff
 8000120:	080037e1 	.word	0x080037e1
 8000124:	08003881 	.word	0x08003881
 8000128:	08003921 	.word	0x08003921
 800012c:	080039c1 	.word	0x080039c1
 8000130:	08003a61 	.word	0x08003a61
 8000134:	080002ff 	.word	0x080002ff
 8000138:	080002ff 	.word	0x080002ff
 800013c:	080002ff 	.word	0x080002ff
 8000140:	080002ff 	.word	0x080002ff
 8000144:	080002ff 	.word	0x080002ff
 8000148:	080002ff 	.word	0x080002ff
 800014c:	080002ff 	.word	0x080002ff
 8000150:	08003b01 	.word	0x08003b01
 8000154:	08003ba1 	.word	0x08003ba1
 8000158:	08003c41 	.word	0x08003c41
 800015c:	080002ff 	.word	0x080002ff
 8000160:	080002ff 	.word	0x080002ff
 8000164:	080002ff 	.word	0x080002ff
 8000168:	080002ff 	.word	0x080002ff
 800016c:	080002ff 	.word	0x080002ff
 8000170:	080002ff 	.word	0x080002ff
 8000174:	080002ff 	.word	0x080002ff
 8000178:	080002ff 	.word	0x080002ff
 800017c:	080002ff 	.word	0x080002ff
 8000180:	080002ff 	.word	0x080002ff
 8000184:	080002ff 	.word	0x080002ff
 8000188:	080002ff 	.word	0x080002ff
 800018c:	080002ff 	.word	0x080002ff
 8000190:	080002ff 	.word	0x080002ff
 8000194:	080002ff 	.word	0x080002ff
 8000198:	080002ff 	.word	0x080002ff
 800019c:	080002ff 	.word	0x080002ff
 80001a0:	080002ff 	.word	0x080002ff
 80001a4:	080002ff 	.word	0x080002ff
 80001a8:	080002ff 	.word	0x080002ff
 80001ac:	080002ff 	.word	0x080002ff
 80001b0:	080002ff 	.word	0x080002ff
 80001b4:	080002ff 	.word	0x080002ff
 80001b8:	080002ff 	.word	0x080002ff
 80001bc:	080002ff 	.word	0x080002ff
 80001c0:	080002ff 	.word	0x080002ff
 80001c4:	080002ff 	.word	0x080002ff
 80001c8:	080002ff 	.word	0x080002ff
 80001cc:	080002ff 	.word	0x080002ff
 80001d0:	080002ff 	.word	0x080002ff
 80001d4:	080002ff 	.word	0x080002ff
 80001d8:	080002ff 	.word	0x080002ff
 80001dc:	080002ff 	.word	0x080002ff

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4837      	ldr	r0, [pc, #220]	; (80002c0 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4836      	ldr	r0, [pc, #216]	; (80002c4 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4836      	ldr	r0, [pc, #216]	; (80002c8 <endfiniloop+0xc>)
                ldr     r1, =SCB_VTOR
 80001f0:	4936      	ldr	r1, [pc, #216]	; (80002cc <endfiniloop+0x10>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001f4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001f8:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001fc:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000200:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000204:	6008      	str	r0, [r1, #0]
                dsb
 8000206:	f3bf 8f4f 	dsb	sy
                isb
 800020a:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800020e:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000212:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000216:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 800021a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021e:	6008      	str	r0, [r1, #0]
                dsb
 8000220:	f3bf 8f4f 	dsb	sy
                isb
 8000224:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000228:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800022c:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000230:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000234:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000238:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800023a:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800023c:	f380 8814 	msr	CONTROL, r0
                isb
 8000240:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000244:	f002 fccc 	bl	8002be0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000248:	f004 ff4a 	bl	80050e0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800024c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000250:	491f      	ldr	r1, [pc, #124]	; (80002d0 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8000252:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <endfiniloop+0x4>)

08000254 <msloop>:
msloop:
                cmp     r1, r2
 8000254:	4291      	cmp	r1, r2
                itt     lo
 8000256:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000258:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800025c:	e7fa      	bcc.n	8000254 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800025e:	491d      	ldr	r1, [pc, #116]	; (80002d4 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <endfiniloop+0x8>)

08000262 <psloop>:
psloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800026a:	e7fa      	bcc.n	8000262 <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 800026c:	491a      	ldr	r1, [pc, #104]	; (80002d8 <endfiniloop+0x1c>)
                ldr     r2, =__data_base__
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <endfiniloop+0x20>)
                ldr     r3, =__data_end__
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <endfiniloop+0x24>)

08000272 <dloop>:
dloop:
                cmp     r2, r3
 8000272:	429a      	cmp	r2, r3
                ittt    lo
 8000274:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000276:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800027a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800027e:	e7f8      	bcc.n	8000272 <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 8000280:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000282:	4918      	ldr	r1, [pc, #96]	; (80002e4 <endfiniloop+0x28>)
                ldr     r2, =__bss_end__
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <endfiniloop+0x2c>)

08000286 <bloop>:
bloop:
                cmp     r1, r2
 8000286:	4291      	cmp	r1, r2
                itt     lo
 8000288:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800028a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800028e:	e7fa      	bcc.n	8000286 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000290:	f002 fcbe 	bl	8002c10 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000294:	f002 fcac 	bl	8002bf0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000298:	4c14      	ldr	r4, [pc, #80]	; (80002ec <endfiniloop+0x30>)
                ldr     r5, =__init_array_end__
 800029a:	4d15      	ldr	r5, [pc, #84]	; (80002f0 <endfiniloop+0x34>)

0800029c <initloop>:
initloop:
                cmp     r4, r5
 800029c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800029e:	da03      	bge.n	80002a8 <endinitloop>
                ldr     r1, [r4], #4
 80002a0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002a4:	4788      	blx	r1
                b       initloop
 80002a6:	e7f9      	b.n	800029c <initloop>

080002a8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002a8:	f005 f862 	bl	8005370 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002ac:	4c11      	ldr	r4, [pc, #68]	; (80002f4 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end__
 80002ae:	4d12      	ldr	r5, [pc, #72]	; (80002f8 <endfiniloop+0x3c>)

080002b0 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b2:	da03      	bge.n	80002bc <endfiniloop>
                ldr     r1, [r4], #4
 80002b4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b8:	4788      	blx	r1
                b       finiloop
 80002ba:	e7f9      	b.n	80002b0 <finiloop>

080002bc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002bc:	f002 bca0 	b.w	8002c00 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002c0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002c4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002c8:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 80002cc:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 80002d0:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d4:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002d8:	080060b0 	.word	0x080060b0
                ldr     r2, =__data_base__
 80002dc:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002e0:	20000804 	.word	0x20000804
                ldr     r1, =__bss_base__
 80002e4:	20000808 	.word	0x20000808
                ldr     r2, =__bss_end__
 80002e8:	20002128 	.word	0x20002128
                ldr     r4, =__init_array_base__
 80002ec:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002f8:	080001e0 	.word	0x080001e0

080002fc <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002fc:	e770      	b.n	80001e0 <_crt0_entry>

080002fe <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002fe:	f000 f800 	bl	8000302 <_unhandled_exception>

08000302 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000302:	e7fe      	b.n	8000302 <_unhandled_exception>

08000304 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
 8000308:	ed2d 8a10 	vpush	{s16-s31}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 800030c:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000310:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000312:	469d      	mov	sp, r3
#endif
#endif

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
 8000314:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800031c <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800031c:	f002 fcb0 	bl	8002c80 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f004 fe90 	bl	8005050 <chThdExit>

08000330 <.zombies>:
.zombies:       b       .zombies
 8000330:	e7fe      	b.n	8000330 <.zombies>

08000332 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 8000332:	f002 fcbd 	bl	8002cb0 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 8000336:	f003 feb3 	bl	80040a0 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800033a:	f002 fca1 	bl	8002c80 <__dbg_check_unlock>

0800033e <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033e:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000340:	e7fe      	b.n	8000340 <__port_exit_from_isr+0x2>
	...

08000344 <memcpy>:
 8000344:	4684      	mov	ip, r0
 8000346:	ea41 0300 	orr.w	r3, r1, r0
 800034a:	f013 0303 	ands.w	r3, r3, #3
 800034e:	d16d      	bne.n	800042c <memcpy+0xe8>
 8000350:	3a40      	subs	r2, #64	; 0x40
 8000352:	d341      	bcc.n	80003d8 <memcpy+0x94>
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a40      	subs	r2, #64	; 0x40
 80003d6:	d2bd      	bcs.n	8000354 <memcpy+0x10>
 80003d8:	3230      	adds	r2, #48	; 0x30
 80003da:	d311      	bcc.n	8000400 <memcpy+0xbc>
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	3a10      	subs	r2, #16
 80003fe:	d2ed      	bcs.n	80003dc <memcpy+0x98>
 8000400:	320c      	adds	r2, #12
 8000402:	d305      	bcc.n	8000410 <memcpy+0xcc>
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	3a04      	subs	r2, #4
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0xc0>
 8000410:	3204      	adds	r2, #4
 8000412:	d008      	beq.n	8000426 <memcpy+0xe2>
 8000414:	07d2      	lsls	r2, r2, #31
 8000416:	bf1c      	itt	ne
 8000418:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800041c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000420:	d301      	bcc.n	8000426 <memcpy+0xe2>
 8000422:	880b      	ldrh	r3, [r1, #0]
 8000424:	8003      	strh	r3, [r0, #0]
 8000426:	4660      	mov	r0, ip
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2a08      	cmp	r2, #8
 800042e:	d313      	bcc.n	8000458 <memcpy+0x114>
 8000430:	078b      	lsls	r3, r1, #30
 8000432:	d08d      	beq.n	8000350 <memcpy+0xc>
 8000434:	f010 0303 	ands.w	r3, r0, #3
 8000438:	d08a      	beq.n	8000350 <memcpy+0xc>
 800043a:	f1c3 0304 	rsb	r3, r3, #4
 800043e:	1ad2      	subs	r2, r2, r3
 8000440:	07db      	lsls	r3, r3, #31
 8000442:	bf1c      	itt	ne
 8000444:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000448:	f800 3b01 	strbne.w	r3, [r0], #1
 800044c:	d380      	bcc.n	8000350 <memcpy+0xc>
 800044e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000452:	f820 3b02 	strh.w	r3, [r0], #2
 8000456:	e77b      	b.n	8000350 <memcpy+0xc>
 8000458:	3a04      	subs	r2, #4
 800045a:	d3d9      	bcc.n	8000410 <memcpy+0xcc>
 800045c:	3a01      	subs	r2, #1
 800045e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000462:	f800 3b01 	strb.w	r3, [r0], #1
 8000466:	d2f9      	bcs.n	800045c <memcpy+0x118>
 8000468:	780b      	ldrb	r3, [r1, #0]
 800046a:	7003      	strb	r3, [r0, #0]
 800046c:	784b      	ldrb	r3, [r1, #1]
 800046e:	7043      	strb	r3, [r0, #1]
 8000470:	788b      	ldrb	r3, [r1, #2]
 8000472:	7083      	strb	r3, [r0, #2]
 8000474:	4660      	mov	r0, ip
 8000476:	4770      	bx	lr

08000478 <__aeabi_drsub>:
 8000478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e002      	b.n	8000484 <__adddf3>
 800047e:	bf00      	nop

08000480 <__aeabi_dsub>:
 8000480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000484 <__adddf3>:
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	bf1f      	itttt	ne
 800049a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800049e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004aa:	f000 80e2 	beq.w	8000672 <__adddf3+0x1ee>
 80004ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004b6:	bfb8      	it	lt
 80004b8:	426d      	neglt	r5, r5
 80004ba:	dd0c      	ble.n	80004d6 <__adddf3+0x52>
 80004bc:	442c      	add	r4, r5
 80004be:	ea80 0202 	eor.w	r2, r0, r2
 80004c2:	ea81 0303 	eor.w	r3, r1, r3
 80004c6:	ea82 0000 	eor.w	r0, r2, r0
 80004ca:	ea83 0101 	eor.w	r1, r3, r1
 80004ce:	ea80 0202 	eor.w	r2, r0, r2
 80004d2:	ea81 0303 	eor.w	r3, r1, r3
 80004d6:	2d36      	cmp	r5, #54	; 0x36
 80004d8:	bf88      	it	hi
 80004da:	bd30      	pophi	{r4, r5, pc}
 80004dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004ec:	d002      	beq.n	80004f4 <__adddf3+0x70>
 80004ee:	4240      	negs	r0, r0
 80004f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x84>
 8000502:	4252      	negs	r2, r2
 8000504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000508:	ea94 0f05 	teq	r4, r5
 800050c:	f000 80a7 	beq.w	800065e <__adddf3+0x1da>
 8000510:	f1a4 0401 	sub.w	r4, r4, #1
 8000514:	f1d5 0e20 	rsbs	lr, r5, #32
 8000518:	db0d      	blt.n	8000536 <__adddf3+0xb2>
 800051a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800051e:	fa22 f205 	lsr.w	r2, r2, r5
 8000522:	1880      	adds	r0, r0, r2
 8000524:	f141 0100 	adc.w	r1, r1, #0
 8000528:	fa03 f20e 	lsl.w	r2, r3, lr
 800052c:	1880      	adds	r0, r0, r2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	4159      	adcs	r1, r3
 8000534:	e00e      	b.n	8000554 <__adddf3+0xd0>
 8000536:	f1a5 0520 	sub.w	r5, r5, #32
 800053a:	f10e 0e20 	add.w	lr, lr, #32
 800053e:	2a01      	cmp	r2, #1
 8000540:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000544:	bf28      	it	cs
 8000546:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054a:	fa43 f305 	asr.w	r3, r3, r5
 800054e:	18c0      	adds	r0, r0, r3
 8000550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	d507      	bpl.n	800056a <__adddf3+0xe6>
 800055a:	f04f 0e00 	mov.w	lr, #0
 800055e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000562:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000566:	eb6e 0101 	sbc.w	r1, lr, r1
 800056a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800056e:	d31b      	bcc.n	80005a8 <__adddf3+0x124>
 8000570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000574:	d30c      	bcc.n	8000590 <__adddf3+0x10c>
 8000576:	0849      	lsrs	r1, r1, #1
 8000578:	ea5f 0030 	movs.w	r0, r0, rrx
 800057c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000580:	f104 0401 	add.w	r4, r4, #1
 8000584:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800058c:	f080 809a 	bcs.w	80006c4 <__adddf3+0x240>
 8000590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	ea41 0105 	orr.w	r1, r1, r5
 80005a6:	bd30      	pop	{r4, r5, pc}
 80005a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005ac:	4140      	adcs	r0, r0
 80005ae:	eb41 0101 	adc.w	r1, r1, r1
 80005b2:	3c01      	subs	r4, #1
 80005b4:	bf28      	it	cs
 80005b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ba:	d2e9      	bcs.n	8000590 <__adddf3+0x10c>
 80005bc:	f091 0f00 	teq	r1, #0
 80005c0:	bf04      	itt	eq
 80005c2:	4601      	moveq	r1, r0
 80005c4:	2000      	moveq	r0, #0
 80005c6:	fab1 f381 	clz	r3, r1
 80005ca:	bf08      	it	eq
 80005cc:	3320      	addeq	r3, #32
 80005ce:	f1a3 030b 	sub.w	r3, r3, #11
 80005d2:	f1b3 0220 	subs.w	r2, r3, #32
 80005d6:	da0c      	bge.n	80005f2 <__adddf3+0x16e>
 80005d8:	320c      	adds	r2, #12
 80005da:	dd08      	ble.n	80005ee <__adddf3+0x16a>
 80005dc:	f102 0c14 	add.w	ip, r2, #20
 80005e0:	f1c2 020c 	rsb	r2, r2, #12
 80005e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e8:	fa21 f102 	lsr.w	r1, r1, r2
 80005ec:	e00c      	b.n	8000608 <__adddf3+0x184>
 80005ee:	f102 0214 	add.w	r2, r2, #20
 80005f2:	bfd8      	it	le
 80005f4:	f1c2 0c20 	rsble	ip, r2, #32
 80005f8:	fa01 f102 	lsl.w	r1, r1, r2
 80005fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000600:	bfdc      	itt	le
 8000602:	ea41 010c 	orrle.w	r1, r1, ip
 8000606:	4090      	lslle	r0, r2
 8000608:	1ae4      	subs	r4, r4, r3
 800060a:	bfa2      	ittt	ge
 800060c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000610:	4329      	orrge	r1, r5
 8000612:	bd30      	popge	{r4, r5, pc}
 8000614:	ea6f 0404 	mvn.w	r4, r4
 8000618:	3c1f      	subs	r4, #31
 800061a:	da1c      	bge.n	8000656 <__adddf3+0x1d2>
 800061c:	340c      	adds	r4, #12
 800061e:	dc0e      	bgt.n	800063e <__adddf3+0x1ba>
 8000620:	f104 0414 	add.w	r4, r4, #20
 8000624:	f1c4 0220 	rsb	r2, r4, #32
 8000628:	fa20 f004 	lsr.w	r0, r0, r4
 800062c:	fa01 f302 	lsl.w	r3, r1, r2
 8000630:	ea40 0003 	orr.w	r0, r0, r3
 8000634:	fa21 f304 	lsr.w	r3, r1, r4
 8000638:	ea45 0103 	orr.w	r1, r5, r3
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f1c4 040c 	rsb	r4, r4, #12
 8000642:	f1c4 0220 	rsb	r2, r4, #32
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 f304 	lsl.w	r3, r1, r4
 800064e:	ea40 0003 	orr.w	r0, r0, r3
 8000652:	4629      	mov	r1, r5
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	fa21 f004 	lsr.w	r0, r1, r4
 800065a:	4629      	mov	r1, r5
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	f094 0f00 	teq	r4, #0
 8000662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000666:	bf06      	itte	eq
 8000668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800066c:	3401      	addeq	r4, #1
 800066e:	3d01      	subne	r5, #1
 8000670:	e74e      	b.n	8000510 <__adddf3+0x8c>
 8000672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000676:	bf18      	it	ne
 8000678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800067c:	d029      	beq.n	80006d2 <__adddf3+0x24e>
 800067e:	ea94 0f05 	teq	r4, r5
 8000682:	bf08      	it	eq
 8000684:	ea90 0f02 	teqeq	r0, r2
 8000688:	d005      	beq.n	8000696 <__adddf3+0x212>
 800068a:	ea54 0c00 	orrs.w	ip, r4, r0
 800068e:	bf04      	itt	eq
 8000690:	4619      	moveq	r1, r3
 8000692:	4610      	moveq	r0, r2
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea91 0f03 	teq	r1, r3
 800069a:	bf1e      	ittt	ne
 800069c:	2100      	movne	r1, #0
 800069e:	2000      	movne	r0, #0
 80006a0:	bd30      	popne	{r4, r5, pc}
 80006a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006a6:	d105      	bne.n	80006b4 <__adddf3+0x230>
 80006a8:	0040      	lsls	r0, r0, #1
 80006aa:	4149      	adcs	r1, r1
 80006ac:	bf28      	it	cs
 80006ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd30      	pop	{r4, r5, pc}
 80006b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006b8:	bf3c      	itt	cc
 80006ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006be:	bd30      	popcc	{r4, r5, pc}
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d6:	bf1a      	itte	ne
 80006d8:	4619      	movne	r1, r3
 80006da:	4610      	movne	r0, r2
 80006dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e0:	bf1c      	itt	ne
 80006e2:	460b      	movne	r3, r1
 80006e4:	4602      	movne	r2, r0
 80006e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ea:	bf06      	itte	eq
 80006ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f0:	ea91 0f03 	teqeq	r1, r3
 80006f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop

080006fc <__aeabi_ui2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f04f 0500 	mov.w	r5, #0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e750      	b.n	80005bc <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_i2d>:
 800071c:	f090 0f00 	teq	r0, #0
 8000720:	bf04      	itt	eq
 8000722:	2100      	moveq	r1, #0
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000734:	bf48      	it	mi
 8000736:	4240      	negmi	r0, r0
 8000738:	f04f 0100 	mov.w	r1, #0
 800073c:	e73e      	b.n	80005bc <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_f2d>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000746:	ea4f 0131 	mov.w	r1, r1, rrx
 800074a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800074e:	bf1f      	itttt	ne
 8000750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800075c:	4770      	bxne	lr
 800075e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000762:	bf08      	it	eq
 8000764:	4770      	bxeq	lr
 8000766:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076a:	bf04      	itt	eq
 800076c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800077c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000780:	e71c      	b.n	80005bc <__adddf3+0x138>
 8000782:	bf00      	nop

08000784 <__aeabi_ul2d>:
 8000784:	ea50 0201 	orrs.w	r2, r0, r1
 8000788:	bf08      	it	eq
 800078a:	4770      	bxeq	lr
 800078c:	b530      	push	{r4, r5, lr}
 800078e:	f04f 0500 	mov.w	r5, #0
 8000792:	e00a      	b.n	80007aa <__aeabi_l2d+0x16>

08000794 <__aeabi_l2d>:
 8000794:	ea50 0201 	orrs.w	r2, r0, r1
 8000798:	bf08      	it	eq
 800079a:	4770      	bxeq	lr
 800079c:	b530      	push	{r4, r5, lr}
 800079e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a2:	d502      	bpl.n	80007aa <__aeabi_l2d+0x16>
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b6:	f43f aed8 	beq.w	800056a <__adddf3+0xe6>
 80007ba:	f04f 0203 	mov.w	r2, #3
 80007be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c2:	bf18      	it	ne
 80007c4:	3203      	addne	r2, #3
 80007c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ca:	bf18      	it	ne
 80007cc:	3203      	addne	r2, #3
 80007ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007da:	fa20 f002 	lsr.w	r0, r0, r2
 80007de:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e2:	ea40 000e 	orr.w	r0, r0, lr
 80007e6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ea:	4414      	add	r4, r2
 80007ec:	e6bd      	b.n	800056a <__adddf3+0xe6>
 80007ee:	bf00      	nop

080007f0 <__aeabi_dmul>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8de 	bleq	80009cc <__aeabi_dmul+0x1dc>
 8000810:	442c      	add	r4, r5
 8000812:	ea81 0603 	eor.w	r6, r1, r3
 8000816:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800081a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800081e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000822:	bf18      	it	ne
 8000824:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000830:	d038      	beq.n	80008a4 <__aeabi_dmul+0xb4>
 8000832:	fba0 ce02 	umull	ip, lr, r0, r2
 8000836:	f04f 0500 	mov.w	r5, #0
 800083a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800083e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000842:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000846:	f04f 0600 	mov.w	r6, #0
 800084a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800084e:	f09c 0f00 	teq	ip, #0
 8000852:	bf18      	it	ne
 8000854:	f04e 0e01 	orrne.w	lr, lr, #1
 8000858:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800085c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000860:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000864:	d204      	bcs.n	8000870 <__aeabi_dmul+0x80>
 8000866:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800086a:	416d      	adcs	r5, r5
 800086c:	eb46 0606 	adc.w	r6, r6, r6
 8000870:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000874:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000878:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800087c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000880:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000884:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000888:	bf88      	it	hi
 800088a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800088e:	d81e      	bhi.n	80008ce <__aeabi_dmul+0xde>
 8000890:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000894:	bf08      	it	eq
 8000896:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008a8:	ea46 0101 	orr.w	r1, r6, r1
 80008ac:	ea40 0002 	orr.w	r0, r0, r2
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008b8:	bfc2      	ittt	gt
 80008ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008c2:	bd70      	popgt	{r4, r5, r6, pc}
 80008c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c8:	f04f 0e00 	mov.w	lr, #0
 80008cc:	3c01      	subs	r4, #1
 80008ce:	f300 80ab 	bgt.w	8000a28 <__aeabi_dmul+0x238>
 80008d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008d6:	bfde      	ittt	le
 80008d8:	2000      	movle	r0, #0
 80008da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008de:	bd70      	pople	{r4, r5, r6, pc}
 80008e0:	f1c4 0400 	rsb	r4, r4, #0
 80008e4:	3c20      	subs	r4, #32
 80008e6:	da35      	bge.n	8000954 <__aeabi_dmul+0x164>
 80008e8:	340c      	adds	r4, #12
 80008ea:	dc1b      	bgt.n	8000924 <__aeabi_dmul+0x134>
 80008ec:	f104 0414 	add.w	r4, r4, #20
 80008f0:	f1c4 0520 	rsb	r5, r4, #32
 80008f4:	fa00 f305 	lsl.w	r3, r0, r5
 80008f8:	fa20 f004 	lsr.w	r0, r0, r4
 80008fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000900:	ea40 0002 	orr.w	r0, r0, r2
 8000904:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800090c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000910:	fa21 f604 	lsr.w	r6, r1, r4
 8000914:	eb42 0106 	adc.w	r1, r2, r6
 8000918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800091c:	bf08      	it	eq
 800091e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f1c4 040c 	rsb	r4, r4, #12
 8000928:	f1c4 0520 	rsb	r5, r4, #32
 800092c:	fa00 f304 	lsl.w	r3, r0, r4
 8000930:	fa20 f005 	lsr.w	r0, r0, r5
 8000934:	fa01 f204 	lsl.w	r2, r1, r4
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000940:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000944:	f141 0100 	adc.w	r1, r1, #0
 8000948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800094c:	bf08      	it	eq
 800094e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f1c4 0520 	rsb	r5, r4, #32
 8000958:	fa00 f205 	lsl.w	r2, r0, r5
 800095c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000960:	fa20 f304 	lsr.w	r3, r0, r4
 8000964:	fa01 f205 	lsl.w	r2, r1, r5
 8000968:	ea43 0302 	orr.w	r3, r3, r2
 800096c:	fa21 f004 	lsr.w	r0, r1, r4
 8000970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000974:	fa21 f204 	lsr.w	r2, r1, r4
 8000978:	ea20 0002 	bic.w	r0, r0, r2
 800097c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f094 0f00 	teq	r4, #0
 8000990:	d10f      	bne.n	80009b2 <__aeabi_dmul+0x1c2>
 8000992:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000996:	0040      	lsls	r0, r0, #1
 8000998:	eb41 0101 	adc.w	r1, r1, r1
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	bf08      	it	eq
 80009a2:	3c01      	subeq	r4, #1
 80009a4:	d0f7      	beq.n	8000996 <__aeabi_dmul+0x1a6>
 80009a6:	ea41 0106 	orr.w	r1, r1, r6
 80009aa:	f095 0f00 	teq	r5, #0
 80009ae:	bf18      	it	ne
 80009b0:	4770      	bxne	lr
 80009b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	eb43 0303 	adc.w	r3, r3, r3
 80009bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009c0:	bf08      	it	eq
 80009c2:	3d01      	subeq	r5, #1
 80009c4:	d0f7      	beq.n	80009b6 <__aeabi_dmul+0x1c6>
 80009c6:	ea43 0306 	orr.w	r3, r3, r6
 80009ca:	4770      	bx	lr
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d4:	bf18      	it	ne
 80009d6:	ea95 0f0c 	teqne	r5, ip
 80009da:	d00c      	beq.n	80009f6 <__aeabi_dmul+0x206>
 80009dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e6:	d1d1      	bne.n	800098c <__aeabi_dmul+0x19c>
 80009e8:	ea81 0103 	eor.w	r1, r1, r3
 80009ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009f0:	f04f 0000 	mov.w	r0, #0
 80009f4:	bd70      	pop	{r4, r5, r6, pc}
 80009f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fa:	bf06      	itte	eq
 80009fc:	4610      	moveq	r0, r2
 80009fe:	4619      	moveq	r1, r3
 8000a00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a04:	d019      	beq.n	8000a3a <__aeabi_dmul+0x24a>
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	d102      	bne.n	8000a12 <__aeabi_dmul+0x222>
 8000a0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a10:	d113      	bne.n	8000a3a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	d105      	bne.n	8000a24 <__aeabi_dmul+0x234>
 8000a18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a1c:	bf1c      	itt	ne
 8000a1e:	4610      	movne	r0, r2
 8000a20:	4619      	movne	r1, r3
 8000a22:	d10a      	bne.n	8000a3a <__aeabi_dmul+0x24a>
 8000a24:	ea81 0103 	eor.w	r1, r1, r3
 8000a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a42:	bd70      	pop	{r4, r5, r6, pc}

08000a44 <__aeabi_ddiv>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a52:	bf1d      	ittte	ne
 8000a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a58:	ea94 0f0c 	teqne	r4, ip
 8000a5c:	ea95 0f0c 	teqne	r5, ip
 8000a60:	f000 f8a7 	bleq	8000bb2 <__aeabi_ddiv+0x16e>
 8000a64:	eba4 0405 	sub.w	r4, r4, r5
 8000a68:	ea81 0e03 	eor.w	lr, r1, r3
 8000a6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a74:	f000 8088 	beq.w	8000b88 <__aeabi_ddiv+0x144>
 8000a78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a9c:	429d      	cmp	r5, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4296      	cmpeq	r6, r2
 8000aa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000aa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000aaa:	d202      	bcs.n	8000ab2 <__aeabi_ddiv+0x6e>
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ab2:	1ab6      	subs	r6, r6, r2
 8000ab4:	eb65 0503 	sbc.w	r5, r5, r3
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	ea4f 0232 	mov.w	r2, r2, rrx
 8000abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ac2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ac6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000aca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ace:	bf22      	ittt	cs
 8000ad0:	1ab6      	subcs	r6, r6, r2
 8000ad2:	4675      	movcs	r5, lr
 8000ad4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ade:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ae2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ae6:	bf22      	ittt	cs
 8000ae8:	1ab6      	subcs	r6, r6, r2
 8000aea:	4675      	movcs	r5, lr
 8000aec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000afa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000afe:	bf22      	ittt	cs
 8000b00:	1ab6      	subcs	r6, r6, r2
 8000b02:	4675      	movcs	r5, lr
 8000b04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b16:	bf22      	ittt	cs
 8000b18:	1ab6      	subcs	r6, r6, r2
 8000b1a:	4675      	movcs	r5, lr
 8000b1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b20:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b24:	d018      	beq.n	8000b58 <__aeabi_ddiv+0x114>
 8000b26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b42:	d1c0      	bne.n	8000ac6 <__aeabi_ddiv+0x82>
 8000b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b48:	d10b      	bne.n	8000b62 <__aeabi_ddiv+0x11e>
 8000b4a:	ea41 0100 	orr.w	r1, r1, r0
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b56:	e7b6      	b.n	8000ac6 <__aeabi_ddiv+0x82>
 8000b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b5c:	bf04      	itt	eq
 8000b5e:	4301      	orreq	r1, r0
 8000b60:	2000      	moveq	r0, #0
 8000b62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b66:	bf88      	it	hi
 8000b68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b6c:	f63f aeaf 	bhi.w	80008ce <__aeabi_dmul+0xde>
 8000b70:	ebb5 0c03 	subs.w	ip, r5, r3
 8000b74:	bf04      	itt	eq
 8000b76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000b7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000b7e:	f150 0000 	adcs.w	r0, r0, #0
 8000b82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b94:	bfc2      	ittt	gt
 8000b96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b9e:	bd70      	popgt	{r4, r5, r6, pc}
 8000ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba4:	f04f 0e00 	mov.w	lr, #0
 8000ba8:	3c01      	subs	r4, #1
 8000baa:	e690      	b.n	80008ce <__aeabi_dmul+0xde>
 8000bac:	ea45 0e06 	orr.w	lr, r5, r6
 8000bb0:	e68d      	b.n	80008ce <__aeabi_dmul+0xde>
 8000bb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bb6:	ea94 0f0c 	teq	r4, ip
 8000bba:	bf08      	it	eq
 8000bbc:	ea95 0f0c 	teqeq	r5, ip
 8000bc0:	f43f af3b 	beq.w	8000a3a <__aeabi_dmul+0x24a>
 8000bc4:	ea94 0f0c 	teq	r4, ip
 8000bc8:	d10a      	bne.n	8000be0 <__aeabi_ddiv+0x19c>
 8000bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000bce:	f47f af34 	bne.w	8000a3a <__aeabi_dmul+0x24a>
 8000bd2:	ea95 0f0c 	teq	r5, ip
 8000bd6:	f47f af25 	bne.w	8000a24 <__aeabi_dmul+0x234>
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	e72c      	b.n	8000a3a <__aeabi_dmul+0x24a>
 8000be0:	ea95 0f0c 	teq	r5, ip
 8000be4:	d106      	bne.n	8000bf4 <__aeabi_ddiv+0x1b0>
 8000be6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000bea:	f43f aefd 	beq.w	80009e8 <__aeabi_dmul+0x1f8>
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	e722      	b.n	8000a3a <__aeabi_dmul+0x24a>
 8000bf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000bf8:	bf18      	it	ne
 8000bfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000bfe:	f47f aec5 	bne.w	800098c <__aeabi_dmul+0x19c>
 8000c02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c06:	f47f af0d 	bne.w	8000a24 <__aeabi_dmul+0x234>
 8000c0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c0e:	f47f aeeb 	bne.w	80009e8 <__aeabi_dmul+0x1f8>
 8000c12:	e712      	b.n	8000a3a <__aeabi_dmul+0x24a>

08000c14 <__gedf2>:
 8000c14:	f04f 3cff 	mov.w	ip, #4294967295
 8000c18:	e006      	b.n	8000c28 <__cmpdf2+0x4>
 8000c1a:	bf00      	nop

08000c1c <__ledf2>:
 8000c1c:	f04f 0c01 	mov.w	ip, #1
 8000c20:	e002      	b.n	8000c28 <__cmpdf2+0x4>
 8000c22:	bf00      	nop

08000c24 <__cmpdf2>:
 8000c24:	f04f 0c01 	mov.w	ip, #1
 8000c28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c3e:	d01b      	beq.n	8000c78 <__cmpdf2+0x54>
 8000c40:	b001      	add	sp, #4
 8000c42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000c46:	bf0c      	ite	eq
 8000c48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000c4c:	ea91 0f03 	teqne	r1, r3
 8000c50:	bf02      	ittt	eq
 8000c52:	ea90 0f02 	teqeq	r0, r2
 8000c56:	2000      	moveq	r0, #0
 8000c58:	4770      	bxeq	lr
 8000c5a:	f110 0f00 	cmn.w	r0, #0
 8000c5e:	ea91 0f03 	teq	r1, r3
 8000c62:	bf58      	it	pl
 8000c64:	4299      	cmppl	r1, r3
 8000c66:	bf08      	it	eq
 8000c68:	4290      	cmpeq	r0, r2
 8000c6a:	bf2c      	ite	cs
 8000c6c:	17d8      	asrcs	r0, r3, #31
 8000c6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000c72:	f040 0001 	orr.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c80:	d102      	bne.n	8000c88 <__cmpdf2+0x64>
 8000c82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c86:	d107      	bne.n	8000c98 <__cmpdf2+0x74>
 8000c88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c90:	d1d6      	bne.n	8000c40 <__cmpdf2+0x1c>
 8000c92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c96:	d0d3      	beq.n	8000c40 <__cmpdf2+0x1c>
 8000c98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_cdrcmple>:
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4662      	mov	r2, ip
 8000ca6:	468c      	mov	ip, r1
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4663      	mov	r3, ip
 8000cac:	e000      	b.n	8000cb0 <__aeabi_cdcmpeq>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_cdcmpeq>:
 8000cb0:	b501      	push	{r0, lr}
 8000cb2:	f7ff ffb7 	bl	8000c24 <__cmpdf2>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	bf48      	it	mi
 8000cba:	f110 0f00 	cmnmi.w	r0, #0
 8000cbe:	bd01      	pop	{r0, pc}

08000cc0 <__aeabi_dcmpeq>:
 8000cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc4:	f7ff fff4 	bl	8000cb0 <__aeabi_cdcmpeq>
 8000cc8:	bf0c      	ite	eq
 8000cca:	2001      	moveq	r0, #1
 8000ccc:	2000      	movne	r0, #0
 8000cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_dcmplt>:
 8000cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd8:	f7ff ffea 	bl	8000cb0 <__aeabi_cdcmpeq>
 8000cdc:	bf34      	ite	cc
 8000cde:	2001      	movcc	r0, #1
 8000ce0:	2000      	movcs	r0, #0
 8000ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_dcmple>:
 8000ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cec:	f7ff ffe0 	bl	8000cb0 <__aeabi_cdcmpeq>
 8000cf0:	bf94      	ite	ls
 8000cf2:	2001      	movls	r0, #1
 8000cf4:	2000      	movhi	r0, #0
 8000cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfa:	bf00      	nop

08000cfc <__aeabi_dcmpge>:
 8000cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d00:	f7ff ffce 	bl	8000ca0 <__aeabi_cdrcmple>
 8000d04:	bf94      	ite	ls
 8000d06:	2001      	movls	r0, #1
 8000d08:	2000      	movhi	r0, #0
 8000d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0e:	bf00      	nop

08000d10 <__aeabi_dcmpgt>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff ffc4 	bl	8000ca0 <__aeabi_cdrcmple>
 8000d18:	bf34      	ite	cc
 8000d1a:	2001      	movcc	r0, #1
 8000d1c:	2000      	movcs	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_d2iz>:
 8000d24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d2c:	d215      	bcs.n	8000d5a <__aeabi_d2iz+0x36>
 8000d2e:	d511      	bpl.n	8000d54 <__aeabi_d2iz+0x30>
 8000d30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d38:	d912      	bls.n	8000d60 <__aeabi_d2iz+0x3c>
 8000d3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000d4e:	bf18      	it	ne
 8000d50:	4240      	negne	r0, r0
 8000d52:	4770      	bx	lr
 8000d54:	f04f 0000 	mov.w	r0, #0
 8000d58:	4770      	bx	lr
 8000d5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d5e:	d105      	bne.n	8000d6c <__aeabi_d2iz+0x48>
 8000d60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d64:	bf08      	it	eq
 8000d66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d6a:	4770      	bx	lr
 8000d6c:	f04f 0000 	mov.w	r0, #0
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <__aeabi_d2uiz>:
 8000d74:	004a      	lsls	r2, r1, #1
 8000d76:	d211      	bcs.n	8000d9c <__aeabi_d2uiz+0x28>
 8000d78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d7c:	d211      	bcs.n	8000da2 <__aeabi_d2uiz+0x2e>
 8000d7e:	d50d      	bpl.n	8000d9c <__aeabi_d2uiz+0x28>
 8000d80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d88:	d40e      	bmi.n	8000da8 <__aeabi_d2uiz+0x34>
 8000d8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d96:	fa23 f002 	lsr.w	r0, r3, r2
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000da6:	d102      	bne.n	8000dae <__aeabi_d2uiz+0x3a>
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	4770      	bx	lr
 8000dae:	f04f 0000 	mov.w	r0, #0
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_d2f>:
 8000db4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000db8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000dbc:	bf24      	itt	cs
 8000dbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000dc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000dc6:	d90d      	bls.n	8000de4 <__aeabi_d2f+0x30>
 8000dc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000dd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000dd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000dd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000de8:	d121      	bne.n	8000e2e <__aeabi_d2f+0x7a>
 8000dea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000dee:	bfbc      	itt	lt
 8000df0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000df4:	4770      	bxlt	lr
 8000df6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000dfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000dfe:	f1c2 0218 	rsb	r2, r2, #24
 8000e02:	f1c2 0c20 	rsb	ip, r2, #32
 8000e06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000e0e:	bf18      	it	ne
 8000e10:	f040 0001 	orrne.w	r0, r0, #1
 8000e14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000e1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000e20:	ea40 000c 	orr.w	r0, r0, ip
 8000e24:	fa23 f302 	lsr.w	r3, r3, r2
 8000e28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e2c:	e7cc      	b.n	8000dc8 <__aeabi_d2f+0x14>
 8000e2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000e32:	d107      	bne.n	8000e44 <__aeabi_d2f+0x90>
 8000e34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000e38:	bf1e      	ittt	ne
 8000e3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000e3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000e42:	4770      	bxne	lr
 8000e44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <__aeabi_uldivmod>:
 8000e54:	b953      	cbnz	r3, 8000e6c <__aeabi_uldivmod+0x18>
 8000e56:	b94a      	cbnz	r2, 8000e6c <__aeabi_uldivmod+0x18>
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	bf08      	it	eq
 8000e5c:	2800      	cmpeq	r0, #0
 8000e5e:	bf1c      	itt	ne
 8000e60:	f04f 31ff 	movne.w	r1, #4294967295
 8000e64:	f04f 30ff 	movne.w	r0, #4294967295
 8000e68:	f000 b80c 	b.w	8000e84 <__aeabi_idiv0>
 8000e6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e74:	f004 fdd4 	bl	8005a20 <__udivmoddi4>
 8000e78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e80:	b004      	add	sp, #16
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
	...

08000e90 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000e90:	4a02      	ldr	r2, [pc, #8]	; (8000e9c <notify1+0xc>)
 8000e92:	68d3      	ldr	r3, [r2, #12]
 8000e94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e98:	60d3      	str	r3, [r2, #12]
}
 8000e9a:	4770      	bx	lr
 8000e9c:	40011000 	.word	0x40011000

08000ea0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000ea0:	4a02      	ldr	r2, [pc, #8]	; (8000eac <notify2+0xc>)
 8000ea2:	68d3      	ldr	r3, [r2, #12]
 8000ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ea8:	60d3      	str	r3, [r2, #12]
}
 8000eaa:	4770      	bx	lr
 8000eac:	40004400 	.word	0x40004400

08000eb0 <chSysHalt>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8000eb2:	4903      	ldr	r1, [pc, #12]	; (8000ec0 <chSysHalt+0x10>)
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <chSysHalt+0x14>)
  currcore->dbg.panic_msg = reason;
 8000eb6:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 8000eba:	2203      	movs	r2, #3
 8000ebc:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 8000ebe:	e7fe      	b.n	8000ebe <chSysHalt+0xe>
 8000ec0:	200009f0 	.word	0x200009f0
 8000ec4:	20000cd0 	.word	0x20000cd0
	...

08000ed0 <__idle_thread>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8000ed0:	e7fe      	b.n	8000ed0 <__idle_thread>
 8000ed2:	bf00      	nop
	...

08000ee0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000ee0:	4b01      	ldr	r3, [pc, #4]	; (8000ee8 <chTMStartMeasurementX+0x8>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000ee4:	6083      	str	r3, [r0, #8]
}
 8000ee6:	4770      	bx	lr
 8000ee8:	e0001000 	.word	0xe0001000
 8000eec:	00000000 	.word	0x00000000

08000ef0 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <chTMStopMeasurementX+0x3c>)
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8000ef4:	6881      	ldr	r1, [r0, #8]
 8000ef6:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000ef8:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000efa:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000efc:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000efe:	1b1b      	subs	r3, r3, r4
 8000f00:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8000f02:	18d2      	adds	r2, r2, r3
 8000f04:	6941      	ldr	r1, [r0, #20]
 8000f06:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000f08:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8000f0a:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000f0c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000f10:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000f12:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000f14:	bf88      	it	hi
 8000f16:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000f18:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 8000f1a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 8000f1c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000f20:	6141      	str	r1, [r0, #20]
}
 8000f22:	f85d 4b04 	ldr.w	r4, [sp], #4
    tmp->best = tmp->last;
 8000f26:	bf38      	it	cc
 8000f28:	6003      	strcc	r3, [r0, #0]
}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000cd0 	.word	0x20000cd0
 8000f30:	e0001000 	.word	0xe0001000
	...

08000f40 <_out_rev.constprop.0>:
  return i;
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 8000f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f44:	4698      	mov	r8, r3
{
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8000f46:	e9dd a30b 	ldrd	sl, r3, [sp, #44]	; 0x2c
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 8000f4a:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8000f4c:	079a      	lsls	r2, r3, #30
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 8000f4e:	4606      	mov	r6, r0
 8000f50:	468b      	mov	fp, r1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8000f52:	d110      	bne.n	8000f76 <_out_rev.constprop.0+0x36>
    for (size_t i = len; i < width; i++) {
 8000f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f56:	459a      	cmp	sl, r3
 8000f58:	d90d      	bls.n	8000f76 <_out_rev.constprop.0+0x36>
 8000f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f5c:	1afd      	subs	r5, r7, r3
 8000f5e:	4455      	add	r5, sl
 8000f60:	463c      	mov	r4, r7
 8000f62:	4622      	mov	r2, r4
      out(' ', buffer, idx++, maxlen);
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	3401      	adds	r4, #1
 8000f6a:	4659      	mov	r1, fp
 8000f6c:	2020      	movs	r0, #32
 8000f6e:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8000f70:	42ac      	cmp	r4, r5
 8000f72:	d1f6      	bne.n	8000f62 <_out_rev.constprop.0+0x22>
 8000f74:	e000      	b.n	8000f78 <_out_rev.constprop.0+0x38>
 8000f76:	463d      	mov	r5, r7
    }
  }

  // reverse string
  while (len) {
 8000f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f7a:	b183      	cbz	r3, 8000f9e <_out_rev.constprop.0+0x5e>
 8000f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f7e:	eb08 0403 	add.w	r4, r8, r3
 8000f82:	eb05 0904 	add.w	r9, r5, r4
 8000f86:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 8000f8a:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	4659      	mov	r1, fp
 8000f94:	47b0      	blx	r6
  while (len) {
 8000f96:	4544      	cmp	r4, r8
 8000f98:	d1f5      	bne.n	8000f86 <_out_rev.constprop.0+0x46>
    out(buf[--len], buffer, idx++, maxlen);
 8000f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f9c:	441d      	add	r5, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8000f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000fa0:	079b      	lsls	r3, r3, #30
 8000fa2:	d50d      	bpl.n	8000fc0 <_out_rev.constprop.0+0x80>
    while (idx - start_idx < width) {
 8000fa4:	1bef      	subs	r7, r5, r7
 8000fa6:	45ba      	cmp	sl, r7
 8000fa8:	d90a      	bls.n	8000fc0 <_out_rev.constprop.0+0x80>
 8000faa:	462a      	mov	r2, r5
      out(' ', buffer, idx++, maxlen);
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	4659      	mov	r1, fp
 8000fb2:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 8000fb4:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 8000fb6:	47b0      	blx	r6
    while (idx - start_idx < width) {
 8000fb8:	45ba      	cmp	sl, r7
      out(' ', buffer, idx++, maxlen);
 8000fba:	f105 0501 	add.w	r5, r5, #1
    while (idx - start_idx < width) {
 8000fbe:	d8f4      	bhi.n	8000faa <_out_rev.constprop.0+0x6a>
    }
  }

  return idx;
}
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fc6:	bf00      	nop
	...

08000fd0 <_ntoa_format.constprop.0>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
 8000fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000fd6:	9c08      	ldr	r4, [sp, #32]
 8000fd8:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8000fdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8000fde:	f016 0f02 	tst.w	r6, #2
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
 8000fe2:	e9dd e70a 	ldrd	lr, r7, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT)) {
 8000fe6:	d12a      	bne.n	800103e <_ntoa_format.constprop.0+0x6e>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8000fe8:	2d00      	cmp	r5, #0
 8000fea:	d146      	bne.n	800107a <_ntoa_format.constprop.0+0xaa>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000fec:	42a7      	cmp	r7, r4
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8000fee:	f006 0a01 	and.w	sl, r6, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000ff2:	f240 80b8 	bls.w	8001166 <_ntoa_format.constprop.0+0x196>
 8000ff6:	2c20      	cmp	r4, #32
 8000ff8:	f000 80b5 	beq.w	8001166 <_ntoa_format.constprop.0+0x196>
 8000ffc:	f104 3cff 	add.w	ip, r4, #4294967295
 8001000:	449c      	add	ip, r3
      buf[len++] = '0';
 8001002:	f04f 0930 	mov.w	r9, #48	; 0x30
 8001006:	e001      	b.n	800100c <_ntoa_format.constprop.0+0x3c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001008:	2c20      	cmp	r4, #32
 800100a:	d004      	beq.n	8001016 <_ntoa_format.constprop.0+0x46>
      buf[len++] = '0';
 800100c:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800100e:	42bc      	cmp	r4, r7
      buf[len++] = '0';
 8001010:	f80c 9f01 	strb.w	r9, [ip, #1]!
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001014:	d3f8      	bcc.n	8001008 <_ntoa_format.constprop.0+0x38>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001016:	f1ba 0f00 	cmp.w	sl, #0
 800101a:	d010      	beq.n	800103e <_ntoa_format.constprop.0+0x6e>
 800101c:	42a5      	cmp	r5, r4
 800101e:	d90e      	bls.n	800103e <_ntoa_format.constprop.0+0x6e>
 8001020:	2c20      	cmp	r4, #32
 8001022:	d03a      	beq.n	800109a <_ntoa_format.constprop.0+0xca>
 8001024:	f104 3cff 	add.w	ip, r4, #4294967295
 8001028:	449c      	add	ip, r3
      buf[len++] = '0';
 800102a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800102e:	e001      	b.n	8001034 <_ntoa_format.constprop.0+0x64>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001030:	2c20      	cmp	r4, #32
 8001032:	d032      	beq.n	800109a <_ntoa_format.constprop.0+0xca>
      buf[len++] = '0';
 8001034:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001036:	42ac      	cmp	r4, r5
      buf[len++] = '0';
 8001038:	f80c 9f01 	strb.w	r9, [ip, #1]!
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800103c:	d1f8      	bne.n	8001030 <_ntoa_format.constprop.0+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800103e:	f016 0f10 	tst.w	r6, #16
 8001042:	d042      	beq.n	80010ca <_ntoa_format.constprop.0+0xfa>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001044:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001048:	d133      	bne.n	80010b2 <_ntoa_format.constprop.0+0xe2>
 800104a:	bb74      	cbnz	r4, 80010aa <_ntoa_format.constprop.0+0xda>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800104c:	f1be 0f10 	cmp.w	lr, #16
 8001050:	d07b      	beq.n	800114a <_ntoa_format.constprop.0+0x17a>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001052:	f1be 0f02 	cmp.w	lr, #2
 8001056:	f000 8082 	beq.w	800115e <_ntoa_format.constprop.0+0x18e>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
 800105a:	2430      	movs	r4, #48	; 0x30
 800105c:	701c      	strb	r4, [r3, #0]
 800105e:	2401      	movs	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    if (negative) {
 8001060:	f1b8 0f00 	cmp.w	r8, #0
 8001064:	d036      	beq.n	80010d4 <_ntoa_format.constprop.0+0x104>
      buf[len++] = '-';
 8001066:	272d      	movs	r7, #45	; 0x2d
 8001068:	551f      	strb	r7, [r3, r4]
 800106a:	3401      	adds	r4, #1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800106c:	e9cd 5609 	strd	r5, r6, [sp, #36]	; 0x24
 8001070:	9408      	str	r4, [sp, #32]
}
 8001072:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001076:	f7ff bf63 	b.w	8000f40 <_out_rev.constprop.0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800107a:	f016 0a01 	ands.w	sl, r6, #1
 800107e:	d031      	beq.n	80010e4 <_ntoa_format.constprop.0+0x114>
 8001080:	f1b8 0f00 	cmp.w	r8, #0
 8001084:	d102      	bne.n	800108c <_ntoa_format.constprop.0+0xbc>
 8001086:	f016 0f0c 	tst.w	r6, #12
 800108a:	d000      	beq.n	800108e <_ntoa_format.constprop.0+0xbe>
      width--;
 800108c:	3d01      	subs	r5, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800108e:	42a7      	cmp	r7, r4
 8001090:	d9c4      	bls.n	800101c <_ntoa_format.constprop.0+0x4c>
 8001092:	2c20      	cmp	r4, #32
 8001094:	d1b2      	bne.n	8000ffc <_ntoa_format.constprop.0+0x2c>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001096:	2d20      	cmp	r5, #32
 8001098:	d9d1      	bls.n	800103e <_ntoa_format.constprop.0+0x6e>
  if (flags & FLAGS_HASH) {
 800109a:	f016 0f10 	tst.w	r6, #16
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800109e:	f04f 0420 	mov.w	r4, #32
  if (flags & FLAGS_HASH) {
 80010a2:	d0e3      	beq.n	800106c <_ntoa_format.constprop.0+0x9c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80010a4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80010a8:	d103      	bne.n	80010b2 <_ntoa_format.constprop.0+0xe2>
 80010aa:	42a7      	cmp	r7, r4
 80010ac:	d02e      	beq.n	800110c <_ntoa_format.constprop.0+0x13c>
 80010ae:	42ac      	cmp	r4, r5
 80010b0:	d02c      	beq.n	800110c <_ntoa_format.constprop.0+0x13c>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80010b2:	f1be 0f10 	cmp.w	lr, #16
 80010b6:	d037      	beq.n	8001128 <_ntoa_format.constprop.0+0x158>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80010b8:	f1be 0f02 	cmp.w	lr, #2
 80010bc:	d021      	beq.n	8001102 <_ntoa_format.constprop.0+0x132>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80010be:	2c20      	cmp	r4, #32
 80010c0:	d0d4      	beq.n	800106c <_ntoa_format.constprop.0+0x9c>
 80010c2:	4627      	mov	r7, r4
      buf[len++] = '0';
 80010c4:	2430      	movs	r4, #48	; 0x30
 80010c6:	55dc      	strb	r4, [r3, r7]
 80010c8:	1c7c      	adds	r4, r7, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80010ca:	2c20      	cmp	r4, #32
 80010cc:	d0ce      	beq.n	800106c <_ntoa_format.constprop.0+0x9c>
    if (negative) {
 80010ce:	f1b8 0f00 	cmp.w	r8, #0
 80010d2:	d1c8      	bne.n	8001066 <_ntoa_format.constprop.0+0x96>
    else if (flags & FLAGS_PLUS) {
 80010d4:	0777      	lsls	r7, r6, #29
 80010d6:	d40a      	bmi.n	80010ee <_ntoa_format.constprop.0+0x11e>
    else if (flags & FLAGS_SPACE) {
 80010d8:	0737      	lsls	r7, r6, #28
 80010da:	d5c7      	bpl.n	800106c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = ' ';
 80010dc:	2720      	movs	r7, #32
 80010de:	551f      	strb	r7, [r3, r4]
 80010e0:	3401      	adds	r4, #1
 80010e2:	e7c3      	b.n	800106c <_ntoa_format.constprop.0+0x9c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80010e4:	42a7      	cmp	r7, r4
 80010e6:	d9aa      	bls.n	800103e <_ntoa_format.constprop.0+0x6e>
 80010e8:	2c20      	cmp	r4, #32
 80010ea:	d187      	bne.n	8000ffc <_ntoa_format.constprop.0+0x2c>
 80010ec:	e7a7      	b.n	800103e <_ntoa_format.constprop.0+0x6e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80010ee:	272b      	movs	r7, #43	; 0x2b
 80010f0:	551f      	strb	r7, [r3, r4]
 80010f2:	3401      	adds	r4, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80010f4:	e9cd 5609 	strd	r5, r6, [sp, #36]	; 0x24
 80010f8:	9408      	str	r4, [sp, #32]
}
 80010fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80010fe:	f7ff bf1f 	b.w	8000f40 <_out_rev.constprop.0>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001102:	2c20      	cmp	r4, #32
 8001104:	d0b2      	beq.n	800106c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = 'b';
 8001106:	191f      	adds	r7, r3, r4
 8001108:	3401      	adds	r4, #1
 800110a:	e008      	b.n	800111e <_ntoa_format.constprop.0+0x14e>
      if (len && (base == 16U)) {
 800110c:	1e67      	subs	r7, r4, #1
 800110e:	d09d      	beq.n	800104c <_ntoa_format.constprop.0+0x7c>
 8001110:	f1be 0f10 	cmp.w	lr, #16
 8001114:	d02c      	beq.n	8001170 <_ntoa_format.constprop.0+0x1a0>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001116:	f1be 0f02 	cmp.w	lr, #2
 800111a:	d1d3      	bne.n	80010c4 <_ntoa_format.constprop.0+0xf4>
      buf[len++] = 'b';
 800111c:	441f      	add	r7, r3
 800111e:	f04f 0c62 	mov.w	ip, #98	; 0x62
 8001122:	f887 c000 	strb.w	ip, [r7]
 8001126:	e7ca      	b.n	80010be <_ntoa_format.constprop.0+0xee>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001128:	06b7      	lsls	r7, r6, #26
 800112a:	d408      	bmi.n	800113e <_ntoa_format.constprop.0+0x16e>
 800112c:	2c20      	cmp	r4, #32
 800112e:	d09d      	beq.n	800106c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = 'b';
 8001130:	eb03 0c04 	add.w	ip, r3, r4
 8001134:	3401      	adds	r4, #1
      buf[len++] = 'x';
 8001136:	2778      	movs	r7, #120	; 0x78
 8001138:	f88c 7000 	strb.w	r7, [ip]
 800113c:	e7bf      	b.n	80010be <_ntoa_format.constprop.0+0xee>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800113e:	2c20      	cmp	r4, #32
 8001140:	d094      	beq.n	800106c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = 'X';
 8001142:	2758      	movs	r7, #88	; 0x58
 8001144:	551f      	strb	r7, [r3, r4]
 8001146:	3401      	adds	r4, #1
 8001148:	e7b9      	b.n	80010be <_ntoa_format.constprop.0+0xee>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800114a:	06b4      	lsls	r4, r6, #26
 800114c:	d403      	bmi.n	8001156 <_ntoa_format.constprop.0+0x186>
      buf[len++] = 'x';
 800114e:	2478      	movs	r4, #120	; 0x78
 8001150:	701c      	strb	r4, [r3, #0]
 8001152:	2701      	movs	r7, #1
 8001154:	e7b6      	b.n	80010c4 <_ntoa_format.constprop.0+0xf4>
      buf[len++] = 'X';
 8001156:	2458      	movs	r4, #88	; 0x58
 8001158:	701c      	strb	r4, [r3, #0]
 800115a:	2701      	movs	r7, #1
 800115c:	e7b2      	b.n	80010c4 <_ntoa_format.constprop.0+0xf4>
      buf[len++] = 'b';
 800115e:	2462      	movs	r4, #98	; 0x62
 8001160:	701c      	strb	r4, [r3, #0]
 8001162:	2701      	movs	r7, #1
 8001164:	e7ae      	b.n	80010c4 <_ntoa_format.constprop.0+0xf4>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001166:	f1ba 0f00 	cmp.w	sl, #0
 800116a:	bf08      	it	eq
 800116c:	2500      	moveq	r5, #0
 800116e:	e766      	b.n	800103e <_ntoa_format.constprop.0+0x6e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001170:	f016 0f20 	tst.w	r6, #32
        len--;
 8001174:	f1a4 0402 	sub.w	r4, r4, #2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001178:	d1e3      	bne.n	8001142 <_ntoa_format.constprop.0+0x172>
      buf[len++] = 'x';
 800117a:	eb03 0c04 	add.w	ip, r3, r4
 800117e:	463c      	mov	r4, r7
 8001180:	e7d9      	b.n	8001136 <_ntoa_format.constprop.0+0x166>
 8001182:	bf00      	nop
	...

08001190 <_ntoa_long_long.constprop.0>:
}


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
 8001190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001194:	ed2d 8b04 	vpush	{d8-d9}
 8001198:	b091      	sub	sp, #68	; 0x44
 800119a:	e9dd 641e 	ldrd	r6, r4, [sp, #120]	; 0x78
 800119e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 80011a2:	9307      	str	r3, [sp, #28]
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80011a4:	ea56 0304 	orrs.w	r3, r6, r4
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
 80011a8:	e9dd 7822 	ldrd	r7, r8, [sp, #136]	; 0x88
 80011ac:	ee08 0a10 	vmov	s16, r0
 80011b0:	ee08 1a90 	vmov	s17, r1
 80011b4:	ee09 2a10 	vmov	s18, r2
  if (!value) {
 80011b8:	d106      	bne.n	80011c8 <_ntoa_long_long.constprop.0+0x38>
    flags &= ~FLAGS_HASH;
 80011ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80011bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    flags &= ~FLAGS_HASH;
 80011be:	f023 0310 	bic.w	r3, r3, #16
 80011c2:	9326      	str	r3, [sp, #152]	; 0x98
  if (!(flags & FLAGS_PRECISION) || value) {
 80011c4:	0553      	lsls	r3, r2, #21
 80011c6:	d440      	bmi.n	800124a <_ntoa_long_long.constprop.0+0xba>
 80011c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80011ca:	f013 0f20 	tst.w	r3, #32
 80011ce:	bf14      	ite	ne
 80011d0:	f04f 0a41 	movne.w	sl, #65	; 0x41
 80011d4:	f04f 0a61 	moveq.w	sl, #97	; 0x61
 80011d8:	f10d 0b20 	add.w	fp, sp, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80011dc:	f1aa 0a0a 	sub.w	sl, sl, #10
 80011e0:	46d9      	mov	r9, fp
 80011e2:	2500      	movs	r5, #0
 80011e4:	e003      	b.n	80011ee <_ntoa_long_long.constprop.0+0x5e>
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80011e6:	2d20      	cmp	r5, #32
 80011e8:	d017      	beq.n	800121a <_ntoa_long_long.constprop.0+0x8a>
      value /= base;
 80011ea:	4606      	mov	r6, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4621      	mov	r1, r4
 80011f0:	4630      	mov	r0, r6
 80011f2:	463a      	mov	r2, r7
 80011f4:	4643      	mov	r3, r8
 80011f6:	f7ff fe2d 	bl	8000e54 <__aeabi_uldivmod>
      const char digit = (char)(value % base);
 80011fa:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80011fc:	2a09      	cmp	r2, #9
 80011fe:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001202:	bf8a      	itet	hi
 8001204:	4452      	addhi	r2, sl
 8001206:	b2da      	uxtbls	r2, r3
 8001208:	b2d2      	uxtbhi	r2, r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800120a:	42be      	cmp	r6, r7
 800120c:	eb74 0408 	sbcs.w	r4, r4, r8
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001210:	f809 2b01 	strb.w	r2, [r9], #1
 8001214:	f105 0501 	add.w	r5, r5, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001218:	d2e5      	bcs.n	80011e6 <_ntoa_long_long.constprop.0+0x56>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800121a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800121c:	9305      	str	r3, [sp, #20]
 800121e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001220:	9304      	str	r3, [sp, #16]
 8001222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001224:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001228:	9b07      	ldr	r3, [sp, #28]
 800122a:	ee19 2a10 	vmov	r2, s18
 800122e:	e9cd 5300 	strd	r5, r3, [sp]
 8001232:	ee18 1a90 	vmov	r1, s17
 8001236:	ee18 0a10 	vmov	r0, s16
 800123a:	465b      	mov	r3, fp
 800123c:	f7ff fec8 	bl	8000fd0 <_ntoa_format.constprop.0>
}
 8001240:	b011      	add	sp, #68	; 0x44
 8001242:	ecbd 8b04 	vpop	{d8-d9}
 8001246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t len = 0U;
 800124a:	2500      	movs	r5, #0
 800124c:	f10d 0b20 	add.w	fp, sp, #32
 8001250:	e7e3      	b.n	800121a <_ntoa_long_long.constprop.0+0x8a>
 8001252:	bf00      	nop
	...

08001260 <_ntoa_long.constprop.0>:
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
 8001260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001264:	b08f      	sub	sp, #60	; 0x3c
  if (!value) {
 8001266:	469e      	mov	lr, r3
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
 8001268:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
 800126c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800126e:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
  if (!value) {
 8001272:	b92b      	cbnz	r3, 8001280 <_ntoa_long.constprop.0+0x20>
    flags &= ~FLAGS_HASH;
 8001274:	f02a 0310 	bic.w	r3, sl, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 8001278:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    flags &= ~FLAGS_HASH;
 800127c:	469a      	mov	sl, r3
  if (!(flags & FLAGS_PRECISION) || value) {
 800127e:	d12f      	bne.n	80012e0 <_ntoa_long.constprop.0+0x80>
 8001280:	f01a 0f20 	tst.w	sl, #32
 8001284:	bf14      	ite	ne
 8001286:	f04f 0941 	movne.w	r9, #65	; 0x41
 800128a:	f04f 0961 	moveq.w	r9, #97	; 0x61
 800128e:	ab06      	add	r3, sp, #24
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001290:	f1a9 090a 	sub.w	r9, r9, #10
 8001294:	4698      	mov	r8, r3
 8001296:	2500      	movs	r5, #0
 8001298:	e002      	b.n	80012a0 <_ntoa_long.constprop.0+0x40>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800129a:	2d20      	cmp	r5, #32
 800129c:	d012      	beq.n	80012c4 <_ntoa_long.constprop.0+0x64>
      value /= base;
 800129e:	46e6      	mov	lr, ip
      const char digit = (char)(value % base);
 80012a0:	fbbe fcf4 	udiv	ip, lr, r4
 80012a4:	fb04 e71c 	mls	r7, r4, ip, lr
 80012a8:	b2fe      	uxtb	r6, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80012aa:	2f09      	cmp	r7, #9
 80012ac:	f106 0730 	add.w	r7, r6, #48	; 0x30
 80012b0:	bf8a      	itet	hi
 80012b2:	444e      	addhi	r6, r9
 80012b4:	b2fe      	uxtbls	r6, r7
 80012b6:	b2f6      	uxtbhi	r6, r6
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80012b8:	45a6      	cmp	lr, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80012ba:	f808 6b01 	strb.w	r6, [r8], #1
 80012be:	f105 0501 	add.w	r5, r5, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80012c2:	d2ea      	bcs.n	800129a <_ntoa_long.constprop.0+0x3a>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80012c4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80012c6:	9604      	str	r6, [sp, #16]
 80012c8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80012ca:	f8cd a014 	str.w	sl, [sp, #20]
 80012ce:	e9cd 4602 	strd	r4, r6, [sp, #8]
 80012d2:	e9cd 5b00 	strd	r5, fp, [sp]
 80012d6:	f7ff fe7b 	bl	8000fd0 <_ntoa_format.constprop.0>
}
 80012da:	b00f      	add	sp, #60	; 0x3c
 80012dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t len = 0U;
 80012e0:	4675      	mov	r5, lr
 80012e2:	ab06      	add	r3, sp, #24
 80012e4:	e7ee      	b.n	80012c4 <_ntoa_long.constprop.0+0x64>
 80012e6:	bf00      	nop
	...

080012f0 <_etoa.constprop.0>:
}


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	ed2d 8b04 	vpush	{d8-d9}
 80012f8:	b091      	sub	sp, #68	; 0x44
 80012fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80012fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001300:	930a      	str	r3, [sp, #40]	; 0x28
 8001302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001304:	930b      	str	r3, [sp, #44]	; 0x2c
 8001306:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001308:	9307      	str	r3, [sp, #28]
 800130a:	4604      	mov	r4, r0
 800130c:	460d      	mov	r5, r1
 800130e:	4691      	mov	r9, r2
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001310:	465b      	mov	r3, fp
 8001312:	4652      	mov	r2, sl
 8001314:	4650      	mov	r0, sl
 8001316:	4659      	mov	r1, fp
 8001318:	f7ff fcd2 	bl	8000cc0 <__aeabi_dcmpeq>
 800131c:	2800      	cmp	r0, #0
 800131e:	f000 8199 	beq.w	8001654 <_etoa.constprop.0+0x364>
 8001322:	4bc5      	ldr	r3, [pc, #788]	; (8001638 <_etoa.constprop.0+0x348>)
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	4650      	mov	r0, sl
 800132a:	4659      	mov	r1, fp
 800132c:	f7ff fcf0 	bl	8000d10 <__aeabi_dcmpgt>
 8001330:	2800      	cmp	r0, #0
 8001332:	f040 818f 	bne.w	8001654 <_etoa.constprop.0+0x364>
 8001336:	f04f 32ff 	mov.w	r2, #4294967295
 800133a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800133e:	4650      	mov	r0, sl
 8001340:	4659      	mov	r1, fp
 8001342:	f7ff fcc7 	bl	8000cd4 <__aeabi_dcmplt>
 8001346:	2800      	cmp	r0, #0
 8001348:	f040 8184 	bne.w	8001654 <_etoa.constprop.0+0x364>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
 800134c:	2200      	movs	r2, #0
 800134e:	2300      	movs	r3, #0
 8001350:	4650      	mov	r0, sl
 8001352:	4659      	mov	r1, fp
 8001354:	f7ff fcbe 	bl	8000cd4 <__aeabi_dcmplt>
 8001358:	2800      	cmp	r0, #0
 800135a:	f040 8198 	bne.w	800168e <_etoa.constprop.0+0x39e>
 800135e:	e9cd ab08 	strd	sl, fp, [sp, #32]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001362:	9f09      	ldr	r7, [sp, #36]	; 0x24
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001364:	9b07      	ldr	r3, [sp, #28]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001366:	f3c7 500a 	ubfx	r0, r7, #20, #11
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800136a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800136e:	930f      	str	r3, [sp, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001370:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001376:	bf08      	it	eq
 8001378:	2306      	moveq	r3, #6
 800137a:	930a      	str	r3, [sp, #40]	; 0x28
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800137c:	f7ff f9ce 	bl	800071c <__aeabi_i2d>
 8001380:	a39d      	add	r3, pc, #628	; (adr r3, 80015f8 <_etoa.constprop.0+0x308>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff fa33 	bl	80007f0 <__aeabi_dmul>
 800138a:	a39d      	add	r3, pc, #628	; (adr r3, 8001600 <_etoa.constprop.0+0x310>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f878 	bl	8000484 <__adddf3>
  conv.F = value;
 8001394:	f8dd 8020 	ldr.w	r8, [sp, #32]
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001398:	f3c7 0313 	ubfx	r3, r7, #0, #20
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800139c:	460f      	mov	r7, r1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800139e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80013a2:	4606      	mov	r6, r0
 80013a4:	4ba5      	ldr	r3, [pc, #660]	; (800163c <_etoa.constprop.0+0x34c>)
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80013a6:	4640      	mov	r0, r8
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80013a8:	2200      	movs	r2, #0
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80013aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80013ae:	f7ff f867 	bl	8000480 <__aeabi_dsub>
 80013b2:	a395      	add	r3, pc, #596	; (adr r3, 8001608 <_etoa.constprop.0+0x318>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff fa1a 	bl	80007f0 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4630      	mov	r0, r6
 80013c2:	4639      	mov	r1, r7
 80013c4:	f7ff f85e 	bl	8000484 <__adddf3>
 80013c8:	f7ff fcac 	bl	8000d24 <__aeabi_d2iz>
 80013cc:	4680      	mov	r8, r0
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80013ce:	f7ff f9a5 	bl	800071c <__aeabi_i2d>
 80013d2:	a38f      	add	r3, pc, #572	; (adr r3, 8001610 <_etoa.constprop.0+0x320>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	4606      	mov	r6, r0
 80013da:	460f      	mov	r7, r1
 80013dc:	f7ff fa08 	bl	80007f0 <__aeabi_dmul>
 80013e0:	4b97      	ldr	r3, [pc, #604]	; (8001640 <_etoa.constprop.0+0x350>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f7ff f84e 	bl	8000484 <__adddf3>
 80013e8:	f7ff fc9c 	bl	8000d24 <__aeabi_d2iz>
 80013ec:	4603      	mov	r3, r0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80013ee:	4639      	mov	r1, r7
 80013f0:	4630      	mov	r0, r6
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80013f2:	930e      	str	r3, [sp, #56]	; 0x38
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80013f4:	a388      	add	r3, pc, #544	; (adr r3, 8001618 <_etoa.constprop.0+0x328>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f9f9 	bl	80007f0 <__aeabi_dmul>
 80013fe:	4606      	mov	r6, r0
 8001400:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001402:	460f      	mov	r7, r1
 8001404:	f7ff f98a 	bl	800071c <__aeabi_i2d>
 8001408:	a385      	add	r3, pc, #532	; (adr r3, 8001620 <_etoa.constprop.0+0x330>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f9ef 	bl	80007f0 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4630      	mov	r0, r6
 8001418:	4639      	mov	r1, r7
 800141a:	f7ff f831 	bl	8000480 <__aeabi_dsub>
  const double z2 = z * z;
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001422:	4606      	mov	r6, r0
 8001424:	460f      	mov	r7, r1
  const double z2 = z * z;
 8001426:	f7ff f9e3 	bl	80007f0 <__aeabi_dmul>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800142a:	4632      	mov	r2, r6
  const double z2 = z * z;
 800142c:	ec41 0b18 	vmov	d8, r0, r1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001430:	463b      	mov	r3, r7
 8001432:	4630      	mov	r0, r6
 8001434:	4639      	mov	r1, r7
 8001436:	f7ff f825 	bl	8000484 <__adddf3>
 800143a:	4b82      	ldr	r3, [pc, #520]	; (8001644 <_etoa.constprop.0+0x354>)
 800143c:	ec41 0b19 	vmov	d9, r0, r1
 8001440:	2200      	movs	r2, #0
 8001442:	ec51 0b18 	vmov	r0, r1, d8
 8001446:	f7ff fafd 	bl	8000a44 <__aeabi_ddiv>
 800144a:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <_etoa.constprop.0+0x358>)
 800144c:	2200      	movs	r2, #0
 800144e:	f7ff f819 	bl	8000484 <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	ec51 0b18 	vmov	r0, r1, d8
 800145a:	f7ff faf3 	bl	8000a44 <__aeabi_ddiv>
 800145e:	4b7b      	ldr	r3, [pc, #492]	; (800164c <_etoa.constprop.0+0x35c>)
 8001460:	2200      	movs	r2, #0
 8001462:	f7ff f80f 	bl	8000484 <__adddf3>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ec51 0b18 	vmov	r0, r1, d8
 800146e:	f7ff fae9 	bl	8000a44 <__aeabi_ddiv>
 8001472:	4632      	mov	r2, r6
 8001474:	463b      	mov	r3, r7
 8001476:	4606      	mov	r6, r0
 8001478:	460f      	mov	r7, r1
 800147a:	2000      	movs	r0, #0
 800147c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001480:	f7fe fffe 	bl	8000480 <__aeabi_dsub>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4630      	mov	r0, r6
 800148a:	4639      	mov	r1, r7
 800148c:	f7fe fffa 	bl	8000484 <__adddf3>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	ec51 0b19 	vmov	r0, r1, d9
 8001498:	f7ff fad4 	bl	8000a44 <__aeabi_ddiv>
 800149c:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <_etoa.constprop.0+0x360>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f7fe fff0 	bl	8000484 <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80014a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014a6:	f203 36ff 	addw	r6, r3, #1023	; 0x3ff
 80014aa:	0533      	lsls	r3, r6, #20
 80014ac:	2200      	movs	r2, #0
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80014ae:	f7ff f99f 	bl	80007f0 <__aeabi_dmul>
 80014b2:	4606      	mov	r6, r0
 80014b4:	460f      	mov	r7, r1
  // correct for rounding errors
  if (value < conv.F) {
 80014b6:	4632      	mov	r2, r6
 80014b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80014bc:	463b      	mov	r3, r7
 80014be:	f7ff fc09 	bl	8000cd4 <__aeabi_dcmplt>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	f040 80d8 	bne.w	8001678 <_etoa.constprop.0+0x388>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80014c8:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80014cc:	f108 0363 	add.w	r3, r8, #99	; 0x63
 80014d0:	2bc7      	cmp	r3, #199	; 0xc7

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80014d2:	9b07      	ldr	r3, [sp, #28]
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80014d4:	bf34      	ite	cc
 80014d6:	2604      	movcc	r6, #4
 80014d8:	2605      	movcs	r6, #5
  if (flags & FLAGS_ADAPT_EXP) {
 80014da:	051f      	lsls	r7, r3, #20
 80014dc:	d517      	bpl.n	800150e <_etoa.constprop.0+0x21e>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80014de:	a352      	add	r3, pc, #328	; (adr r3, 8001628 <_etoa.constprop.0+0x338>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80014e8:	f7ff fc08 	bl	8000cfc <__aeabi_dcmpge>
 80014ec:	b148      	cbz	r0, 8001502 <_etoa.constprop.0+0x212>
 80014ee:	a350      	add	r3, pc, #320	; (adr r3, 8001630 <_etoa.constprop.0+0x340>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80014f8:	f7ff fbec 	bl	8000cd4 <__aeabi_dcmplt>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	f040 80cc 	bne.w	800169a <_etoa.constprop.0+0x3aa>
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8001502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001504:	b11b      	cbz	r3, 800150e <_etoa.constprop.0+0x21e>
 8001506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001508:	2a00      	cmp	r2, #0
 800150a:	f040 80d6 	bne.w	80016ba <_etoa.constprop.0+0x3ca>
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
 800150e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001510:	42b3      	cmp	r3, r6
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8001512:	bf88      	it	hi
 8001514:	1b9f      	subhi	r7, r3, r6
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8001516:	9b07      	ldr	r3, [sp, #28]
    fwidth = 0U;
 8001518:	bf98      	it	ls
 800151a:	2700      	movls	r7, #0
  if ((flags & FLAGS_LEFT) && minwidth) {
 800151c:	f013 0302 	ands.w	r3, r3, #2
 8001520:	930e      	str	r3, [sp, #56]	; 0x38
 8001522:	d002      	beq.n	800152a <_etoa.constprop.0+0x23a>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8001524:	2e00      	cmp	r6, #0
 8001526:	bf18      	it	ne
 8001528:	2700      	movne	r7, #0
  }

  // rescale the float value
  if (expval) {
 800152a:	f1b8 0f00 	cmp.w	r8, #0
 800152e:	d007      	beq.n	8001540 <_etoa.constprop.0+0x250>
    value /= conv.F;
 8001530:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001534:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001538:	f7ff fa84 	bl	8000a44 <__aeabi_ddiv>
 800153c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8001540:	4650      	mov	r0, sl
 8001542:	4659      	mov	r1, fp
 8001544:	2200      	movs	r2, #0
 8001546:	2300      	movs	r3, #0
 8001548:	f7ff fbc4 	bl	8000cd4 <__aeabi_dcmplt>
 800154c:	b130      	cbz	r0, 800155c <_etoa.constprop.0+0x26c>
 800154e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001552:	4602      	mov	r2, r0
 8001554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001558:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800155c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	ed9d 7b08 	vldr	d7, [sp, #32]
 8001564:	9b07      	ldr	r3, [sp, #28]
 8001566:	9703      	str	r7, [sp, #12]
 8001568:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800156c:	ed8d 7b00 	vstr	d7, [sp]
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	464a      	mov	r2, r9
 8001574:	4629      	mov	r1, r5
 8001576:	4620      	mov	r0, r4
 8001578:	f000 f8aa 	bl	80016d0 <_ftoa.constprop.0>
 800157c:	4607      	mov	r7, r0

  // output the exponent part
  if (minwidth) {
 800157e:	b39e      	cbz	r6, 80015e8 <_etoa.constprop.0+0x2f8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8001580:	9b07      	ldr	r3, [sp, #28]
 8001582:	f013 0f20 	tst.w	r3, #32
 8001586:	bf14      	ite	ne
 8001588:	2045      	movne	r0, #69	; 0x45
 800158a:	2065      	moveq	r0, #101	; 0x65
 800158c:	463a      	mov	r2, r7
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	4629      	mov	r1, r5
 8001594:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8001596:	2305      	movs	r3, #5
 8001598:	9304      	str	r3, [sp, #16]
 800159a:	2000      	movs	r0, #0
 800159c:	230a      	movs	r3, #10
 800159e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80015a2:	ea4f 73d8 	mov.w	r3, r8, lsr #31
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80015a6:	3701      	adds	r7, #1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	3e01      	subs	r6, #1
 80015ac:	ea88 73e8 	eor.w	r3, r8, r8, asr #31
 80015b0:	463a      	mov	r2, r7
 80015b2:	eba3 73e8 	sub.w	r3, r3, r8, asr #31
 80015b6:	9603      	str	r6, [sp, #12]
 80015b8:	4629      	mov	r1, r5
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff fe50 	bl	8001260 <_ntoa_long.constprop.0>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80015c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80015c2:	4607      	mov	r7, r0
    if (flags & FLAGS_LEFT) {
 80015c4:	b183      	cbz	r3, 80015e8 <_etoa.constprop.0+0x2f8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80015c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015c8:	eba0 0609 	sub.w	r6, r0, r9
 80015cc:	42b3      	cmp	r3, r6
 80015ce:	d90b      	bls.n	80015e8 <_etoa.constprop.0+0x2f8>
 80015d0:	4698      	mov	r8, r3
 80015d2:	463a      	mov	r2, r7
 80015d4:	3601      	adds	r6, #1
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	4629      	mov	r1, r5
 80015dc:	2020      	movs	r0, #32
 80015de:	47a0      	blx	r4
 80015e0:	45b0      	cmp	r8, r6
 80015e2:	f107 0701 	add.w	r7, r7, #1
 80015e6:	d8f4      	bhi.n	80015d2 <_etoa.constprop.0+0x2e2>
    }
  }
  return idx;
}
 80015e8:	4638      	mov	r0, r7
 80015ea:	b011      	add	sp, #68	; 0x44
 80015ec:	ecbd 8b04 	vpop	{d8-d9}
 80015f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	509f79fb 	.word	0x509f79fb
 80015fc:	3fd34413 	.word	0x3fd34413
 8001600:	8b60c8b3 	.word	0x8b60c8b3
 8001604:	3fc68a28 	.word	0x3fc68a28
 8001608:	636f4361 	.word	0x636f4361
 800160c:	3fd287a7 	.word	0x3fd287a7
 8001610:	0979a371 	.word	0x0979a371
 8001614:	400a934f 	.word	0x400a934f
 8001618:	bbb55516 	.word	0xbbb55516
 800161c:	40026bb1 	.word	0x40026bb1
 8001620:	fefa39ef 	.word	0xfefa39ef
 8001624:	3fe62e42 	.word	0x3fe62e42
 8001628:	eb1c432d 	.word	0xeb1c432d
 800162c:	3f1a36e2 	.word	0x3f1a36e2
 8001630:	00000000 	.word	0x00000000
 8001634:	412e8480 	.word	0x412e8480
 8001638:	7fefffff 	.word	0x7fefffff
 800163c:	3ff80000 	.word	0x3ff80000
 8001640:	3fe00000 	.word	0x3fe00000
 8001644:	402c0000 	.word	0x402c0000
 8001648:	40240000 	.word	0x40240000
 800164c:	40180000 	.word	0x40180000
 8001650:	3ff00000 	.word	0x3ff00000
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001654:	9b07      	ldr	r3, [sp, #28]
 8001656:	9322      	str	r3, [sp, #136]	; 0x88
 8001658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800165a:	9321      	str	r3, [sp, #132]	; 0x84
 800165c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800165e:	9320      	str	r3, [sp, #128]	; 0x80
 8001660:	464a      	mov	r2, r9
 8001662:	4629      	mov	r1, r5
 8001664:	4620      	mov	r0, r4
 8001666:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
}
 800166a:	b011      	add	sp, #68	; 0x44
 800166c:	ecbd 8b04 	vpop	{d8-d9}
 8001670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001674:	f000 b82c 	b.w	80016d0 <_ftoa.constprop.0>
    conv.F /= 10;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_etoa.constprop.0+0x3d0>)
 800167a:	4630      	mov	r0, r6
 800167c:	4639      	mov	r1, r7
 800167e:	2200      	movs	r2, #0
 8001680:	f7ff f9e0 	bl	8000a44 <__aeabi_ddiv>
    expval--;
 8001684:	f108 38ff 	add.w	r8, r8, #4294967295
    conv.F /= 10;
 8001688:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800168c:	e71e      	b.n	80014cc <_etoa.constprop.0+0x1dc>
    value = -value;
 800168e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8001692:	f8cd a020 	str.w	sl, [sp, #32]
 8001696:	9309      	str	r3, [sp, #36]	; 0x24
 8001698:	e663      	b.n	8001362 <_etoa.constprop.0+0x72>
      if ((int)prec > expval) {
 800169a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800169c:	4598      	cmp	r8, r3
        prec = (unsigned)((int)prec - expval - 1);
 800169e:	bfba      	itte	lt
 80016a0:	eba3 0308 	sublt.w	r3, r3, r8
 80016a4:	f103 33ff 	addlt.w	r3, r3, #4294967295
        prec = 0;
 80016a8:	2300      	movge	r3, #0
 80016aa:	930a      	str	r3, [sp, #40]	; 0x28
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80016ac:	9b07      	ldr	r3, [sp, #28]
      minwidth = 0U;
 80016ae:	2600      	movs	r6, #0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80016b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b4:	9307      	str	r3, [sp, #28]
      expval   = 0;
 80016b6:	46b0      	mov	r8, r6
 80016b8:	e729      	b.n	800150e <_etoa.constprop.0+0x21e>
        --prec;
 80016ba:	3b01      	subs	r3, #1
 80016bc:	930a      	str	r3, [sp, #40]	; 0x28
 80016be:	e726      	b.n	800150e <_etoa.constprop.0+0x21e>
 80016c0:	40240000 	.word	0x40240000
	...

080016d0 <_ftoa.constprop.0>:
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
 80016d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d4:	ed2d 8b04 	vpush	{d8-d9}
 80016d8:	b093      	sub	sp, #76	; 0x4c
 80016da:	e9dd 4322 	ldrd	r4, r3, [sp, #136]	; 0x88
 80016de:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 80016e2:	9305      	str	r3, [sp, #20]
 80016e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80016e6:	9006      	str	r0, [sp, #24]
 80016e8:	4688      	mov	r8, r1
 80016ea:	4691      	mov	r9, r2
 80016ec:	9304      	str	r3, [sp, #16]
  if (value != value)
 80016ee:	4632      	mov	r2, r6
 80016f0:	463b      	mov	r3, r7
 80016f2:	4630      	mov	r0, r6
 80016f4:	4639      	mov	r1, r7
 80016f6:	f7ff fae3 	bl	8000cc0 <__aeabi_dcmpeq>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	f000 8101 	beq.w	8001902 <_ftoa.constprop.0+0x232>
  if (value < -DBL_MAX)
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001708:	4630      	mov	r0, r6
 800170a:	4639      	mov	r1, r7
 800170c:	f7ff fae2 	bl	8000cd4 <__aeabi_dcmplt>
 8001710:	2800      	cmp	r0, #0
 8001712:	f040 8127 	bne.w	8001964 <_ftoa.constprop.0+0x294>
  if (value > DBL_MAX)
 8001716:	4bba      	ldr	r3, [pc, #744]	; (8001a00 <_ftoa.constprop.0+0x330>)
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	4630      	mov	r0, r6
 800171e:	4639      	mov	r1, r7
 8001720:	f7ff faf6 	bl	8000d10 <__aeabi_dcmpgt>
 8001724:	2800      	cmp	r0, #0
 8001726:	f040 80d3 	bne.w	80018d0 <_ftoa.constprop.0+0x200>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800172a:	a3b1      	add	r3, pc, #708	; (adr r3, 80019f0 <_ftoa.constprop.0+0x320>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	4630      	mov	r0, r6
 8001732:	4639      	mov	r1, r7
 8001734:	f7ff faec 	bl	8000d10 <__aeabi_dcmpgt>
 8001738:	2800      	cmp	r0, #0
 800173a:	f040 8102 	bne.w	8001942 <_ftoa.constprop.0+0x272>
 800173e:	a3ae      	add	r3, pc, #696	; (adr r3, 80019f8 <_ftoa.constprop.0+0x328>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	4630      	mov	r0, r6
 8001746:	4639      	mov	r1, r7
 8001748:	f7ff fac4 	bl	8000cd4 <__aeabi_dcmplt>
 800174c:	2800      	cmp	r0, #0
 800174e:	f040 80f8 	bne.w	8001942 <_ftoa.constprop.0+0x272>
  if (value < 0) {
 8001752:	2200      	movs	r2, #0
 8001754:	2300      	movs	r3, #0
 8001756:	4630      	mov	r0, r6
 8001758:	4639      	mov	r1, r7
 800175a:	f7ff fabb 	bl	8000cd4 <__aeabi_dcmplt>
 800175e:	2800      	cmp	r0, #0
 8001760:	f040 80e0 	bne.w	8001924 <_ftoa.constprop.0+0x254>
  bool negative = false;
 8001764:	9007      	str	r0, [sp, #28]
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001766:	9b04      	ldr	r3, [sp, #16]
 8001768:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800176c:	bf08      	it	eq
 800176e:	2406      	moveq	r4, #6
 8001770:	ab0a      	add	r3, sp, #40	; 0x28
 8001772:	f1a4 0120 	sub.w	r1, r4, #32
 8001776:	46a2      	mov	sl, r4
    buf[len++] = '0';
 8001778:	2230      	movs	r2, #48	; 0x30
 800177a:	e006      	b.n	800178a <_ftoa.constprop.0+0xba>
    prec--;
 800177c:	f10a 3aff 	add.w	sl, sl, #4294967295
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001780:	458a      	cmp	sl, r1
    buf[len++] = '0';
 8001782:	f803 2b01 	strb.w	r2, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001786:	f000 8131 	beq.w	80019ec <_ftoa.constprop.0+0x31c>
 800178a:	f1ba 0f09 	cmp.w	sl, #9
 800178e:	eba4 050a 	sub.w	r5, r4, sl
 8001792:	d8f3      	bhi.n	800177c <_ftoa.constprop.0+0xac>
  int whole = (int)value;
 8001794:	4639      	mov	r1, r7
 8001796:	4630      	mov	r0, r6
 8001798:	f7ff fac4 	bl	8000d24 <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 800179c:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <_ftoa.constprop.0+0x334>)
 800179e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80017a2:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
 80017a6:	4604      	mov	r4, r0
  double tmp = (value - whole) * pow10[prec];
 80017a8:	eeb0 8a47 	vmov.f32	s16, s14
 80017ac:	eef0 8a67 	vmov.f32	s17, s15
 80017b0:	f7fe ffb4 	bl	800071c <__aeabi_i2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4630      	mov	r0, r6
 80017ba:	4639      	mov	r1, r7
 80017bc:	f7fe fe60 	bl	8000480 <__aeabi_dsub>
 80017c0:	ec53 2b18 	vmov	r2, r3, d8
 80017c4:	f7ff f814 	bl	80007f0 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	ec43 2b19 	vmov	d9, r2, r3
  unsigned long frac = (unsigned long)tmp;
 80017d0:	f7ff fad0 	bl	8000d74 <__aeabi_d2uiz>
 80017d4:	4683      	mov	fp, r0
  diff = tmp - frac;
 80017d6:	f7fe ff91 	bl	80006fc <__aeabi_ui2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ec51 0b19 	vmov	r0, r1, d9
 80017e2:	f7fe fe4d 	bl	8000480 <__aeabi_dsub>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (diff > 0.5) {
 80017ee:	4b86      	ldr	r3, [pc, #536]	; (8001a08 <_ftoa.constprop.0+0x338>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f7ff fa8d 	bl	8000d10 <__aeabi_dcmpgt>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	f000 80e9 	beq.w	80019ce <_ftoa.constprop.0+0x2fe>
    ++frac;
 80017fc:	f10b 0b01 	add.w	fp, fp, #1
    if (frac >= pow10[prec]) {
 8001800:	4658      	mov	r0, fp
 8001802:	f7fe ff7b 	bl	80006fc <__aeabi_ui2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	ec51 0b18 	vmov	r0, r1, d8
 800180e:	f7ff fa6b 	bl	8000ce8 <__aeabi_dcmple>
 8001812:	b110      	cbz	r0, 800181a <_ftoa.constprop.0+0x14a>
      ++whole;
 8001814:	3401      	adds	r4, #1
      frac = 0;
 8001816:	f04f 0b00 	mov.w	fp, #0
  if (prec == 0U) {
 800181a:	f1ba 0f00 	cmp.w	sl, #0
 800181e:	f040 80a9 	bne.w	8001974 <_ftoa.constprop.0+0x2a4>
    diff = value - (double)whole;
 8001822:	4620      	mov	r0, r4
 8001824:	f7fe ff7a 	bl	800071c <__aeabi_i2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4630      	mov	r0, r6
 800182e:	4639      	mov	r1, r7
 8001830:	f7fe fe26 	bl	8000480 <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001834:	4b74      	ldr	r3, [pc, #464]	; (8001a08 <_ftoa.constprop.0+0x338>)
 8001836:	2200      	movs	r2, #0
    diff = value - (double)whole;
 8001838:	4606      	mov	r6, r0
 800183a:	460f      	mov	r7, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800183c:	f7ff fa4a 	bl	8000cd4 <__aeabi_dcmplt>
 8001840:	2800      	cmp	r0, #0
 8001842:	d07a      	beq.n	800193a <_ftoa.constprop.0+0x26a>
 8001844:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <_ftoa.constprop.0+0x338>)
 8001846:	4630      	mov	r0, r6
 8001848:	4639      	mov	r1, r7
 800184a:	2200      	movs	r2, #0
 800184c:	f7ff fa60 	bl	8000d10 <__aeabi_dcmpgt>
 8001850:	2800      	cmp	r0, #0
 8001852:	d172      	bne.n	800193a <_ftoa.constprop.0+0x26a>
 8001854:	1e69      	subs	r1, r5, #1
 8001856:	ab0a      	add	r3, sp, #40	; 0x28
    buf[len++] = (char)(48 + (whole % 10));
 8001858:	486c      	ldr	r0, [pc, #432]	; (8001a0c <_ftoa.constprop.0+0x33c>)
 800185a:	4419      	add	r1, r3
 800185c:	e000      	b.n	8001860 <_ftoa.constprop.0+0x190>
 800185e:	461d      	mov	r5, r3
 8001860:	fb80 2304 	smull	r2, r3, r0, r4
 8001864:	17e2      	asrs	r2, r4, #31
 8001866:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 800186a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800186e:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001872:	2d20      	cmp	r5, #32
    buf[len++] = (char)(48 + (whole % 10));
 8001874:	f104 0430 	add.w	r4, r4, #48	; 0x30
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001878:	f000 8097 	beq.w	80019aa <_ftoa.constprop.0+0x2da>
    buf[len++] = (char)(48 + (whole % 10));
 800187c:	f801 4f01 	strb.w	r4, [r1, #1]!
 8001880:	1c6b      	adds	r3, r5, #1
    if (!(whole /= 10)) {
 8001882:	4614      	mov	r4, r2
 8001884:	2a00      	cmp	r2, #0
 8001886:	d1ea      	bne.n	800185e <_ftoa.constprop.0+0x18e>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001888:	9a04      	ldr	r2, [sp, #16]
 800188a:	f002 0203 	and.w	r2, r2, #3
 800188e:	2a01      	cmp	r2, #1
 8001890:	f000 8102 	beq.w	8001a98 <_ftoa.constprop.0+0x3c8>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001894:	2b20      	cmp	r3, #32
 8001896:	f000 8098 	beq.w	80019ca <_ftoa.constprop.0+0x2fa>
    if (negative) {
 800189a:	9a07      	ldr	r2, [sp, #28]
 800189c:	2a00      	cmp	r2, #0
 800189e:	f000 80c1 	beq.w	8001a24 <_ftoa.constprop.0+0x354>
      buf[len++] = '-';
 80018a2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80018a6:	446a      	add	r2, sp
 80018a8:	212d      	movs	r1, #45	; 0x2d
 80018aa:	3301      	adds	r3, #1
 80018ac:	f802 1c20 	strb.w	r1, [r2, #-32]
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80018b0:	9a04      	ldr	r2, [sp, #16]
 80018b2:	9202      	str	r2, [sp, #8]
 80018b4:	9a05      	ldr	r2, [sp, #20]
 80018b6:	9806      	ldr	r0, [sp, #24]
 80018b8:	e9cd 3200 	strd	r3, r2, [sp]
 80018bc:	4641      	mov	r1, r8
 80018be:	ab0a      	add	r3, sp, #40	; 0x28
 80018c0:	464a      	mov	r2, r9
 80018c2:	f7ff fb3d 	bl	8000f40 <_out_rev.constprop.0>
}
 80018c6:	b013      	add	sp, #76	; 0x4c
 80018c8:	ecbd 8b04 	vpop	{d8-d9}
 80018cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80018d0:	9b05      	ldr	r3, [sp, #20]
 80018d2:	9321      	str	r3, [sp, #132]	; 0x84
 80018d4:	9b04      	ldr	r3, [sp, #16]
 80018d6:	9322      	str	r3, [sp, #136]	; 0x88
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2303      	moveq	r3, #3
 80018e2:	2304      	movne	r3, #4
 80018e4:	4c4a      	ldr	r4, [pc, #296]	; (8001a10 <_ftoa.constprop.0+0x340>)
 80018e6:	9320      	str	r3, [sp, #128]	; 0x80
 80018e8:	9806      	ldr	r0, [sp, #24]
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <_ftoa.constprop.0+0x344>)
 80018ec:	464a      	mov	r2, r9
 80018ee:	4641      	mov	r1, r8
 80018f0:	bf08      	it	eq
 80018f2:	4623      	moveq	r3, r4
}
 80018f4:	b013      	add	sp, #76	; 0x4c
 80018f6:	ecbd 8b04 	vpop	{d8-d9}
 80018fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80018fe:	f7ff bb1f 	b.w	8000f40 <_out_rev.constprop.0>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001902:	9b04      	ldr	r3, [sp, #16]
 8001904:	9a05      	ldr	r2, [sp, #20]
 8001906:	9322      	str	r3, [sp, #136]	; 0x88
 8001908:	2303      	movs	r3, #3
 800190a:	e9cd 3220 	strd	r3, r2, [sp, #128]	; 0x80
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <_ftoa.constprop.0+0x348>)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001910:	9806      	ldr	r0, [sp, #24]
 8001912:	464a      	mov	r2, r9
 8001914:	4641      	mov	r1, r8
}
 8001916:	b013      	add	sp, #76	; 0x4c
 8001918:	ecbd 8b04 	vpop	{d8-d9}
 800191c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001920:	f7ff bb0e 	b.w	8000f40 <_out_rev.constprop.0>
    negative = true;
 8001924:	2101      	movs	r1, #1
    value = 0 - value;
 8001926:	4632      	mov	r2, r6
 8001928:	463b      	mov	r3, r7
    negative = true;
 800192a:	9107      	str	r1, [sp, #28]
    value = 0 - value;
 800192c:	2000      	movs	r0, #0
 800192e:	2100      	movs	r1, #0
 8001930:	f7fe fda6 	bl	8000480 <__aeabi_dsub>
 8001934:	4606      	mov	r6, r0
 8001936:	460f      	mov	r7, r1
 8001938:	e715      	b.n	8001766 <_ftoa.constprop.0+0x96>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800193a:	07e0      	lsls	r0, r4, #31
 800193c:	d58a      	bpl.n	8001854 <_ftoa.constprop.0+0x184>
      ++whole;
 800193e:	3401      	adds	r4, #1
 8001940:	e788      	b.n	8001854 <_ftoa.constprop.0+0x184>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001942:	9b04      	ldr	r3, [sp, #16]
 8001944:	9324      	str	r3, [sp, #144]	; 0x90
 8001946:	9806      	ldr	r0, [sp, #24]
 8001948:	9b05      	ldr	r3, [sp, #20]
 800194a:	464a      	mov	r2, r9
 800194c:	4641      	mov	r1, r8
 800194e:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 8001952:	e9cd 4322 	strd	r4, r3, [sp, #136]	; 0x88
}
 8001956:	b013      	add	sp, #76	; 0x4c
 8001958:	ecbd 8b04 	vpop	{d8-d9}
 800195c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001960:	f7ff bcc6 	b.w	80012f0 <_etoa.constprop.0>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001964:	9b04      	ldr	r3, [sp, #16]
 8001966:	9a05      	ldr	r2, [sp, #20]
 8001968:	9322      	str	r3, [sp, #136]	; 0x88
 800196a:	2304      	movs	r3, #4
 800196c:	e9cd 3220 	strd	r3, r2, [sp, #128]	; 0x80
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <_ftoa.constprop.0+0x34c>)
 8001972:	e7cd      	b.n	8001910 <_ftoa.constprop.0+0x240>
 8001974:	1e68      	subs	r0, r5, #1
 8001976:	ab0a      	add	r3, sp, #40	; 0x28
      buf[len++] = (char)(48U + (frac % 10U));
 8001978:	4f29      	ldr	r7, [pc, #164]	; (8001a20 <_ftoa.constprop.0+0x350>)
 800197a:	4418      	add	r0, r3
 800197c:	e00f      	b.n	800199e <_ftoa.constprop.0+0x2ce>
 800197e:	fba7 320b 	umull	r3, r2, r7, fp
 8001982:	08d2      	lsrs	r2, r2, #3
 8001984:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8001988:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 800198c:	3330      	adds	r3, #48	; 0x30
      if (!(frac /= 10U)) {
 800198e:	f1bb 0f09 	cmp.w	fp, #9
      buf[len++] = (char)(48U + (frac % 10U));
 8001992:	f800 3f01 	strb.w	r3, [r0, #1]!
      if (!(frac /= 10U)) {
 8001996:	d954      	bls.n	8001a42 <_ftoa.constprop.0+0x372>
      --count;
 8001998:	46b2      	mov	sl, r6
      if (!(frac /= 10U)) {
 800199a:	4693      	mov	fp, r2
      buf[len++] = (char)(48U + (frac % 10U));
 800199c:	460d      	mov	r5, r1
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800199e:	2d20      	cmp	r5, #32
      --count;
 80019a0:	f10a 36ff 	add.w	r6, sl, #4294967295
      buf[len++] = (char)(48U + (frac % 10U));
 80019a4:	f105 0101 	add.w	r1, r5, #1
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80019a8:	d1e9      	bne.n	800197e <_ftoa.constprop.0+0x2ae>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80019aa:	9b04      	ldr	r3, [sp, #16]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10a      	bne.n	80019ca <_ftoa.constprop.0+0x2fa>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80019b4:	9b05      	ldr	r3, [sp, #20]
 80019b6:	b143      	cbz	r3, 80019ca <_ftoa.constprop.0+0x2fa>
 80019b8:	9a07      	ldr	r2, [sp, #28]
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d168      	bne.n	8001a90 <_ftoa.constprop.0+0x3c0>
 80019be:	9a04      	ldr	r2, [sp, #16]
 80019c0:	f012 0f0c 	tst.w	r2, #12
 80019c4:	d001      	beq.n	80019ca <_ftoa.constprop.0+0x2fa>
      width--;
 80019c6:	3b01      	subs	r3, #1
 80019c8:	9305      	str	r3, [sp, #20]
 80019ca:	2320      	movs	r3, #32
 80019cc:	e770      	b.n	80018b0 <_ftoa.constprop.0+0x1e0>
  else if (diff < 0.5) {
 80019ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <_ftoa.constprop.0+0x338>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f7ff f97d 	bl	8000cd4 <__aeabi_dcmplt>
 80019da:	2800      	cmp	r0, #0
 80019dc:	f47f af1d 	bne.w	800181a <_ftoa.constprop.0+0x14a>
  else if ((frac == 0U) || (frac & 1U)) {
 80019e0:	f1bb 0f00 	cmp.w	fp, #0
 80019e4:	d14f      	bne.n	8001a86 <_ftoa.constprop.0+0x3b6>
    ++frac;
 80019e6:	f10b 0b01 	add.w	fp, fp, #1
 80019ea:	e716      	b.n	800181a <_ftoa.constprop.0+0x14a>
 80019ec:	2520      	movs	r5, #32
 80019ee:	e6d1      	b.n	8001794 <_ftoa.constprop.0+0xc4>
 80019f0:	00000000 	.word	0x00000000
 80019f4:	41cdcd65 	.word	0x41cdcd65
 80019f8:	00000000 	.word	0x00000000
 80019fc:	c1cdcd65 	.word	0xc1cdcd65
 8001a00:	7fefffff 	.word	0x7fefffff
 8001a04:	08005fb0 	.word	0x08005fb0
 8001a08:	3fe00000 	.word	0x3fe00000
 8001a0c:	66666667 	.word	0x66666667
 8001a10:	08005cf0 	.word	0x08005cf0
 8001a14:	08005ce8 	.word	0x08005ce8
 8001a18:	08005cf4 	.word	0x08005cf4
 8001a1c:	08005cf8 	.word	0x08005cf8
 8001a20:	cccccccd 	.word	0xcccccccd
    else if (flags & FLAGS_PLUS) {
 8001a24:	9a04      	ldr	r2, [sp, #16]
 8001a26:	0751      	lsls	r1, r2, #29
 8001a28:	d425      	bmi.n	8001a76 <_ftoa.constprop.0+0x3a6>
    else if (flags & FLAGS_SPACE) {
 8001a2a:	9a04      	ldr	r2, [sp, #16]
 8001a2c:	0712      	lsls	r2, r2, #28
 8001a2e:	f57f af3f 	bpl.w	80018b0 <_ftoa.constprop.0+0x1e0>
      buf[len++] = ' ';
 8001a32:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a36:	446a      	add	r2, sp
 8001a38:	2120      	movs	r1, #32
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f802 1c20 	strb.w	r1, [r2, #-32]
 8001a40:	e736      	b.n	80018b0 <_ftoa.constprop.0+0x1e0>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001a42:	2920      	cmp	r1, #32
 8001a44:	d0b1      	beq.n	80019aa <_ftoa.constprop.0+0x2da>
 8001a46:	b32e      	cbz	r6, 8001a94 <_ftoa.constprop.0+0x3c4>
 8001a48:	ab0a      	add	r3, sp, #40	; 0x28
 8001a4a:	195a      	adds	r2, r3, r5
      buf[len++] = '0';
 8001a4c:	2030      	movs	r0, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001a4e:	460d      	mov	r5, r1
      buf[len++] = '0';
 8001a50:	3501      	adds	r5, #1
 8001a52:	ebaa 0305 	sub.w	r3, sl, r5
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001a56:	2d20      	cmp	r5, #32
      buf[len++] = '0';
 8001a58:	f802 0f01 	strb.w	r0, [r2, #1]!
 8001a5c:	f103 33ff 	add.w	r3, r3, #4294967295
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001a60:	d0a3      	beq.n	80019aa <_ftoa.constprop.0+0x2da>
 8001a62:	42d9      	cmn	r1, r3
 8001a64:	d1f4      	bne.n	8001a50 <_ftoa.constprop.0+0x380>
      buf[len++] = '.';
 8001a66:	f105 0348 	add.w	r3, r5, #72	; 0x48
 8001a6a:	446b      	add	r3, sp
 8001a6c:	222e      	movs	r2, #46	; 0x2e
 8001a6e:	3501      	adds	r5, #1
 8001a70:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001a74:	e6ee      	b.n	8001854 <_ftoa.constprop.0+0x184>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001a76:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a7a:	446a      	add	r2, sp
 8001a7c:	212b      	movs	r1, #43	; 0x2b
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f802 1c20 	strb.w	r1, [r2, #-32]
 8001a84:	e714      	b.n	80018b0 <_ftoa.constprop.0+0x1e0>
  else if ((frac == 0U) || (frac & 1U)) {
 8001a86:	f01b 0f01 	tst.w	fp, #1
 8001a8a:	f43f aec6 	beq.w	800181a <_ftoa.constprop.0+0x14a>
 8001a8e:	e7aa      	b.n	80019e6 <_ftoa.constprop.0+0x316>
      width--;
 8001a90:	9b05      	ldr	r3, [sp, #20]
 8001a92:	e798      	b.n	80019c6 <_ftoa.constprop.0+0x2f6>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001a94:	460d      	mov	r5, r1
 8001a96:	e7e6      	b.n	8001a66 <_ftoa.constprop.0+0x396>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001a98:	9a05      	ldr	r2, [sp, #20]
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	f43f aefa 	beq.w	8001894 <_ftoa.constprop.0+0x1c4>
 8001aa0:	9a07      	ldr	r2, [sp, #28]
 8001aa2:	b91a      	cbnz	r2, 8001aac <_ftoa.constprop.0+0x3dc>
 8001aa4:	9a04      	ldr	r2, [sp, #16]
 8001aa6:	f012 0f0c 	tst.w	r2, #12
 8001aaa:	d002      	beq.n	8001ab2 <_ftoa.constprop.0+0x3e2>
      width--;
 8001aac:	9a05      	ldr	r2, [sp, #20]
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	9205      	str	r2, [sp, #20]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001ab2:	9a05      	ldr	r2, [sp, #20]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	f4bf aeed 	bcs.w	8001894 <_ftoa.constprop.0+0x1c4>
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	f43f aef8 	beq.w	80018b0 <_ftoa.constprop.0+0x1e0>
 8001ac0:	aa0a      	add	r2, sp, #40	; 0x28
 8001ac2:	4415      	add	r5, r2
      buf[len++] = '0';
 8001ac4:	9905      	ldr	r1, [sp, #20]
 8001ac6:	2230      	movs	r2, #48	; 0x30
 8001ac8:	e002      	b.n	8001ad0 <_ftoa.constprop.0+0x400>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	f43f aef0 	beq.w	80018b0 <_ftoa.constprop.0+0x1e0>
      buf[len++] = '0';
 8001ad0:	3301      	adds	r3, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001ad2:	428b      	cmp	r3, r1
      buf[len++] = '0';
 8001ad4:	f805 2f01 	strb.w	r2, [r5, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001ad8:	d1f7      	bne.n	8001aca <_ftoa.constprop.0+0x3fa>
 8001ada:	9b05      	ldr	r3, [sp, #20]
 8001adc:	e6da      	b.n	8001894 <_ftoa.constprop.0+0x1c4>
 8001ade:	bf00      	nop

08001ae0 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8001ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001ae4:	f001 0503 	and.w	r5, r1, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001ae8:	09cc      	lsrs	r4, r1, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001aea:	46ae      	mov	lr, r5

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001aec:	492d      	ldr	r1, [pc, #180]	; (8001ba4 <_pal_lld_setgroupmode.constprop.0+0xc4>)
  uint32_t bit     = 0;
 8001aee:	f04f 0c00 	mov.w	ip, #0
      m4 = 15 << ((bit & 7) * 4);
 8001af2:	f04f 080f 	mov.w	r8, #15
      m1 = 1 << bit;
 8001af6:	2701      	movs	r7, #1
      m2 = 3 << (bit * 2);
 8001af8:	2603      	movs	r6, #3
 8001afa:	e013      	b.n	8001b24 <_pal_lld_setgroupmode.constprop.0+0x44>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8001afc:	680a      	ldr	r2, [r1, #0]
 8001afe:	4013      	ands	r3, r2
 8001b00:	ea43 030e 	orr.w	r3, r3, lr
        if (bit < 8)
 8001b04:	f1bc 0f07 	cmp.w	ip, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001b08:	600b      	str	r3, [r1, #0]
        if (bit < 8)
 8001b0a:	d83c      	bhi.n	8001b86 <_pal_lld_setgroupmode.constprop.0+0xa6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001b0c:	6a0b      	ldr	r3, [r1, #32]
 8001b0e:	ea23 030a 	bic.w	r3, r3, sl
 8001b12:	ea43 0309 	orr.w	r3, r3, r9
 8001b16:	620b      	str	r3, [r1, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8001b18:	0840      	lsrs	r0, r0, #1
 8001b1a:	d032      	beq.n	8001b82 <_pal_lld_setgroupmode.constprop.0+0xa2>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8001b1c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8001b20:	f10c 0c01 	add.w	ip, ip, #1
    if ((mask & 1) != 0) {
 8001b24:	07c3      	lsls	r3, r0, #31
 8001b26:	d5f7      	bpl.n	8001b18 <_pal_lld_setgroupmode.constprop.0+0x38>
      altrmask = altr << ((bit & 7) * 4);
 8001b28:	f00c 0307 	and.w	r3, ip, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	fa04 f903 	lsl.w	r9, r4, r3
      m4 = 15 << ((bit & 7) * 4);
 8001b32:	fa08 fa03 	lsl.w	sl, r8, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001b36:	684b      	ldr	r3, [r1, #4]
      m1 = 1 << bit;
 8001b38:	fa07 f20c 	lsl.w	r2, r7, ip
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001b3c:	ea23 0302 	bic.w	r3, r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001b42:	688a      	ldr	r2, [r1, #8]
      m2 = 3 << (bit * 2);
 8001b44:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8001b48:	fa06 f303 	lsl.w	r3, r6, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001b4c:	ea22 0203 	bic.w	r2, r2, r3
 8001b50:	608a      	str	r2, [r1, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001b52:	68ca      	ldr	r2, [r1, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001b54:	2d02      	cmp	r5, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001b56:	ea22 0203 	bic.w	r2, r2, r3
 8001b5a:	60ca      	str	r2, [r1, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001b5c:	ea6f 0303 	mvn.w	r3, r3
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001b60:	d1cc      	bne.n	8001afc <_pal_lld_setgroupmode.constprop.0+0x1c>
        if (bit < 8)
 8001b62:	f1bc 0f07 	cmp.w	ip, #7
 8001b66:	d815      	bhi.n	8001b94 <_pal_lld_setgroupmode.constprop.0+0xb4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001b68:	6a0a      	ldr	r2, [r1, #32]
 8001b6a:	ea22 020a 	bic.w	r2, r2, sl
 8001b6e:	ea42 0209 	orr.w	r2, r2, r9
 8001b72:	620a      	str	r2, [r1, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001b74:	680a      	ldr	r2, [r1, #0]
 8001b76:	4013      	ands	r3, r2
 8001b78:	ea43 030e 	orr.w	r3, r3, lr
    if (!mask)
 8001b7c:	0840      	lsrs	r0, r0, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8001b7e:	600b      	str	r3, [r1, #0]
    if (!mask)
 8001b80:	d1cc      	bne.n	8001b1c <_pal_lld_setgroupmode.constprop.0+0x3c>
  }
}
 8001b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001b86:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001b88:	ea23 030a 	bic.w	r3, r3, sl
 8001b8c:	ea43 0309 	orr.w	r3, r3, r9
 8001b90:	624b      	str	r3, [r1, #36]	; 0x24
 8001b92:	e7c1      	b.n	8001b18 <_pal_lld_setgroupmode.constprop.0+0x38>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001b94:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001b96:	ea22 020a 	bic.w	r2, r2, sl
 8001b9a:	ea42 0209 	orr.w	r2, r2, r9
 8001b9e:	624a      	str	r2, [r1, #36]	; 0x24
 8001ba0:	e7e8      	b.n	8001b74 <_pal_lld_setgroupmode.constprop.0+0x94>
 8001ba2:	bf00      	nop
 8001ba4:	40020000 	.word	0x40020000
	...

08001bb0 <dac_lld_put_channel.constprop.0>:
 */
void dac_lld_put_channel(DACDriver *dacp,
                         dacchannel_t channel,
                         dacsample_t sample) {

  switch (dacp->config->datamode) {
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <dac_lld_put_channel.constprop.0+0x3c>)
 8001bb2:	6913      	ldr	r3, [r2, #16]
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d003      	beq.n	8001bc2 <dac_lld_put_channel.constprop.0+0x12>
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d008      	beq.n	8001bd0 <dac_lld_put_channel.constprop.0+0x20>
 8001bbe:	b173      	cbz	r3, 8001bde <dac_lld_put_channel.constprop.0+0x2e>
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
    break;
  }
}
 8001bc0:	4770      	bx	lr
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 8001bc2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bc4:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001bce:	4770      	bx	lr
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8001bd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bd2:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
 8001bdc:	e7f0      	b.n	8001bc0 <dac_lld_put_channel.constprop.0+0x10>
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8001bde:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001be0:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001be4:	3308      	adds	r3, #8
 8001be6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001bea:	4770      	bx	lr
 8001bec:	2000083c 	.word	0x2000083c

08001bf0 <sdObjectInit.constprop.0>:
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <sdObjectInit.constprop.0+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001bf4:	b410      	push	{r4}
  sdp->vmt = &vmt;
 8001bf6:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001bfa:	f100 040c 	add.w	r4, r0, #12
 8001bfe:	f100 0254 	add.w	r2, r0, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001c02:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_counter = 0;
 8001c04:	2100      	movs	r1, #0
 8001c06:	6141      	str	r1, [r0, #20]
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
  qp->prev = qp;
 8001c08:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_wrptr   = bp;
 8001c0c:	e9c0 2208 	strd	r2, r2, [r0, #32]
  oqp->q_counter = size;
 8001c10:	2410      	movs	r4, #16
  sdp->state = SD_STOP;
 8001c12:	f04f 0c01 	mov.w	ip, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001c16:	6043      	str	r3, [r0, #4]
  iqp->q_notify  = infy;
 8001c18:	6281      	str	r1, [r0, #40]	; 0x28
  iqp->q_top     = bp + size;
 8001c1a:	f100 0364 	add.w	r3, r0, #100	; 0x64
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8001c1e:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_buffer  = bp;
 8001c22:	6182      	str	r2, [r0, #24]
  oqp->q_top     = bp + size;
 8001c24:	f100 0274 	add.w	r2, r0, #116	; 0x74
  oqp->q_counter = size;
 8001c28:	6384      	str	r4, [r0, #56]	; 0x38
  qp->next = qp;
 8001c2a:	e9c0 010b 	strd	r0, r1, [r0, #44]	; 0x2c
  oqp->q_wrptr   = bp;
 8001c2e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
}
 8001c32:	f85d 4b04 	ldr.w	r4, [sp], #4
  sdp->state = SD_STOP;
 8001c36:	f880 c008 	strb.w	ip, [r0, #8]
  iqp->q_top     = bp + size;
 8001c3a:	61c3      	str	r3, [r0, #28]
  qp->prev = qp;
 8001c3c:	6341      	str	r1, [r0, #52]	; 0x34
  oqp->q_buffer  = bp;
 8001c3e:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_top     = bp + size;
 8001c40:	6402      	str	r2, [r0, #64]	; 0x40
  oqp->q_link    = link;
 8001c42:	6500      	str	r0, [r0, #80]	; 0x50
}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	08006080 	.word	0x08006080
 8001c4c:	00000000 	.word	0x00000000

08001c50 <_ctl>:
  osalDbgCheck(sdp != NULL);
 8001c50:	b120      	cbz	r0, 8001c5c <_ctl+0xc>
  switch (operation) {
 8001c52:	2901      	cmp	r1, #1
 8001c54:	d106      	bne.n	8001c64 <_ctl+0x14>
    osalDbgCheck(arg == NULL);
 8001c56:	b90a      	cbnz	r2, 8001c5c <_ctl+0xc>
  return HAL_RET_SUCCESS;
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4770      	bx	lr
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001c5c:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <_ctl+0x1c>)
 8001c60:	f7ff f926 	bl	8000eb0 <chSysHalt>
    return HAL_RET_UNKNOWN_CTL;
 8001c64:	f06f 0013 	mvn.w	r0, #19
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	08005e80 	.word	0x08005e80

08001c70 <vt_set_alarm>:
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;

  if (delay < currdelta) {
 8001c70:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 8001c74:	bf28      	it	cs
 8001c76:	f44f 417f 	movcs.w	r1, #65280	; 0xff00
 8001c7a:	2902      	cmp	r1, #2
 8001c7c:	bf38      	it	cc
 8001c7e:	2102      	movcc	r1, #2
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8001c80:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <vt_set_alarm+0x5c>)

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8001c84:	1843      	adds	r3, r0, r1
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	6353      	str	r3, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001c8a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001c8c:	b29b      	uxth	r3, r3
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001c8e:	1a18      	subs	r0, r3, r0
 8001c90:	b280      	uxth	r0, r0
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(now, newnow);
    if (likely(nowdelta < delay)) {
 8001c92:	4281      	cmp	r1, r0
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8001c94:	bf98      	it	ls
 8001c96:	2003      	movls	r0, #3
    if (likely(nowdelta < delay)) {
 8001c98:	d901      	bls.n	8001c9e <vt_set_alarm+0x2e>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8001c9a:	bd08      	pop	{r3, pc}
 8001c9c:	460b      	mov	r3, r1
  return systime + (systime_t)interval;
 8001c9e:	1819      	adds	r1, r3, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001ca0:	b289      	uxth	r1, r1
 8001ca2:	6351      	str	r1, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001ca4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001ca6:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8001ca8:	1acb      	subs	r3, r1, r3
 8001caa:	b29b      	uxth	r3, r3
    if (likely(nowdelta < delay)) {
 8001cac:	4283      	cmp	r3, r0
 8001cae:	d205      	bcs.n	8001cbc <vt_set_alarm+0x4c>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <vt_set_alarm+0x60>)
 8001cb2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001cba:	bd08      	pop	{r3, pc}
    currdelta += (sysinterval_t)1;
 8001cbc:	3001      	adds	r0, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8001cbe:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001cc2:	d1eb      	bne.n	8001c9c <vt_set_alarm+0x2c>
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <vt_set_alarm+0x64>)
 8001cc6:	f7ff f8f3 	bl	8000eb0 <chSysHalt>
 8001cca:	bf00      	nop
 8001ccc:	40014800 	.word	0x40014800
 8001cd0:	200009f0 	.word	0x200009f0
 8001cd4:	08005e58 	.word	0x08005e58
	...

08001ce0 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8001ce0:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ce2:	2330      	movs	r3, #48	; 0x30
 8001ce4:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <__sch_wakeup+0x94>)
 8001cea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dd3c      	ble.n	8001d6c <__sch_wakeup+0x8c>
 8001cf2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d138      	bne.n	8001d6c <__sch_wakeup+0x8c>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8001d00:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d810      	bhi.n	8001d2a <__sch_wakeup+0x4a>
 8001d08:	e8df f003 	tbb	[pc, r3]
 8001d0c:	260f0f2a 	.word	0x260f0f2a
 8001d10:	0b0f070b 	.word	0x0b0f070b
 8001d14:	0f0f0f0f 	.word	0x0f0f0f0f
 8001d18:	0b          	.byte	0x0b
 8001d19:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8001d1a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001d1c:	6883      	ldr	r3, [r0, #8]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	6083      	str	r3, [r0, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8001d22:	e9d1 3000 	ldrd	r3, r0, [r1]
 8001d26:	6003      	str	r3, [r0, #0]
  p->next->prev = p->prev;
 8001d28:	6058      	str	r0, [r3, #4]
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8001d2a:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 8001d2e:	2000      	movs	r0, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8001d30:	628c      	str	r4, [r1, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001d32:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8001d34:	688c      	ldr	r4, [r1, #8]
  tp->state = CH_STATE_READY;
 8001d36:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    pqp = pqp->next;
 8001d3a:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001d3c:	6898      	ldr	r0, [r3, #8]
 8001d3e:	42a0      	cmp	r0, r4
 8001d40:	d2fb      	bcs.n	8001d3a <__sch_wakeup+0x5a>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8001d42:	685c      	ldr	r4, [r3, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8001d44:	2000      	movs	r0, #0
 8001d46:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 8001d4a:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8001d4c:	6059      	str	r1, [r3, #4]
 8001d4e:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8001d52:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 8001d56:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8001d58:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	6018      	str	r0, [r3, #0]
    break;
 8001d5e:	e7e4      	b.n	8001d2a <__sch_wakeup+0x4a>
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d66:	f383 8811 	msr	BASEPRI, r3
}
 8001d6a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#6");
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <__sch_wakeup+0x98>)
 8001d6e:	f7ff f89f 	bl	8000eb0 <chSysHalt>
 8001d72:	bf00      	nop
 8001d74:	200009f0 	.word	0x200009f0
 8001d78:	08005d00 	.word	0x08005d00
 8001d7c:	00000000 	.word	0x00000000

08001d80 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8001d80:	2300      	movs	r3, #0
  qp->prev = qp;
 8001d82:	e9c0 0000 	strd	r0, r0, [r0]
 8001d86:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	0000      	movs	r0, r0
	...

08001d90 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @api
 */
void chDbgCheckClassI(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <chEvtBroadcastFlagsI+0x98>)
 8001d94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	db3e      	blt.n	8001e1a <chEvtBroadcastFlagsI+0x8a>
 8001d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	dd3a      	ble.n	8001e1a <chEvtBroadcastFlagsI+0x8a>
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001da4:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d019      	beq.n	8001dde <chEvtBroadcastFlagsI+0x4e>
    tp->u.rdymsg = MSG_OK;
 8001daa:	2500      	movs	r5, #0
  /*lint -restore*/
    elp->flags |= flags;
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001db2:	b111      	cbz	r1, 8001dba <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001db4:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8001db6:	4211      	tst	r1, r2
 8001db8:	d00e      	beq.n	8001dd8 <chEvtBroadcastFlagsI+0x48>
      chEvtSignalI(elp->listener, elp->events);
 8001dba:	685a      	ldr	r2, [r3, #4]
  chDbgCheck(tp != NULL);
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	d02f      	beq.n	8001e20 <chEvtBroadcastFlagsI+0x90>
  tp->epending |= events;
 8001dc0:	689c      	ldr	r4, [r3, #8]
 8001dc2:	6b96      	ldr	r6, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001dc4:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 8001dc8:	4334      	orrs	r4, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001dca:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8001dce:	6394      	str	r4, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001dd0:	d01c      	beq.n	8001e0c <chEvtBroadcastFlagsI+0x7c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001dd2:	f1bc 0f0b 	cmp.w	ip, #11
 8001dd6:	d003      	beq.n	8001de0 <chEvtBroadcastFlagsI+0x50>
    }
    elp = elp->next;
 8001dd8:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8001dda:	4298      	cmp	r0, r3
 8001ddc:	d1e6      	bne.n	8001dac <chEvtBroadcastFlagsI+0x1c>
  }
}
 8001dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001de0:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8001de2:	ea36 0404 	bics.w	r4, r6, r4
 8001de6:	d1f7      	bne.n	8001dd8 <chEvtBroadcastFlagsI+0x48>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001de8:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001dea:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8001dec:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8001dee:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 8001df2:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001df4:	68a6      	ldr	r6, [r4, #8]
 8001df6:	42be      	cmp	r6, r7
 8001df8:	d2fb      	bcs.n	8001df2 <chEvtBroadcastFlagsI+0x62>
    elp = elp->next;
 8001dfa:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8001dfc:	6866      	ldr	r6, [r4, #4]
  p->next       = pqp;
 8001dfe:	6014      	str	r4, [r2, #0]
  while (elp != (event_listener_t *)esp) {
 8001e00:	4298      	cmp	r0, r3
  p->prev       = pqp->prev;
 8001e02:	6056      	str	r6, [r2, #4]
  p->prev->next = p;
 8001e04:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 8001e06:	6062      	str	r2, [r4, #4]
 8001e08:	d1d0      	bne.n	8001dac <chEvtBroadcastFlagsI+0x1c>
 8001e0a:	e7e8      	b.n	8001dde <chEvtBroadcastFlagsI+0x4e>
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001e0c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8001e0e:	4234      	tst	r4, r6
 8001e10:	d1ea      	bne.n	8001de8 <chEvtBroadcastFlagsI+0x58>
    elp = elp->next;
 8001e12:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8001e14:	4298      	cmp	r0, r3
 8001e16:	d1c9      	bne.n	8001dac <chEvtBroadcastFlagsI+0x1c>
 8001e18:	e7e1      	b.n	8001dde <chEvtBroadcastFlagsI+0x4e>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 8001e1a:	4804      	ldr	r0, [pc, #16]	; (8001e2c <chEvtBroadcastFlagsI+0x9c>)
 8001e1c:	f7ff f848 	bl	8000eb0 <chSysHalt>
  chDbgCheck(tp != NULL);
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <chEvtBroadcastFlagsI+0xa0>)
 8001e22:	f7ff f845 	bl	8000eb0 <chSysHalt>
 8001e26:	bf00      	nop
 8001e28:	200009f0 	.word	0x200009f0
 8001e2c:	08005d08 	.word	0x08005d08
 8001e30:	08005e70 	.word	0x08005e70
	...

08001e40 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	2330      	movs	r3, #48	; 0x30
 8001e44:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <chCoreAllocFromTop+0x64>)
 8001e4a:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8001e4e:	ea54 0c05 	orrs.w	ip, r4, r5
 8001e52:	d121      	bne.n	8001e98 <chCoreAllocFromTop+0x58>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001e54:	2401      	movs	r4, #1
 8001e56:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001e5a:	b301      	cbz	r1, 8001e9e <chCoreAllocFromTop+0x5e>
 8001e5c:	f101 3cff 	add.w	ip, r1, #4294967295
 8001e60:	ea1c 0c01 	ands.w	ip, ip, r1
 8001e64:	d11b      	bne.n	8001e9e <chCoreAllocFromTop+0x5e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001e66:	4c10      	ldr	r4, [pc, #64]	; (8001ea8 <chCoreAllocFromTop+0x68>)
 8001e68:	6865      	ldr	r5, [r4, #4]
 8001e6a:	4249      	negs	r1, r1
 8001e6c:	1a28      	subs	r0, r5, r0
 8001e6e:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001e70:	6821      	ldr	r1, [r4, #0]
  prev = p - offset;
 8001e72:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001e74:	428a      	cmp	r2, r1
 8001e76:	d308      	bcc.n	8001e8a <chCoreAllocFromTop+0x4a>
 8001e78:	4295      	cmp	r5, r2
 8001e7a:	d306      	bcc.n	8001e8a <chCoreAllocFromTop+0x4a>
  ch_memcore.topmem = prev;
 8001e7c:	6062      	str	r2, [r4, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001e84:	f382 8811 	msr	BASEPRI, r2
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8001e88:	bd38      	pop	{r3, r4, r5, pc}
 8001e8a:	2200      	movs	r2, #0
    return NULL;
 8001e8c:	4660      	mov	r0, ip
 8001e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001e92:	f382 8811 	msr	BASEPRI, r2
}
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <chCoreAllocFromTop+0x6c>)
 8001e9a:	f7ff f809 	bl	8000eb0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001e9e:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <chCoreAllocFromTop+0x70>)
 8001ea0:	f7ff f806 	bl	8000eb0 <chSysHalt>
 8001ea4:	200009f0 	.word	0x200009f0
 8001ea8:	20000cc8 	.word	0x20000cc8
 8001eac:	08005d10 	.word	0x08005d10
 8001eb0:	08005e28 	.word	0x08005e28
	...

08001ec0 <chCoreAllocAlignedI>:
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <chCoreAllocAlignedI+0x44>)
 8001ec2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ec6:	2a00      	cmp	r2, #0
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	db15      	blt.n	8001ef8 <chCoreAllocAlignedI+0x38>
 8001ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dd11      	ble.n	8001ef8 <chCoreAllocAlignedI+0x38>
 8001ed4:	b199      	cbz	r1, 8001efe <chCoreAllocAlignedI+0x3e>
 8001ed6:	1e4b      	subs	r3, r1, #1
 8001ed8:	400b      	ands	r3, r1
 8001eda:	d110      	bne.n	8001efe <chCoreAllocAlignedI+0x3e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <chCoreAllocAlignedI+0x48>)
 8001ede:	6854      	ldr	r4, [r2, #4]
 8001ee0:	4249      	negs	r1, r1
 8001ee2:	1a20      	subs	r0, r4, r0
 8001ee4:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001ee6:	6811      	ldr	r1, [r2, #0]
 8001ee8:	4288      	cmp	r0, r1
 8001eea:	d303      	bcc.n	8001ef4 <chCoreAllocAlignedI+0x34>
 8001eec:	4284      	cmp	r4, r0
 8001eee:	d301      	bcc.n	8001ef4 <chCoreAllocAlignedI+0x34>
  ch_memcore.topmem = prev;
 8001ef0:	6050      	str	r0, [r2, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001ef2:	bd10      	pop	{r4, pc}
    return NULL;
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <chCoreAllocAlignedI+0x4c>)
 8001efa:	f7fe ffd9 	bl	8000eb0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001efe:	4804      	ldr	r0, [pc, #16]	; (8001f10 <chCoreAllocAlignedI+0x50>)
 8001f00:	f7fe ffd6 	bl	8000eb0 <chSysHalt>
 8001f04:	200009f0 	.word	0x200009f0
 8001f08:	20000cc8 	.word	0x20000cc8
 8001f0c:	08005d08 	.word	0x08005d08
 8001f10:	08005e28 	.word	0x08005e28
	...

08001f20 <vt_insert_first.constprop.0>:

/**
 * @brief   Inserts a timer as first element in a delta list.
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8001f20:	b538      	push	{r3, r4, r5, lr}
                            sysinterval_t delay) {
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 8001f22:	4c1e      	ldr	r4, [pc, #120]	; (8001f9c <vt_insert_first.constprop.0+0x7c>)
 8001f24:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
 8001f28:	83a1      	strh	r1, [r4, #28]
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {

  dlp->delta      = delta;
  dlp->prev       = dlhp;
 8001f2a:	f104 0310 	add.w	r3, r4, #16
  dlp->delta      = delta;
 8001f2e:	6082      	str	r2, [r0, #8]
 8001f30:	bf28      	it	cs
 8001f32:	f44f 427f 	movcs.w	r2, #65280	; 0xff00
  dlp->prev       = dlhp;
 8001f36:	6043      	str	r3, [r0, #4]
 8001f38:	2a02      	cmp	r2, #2
  dlp->next       = dlp->prev->next;
 8001f3a:	6923      	ldr	r3, [r4, #16]
 8001f3c:	6003      	str	r3, [r0, #0]
 8001f3e:	bf38      	it	cc
 8001f40:	2202      	movcc	r2, #2
  dlp->next->prev = dlp;
 8001f42:	6058      	str	r0, [r3, #4]
  return systime + (systime_t)interval;
 8001f44:	188d      	adds	r5, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <vt_insert_first.constprop.0+0x80>)
  dlhp->next      = dlp;
 8001f48:	6120      	str	r0, [r4, #16]
 8001f4a:	b2ad      	uxth	r5, r5
  STM32_ST_TIM->SR     = 0;
 8001f4c:	2000      	movs	r0, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001f4e:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001f50:	6118      	str	r0, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001f52:	2002      	movs	r0, #2
 8001f54:	60d8      	str	r0, [r3, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8001f56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001f58:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 8001f5a:	eba0 0c01 	sub.w	ip, r0, r1
 8001f5e:	fa1f fc8c 	uxth.w	ip, ip
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8001f62:	4594      	cmp	ip, r2
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8001f64:	bf28      	it	cs
 8001f66:	2503      	movcs	r5, #3
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8001f68:	d206      	bcs.n	8001f78 <vt_insert_first.constprop.0+0x58>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8001f6a:	bd38      	pop	{r3, r4, r5, pc}
    currdelta += (sysinterval_t)1;
 8001f6c:	3501      	adds	r5, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8001f6e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8001f72:	4601      	mov	r1, r0
 8001f74:	d00e      	beq.n	8001f94 <vt_insert_first.constprop.0+0x74>
 8001f76:	4610      	mov	r0, r2
  return systime + (systime_t)interval;
 8001f78:	4429      	add	r1, r5
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001f7a:	b289      	uxth	r1, r1
 8001f7c:	6359      	str	r1, [r3, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f80:	b292      	uxth	r2, r2
  return (sysinterval_t)((systime_t)(end - start));
 8001f82:	1a11      	subs	r1, r2, r0
 8001f84:	b289      	uxth	r1, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8001f86:	42a9      	cmp	r1, r5
 8001f88:	d2f0      	bcs.n	8001f6c <vt_insert_first.constprop.0+0x4c>
 8001f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <vt_insert_first.constprop.0+0x84>)
 8001f96:	f7fe ff8b 	bl	8000eb0 <chSysHalt>
 8001f9a:	bf00      	nop
 8001f9c:	200009f0 	.word	0x200009f0
 8001fa0:	40014800 	.word	0x40014800
 8001fa4:	08005e58 	.word	0x08005e58
	...

08001fb0 <chSchReadyI.isra.0>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001fb0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <chSchReadyI.isra.0+0x40>)
 8001fb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	db13      	blt.n	8001fe4 <chSchReadyI.isra.0+0x34>
 8001fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	dd0f      	ble.n	8001fe4 <chSchReadyI.isra.0+0x34>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8001fc4:	b188      	cbz	r0, 8001fea <chSchReadyI.isra.0+0x3a>
  tp->state = CH_STATE_READY;
 8001fc6:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001fc8:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001fca:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 8001fcc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    pqp = pqp->next;
 8001fd0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	428a      	cmp	r2, r1
 8001fd6:	d2fb      	bcs.n	8001fd0 <chSchReadyI.isra.0+0x20>
  p->prev       = pqp->prev;
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001fde:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001fe0:	6058      	str	r0, [r3, #4]
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
}
 8001fe2:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <chSchReadyI.isra.0+0x44>)
 8001fe6:	f7fe ff63 	bl	8000eb0 <chSysHalt>
  chDbgCheck(tp != NULL);
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <chSchReadyI.isra.0+0x48>)
 8001fec:	f7fe ff60 	bl	8000eb0 <chSysHalt>
 8001ff0:	200009f0 	.word	0x200009f0
 8001ff4:	08005d08 	.word	0x08005d08
 8001ff8:	08005e10 	.word	0x08005e10
 8001ffc:	00000000 	.word	0x00000000

08002000 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8002004:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8002006:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 800200a:	f8d6 8000 	ldr.w	r8, [r6]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800200e:	f418 7f80 	tst.w	r8, #256	; 0x100
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002012:	b083      	sub	sp, #12
 8002014:	4604      	mov	r4, r0
  if (sr & USART_SR_LBD) {
 8002016:	f040 8096 	bne.w	8002146 <sd_lld_serve_interrupt+0x146>
 800201a:	4f9f      	ldr	r7, [pc, #636]	; (8002298 <sd_lld_serve_interrupt+0x298>)
 800201c:	2330      	movs	r3, #48	; 0x30
 800201e:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002026:	2b00      	cmp	r3, #0
 8002028:	f340 80b0 	ble.w	800218c <sd_lld_serve_interrupt+0x18c>
 800202c:	f8d7 908c 	ldr.w	r9, [r7, #140]	; 0x8c
 8002030:	f1b9 0f00 	cmp.w	r9, #0
 8002034:	f040 80aa 	bne.w	800218c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002038:	2301      	movs	r3, #1
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800203a:	f018 0f2f 	tst.w	r8, #47	; 0x2f
 800203e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint16_t sr = u->SR;
 8002042:	fa1f f588 	uxth.w	r5, r8
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002046:	d019      	beq.n	800207c <sd_lld_serve_interrupt+0x7c>
  chnAddFlagsI(sdp, sts);
 8002048:	f104 0804 	add.w	r8, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 800204c:	f104 0b0c 	add.w	fp, r4, #12
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002050:	0729      	lsls	r1, r5, #28
 8002052:	d127      	bne.n	80020a4 <sd_lld_serve_interrupt+0xa4>
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8002054:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002056:	6872      	ldr	r2, [r6, #4]
 8002058:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 800205c:	d439      	bmi.n	80020d2 <sd_lld_serve_interrupt+0xd2>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800205e:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002060:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8002064:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002066:	d1f3      	bne.n	8002050 <sd_lld_serve_interrupt+0x50>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800206c:	2b00      	cmp	r3, #0
 800206e:	f340 80ad 	ble.w	80021cc <sd_lld_serve_interrupt+0x1cc>
 8002072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002076:	2b00      	cmp	r3, #0
 8002078:	f340 80a8 	ble.w	80021cc <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002082:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002086:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800208a:	d002      	beq.n	8002092 <sd_lld_serve_interrupt+0x92>
 800208c:	062a      	lsls	r2, r5, #24
 800208e:	f100 80a0 	bmi.w	80021d2 <sd_lld_serve_interrupt+0x1d2>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8002092:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8002096:	d002      	beq.n	800209e <sd_lld_serve_interrupt+0x9e>
 8002098:	066b      	lsls	r3, r5, #25
 800209a:	f100 80d5 	bmi.w	8002248 <sd_lld_serve_interrupt+0x248>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
    }
    osalSysUnlockFromISR();
  }
}
 800209e:	b003      	add	sp, #12
 80020a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sr & USART_SR_ORE)
 80020a4:	f3c5 01c0 	ubfx	r1, r5, #3, #1
 80020a8:	0209      	lsls	r1, r1, #8
  if (sr & USART_SR_PE)
 80020aa:	07ea      	lsls	r2, r5, #31
    sts |= SD_PARITY_ERROR;
 80020ac:	bf48      	it	mi
 80020ae:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80020b2:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 80020b4:	bf48      	it	mi
 80020b6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80020ba:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 80020bc:	bf48      	it	mi
 80020be:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80020c2:	4640      	mov	r0, r8
 80020c4:	f7ff fe64 	bl	8001d90 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 80020c8:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80020ca:	6872      	ldr	r2, [r6, #4]
 80020cc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 80020d0:	d5c5      	bpl.n	800205e <sd_lld_serve_interrupt+0x5e>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80020d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80020d6:	2900      	cmp	r1, #0
 80020d8:	db32      	blt.n	8002140 <sd_lld_serve_interrupt+0x140>
 80020da:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80020de:	2900      	cmp	r1, #0
 80020e0:	dd2e      	ble.n	8002140 <sd_lld_serve_interrupt+0x140>
  if (iqIsEmptyI(&sdp->iqueue))
 80020e2:	6961      	ldr	r1, [r4, #20]
 80020e4:	b1e1      	cbz	r1, 8002120 <sd_lld_serve_interrupt+0x120>
  if (!iqIsFullI(iqp)) {
 80020e6:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 80020ea:	4281      	cmp	r1, r0
 80020ec:	d051      	beq.n	8002192 <sd_lld_serve_interrupt+0x192>
    b = (uint8_t)u->DR & sdp->rxmask;
 80020ee:	4013      	ands	r3, r2
    iqp->q_counter++;
 80020f0:	6962      	ldr	r2, [r4, #20]
 80020f2:	3201      	adds	r2, #1
 80020f4:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 80020f6:	1c4a      	adds	r2, r1, #1
 80020f8:	6222      	str	r2, [r4, #32]
 80020fa:	700b      	strb	r3, [r1, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80020fc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002100:	429a      	cmp	r2, r3
 8002102:	d301      	bcc.n	8002108 <sd_lld_serve_interrupt+0x108>
      iqp->q_wrptr = iqp->q_buffer;
 8002104:	69a3      	ldr	r3, [r4, #24]
 8002106:	6223      	str	r3, [r4, #32]
  return (bool)(qp->next != qp);
 8002108:	68e0      	ldr	r0, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 800210a:	4583      	cmp	fp, r0
 800210c:	d0a7      	beq.n	800205e <sd_lld_serve_interrupt+0x5e>
  qp->next       = p->next;
 800210e:	6803      	ldr	r3, [r0, #0]
 8002110:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 8002112:	f8c3 b004 	str.w	fp, [r3, #4]

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002116:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 800211a:	f7ff ff49 	bl	8001fb0 <chSchReadyI.isra.0>
 800211e:	e79e      	b.n	800205e <sd_lld_serve_interrupt+0x5e>
 8002120:	2104      	movs	r1, #4
 8002122:	4640      	mov	r0, r8
 8002124:	e9cd 2300 	strd	r2, r3, [sp]
 8002128:	f7ff fe32 	bl	8001d90 <chEvtBroadcastFlagsI>
 800212c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002130:	2900      	cmp	r1, #0
 8002132:	db05      	blt.n	8002140 <sd_lld_serve_interrupt+0x140>
 8002134:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002138:	2900      	cmp	r1, #0
 800213a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800213e:	dcd2      	bgt.n	80020e6 <sd_lld_serve_interrupt+0xe6>
    chSysHalt("SV#10");
 8002140:	4856      	ldr	r0, [pc, #344]	; (800229c <sd_lld_serve_interrupt+0x29c>)
 8002142:	f7fe feb5 	bl	8000eb0 <chSysHalt>
 8002146:	2330      	movs	r3, #48	; 0x30
 8002148:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800214c:	4f52      	ldr	r7, [pc, #328]	; (8002298 <sd_lld_serve_interrupt+0x298>)
 800214e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002152:	2b00      	cmp	r3, #0
 8002154:	dd1a      	ble.n	800218c <sd_lld_serve_interrupt+0x18c>
 8002156:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 800215a:	b9bd      	cbnz	r5, 800218c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 800215c:	2301      	movs	r3, #1
 800215e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002162:	3004      	adds	r0, #4
 8002164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002168:	f7ff fe12 	bl	8001d90 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800216c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    u->SR = ~USART_SR_LBD;
 8002170:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	6032      	str	r2, [r6, #0]
 8002178:	dd28      	ble.n	80021cc <sd_lld_serve_interrupt+0x1cc>
 800217a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800217e:	2b00      	cmp	r3, #0
 8002180:	dd24      	ble.n	80021cc <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002182:	f8c7 508c 	str.w	r5, [r7, #140]	; 0x8c
 8002186:	f385 8811 	msr	BASEPRI, r5
}
 800218a:	e747      	b.n	800201c <sd_lld_serve_interrupt+0x1c>
    chSysHalt("SV#6");
 800218c:	4844      	ldr	r0, [pc, #272]	; (80022a0 <sd_lld_serve_interrupt+0x2a0>)
 800218e:	f7fe fe8f 	bl	8000eb0 <chSysHalt>
  if (!iqIsFullI(iqp)) {
 8002192:	6960      	ldr	r0, [r4, #20]
 8002194:	2800      	cmp	r0, #0
 8002196:	d0aa      	beq.n	80020ee <sd_lld_serve_interrupt+0xee>
  chEvtBroadcastFlagsI(esp, flags);
 8002198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219c:	4640      	mov	r0, r8
 800219e:	f7ff fdf7 	bl	8001d90 <chEvtBroadcastFlagsI>
}
 80021a2:	e75c      	b.n	800205e <sd_lld_serve_interrupt+0x5e>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80021a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d060      	beq.n	800226c <sd_lld_serve_interrupt+0x26c>
  chEvtBroadcastFlagsI(esp, flags);
 80021aa:	2110      	movs	r1, #16
 80021ac:	1d20      	adds	r0, r4, #4
 80021ae:	f7ff fdef 	bl	8001d90 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80021b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80021b6:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80021ba:	ea0a 0303 	and.w	r3, sl, r3
 80021be:	2a00      	cmp	r2, #0
 80021c0:	60f3      	str	r3, [r6, #12]
 80021c2:	dd03      	ble.n	80021cc <sd_lld_serve_interrupt+0x1cc>
 80021c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	dc4f      	bgt.n	800226c <sd_lld_serve_interrupt+0x26c>
    chSysHalt("SV#7");
 80021cc:	4835      	ldr	r0, [pc, #212]	; (80022a4 <sd_lld_serve_interrupt+0x2a4>)
 80021ce:	f7fe fe6f 	bl	8000eb0 <chSysHalt>
 80021d2:	2330      	movs	r3, #48	; 0x30
 80021d4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80021d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021dc:	2b00      	cmp	r3, #0
 80021de:	ddd5      	ble.n	800218c <sd_lld_serve_interrupt+0x18c>
 80021e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	d1d1      	bne.n	800218c <sd_lld_serve_interrupt+0x18c>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80021e8:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
  oip->dbg.lock_cnt = (cnt_t)1;
 80021ec:	2001      	movs	r0, #1
 80021ee:	4291      	cmp	r1, r2
 80021f0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    b = oqGetI(&sdp->oqueue);
 80021f4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80021f8:	d03e      	beq.n	8002278 <sd_lld_serve_interrupt+0x278>
    uint8_t b;

    oqp->q_counter++;
 80021fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80021fc:	3101      	adds	r1, #1
 80021fe:	63a1      	str	r1, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8002200:	1c51      	adds	r1, r2, #1
 8002202:	64a1      	str	r1, [r4, #72]	; 0x48
 8002204:	f892 8000 	ldrb.w	r8, [r2]
    if (oqp->q_rdptr >= oqp->q_top) {
 8002208:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800220a:	4291      	cmp	r1, r2
 800220c:	d301      	bcc.n	8002212 <sd_lld_serve_interrupt+0x212>
      oqp->q_rdptr = oqp->q_buffer;
 800220e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002210:	64a2      	str	r2, [r4, #72]	; 0x48
  return (bool)(qp->next != qp);
 8002212:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002214:	4584      	cmp	ip, r0
 8002216:	d009      	beq.n	800222c <sd_lld_serve_interrupt+0x22c>
  qp->next       = p->next;
 8002218:	6803      	ldr	r3, [r0, #0]
 800221a:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800221c:	f8c3 c004 	str.w	ip, [r3, #4]
  tp->u.rdymsg = msg;
 8002220:	2300      	movs	r3, #0
 8002222:	6283      	str	r3, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 8002224:	f7ff fec4 	bl	8001fb0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
      u->DR = b;
 800222c:	f8c6 8004 	str.w	r8, [r6, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	ddcb      	ble.n	80021cc <sd_lld_serve_interrupt+0x1cc>
 8002234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002238:	2b00      	cmp	r3, #0
 800223a:	ddc7      	ble.n	80021cc <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002242:	f383 8811 	msr	BASEPRI, r3
}
 8002246:	e724      	b.n	8002092 <sd_lld_serve_interrupt+0x92>
 8002248:	2330      	movs	r3, #48	; 0x30
 800224a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800224e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002252:	2b00      	cmp	r3, #0
 8002254:	dd9a      	ble.n	800218c <sd_lld_serve_interrupt+0x18c>
 8002256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d196      	bne.n	800218c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 800225e:	2301      	movs	r3, #1
 8002260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002264:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8002268:	429a      	cmp	r2, r3
 800226a:	d09b      	beq.n	80021a4 <sd_lld_serve_interrupt+0x1a4>
  oip->dbg.lock_cnt = (cnt_t)0;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002272:	f383 8811 	msr	BASEPRI, r3
}
 8002276:	e712      	b.n	800209e <sd_lld_serve_interrupt+0x9e>
  if (!oqIsEmptyI(oqp)) {
 8002278:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800227a:	2900      	cmp	r1, #0
 800227c:	d0bd      	beq.n	80021fa <sd_lld_serve_interrupt+0x1fa>
  chEvtBroadcastFlagsI(esp, flags);
 800227e:	2108      	movs	r1, #8
 8002280:	1d20      	adds	r0, r4, #4
 8002282:	f7ff fd85 	bl	8001d90 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8002286:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800228a:	ea0a 0303 	and.w	r3, sl, r3
 800228e:	60f3      	str	r3, [r6, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002294:	e7cc      	b.n	8002230 <sd_lld_serve_interrupt+0x230>
 8002296:	bf00      	nop
 8002298:	200009f0 	.word	0x200009f0
 800229c:	08005d08 	.word	0x08005d08
 80022a0:	08005d00 	.word	0x08005d00
 80022a4:	08005d18 	.word	0x08005d18
	...

080022b0 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 80022b0:	b508      	push	{r3, lr}
 * @api
 */
void chDbgCheckClassS(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <chSchGoSleepS+0x4c>)
 80022b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022b8:	b9ea      	cbnz	r2, 80022f6 <chSchGoSleepS+0x46>
 80022ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022be:	2a00      	cmp	r2, #0
 80022c0:	dd19      	ble.n	80022f6 <chSchGoSleepS+0x46>
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 80022c2:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 80022c4:	681a      	ldr	r2, [r3, #0]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 80022c6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  pqp->next       = p->next;
 80022ca:	6810      	ldr	r0, [r2, #0]
 80022cc:	6018      	str	r0, [r3, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 80022ce:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 80022d2:	6043      	str	r3, [r0, #4]
 80022d4:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 80022d8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80022da:	f3ef 8309 	mrs	r3, PSP
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 80022de:	6a08      	ldr	r0, [r1, #32]
 80022e0:	3b64      	subs	r3, #100	; 0x64
 80022e2:	4298      	cmp	r0, r3
 80022e4:	d804      	bhi.n	80022f0 <chSchGoSleepS+0x40>
}
 80022e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chSysSwitch(ntp, otp);
 80022ea:	4610      	mov	r0, r2
 80022ec:	f7fe b80a 	b.w	8000304 <__port_switch>
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <chSchGoSleepS+0x50>)
 80022f2:	f7fe fddd 	bl	8000eb0 <chSysHalt>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 80022f6:	4803      	ldr	r0, [pc, #12]	; (8002304 <chSchGoSleepS+0x54>)
 80022f8:	f7fe fdda 	bl	8000eb0 <chSysHalt>
 80022fc:	200009f0 	.word	0x200009f0
 8002300:	08005d28 	.word	0x08005d28
 8002304:	08005d20 	.word	0x08005d20
	...

08002310 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002314:	4d45      	ldr	r5, [pc, #276]	; (800242c <chSchGoSleepTimeoutS+0x11c>)
 8002316:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800231a:	b088      	sub	sp, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d15e      	bne.n	80023de <chSchGoSleepTimeoutS+0xce>
 8002320:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
 8002324:	2c00      	cmp	r4, #0
 8002326:	dd5a      	ble.n	80023de <chSchGoSleepTimeoutS+0xce>
  thread_t *tp = __instance_get_currthread(currcore);

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8002328:	1c4c      	adds	r4, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 800232a:	68ef      	ldr	r7, [r5, #12]
  if (TIME_INFINITE != timeout) {
 800232c:	460a      	mov	r2, r1
 800232e:	d04d      	beq.n	80023cc <chSchGoSleepTimeoutS+0xbc>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8002330:	2900      	cmp	r1, #0
 8002332:	d051      	beq.n	80023d8 <chSchGoSleepTimeoutS+0xc8>

  /* Timer initialization.*/
  vtp->par     = par;
 8002334:	e9cd 7306 	strd	r7, r3, [sp, #24]
 8002338:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <chSchGoSleepTimeoutS+0x120>)
  return (bool)(dlhp == dlhp->next);
 800233a:	46a8      	mov	r8, r5
 800233c:	4606      	mov	r6, r0
 800233e:	6a58      	ldr	r0, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 8002340:	4b3c      	ldr	r3, [pc, #240]	; (8002434 <chSchGoSleepTimeoutS+0x124>)
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	f858 3f10 	ldr.w	r3, [r8, #16]!
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8002348:	4543      	cmp	r3, r8
 800234a:	b280      	uxth	r0, r0
 800234c:	d064      	beq.n	8002418 <chSchGoSleepTimeoutS+0x108>
  return (sysinterval_t)((systime_t)(end - start));
 800234e:	8bac      	ldrh	r4, [r5, #28]
    if (delta < vtlp->dlist.next->delta) {
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	1b04      	subs	r4, r0, r4
 8002354:	b2a4      	uxth	r4, r4
    if (delta < nowdelta) {
 8002356:	190c      	adds	r4, r1, r4
 8002358:	bf28      	it	cs
 800235a:	460c      	movcs	r4, r1
    if (delta < vtlp->dlist.next->delta) {
 800235c:	42a2      	cmp	r2, r4
 800235e:	d908      	bls.n	8002372 <chSchGoSleepTimeoutS+0x62>
 8002360:	9301      	str	r3, [sp, #4]
      vt_set_alarm(now, delay);
 8002362:	f7ff fc85 	bl	8001c70 <vt_set_alarm>
 8002366:	9b01      	ldr	r3, [sp, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
 800236a:	e002      	b.n	8002372 <chSchGoSleepTimeoutS+0x62>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 800236c:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800236e:	1aa4      	subs	r4, r4, r2
  while (likely(dlp->delta < delta)) {
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	42a2      	cmp	r2, r4
 8002374:	d3fa      	bcc.n	800236c <chSchGoSleepTimeoutS+0x5c>
  dlp->delta      = delta;
 8002376:	9404      	str	r4, [sp, #16]

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8002378:	689a      	ldr	r2, [r3, #8]
  dlp->prev       = dlp->next->prev;
 800237a:	6859      	ldr	r1, [r3, #4]
  dlp->next       = dlhp;
 800237c:	9302      	str	r3, [sp, #8]
  dlp->delta -= delta;
 800237e:	1b12      	subs	r2, r2, r4
  dlp->prev->next = dlp;
 8002380:	ac02      	add	r4, sp, #8
  dlp->prev       = dlp->next->prev;
 8002382:	9103      	str	r1, [sp, #12]
  dlp->prev->next = dlp;
 8002384:	600c      	str	r4, [r1, #0]
  dlhp->prev      = dlp;
 8002386:	e9c3 4201 	strd	r4, r2, [r3, #4]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	61ab      	str	r3, [r5, #24]
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
 8002390:	4630      	mov	r0, r6
 8002392:	f7ff ff8d 	bl	80022b0 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002396:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800239a:	2b00      	cmp	r3, #0
 800239c:	db22      	blt.n	80023e4 <chSchGoSleepTimeoutS+0xd4>
 800239e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	dd1e      	ble.n	80023e4 <chSchGoSleepTimeoutS+0xd4>
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 80023a6:	9b02      	ldr	r3, [sp, #8]
    if (chVTIsArmedI(&vt)) {
 80023a8:	b163      	cbz	r3, 80023c4 <chSchGoSleepTimeoutS+0xb4>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 80023aa:	692a      	ldr	r2, [r5, #16]
 80023ac:	42a2      	cmp	r2, r4
 80023ae:	d01c      	beq.n	80023ea <chSchGoSleepTimeoutS+0xda>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 80023b0:	e9dd 1003 	ldrd	r1, r0, [sp, #12]

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	4402      	add	r2, r0
 80023ba:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	61ab      	str	r3, [r5, #24]
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 80023c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c6:	b008      	add	sp, #32
 80023c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchGoSleepS(newstate);
 80023cc:	f7ff ff70 	bl	80022b0 <chSchGoSleepS>
}
 80023d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d2:	b008      	add	sp, #32
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80023d8:	4817      	ldr	r0, [pc, #92]	; (8002438 <chSchGoSleepTimeoutS+0x128>)
 80023da:	f7fe fd69 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#11");
 80023de:	4817      	ldr	r0, [pc, #92]	; (800243c <chSchGoSleepTimeoutS+0x12c>)
 80023e0:	f7fe fd66 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#10");
 80023e4:	4816      	ldr	r0, [pc, #88]	; (8002440 <chSchGoSleepTimeoutS+0x130>)
 80023e6:	f7fe fd63 	bl	8000eb0 <chSysHalt>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 80023ea:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80023ec:	4543      	cmp	r3, r8
  dlhp->next       = dlp->next;
 80023ee:	612b      	str	r3, [r5, #16]
  vtp->dlist.next = NULL;
 80023f0:	9202      	str	r2, [sp, #8]
  dlhp->next->prev = dlhp;
 80023f2:	f8c3 8004 	str.w	r8, [r3, #4]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80023f6:	d015      	beq.n	8002424 <chSchGoSleepTimeoutS+0x114>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	9804      	ldr	r0, [sp, #16]
 80023fc:	8baa      	ldrh	r2, [r5, #28]
 80023fe:	4401      	add	r1, r0
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <chSchGoSleepTimeoutS+0x120>)
 8002402:	6099      	str	r1, [r3, #8]
 8002404:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002406:	b280      	uxth	r0, r0
 8002408:	1a83      	subs	r3, r0, r2
 800240a:	b29b      	uxth	r3, r3
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 800240c:	4299      	cmp	r1, r3
 800240e:	d9d9      	bls.n	80023c4 <chSchGoSleepTimeoutS+0xb4>

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 8002410:	1ac9      	subs	r1, r1, r3
 8002412:	f7ff fc2d 	bl	8001c70 <vt_set_alarm>
 8002416:	e7d5      	b.n	80023c4 <chSchGoSleepTimeoutS+0xb4>
      vt_insert_first(vtlp, vtp, now, delay);
 8002418:	ac02      	add	r4, sp, #8
 800241a:	4601      	mov	r1, r0
 800241c:	4620      	mov	r0, r4
 800241e:	f7ff fd7f 	bl	8001f20 <vt_insert_first.constprop.0>
      return;
 8002422:	e7b5      	b.n	8002390 <chSchGoSleepTimeoutS+0x80>
  STM32_ST_TIM->DIER = 0U;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <chSchGoSleepTimeoutS+0x120>)
 8002426:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8002428:	e7cc      	b.n	80023c4 <chSchGoSleepTimeoutS+0xb4>
 800242a:	bf00      	nop
 800242c:	200009f0 	.word	0x200009f0
 8002430:	40014800 	.word	0x40014800
 8002434:	08001ce1 	.word	0x08001ce1
 8002438:	08005e64 	.word	0x08005e64
 800243c:	08005d20 	.word	0x08005d20
 8002440:	08005d08 	.word	0x08005d08
	...

08002450 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002454:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 8002456:	f8d0 b01c 	ldr.w	fp, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 800245a:	9302      	str	r3, [sp, #8]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800245c:	2a00      	cmp	r2, #0
 800245e:	f000 8081 	beq.w	8002564 <oqWriteTimeout+0x114>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002462:	4691      	mov	r9, r2
 8002464:	4688      	mov	r8, r1
 8002466:	2230      	movs	r2, #48	; 0x30
 8002468:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800246c:	4e3f      	ldr	r6, [pc, #252]	; (800256c <oqWriteTimeout+0x11c>)
 800246e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8002472:	430b      	orrs	r3, r1
 8002474:	d170      	bne.n	8002558 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002476:	2301      	movs	r3, #1
 8002478:	4604      	mov	r4, r0
 800247a:	9201      	str	r2, [sp, #4]
 800247c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8002480:	46ca      	mov	sl, r9
  if (n > oqGetEmptyI(oqp)) {
 8002482:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002484:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8002488:	4553      	cmp	r3, sl
    n = oqGetEmptyI(oqp);
 800248a:	bf34      	ite	cc
 800248c:	68a5      	ldrcc	r5, [r4, #8]
 800248e:	4655      	movcs	r5, sl
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002490:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8002492:	42af      	cmp	r7, r5
 8002494:	d859      	bhi.n	800254a <oqWriteTimeout+0xfa>
  else if (n > s1) {
 8002496:	d243      	bcs.n	8002520 <oqWriteTimeout+0xd0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002498:	463a      	mov	r2, r7
 800249a:	4641      	mov	r1, r8
 800249c:	f7fd ff52 	bl	8000344 <memcpy>
    s2 = n - s1;
 80024a0:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80024a2:	68e0      	ldr	r0, [r4, #12]
 80024a4:	9203      	str	r2, [sp, #12]
 80024a6:	eb08 0107 	add.w	r1, r8, r7
 80024aa:	f7fd ff4b 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80024ae:	68e3      	ldr	r3, [r4, #12]
 80024b0:	9a03      	ldr	r2, [sp, #12]
 80024b2:	441a      	add	r2, r3
  oqp->q_counter -= n;
 80024b4:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr += n;
 80024b6:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80024b8:	1b5b      	subs	r3, r3, r5
 80024ba:	60a3      	str	r3, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80024bc:	b3b5      	cbz	r5, 800252c <oqWriteTimeout+0xdc>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80024be:	f1bb 0f00 	cmp.w	fp, #0
 80024c2:	d001      	beq.n	80024c8 <oqWriteTimeout+0x78>
        nfy(oqp);
 80024c4:	4620      	mov	r0, r4
 80024c6:	47d8      	blx	fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80024c8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d146      	bne.n	800255e <oqWriteTimeout+0x10e>
 80024d0:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 80024d4:	2a00      	cmp	r2, #0
 80024d6:	dd42      	ble.n	800255e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 80024d8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	9b01      	ldr	r3, [sp, #4]
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80024e2:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 80024e6:	44a8      	add	r8, r5
 80024e8:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80024ec:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 80024f0:	4313      	orrs	r3, r2
 80024f2:	d131      	bne.n	8002558 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 80024fa:	f1ba 0f00 	cmp.w	sl, #0
 80024fe:	d1c0      	bne.n	8002482 <oqWriteTimeout+0x32>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002500:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8002504:	bb5a      	cbnz	r2, 800255e <oqWriteTimeout+0x10e>
 8002506:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800250a:	2900      	cmp	r1, #0
 800250c:	dd27      	ble.n	800255e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 800250e:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002512:	f382 8811 	msr	BASEPRI, r2
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002516:	eba9 000a 	sub.w	r0, r9, sl
 800251a:	b005      	add	sp, #20
 800251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002520:	462a      	mov	r2, r5
 8002522:	4641      	mov	r1, r8
 8002524:	f7fd ff0e 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002528:	68e2      	ldr	r2, [r4, #12]
 800252a:	e7c3      	b.n	80024b4 <oqWriteTimeout+0x64>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800252c:	9902      	ldr	r1, [sp, #8]
  return __sch_get_currthread();
 800252e:	68f3      	ldr	r3, [r6, #12]
 8002530:	2900      	cmp	r1, #0
 8002532:	d0e5      	beq.n	8002500 <oqWriteTimeout+0xb0>
  p->prev       = qp->prev;
 8002534:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 8002536:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 8002538:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800253a:	2004      	movs	r0, #4
  p->prev->next = p;
 800253c:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800253e:	6063      	str	r3, [r4, #4]
 8002540:	f7ff fee6 	bl	8002310 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002544:	2800      	cmp	r0, #0
 8002546:	d09c      	beq.n	8002482 <oqWriteTimeout+0x32>
 8002548:	e7da      	b.n	8002500 <oqWriteTimeout+0xb0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800254a:	462a      	mov	r2, r5
 800254c:	4641      	mov	r1, r8
 800254e:	f7fd fef9 	bl	8000344 <memcpy>
    oqp->q_wrptr += n;
 8002552:	6962      	ldr	r2, [r4, #20]
 8002554:	442a      	add	r2, r5
 8002556:	e7ad      	b.n	80024b4 <oqWriteTimeout+0x64>
    chSysHalt("SV#4");
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <oqWriteTimeout+0x120>)
 800255a:	f7fe fca9 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <oqWriteTimeout+0x124>)
 8002560:	f7fe fca6 	bl	8000eb0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8002564:	4804      	ldr	r0, [pc, #16]	; (8002578 <oqWriteTimeout+0x128>)
 8002566:	f7fe fca3 	bl	8000eb0 <chSysHalt>
 800256a:	bf00      	nop
 800256c:	200009f0 	.word	0x200009f0
 8002570:	08005d10 	.word	0x08005d10
 8002574:	08005d38 	.word	0x08005d38
 8002578:	08005e00 	.word	0x08005e00
 800257c:	00000000 	.word	0x00000000

08002580 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	3030      	adds	r0, #48	; 0x30
 8002586:	f7ff bf63 	b.w	8002450 <oqWriteTimeout>
 800258a:	bf00      	nop
 800258c:	0000      	movs	r0, r0
	...

08002590 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002590:	3030      	adds	r0, #48	; 0x30
 8002592:	f7ff bf5d 	b.w	8002450 <oqWriteTimeout>
 8002596:	bf00      	nop
	...

080025a0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	2330      	movs	r3, #48	; 0x30
 80025a4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80025a8:	4e26      	ldr	r6, [pc, #152]	; (8002644 <iqGetTimeout+0xa4>)
 80025aa:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 80025ae:	4313      	orrs	r3, r2
 80025b0:	d144      	bne.n	800263c <iqGetTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	4604      	mov	r4, r0
 80025b6:	460d      	mov	r5, r1
 80025b8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
}
 80025bc:	e00a      	b.n	80025d4 <iqGetTimeout+0x34>
  p->prev       = qp->prev;
 80025be:	6862      	ldr	r2, [r4, #4]
 80025c0:	4629      	mov	r1, r5
 80025c2:	e9c3 4200 	strd	r4, r2, [r3]
 80025c6:	2004      	movs	r0, #4
  p->prev->next = p;
 80025c8:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80025ca:	6063      	str	r3, [r4, #4]
 80025cc:	f7ff fea0 	bl	8002310 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80025d0:	2800      	cmp	r0, #0
 80025d2:	db06      	blt.n	80025e2 <iqGetTimeout+0x42>
  while (iqIsEmptyI(iqp)) {
 80025d4:	68a3      	ldr	r3, [r4, #8]
 80025d6:	b983      	cbnz	r3, 80025fa <iqGetTimeout+0x5a>
 80025d8:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80025da:	2d00      	cmp	r5, #0
 80025dc:	d1ef      	bne.n	80025be <iqGetTimeout+0x1e>
    return MSG_TIMEOUT;
 80025de:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80025e2:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80025e6:	bb33      	cbnz	r3, 8002636 <iqGetTimeout+0x96>
 80025e8:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	dd22      	ble.n	8002636 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80025f0:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80025f4:	f383 8811 	msr	BASEPRI, r3
}
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 80025fa:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80025fc:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 80025fe:	3b01      	subs	r3, #1
 8002600:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8002602:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8002604:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8002606:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8002608:	bf28      	it	cs
 800260a:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800260c:	61a2      	str	r2, [r4, #24]
 800260e:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8002610:	bf28      	it	cs
 8002612:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8002614:	69e3      	ldr	r3, [r4, #28]
 8002616:	b10b      	cbz	r3, 800261c <iqGetTimeout+0x7c>
    iqp->q_notify(iqp);
 8002618:	4620      	mov	r0, r4
 800261a:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800261c:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8002620:	b94b      	cbnz	r3, 8002636 <iqGetTimeout+0x96>
 8002622:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8002626:	2a00      	cmp	r2, #0
 8002628:	dd05      	ble.n	8002636 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 800262a:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800262e:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8002632:	4628      	mov	r0, r5
}
 8002634:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 8002636:	4804      	ldr	r0, [pc, #16]	; (8002648 <iqGetTimeout+0xa8>)
 8002638:	f7fe fc3a 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#4");
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <iqGetTimeout+0xac>)
 800263e:	f7fe fc37 	bl	8000eb0 <chSysHalt>
 8002642:	bf00      	nop
 8002644:	200009f0 	.word	0x200009f0
 8002648:	08005d38 	.word	0x08005d38
 800264c:	08005d10 	.word	0x08005d10

08002650 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	300c      	adds	r0, #12
 8002656:	f7ff bfa3 	b.w	80025a0 <iqGetTimeout>
 800265a:	bf00      	nop
 800265c:	0000      	movs	r0, r0
	...

08002660 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002660:	300c      	adds	r0, #12
 8002662:	f7ff bf9d 	b.w	80025a0 <iqGetTimeout>
 8002666:	bf00      	nop
	...

08002670 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qnotify_t nfy = iqp->q_notify;
 8002674:	f8d0 a01c 	ldr.w	sl, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8002678:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 800267a:	2a00      	cmp	r2, #0
 800267c:	f000 8089 	beq.w	8002792 <iqReadTimeout+0x122>
 8002680:	4690      	mov	r8, r2
 8002682:	460f      	mov	r7, r1
 8002684:	4699      	mov	r9, r3
 8002686:	2230      	movs	r2, #48	; 0x30
 8002688:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800268c:	4e42      	ldr	r6, [pc, #264]	; (8002798 <iqReadTimeout+0x128>)
 800268e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8002692:	430b      	orrs	r3, r1
 8002694:	d177      	bne.n	8002786 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002696:	2301      	movs	r3, #1
 8002698:	46c3      	mov	fp, r8
 800269a:	f8cd 800c 	str.w	r8, [sp, #12]
 800269e:	4604      	mov	r4, r0
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80026a6:	46b8      	mov	r8, r7
  if (n > iqGetFullI(iqp)) {
 80026a8:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80026aa:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 80026ac:	455a      	cmp	r2, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80026ae:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80026b0:	bf34      	ite	cc
 80026b2:	68a5      	ldrcc	r5, [r4, #8]
 80026b4:	465d      	movcs	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80026b6:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 80026b8:	42aa      	cmp	r2, r5
 80026ba:	d85d      	bhi.n	8002778 <iqReadTimeout+0x108>
  else if (n > s1) {
 80026bc:	d246      	bcs.n	800274c <iqReadTimeout+0xdc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80026be:	4640      	mov	r0, r8
    s2 = n - s1;
 80026c0:	1aaf      	subs	r7, r5, r2
 80026c2:	9202      	str	r2, [sp, #8]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80026c4:	f7fd fe3e 	bl	8000344 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80026c8:	9a02      	ldr	r2, [sp, #8]
 80026ca:	68e1      	ldr	r1, [r4, #12]
 80026cc:	eb08 0002 	add.w	r0, r8, r2
 80026d0:	463a      	mov	r2, r7
 80026d2:	f7fd fe37 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80026d6:	68e2      	ldr	r2, [r4, #12]
 80026d8:	443a      	add	r2, r7
    iqp->q_rdptr += n;
 80026da:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80026dc:	68a2      	ldr	r2, [r4, #8]
 80026de:	1b52      	subs	r2, r2, r5
 80026e0:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 80026e2:	2d00      	cmp	r5, #0
 80026e4:	d038      	beq.n	8002758 <iqReadTimeout+0xe8>
      if (nfy != NULL) {
 80026e6:	f1ba 0f00 	cmp.w	sl, #0
 80026ea:	d001      	beq.n	80026f0 <iqReadTimeout+0x80>
        nfy(iqp);
 80026ec:	4620      	mov	r0, r4
 80026ee:	47d0      	blx	sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80026f0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80026f4:	2a00      	cmp	r2, #0
 80026f6:	d149      	bne.n	800278c <iqReadTimeout+0x11c>
 80026f8:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80026fc:	2900      	cmp	r1, #0
 80026fe:	dd45      	ble.n	800278c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002700:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002704:	f382 8811 	msr	BASEPRI, r2
 8002708:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 800270a:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 800270e:	44a8      	add	r8, r5
 8002710:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002714:	e9d6 2122 	ldrd	r2, r1, [r6, #136]	; 0x88
 8002718:	430a      	orrs	r2, r1
 800271a:	d134      	bne.n	8002786 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 800271c:	2301      	movs	r3, #1
 800271e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 8002722:	f1bb 0f00 	cmp.w	fp, #0
 8002726:	d1bf      	bne.n	80026a8 <iqReadTimeout+0x38>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002728:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800272c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002730:	bb62      	cbnz	r2, 800278c <iqReadTimeout+0x11c>
 8002732:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002736:	2900      	cmp	r1, #0
 8002738:	dd28      	ble.n	800278c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 800273a:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 800273e:	f382 8811 	msr	BASEPRI, r2
}
 8002742:	eba8 000b 	sub.w	r0, r8, fp
 8002746:	b005      	add	sp, #20
 8002748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800274c:	462a      	mov	r2, r5
 800274e:	4640      	mov	r0, r8
 8002750:	f7fd fdf8 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002754:	68e2      	ldr	r2, [r4, #12]
 8002756:	e7c0      	b.n	80026da <iqReadTimeout+0x6a>
 8002758:	68f2      	ldr	r2, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800275a:	f1b9 0f00 	cmp.w	r9, #0
 800275e:	d0e3      	beq.n	8002728 <iqReadTimeout+0xb8>
  p->prev       = qp->prev;
 8002760:	6861      	ldr	r1, [r4, #4]
 8002762:	6051      	str	r1, [r2, #4]
  p->next       = qp;
 8002764:	6014      	str	r4, [r2, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002766:	2004      	movs	r0, #4
  p->prev->next = p;
 8002768:	600a      	str	r2, [r1, #0]
  qp->prev      = p;
 800276a:	6062      	str	r2, [r4, #4]
 800276c:	4649      	mov	r1, r9
 800276e:	f7ff fdcf 	bl	8002310 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002772:	2800      	cmp	r0, #0
 8002774:	d098      	beq.n	80026a8 <iqReadTimeout+0x38>
 8002776:	e7d7      	b.n	8002728 <iqReadTimeout+0xb8>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002778:	462a      	mov	r2, r5
 800277a:	4640      	mov	r0, r8
 800277c:	f7fd fde2 	bl	8000344 <memcpy>
    iqp->q_rdptr += n;
 8002780:	69a2      	ldr	r2, [r4, #24]
 8002782:	442a      	add	r2, r5
 8002784:	e7a9      	b.n	80026da <iqReadTimeout+0x6a>
    chSysHalt("SV#4");
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <iqReadTimeout+0x12c>)
 8002788:	f7fe fb92 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <iqReadTimeout+0x130>)
 800278e:	f7fe fb8f 	bl	8000eb0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8002792:	4804      	ldr	r0, [pc, #16]	; (80027a4 <iqReadTimeout+0x134>)
 8002794:	f7fe fb8c 	bl	8000eb0 <chSysHalt>
 8002798:	200009f0 	.word	0x200009f0
 800279c:	08005d10 	.word	0x08005d10
 80027a0:	08005d38 	.word	0x08005d38
 80027a4:	08005e48 	.word	0x08005e48
	...

080027b0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	300c      	adds	r0, #12
 80027b6:	f7ff bf5b 	b.w	8002670 <iqReadTimeout>
 80027ba:	bf00      	nop
 80027bc:	0000      	movs	r0, r0
	...

080027c0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80027c0:	300c      	adds	r0, #12
 80027c2:	f7ff bf55 	b.w	8002670 <iqReadTimeout>
 80027c6:	bf00      	nop
	...

080027d0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	4615      	mov	r5, r2
 80027d4:	2330      	movs	r3, #48	; 0x30
 80027d6:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80027da:	4f26      	ldr	r7, [pc, #152]	; (8002874 <oqPutTimeout+0xa4>)
 80027dc:	e9d7 3222 	ldrd	r3, r2, [r7, #136]	; 0x88
 80027e0:	4313      	orrs	r3, r2
 80027e2:	d143      	bne.n	800286c <oqPutTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80027e4:	2301      	movs	r3, #1
 80027e6:	4604      	mov	r4, r0
 80027e8:	460e      	mov	r6, r1
 80027ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
}
 80027ee:	e00a      	b.n	8002806 <oqPutTimeout+0x36>
  p->prev       = qp->prev;
 80027f0:	6860      	ldr	r0, [r4, #4]
 80027f2:	4629      	mov	r1, r5
 80027f4:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 80027f8:	6003      	str	r3, [r0, #0]
 80027fa:	2004      	movs	r0, #4
  qp->prev      = p;
 80027fc:	6063      	str	r3, [r4, #4]
 80027fe:	f7ff fd87 	bl	8002310 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002802:	2800      	cmp	r0, #0
 8002804:	db06      	blt.n	8002814 <oqPutTimeout+0x44>
  while (oqIsFullI(oqp)) {
 8002806:	68a3      	ldr	r3, [r4, #8]
 8002808:	b983      	cbnz	r3, 800282c <oqPutTimeout+0x5c>
 800280a:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800280c:	2d00      	cmp	r5, #0
 800280e:	d1ef      	bne.n	80027f0 <oqPutTimeout+0x20>
    return MSG_TIMEOUT;
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002818:	bb2b      	cbnz	r3, 8002866 <oqPutTimeout+0x96>
 800281a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800281e:	2a00      	cmp	r2, #0
 8002820:	dd21      	ble.n	8002866 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002826:	f383 8811 	msr	BASEPRI, r3
}
 800282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  oqp->q_counter--;
 800282c:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800282e:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8002830:	3b01      	subs	r3, #1
 8002832:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002834:	1c53      	adds	r3, r2, #1
 8002836:	6163      	str	r3, [r4, #20]
 8002838:	7016      	strb	r6, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800283a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800283e:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002840:	bf24      	itt	cs
 8002842:	68e3      	ldrcs	r3, [r4, #12]
 8002844:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8002846:	69e3      	ldr	r3, [r4, #28]
 8002848:	b10b      	cbz	r3, 800284e <oqPutTimeout+0x7e>
    oqp->q_notify(oqp);
 800284a:	4620      	mov	r0, r4
 800284c:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800284e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002852:	b940      	cbnz	r0, 8002866 <oqPutTimeout+0x96>
 8002854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002858:	2b00      	cmp	r3, #0
 800285a:	dd04      	ble.n	8002866 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 800285c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8002860:	f380 8811 	msr	BASEPRI, r0
}
 8002864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 8002866:	4804      	ldr	r0, [pc, #16]	; (8002878 <oqPutTimeout+0xa8>)
 8002868:	f7fe fb22 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#4");
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <oqPutTimeout+0xac>)
 800286e:	f7fe fb1f 	bl	8000eb0 <chSysHalt>
 8002872:	bf00      	nop
 8002874:	200009f0 	.word	0x200009f0
 8002878:	08005d38 	.word	0x08005d38
 800287c:	08005d10 	.word	0x08005d10

08002880 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	3030      	adds	r0, #48	; 0x30
 8002886:	f7ff bfa3 	b.w	80027d0 <oqPutTimeout>
 800288a:	bf00      	nop
 800288c:	0000      	movs	r0, r0
	...

08002890 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002890:	3030      	adds	r0, #48	; 0x30
 8002892:	f7ff bf9d 	b.w	80027d0 <oqPutTimeout>
 8002896:	bf00      	nop
	...

080028a0 <_out_char>:
  if (character) {
 80028a0:	4601      	mov	r1, r0
 80028a2:	b900      	cbnz	r0, 80028a6 <_out_char+0x6>
}
 80028a4:	4770      	bx	lr
    chMtxUnlock(&mutex_bsp2);
    return formatted_bytes;
}

void _putchar(char character){
  sdPut(&SD2, character);
 80028a6:	4802      	ldr	r0, [pc, #8]	; (80028b0 <_out_char+0x10>)
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	f7ff bf90 	b.w	80027d0 <oqPutTimeout>
 80028b0:	20000964 	.word	0x20000964
	...

080028c0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80028c0:	b510      	push	{r4, lr}
 80028c2:	2330      	movs	r3, #48	; 0x30
 80028c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80028c8:	4c10      	ldr	r4, [pc, #64]	; (800290c <chThdSleep+0x4c>)
 80028ca:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80028ce:	4313      	orrs	r3, r2
 80028d0:	d113      	bne.n	80028fa <chThdSleep+0x3a>
  oip->dbg.lock_cnt = (cnt_t)1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	4601      	mov	r1, r0
 80028d6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 80028da:	b1a0      	cbz	r0, 8002906 <chThdSleep+0x46>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80028dc:	2008      	movs	r0, #8
 80028de:	f7ff fd17 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80028e2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80028e6:	b95b      	cbnz	r3, 8002900 <chThdSleep+0x40>
 80028e8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80028ec:	2a00      	cmp	r2, #0
 80028ee:	dd07      	ble.n	8002900 <chThdSleep+0x40>
  oip->dbg.lock_cnt = (cnt_t)0;
 80028f0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80028f4:	f383 8811 	msr	BASEPRI, r3
}
 80028f8:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <chThdSleep+0x50>)
 80028fc:	f7fe fad8 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <chThdSleep+0x54>)
 8002902:	f7fe fad5 	bl	8000eb0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8002906:	4804      	ldr	r0, [pc, #16]	; (8002918 <chThdSleep+0x58>)
 8002908:	f7fe fad2 	bl	8000eb0 <chSysHalt>
 800290c:	200009f0 	.word	0x200009f0
 8002910:	08005d10 	.word	0x08005d10
 8002914:	08005d38 	.word	0x08005d38
 8002918:	08005e1c 	.word	0x08005e1c
 800291c:	00000000 	.word	0x00000000

08002920 <adf_write_reg>:
 *
 * @api
 */
//void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {

void adf_write_reg(uint32_t data){
 8002920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    spiSend(&SPID2, 1, &temp);
  }
  spiUnselect(&SPID2);            // Slave Select deassertion.
  */

  palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002924:	4c94      	ldr	r4, [pc, #592]	; (8002b78 <adf_write_reg+0x258>)
 8002926:	4d95      	ldr	r5, [pc, #596]	; (8002b7c <adf_write_reg+0x25c>)
 8002928:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 800292c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  //myprintf("Bitbang adf_write_reg: 0x%08X\n", data);
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 8002930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002934:	8366      	strh	r6, [r4, #26]
void adf_write_reg(uint32_t data){
 8002936:	4607      	mov	r7, r0
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 8002938:	8362      	strh	r2, [r4, #26]
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 800293a:	f04f 0a18 	mov.w	sl, #24
 800293e:	8363      	strh	r3, [r4, #26]
 8002940:	f04f 0830 	mov.w	r8, #48	; 0x30
   for(int i=3; i>=0; --i){
     uint8_t temp = data >> (i * 8);
 8002944:	fa27 f90a 	lsr.w	r9, r7, sl
     //myprintf("adf_write_ byte: 0x%X\n",temp);

     //MSB first
     if(temp&0x80)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002948:	f019 0f80 	tst.w	r9, #128	; 0x80
 800294c:	bf14      	ite	ne
 800294e:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002950:	8366      	strheq	r6, [r4, #26]
 8002952:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002956:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 800295a:	4313      	orrs	r3, r2
 800295c:	f040 8105 	bne.w	8002b6a <adf_write_reg+0x24a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002960:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002962:	210a      	movs	r1, #10
 8002964:	2008      	movs	r0, #8
 8002966:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800296a:	f7ff fcd1 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800296e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 80fc 	bne.w	8002b70 <adf_write_reg+0x250>
 8002978:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800297c:	2a00      	cmp	r2, #0
 800297e:	f340 80f7 	ble.w	8002b70 <adf_write_reg+0x250>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002982:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002986:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 800298a:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 800298e:	f8a4 b018 	strh.w	fp, [r4, #24]
     chThdSleepMilliseconds(1);
 8002992:	200a      	movs	r0, #10
 8002994:	f7ff ff94 	bl	80028c0 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002998:	f019 0f40 	tst.w	r9, #64	; 0x40
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 800299c:	f8a4 b01a 	strh.w	fp, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 80029a0:	f04f 000a 	mov.w	r0, #10
     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80029a4:	fa5f fb89 	uxtb.w	fp, r9
 80029a8:	bf14      	ite	ne
 80029aa:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 80029ac:	8366      	strheq	r6, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 80029ae:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 80029b2:	f7ff ff85 	bl	80028c0 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 80029b6:	f8a4 9018 	strh.w	r9, [r4, #24]
 80029ba:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80029be:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f040 80d1 	bne.w	8002b6a <adf_write_reg+0x24a>
  oip->dbg.lock_cnt = (cnt_t)1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	210a      	movs	r1, #10
 80029cc:	2008      	movs	r0, #8
 80029ce:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80029d2:	f7ff fc9d 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80029d6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 80c8 	bne.w	8002b70 <adf_write_reg+0x250>
 80029e0:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	f340 80c3 	ble.w	8002b70 <adf_write_reg+0x250>
  oip->dbg.lock_cnt = (cnt_t)0;
 80029ea:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80029ee:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80029f2:	f01b 0f20 	tst.w	fp, #32
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 80029f6:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 80029fa:	f04f 000a 	mov.w	r0, #10
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80029fe:	bf14      	ite	ne
 8002a00:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002a02:	8366      	strheq	r6, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002a04:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8002a08:	f7ff ff5a 	bl	80028c0 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002a0c:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8002a10:	200a      	movs	r0, #10
 8002a12:	f7ff ff55 	bl	80028c0 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x10)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002a16:	f01b 0f10 	tst.w	fp, #16
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8002a1a:	f8a4 901a 	strh.w	r9, [r4, #26]
     if(temp&0x10)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002a1e:	bf14      	ite	ne
 8002a20:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002a22:	8366      	strheq	r6, [r4, #26]
 8002a24:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002a28:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f040 809c 	bne.w	8002b6a <adf_write_reg+0x24a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	210a      	movs	r1, #10
 8002a36:	2008      	movs	r0, #8
 8002a38:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002a3c:	f7ff fc68 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002a40:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 8093 	bne.w	8002b70 <adf_write_reg+0x250>
 8002a4a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	f340 808e 	ble.w	8002b70 <adf_write_reg+0x250>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002a54:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002a58:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002a5c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 8002a60:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8002a64:	200a      	movs	r0, #10
 8002a66:	f7ff ff2b 	bl	80028c0 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002a6a:	f01b 0f08 	tst.w	fp, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8002a6e:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8002a72:	f04f 000a 	mov.w	r0, #10
     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002a76:	bf14      	ite	ne
 8002a78:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002a7a:	8366      	strheq	r6, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002a7c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8002a80:	f7ff ff1e 	bl	80028c0 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002a84:	f8a4 9018 	strh.w	r9, [r4, #24]
 8002a88:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002a8c:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8002a90:	4313      	orrs	r3, r2
 8002a92:	d16a      	bne.n	8002b6a <adf_write_reg+0x24a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	210a      	movs	r1, #10
 8002a98:	2008      	movs	r0, #8
 8002a9a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002a9e:	f7ff fc37 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002aa2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d162      	bne.n	8002b70 <adf_write_reg+0x250>
 8002aaa:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8002aae:	2a00      	cmp	r2, #0
 8002ab0:	dd5e      	ble.n	8002b70 <adf_write_reg+0x250>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002ab2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002ab6:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002aba:	f01b 0f04 	tst.w	fp, #4
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8002abe:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8002ac2:	f04f 000a 	mov.w	r0, #10
     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002ac6:	bf14      	ite	ne
 8002ac8:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002aca:	8366      	strheq	r6, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002acc:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8002ad0:	f7ff fef6 	bl	80028c0 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002ad4:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8002ad8:	200a      	movs	r0, #10
 8002ada:	f7ff fef1 	bl	80028c0 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002ade:	f01b 0f02 	tst.w	fp, #2
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8002ae2:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8002ae6:	f04f 000a 	mov.w	r0, #10
     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002aea:	bf14      	ite	ne
 8002aec:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002aee:	8366      	strheq	r6, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002af0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8002af4:	f7ff fee4 	bl	80028c0 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002af8:	f8a4 9018 	strh.w	r9, [r4, #24]
 8002afc:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002b00:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8002b04:	4313      	orrs	r3, r2
 8002b06:	d130      	bne.n	8002b6a <adf_write_reg+0x24a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	210a      	movs	r1, #10
 8002b0c:	2008      	movs	r0, #8
 8002b0e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002b12:	f7ff fbfd 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002b16:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002b1a:	bb4b      	cbnz	r3, 8002b70 <adf_write_reg+0x250>
 8002b1c:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	dd25      	ble.n	8002b70 <adf_write_reg+0x250>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002b24:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002b28:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002b2c:	f01b 0f01 	tst.w	fp, #1
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8002b30:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8002b34:	f04f 000a 	mov.w	r0, #10
     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8002b38:	bf14      	ite	ne
 8002b3a:	8326      	strhne	r6, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8002b3c:	8366      	strheq	r6, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002b3e:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8002b42:	f7ff febd 	bl	80028c0 <chThdSleep>
   for(int i=3; i>=0; --i){
 8002b46:	f1aa 0a08 	sub.w	sl, sl, #8
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8002b4a:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8002b4e:	200a      	movs	r0, #10
 8002b50:	f7ff feb6 	bl	80028c0 <chThdSleep>
   for(int i=3; i>=0; --i){
 8002b54:	f11a 0f08 	cmn.w	sl, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8002b58:	f8a4 901a 	strh.w	r9, [r4, #26]
   for(int i=3; i>=0; --i){
 8002b5c:	f47f aef2 	bne.w	8002944 <adf_write_reg+0x24>
   }
   palSetPad(GPIOB, GPIOB_ADF_LE);             // Slave Select deassertion.
 8002b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b64:	8323      	strh	r3, [r4, #24]
}
 8002b66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chSysHalt("SV#4");
 8002b6a:	4805      	ldr	r0, [pc, #20]	; (8002b80 <adf_write_reg+0x260>)
 8002b6c:	f7fe f9a0 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <adf_write_reg+0x264>)
 8002b72:	f7fe f99d 	bl	8000eb0 <chSysHalt>
 8002b76:	bf00      	nop
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	200009f0 	.word	0x200009f0
 8002b80:	08005d10 	.word	0x08005d10
 8002b84:	08005d38 	.word	0x08005d38
	...

08002b90 <__port_irq_epilogue.part.0>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8002b90:	b410      	push	{r4}
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8002b92:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002b96:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8002b9a:	3b68      	subs	r3, #104	; 0x68

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8002b9c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 8002ba0:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <__port_irq_epilogue.part.0+0x38>)
    ectxp->xpsr = 0x01000000U;
 8002ba2:	61d9      	str	r1, [r3, #28]
    ectxp->fpscr = FPU->FPDSCR;
 8002ba4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002ba8:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__port_irq_epilogue.part.0+0x3c>)

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <__port_irq_epilogue.part.0+0x40>)
 8002bb0:	6808      	ldr	r0, [r1, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002bb2:	68c9      	ldr	r1, [r1, #12]
    if (chSchIsPreemptionRequired()) {
 8002bb4:	6884      	ldr	r4, [r0, #8]
 8002bb6:	6888      	ldr	r0, [r1, #8]
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002bb8:	4906      	ldr	r1, [pc, #24]	; (8002bd4 <__port_irq_epilogue.part.0+0x44>)
 8002bba:	4284      	cmp	r4, r0
 8002bbc:	bf88      	it	hi
 8002bbe:	460a      	movhi	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8002bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ef00 	.word	0xe000ef00
 8002bcc:	200009f0 	.word	0x200009f0
 8002bd0:	0800033e 	.word	0x0800033e
 8002bd4:	08000333 	.word	0x08000333
	...

08002be0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
	...

08002bf0 <__late_init>:
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
	...

08002c00 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8002c00:	e7fe      	b.n	8002c00 <__default_exit>
 8002c02:	bf00      	nop
	...

08002c10 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	4d15      	ldr	r5, [pc, #84]	; (8002c68 <__init_ram_areas+0x58>)
 8002c14:	4f15      	ldr	r7, [pc, #84]	; (8002c6c <__init_ram_areas+0x5c>)
 8002c16:	4916      	ldr	r1, [pc, #88]	; (8002c70 <__init_ram_areas+0x60>)
 8002c18:	4816      	ldr	r0, [pc, #88]	; (8002c74 <__init_ram_areas+0x64>)
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <__init_ram_areas+0x68>)
 8002c1c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8002c20:	4281      	cmp	r1, r0
 8002c22:	d90d      	bls.n	8002c40 <__init_ram_areas+0x30>
 8002c24:	3a04      	subs	r2, #4
 8002c26:	4603      	mov	r3, r0
      *p = *tp;
 8002c28:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8002c2c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8002c30:	4299      	cmp	r1, r3
 8002c32:	d8f9      	bhi.n	8002c28 <__init_ram_areas+0x18>
      p++;
 8002c34:	1e4b      	subs	r3, r1, #1
 8002c36:	1a1b      	subs	r3, r3, r0
 8002c38:	f023 0303 	bic.w	r3, r3, #3
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002c40:	4287      	cmp	r7, r0
 8002c42:	d907      	bls.n	8002c54 <__init_ram_areas+0x44>
      *p = 0;
 8002c44:	1e7a      	subs	r2, r7, #1
 8002c46:	1a12      	subs	r2, r2, r0
 8002c48:	f022 0203 	bic.w	r2, r2, #3
 8002c4c:	3204      	adds	r2, #4
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f002 fe74 	bl	800593c <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8002c54:	42a5      	cmp	r5, r4
 8002c56:	d005      	beq.n	8002c64 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8002c58:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 8002c5c:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8002c60:	3510      	adds	r5, #16
 8002c62:	e7dd      	b.n	8002c20 <__init_ram_areas+0x10>
#endif
}
 8002c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	08006000 	.word	0x08006000
 8002c6c:	20002128 	.word	0x20002128
 8002c70:	20002128 	.word	0x20002128
 8002c74:	20002128 	.word	0x20002128
 8002c78:	080060b4 	.word	0x080060b4
 8002c7c:	00000000 	.word	0x00000000

08002c80 <__dbg_check_unlock>:
void __dbg_check_unlock(void) {
 8002c80:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <__dbg_check_unlock+0x20>)
 8002c84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c88:	b932      	cbnz	r2, 8002c98 <__dbg_check_unlock+0x18>
 8002c8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002c8e:	2900      	cmp	r1, #0
 8002c90:	dd02      	ble.n	8002c98 <__dbg_check_unlock+0x18>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002c96:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <__dbg_check_unlock+0x24>)
 8002c9a:	f7fe f909 	bl	8000eb0 <chSysHalt>
 8002c9e:	bf00      	nop
 8002ca0:	200009f0 	.word	0x200009f0
 8002ca4:	08005d38 	.word	0x08005d38
	...

08002cb0 <__dbg_check_lock>:
void __dbg_check_lock(void) {
 8002cb0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <__dbg_check_lock+0x1c>)
 8002cb4:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	d103      	bne.n	8002cc4 <__dbg_check_lock+0x14>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002cc2:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <__dbg_check_lock+0x20>)
 8002cc6:	f7fe f8f3 	bl	8000eb0 <chSysHalt>
 8002cca:	bf00      	nop
 8002ccc:	200009f0 	.word	0x200009f0
 8002cd0:	08005d10 	.word	0x08005d10
	...

08002ce0 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	4606      	mov	r6, r0
 8002ce4:	460d      	mov	r5, r1
 8002ce6:	4614      	mov	r4, r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002ce8:	2330      	movs	r3, #48	; 0x30
 8002cea:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 8002cee:	f7ff ffdf 	bl	8002cb0 <__dbg_check_lock>
  tp = threadref(((uint8_t *)wsp + size -
 8002cf2:	f1a5 0c48 	sub.w	ip, r5, #72	; 0x48
 8002cf6:	eb06 030c 	add.w	r3, r6, ip
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002cfa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	2100      	movs	r1, #0
  tp->refs              = (trefs_t)1;
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002d08:	e943 4109 	strd	r4, r1, [r3, #-36]	; 0x24
  tp->epending          = (eventmask_t)0;
 8002d0c:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
  tp->name              = name;
 8002d10:	4a2d      	ldr	r2, [pc, #180]	; (8002dc8 <chThdCreateStatic.constprop.0.isra.0+0xe8>)
 8002d12:	61da      	str	r2, [r3, #28]
  tp->state             = CH_STATE_WTSTART;
 8002d14:	2102      	movs	r1, #2
  tp->owner             = oip;
 8002d16:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <chThdCreateStatic.constprop.0.isra.0+0xec>)
  tp->state             = CH_STATE_WTSTART;
 8002d18:	8499      	strh	r1, [r3, #36]	; 0x24
  tp->hdr.pqueue.prio   = prio;
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	6099      	str	r1, [r3, #8]
  p->prev       = qp->prev;
 8002d1e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002d20:	4f2b      	ldr	r7, [pc, #172]	; (8002dd0 <chThdCreateStatic.constprop.0.isra.0+0xf0>)
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002d22:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  tp->realprio          = prio;
 8002d26:	6419      	str	r1, [r3, #64]	; 0x40
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002d28:	f843 7c04 	str.w	r7, [r3, #-4]
  REG_INSERT(oip, tp);
 8002d2c:	f103 0010 	add.w	r0, r3, #16
  ch_queue_init(&tp->msgqueue);
 8002d30:	f103 0130 	add.w	r1, r3, #48	; 0x30
  p->next       = qp;
 8002d34:	f102 0728 	add.w	r7, r2, #40	; 0x28
  tp->wabase = (stkalign_t *)wsp;
 8002d38:	621e      	str	r6, [r3, #32]
  tp->owner             = oip;
 8002d3a:	619a      	str	r2, [r3, #24]
  p->prev       = qp->prev;
 8002d3c:	615c      	str	r4, [r3, #20]
  p->next       = qp;
 8002d3e:	611f      	str	r7, [r3, #16]
  p->prev->next = p;
 8002d40:	6020      	str	r0, [r4, #0]
  qp->prev = qp;
 8002d42:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
  ch_list_init(&tp->waiting);
 8002d46:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  qp->prev      = p;
 8002d4a:	62d0      	str	r0, [r2, #44]	; 0x2c
  lp->next = lp;
 8002d4c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d4e:	bb45      	cbnz	r5, 8002da2 <chThdCreateStatic.constprop.0.isra.0+0xc2>
 8002d50:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002d54:	2900      	cmp	r1, #0
 8002d56:	dd24      	ble.n	8002da2 <chThdCreateStatic.constprop.0.isra.0+0xc2>
  thread_t *otp = __instance_get_currthread(oip);
 8002d58:	68d1      	ldr	r1, [r2, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8002d5a:	6898      	ldr	r0, [r3, #8]
 8002d5c:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 8002d5e:	629d      	str	r5, [r3, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8002d60:	42a0      	cmp	r0, r4
 8002d62:	d924      	bls.n	8002dae <chThdCreateStatic.constprop.0.isra.0+0xce>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8002d64:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 8002d66:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
    pqp = pqp->next;
 8002d6a:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio > p->prio));
 8002d6c:	6885      	ldr	r5, [r0, #8]
 8002d6e:	42ac      	cmp	r4, r5
 8002d70:	d3fb      	bcc.n	8002d6a <chThdCreateStatic.constprop.0.isra.0+0x8a>
  p->prev       = pqp->prev;
 8002d72:	6844      	ldr	r4, [r0, #4]
 8002d74:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 8002d78:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 8002d7a:	2401      	movs	r4, #1
  pqp->prev     = p;
 8002d7c:	6041      	str	r1, [r0, #4]
 8002d7e:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8002d82:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002d84:	f3ef 8209 	mrs	r2, PSP
    chSysSwitch(ntp, otp);
 8002d88:	6a08      	ldr	r0, [r1, #32]
 8002d8a:	3a64      	subs	r2, #100	; 0x64
 8002d8c:	4290      	cmp	r0, r2
 8002d8e:	d80b      	bhi.n	8002da8 <chThdCreateStatic.constprop.0.isra.0+0xc8>
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fab7 	bl	8000304 <__port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  __dbg_check_unlock();
 8002d96:	f7ff ff73 	bl	8002c80 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f383 8811 	msr	BASEPRI, r3
}
 8002da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#11");
 8002da2:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <chThdCreateStatic.constprop.0.isra.0+0xf4>)
 8002da4:	f7fe f884 	bl	8000eb0 <chSysHalt>
 8002da8:	480b      	ldr	r0, [pc, #44]	; (8002dd8 <chThdCreateStatic.constprop.0.isra.0+0xf8>)
 8002daa:	f7fe f881 	bl	8000eb0 <chSysHalt>
  tp->state = CH_STATE_READY;
 8002dae:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
    pqp = pqp->next;
 8002db2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002db4:	6891      	ldr	r1, [r2, #8]
 8002db6:	4288      	cmp	r0, r1
 8002db8:	d9fb      	bls.n	8002db2 <chThdCreateStatic.constprop.0.isra.0+0xd2>
  p->prev       = pqp->prev;
 8002dba:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8002dbc:	f846 200c 	str.w	r2, [r6, ip]
  p->prev       = pqp->prev;
 8002dc0:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8002dc2:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8002dc4:	6053      	str	r3, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8002dc6:	e7e6      	b.n	8002d96 <chThdCreateStatic.constprop.0.isra.0+0xb6>
 8002dc8:	08005d40 	.word	0x08005d40
 8002dcc:	200009f0 	.word	0x200009f0
 8002dd0:	0800031d 	.word	0x0800031d
 8002dd4:	08005d20 	.word	0x08005d20
 8002dd8:	08005d28 	.word	0x08005d28
 8002ddc:	00000000 	.word	0x00000000

08002de0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	2530      	movs	r5, #48	; 0x30
 8002de4:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002de8:	4c18      	ldr	r4, [pc, #96]	; (8002e4c <VectorD4+0x6c>)
 8002dea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	db22      	blt.n	8002e38 <VectorD4+0x58>
 8002df2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002df6:	b9fa      	cbnz	r2, 8002e38 <VectorD4+0x58>
  oip->dbg.isr_cnt++;
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002dfe:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
 8002e02:	4813      	ldr	r0, [pc, #76]	; (8002e50 <VectorD4+0x70>)
 8002e04:	f7ff f8fc 	bl	8002000 <sd_lld_serve_interrupt>
 8002e08:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002e0c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	dd14      	ble.n	8002e3e <VectorD4+0x5e>
 8002e14:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002e18:	b98a      	cbnz	r2, 8002e3e <VectorD4+0x5e>
  oip->dbg.isr_cnt--;
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002e20:	f382 8811 	msr	BASEPRI, r2
 8002e24:	f385 8811 	msr	BASEPRI, r5
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <VectorD4+0x74>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002e30:	d108      	bne.n	8002e44 <VectorD4+0x64>
 8002e32:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <VectorD4+0x78>)
 8002e3a:	f7fe f839 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8002e3e:	4807      	ldr	r0, [pc, #28]	; (8002e5c <VectorD4+0x7c>)
 8002e40:	f7fe f836 	bl	8000eb0 <chSysHalt>
 8002e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e48:	f7ff bea2 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8002e4c:	200009f0 	.word	0x200009f0
 8002e50:	200008b4 	.word	0x200008b4
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	08005d48 	.word	0x08005d48
 8002e5c:	08005d50 	.word	0x08005d50

08002e60 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	2530      	movs	r5, #48	; 0x30
 8002e64:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002e68:	4c18      	ldr	r4, [pc, #96]	; (8002ecc <VectorD8+0x6c>)
 8002e6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	db22      	blt.n	8002eb8 <VectorD8+0x58>
 8002e72:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002e76:	b9fa      	cbnz	r2, 8002eb8 <VectorD8+0x58>
  oip->dbg.isr_cnt++;
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002e7e:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 8002e82:	4813      	ldr	r0, [pc, #76]	; (8002ed0 <VectorD8+0x70>)
 8002e84:	f7ff f8bc 	bl	8002000 <sd_lld_serve_interrupt>
 8002e88:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002e8c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	dd14      	ble.n	8002ebe <VectorD8+0x5e>
 8002e94:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002e98:	b98a      	cbnz	r2, 8002ebe <VectorD8+0x5e>
  oip->dbg.isr_cnt--;
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002ea0:	f382 8811 	msr	BASEPRI, r2
 8002ea4:	f385 8811 	msr	BASEPRI, r5
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <VectorD8+0x74>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002eb0:	d108      	bne.n	8002ec4 <VectorD8+0x64>
 8002eb2:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8002eb8:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <VectorD8+0x78>)
 8002eba:	f7fd fff9 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8002ebe:	4807      	ldr	r0, [pc, #28]	; (8002edc <VectorD8+0x7c>)
 8002ec0:	f7fd fff6 	bl	8000eb0 <chSysHalt>
 8002ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ec8:	f7ff be62 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8002ecc:	200009f0 	.word	0x200009f0
 8002ed0:	20000934 	.word	0x20000934
 8002ed4:	e000ed00 	.word	0xe000ed00
 8002ed8:	08005d48 	.word	0x08005d48
 8002edc:	08005d50 	.word	0x08005d50

08002ee0 <VectorA8>:
/**
 * @brief   TIM1-TRG-COM, TIM11 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_TRGCO_TIM11_HANDLER) {
 8002ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee4:	2130      	movs	r1, #48	; 0x30
 8002ee6:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002eea:	4c6c      	ldr	r4, [pc, #432]	; (800309c <VectorA8+0x1bc>)
 8002eec:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f2c0 80a0 	blt.w	8003036 <VectorA8+0x156>
 8002ef6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	f040 809b 	bne.w	8003036 <VectorA8+0x156>
  oip->dbg.isr_cnt++;
 8002f00:	3301      	adds	r3, #1
 8002f02:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002f06:	f382 8811 	msr	BASEPRI, r2
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8002f0a:	4d65      	ldr	r5, [pc, #404]	; (80030a0 <VectorA8+0x1c0>)
 8002f0c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002f0e:	68ea      	ldr	r2, [r5, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002f14:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002f16:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002f18:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8002f1a:	d41b      	bmi.n	8002f54 <VectorA8+0x74>
 8002f1c:	2230      	movs	r2, #48	; 0x30
 8002f1e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002f22:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f340 8082 	ble.w	8003030 <VectorA8+0x150>
 8002f2c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d17d      	bne.n	8003030 <VectorA8+0x150>
  oip->dbg.isr_cnt--;
 8002f34:	3b01      	subs	r3, #1
 8002f36:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002f3a:	f381 8811 	msr	BASEPRI, r1
 8002f3e:	f382 8811 	msr	BASEPRI, r2
 8002f42:	4b58      	ldr	r3, [pc, #352]	; (80030a4 <VectorA8+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002f4a:	d17a      	bne.n	8003042 <VectorA8+0x162>
 8002f4c:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f54:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002f58:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dd6d      	ble.n	800303c <VectorA8+0x15c>
 8002f60:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
 8002f64:	f1ba 0f00 	cmp.w	sl, #0
 8002f68:	d168      	bne.n	800303c <VectorA8+0x15c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002f70:	f104 0b10 	add.w	fp, r4, #16
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8002f74:	46d0      	mov	r8, sl
 8002f76:	f04f 0930 	mov.w	r9, #48	; 0x30
  return (systime_t)STM32_ST_TIM->CNT;
 8002f7a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8002f7c:	6926      	ldr	r6, [r4, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8002f7e:	8ba3      	ldrh	r3, [r4, #28]
    if (nowdelta < vtp->dlist.delta) {
 8002f80:	68b1      	ldr	r1, [r6, #8]
 8002f82:	b280      	uxth	r0, r0
 8002f84:	1ac2      	subs	r2, r0, r3
 8002f86:	b292      	uxth	r2, r2
 8002f88:	428a      	cmp	r2, r1
 8002f8a:	d361      	bcc.n	8003050 <VectorA8+0x170>
  return systime + (systime_t)interval;
 8002f8c:	440b      	add	r3, r1
 8002f8e:	b29f      	uxth	r7, r3
  dlp->prev->next = dlp->next;
 8002f90:	e9d6 3200 	ldrd	r3, r2, [r6]
    vtlp->lasttime = lasttime;
 8002f94:	83a7      	strh	r7, [r4, #28]
 8002f96:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8002f98:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 8002f9a:	f8c6 a000 	str.w	sl, [r6]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8002f9e:	6923      	ldr	r3, [r4, #16]
 8002fa0:	455b      	cmp	r3, fp
  STM32_ST_TIM->DIER = 0U;
 8002fa2:	bf08      	it	eq
 8002fa4:	f8c5 a00c 	streq.w	sl, [r5, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002fa8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	dd4c      	ble.n	800304a <VectorA8+0x16a>
 8002fb0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dd48      	ble.n	800304a <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002fb8:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8002fbc:	f388 8811 	msr	BASEPRI, r8
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 8002fc0:	e9d6 3103 	ldrd	r3, r1, [r6, #12]
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	4798      	blx	r3
 8002fc8:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002fcc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	dd33      	ble.n	800303c <VectorA8+0x15c>
 8002fd4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002fd8:	bb80      	cbnz	r0, 800303c <VectorA8+0x15c>

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 8002fda:	6972      	ldr	r2, [r6, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002fe2:	2a00      	cmp	r2, #0
 8002fe4:	d0c9      	beq.n	8002f7a <VectorA8+0x9a>
  return (systime_t)STM32_ST_TIM->CNT;
 8002fe6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002fe8:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8002fea:	1bcf      	subs	r7, r1, r7
 8002fec:	b2bf      	uxth	r7, r7
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 8002fee:	42ba      	cmp	r2, r7
 8002ff0:	d343      	bcc.n	800307a <VectorA8+0x19a>
  return (bool)(dlhp == dlhp->next);
 8002ff2:	f8d4 c010 	ldr.w	ip, [r4, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002ff6:	45dc      	cmp	ip, fp
 8002ff8:	d049      	beq.n	800308e <VectorA8+0x1ae>
  while (likely(dlp->delta < delta)) {
 8002ffa:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d906      	bls.n	8003010 <VectorA8+0x130>
    dlp = dlp->next;
 8003002:	f8dc c000 	ldr.w	ip, [ip]
    delta -= dlp->delta;
 8003006:	1ad2      	subs	r2, r2, r3
  while (likely(dlp->delta < delta)) {
 8003008:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800300c:	4293      	cmp	r3, r2
 800300e:	d3f8      	bcc.n	8003002 <VectorA8+0x122>
  dlp->delta      = delta;
 8003010:	60b2      	str	r2, [r6, #8]
  dlp->delta -= delta;
 8003012:	f8dc 3008 	ldr.w	r3, [ip, #8]
  dlp->next       = dlhp;
 8003016:	f8c6 c000 	str.w	ip, [r6]
  dlp->delta -= delta;
 800301a:	1a9b      	subs	r3, r3, r2
  dlp->prev       = dlp->next->prev;
 800301c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8003020:	6072      	str	r2, [r6, #4]
  dlp->prev->next = dlp;
 8003022:	6016      	str	r6, [r2, #0]
  dlp->delta -= delta;
 8003024:	e9cc 6301 	strd	r6, r3, [ip, #4]
  dlhp->delta = (sysinterval_t)-1;
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	61a3      	str	r3, [r4, #24]
}
 800302e:	e7a2      	b.n	8002f76 <VectorA8+0x96>
    chSysHalt("SV#9");
 8003030:	481d      	ldr	r0, [pc, #116]	; (80030a8 <VectorA8+0x1c8>)
 8003032:	f7fd ff3d 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#8");
 8003036:	481d      	ldr	r0, [pc, #116]	; (80030ac <VectorA8+0x1cc>)
 8003038:	f7fd ff3a 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#6");
 800303c:	481c      	ldr	r0, [pc, #112]	; (80030b0 <VectorA8+0x1d0>)
 800303e:	f7fd ff37 	bl	8000eb0 <chSysHalt>
 8003042:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003046:	f7ff bda3 	b.w	8002b90 <__port_irq_epilogue.part.0>
    chSysHalt("SV#7");
 800304a:	481a      	ldr	r0, [pc, #104]	; (80030b4 <VectorA8+0x1d4>)
 800304c:	f7fd ff30 	bl	8000eb0 <chSysHalt>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8003050:	455e      	cmp	r6, fp
 8003052:	d004      	beq.n	800305e <VectorA8+0x17e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8003054:	1a89      	subs	r1, r1, r2
  vtlp->lasttime += nowdelta;
 8003056:	83a0      	strh	r0, [r4, #28]
  vtp->dlist.delta -= nowdelta;
 8003058:	60b1      	str	r1, [r6, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 800305a:	f7fe fe09 	bl	8001c70 <vt_set_alarm>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800305e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003062:	2b00      	cmp	r3, #0
 8003064:	ddf1      	ble.n	800304a <VectorA8+0x16a>
 8003066:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800306a:	2b00      	cmp	r3, #0
 800306c:	dded      	ble.n	800304a <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 800306e:	2300      	movs	r3, #0
 8003070:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003074:	f383 8811 	msr	BASEPRI, r3
}
 8003078:	e750      	b.n	8002f1c <VectorA8+0x3c>
 800307a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 800307c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8003080:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8003084:	45dc      	cmp	ip, fp
 8003086:	6363      	str	r3, [r4, #52]	; 0x34
 8003088:	d006      	beq.n	8003098 <VectorA8+0x1b8>
 800308a:	463a      	mov	r2, r7
 800308c:	e7b5      	b.n	8002ffa <VectorA8+0x11a>
        delay = vtp->reload - nowdelta;
 800308e:	1bd2      	subs	r2, r2, r7
        vt_insert_first(vtlp, vtp, now, delay);
 8003090:	4630      	mov	r0, r6
 8003092:	f7fe ff45 	bl	8001f20 <vt_insert_first.constprop.0>
        return;
 8003096:	e7e2      	b.n	800305e <VectorA8+0x17e>
        delay = (sysinterval_t)0;
 8003098:	4602      	mov	r2, r0
 800309a:	e7f9      	b.n	8003090 <VectorA8+0x1b0>
 800309c:	200009f0 	.word	0x200009f0
 80030a0:	40014800 	.word	0x40014800
 80030a4:	e000ed00 	.word	0xe000ed00
 80030a8:	08005d50 	.word	0x08005d50
 80030ac:	08005d48 	.word	0x08005d48
 80030b0:	08005d00 	.word	0x08005d00
 80030b4:	08005d18 	.word	0x08005d18
	...

080030c0 <Vector118>:
/**
 * @brief   TIM6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM6_HANDLER) {
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	2330      	movs	r3, #48	; 0x30
 80030c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80030c8:	4c26      	ldr	r4, [pc, #152]	; (8003164 <Vector118+0xa4>)
 80030ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db3d      	blt.n	800314e <Vector118+0x8e>
 80030d2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d139      	bne.n	800314e <Vector118+0x8e>
  oip->dbg.isr_cnt++;
 80030da:	3301      	adds	r3, #1
 80030dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80030e0:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 80030e4:	4d20      	ldr	r5, [pc, #128]	; (8003168 <Vector118+0xa8>)
 80030e6:	68ea      	ldr	r2, [r5, #12]
 80030e8:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80030ea:	68d1      	ldr	r1, [r2, #12]
 80030ec:	400b      	ands	r3, r1
 80030ee:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 80030f0:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 80030f2:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 80030f4:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 80030f6:	d418      	bmi.n	800312a <Vector118+0x6a>
 80030f8:	2230      	movs	r2, #48	; 0x30
 80030fa:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80030fe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003102:	2b00      	cmp	r3, #0
 8003104:	dd26      	ble.n	8003154 <Vector118+0x94>
 8003106:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800310a:	bb19      	cbnz	r1, 8003154 <Vector118+0x94>
  oip->dbg.isr_cnt--;
 800310c:	3b01      	subs	r3, #1
 800310e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003112:	f381 8811 	msr	BASEPRI, r1
 8003116:	f382 8811 	msr	BASEPRI, r2
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <Vector118+0xac>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003122:	d11a      	bne.n	800315a <Vector118+0x9a>
 8003124:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8003128:	bd38      	pop	{r3, r4, r5, pc}
    _gpt_isr_invoke_cb(gptp);
 800312a:	782b      	ldrb	r3, [r5, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d107      	bne.n	8003140 <Vector118+0x80>
 8003130:	2302      	movs	r3, #2
 8003132:	702b      	strb	r3, [r5, #0]
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 8003134:	6010      	str	r0, [r2, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8003136:	6110      	str	r0, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8003138:	68d3      	ldr	r3, [r2, #12]
 800313a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800313e:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 8003140:	686b      	ldr	r3, [r5, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0d7      	beq.n	80030f8 <Vector118+0x38>
 8003148:	4807      	ldr	r0, [pc, #28]	; (8003168 <Vector118+0xa8>)
 800314a:	4798      	blx	r3
 800314c:	e7d4      	b.n	80030f8 <Vector118+0x38>
    chSysHalt("SV#8");
 800314e:	4808      	ldr	r0, [pc, #32]	; (8003170 <Vector118+0xb0>)
 8003150:	f7fd feae 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003154:	4807      	ldr	r0, [pc, #28]	; (8003174 <Vector118+0xb4>)
 8003156:	f7fd feab 	bl	8000eb0 <chSysHalt>
 800315a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800315e:	f7ff bd17 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003162:	bf00      	nop
 8003164:	200009f0 	.word	0x200009f0
 8003168:	2000086c 	.word	0x2000086c
 800316c:	e000ed00 	.word	0xe000ed00
 8003170:	08005d48 	.word	0x08005d48
 8003174:	08005d50 	.word	0x08005d50
	...

08003180 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	2330      	movs	r3, #48	; 0x30
 8003184:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003188:	4c4b      	ldr	r4, [pc, #300]	; (80032b8 <Vector88+0x138>)
 800318a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800318e:	2b00      	cmp	r3, #0
 8003190:	f2c0 8081 	blt.w	8003296 <Vector88+0x116>
 8003194:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003198:	2a00      	cmp	r2, #0
 800319a:	d17c      	bne.n	8003296 <Vector88+0x116>
  oip->dbg.isr_cnt++;
 800319c:	3301      	adds	r3, #1
 800319e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80031a2:	f382 8811 	msr	BASEPRI, r2
  if (adcp->grpp != NULL) {
 80031a6:	4d45      	ldr	r5, [pc, #276]	; (80032bc <Vector88+0x13c>)
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 80031a8:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <Vector88+0x140>)
  if (adcp->grpp != NULL) {
 80031aa:	6928      	ldr	r0, [r5, #16]
  sr = ADC1->SR;
 80031ac:	6819      	ldr	r1, [r3, #0]
  ADC1->SR = 0;
 80031ae:	601a      	str	r2, [r3, #0]
  if (adcp->grpp != NULL) {
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d04a      	beq.n	800324a <Vector88+0xca>
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 80031b4:	068a      	lsls	r2, r1, #26
 80031b6:	d461      	bmi.n	800327c <Vector88+0xfc>
    if (sr & ADC_SR_AWD) {
 80031b8:	07cb      	lsls	r3, r1, #31
 80031ba:	d546      	bpl.n	800324a <Vector88+0xca>
 80031bc:	2104      	movs	r1, #4
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80031be:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	f023 031f 	bic.w	r3, r3, #31
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	f013 0301 	ands.w	r3, r3, #1
 80031d0:	d1fb      	bne.n	80031ca <Vector88+0x4a>
 80031d2:	f897 c009 	ldrb.w	ip, [r7, #9]
      _adc_isr_error_code(adcp, emask);
 80031d6:	6886      	ldr	r6, [r0, #8]
  adcp->adc->CR1 = 0;
 80031d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 80031da:	687f      	ldr	r7, [r7, #4]
 80031dc:	203d      	movs	r0, #61	; 0x3d
 80031de:	fa00 f00c 	lsl.w	r0, r0, ip
 80031e2:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 80031e4:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 80031e6:	6893      	ldr	r3, [r2, #8]
 80031e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ec:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 80031ee:	2301      	movs	r3, #1
 80031f0:	6093      	str	r3, [r2, #8]
      _adc_isr_error_code(adcp, emask);
 80031f2:	2e00      	cmp	r6, #0
 80031f4:	d055      	beq.n	80032a2 <Vector88+0x122>
 80031f6:	2305      	movs	r3, #5
 80031f8:	702b      	strb	r3, [r5, #0]
 80031fa:	4830      	ldr	r0, [pc, #192]	; (80032bc <Vector88+0x13c>)
 80031fc:	47b0      	blx	r6
 80031fe:	782b      	ldrb	r3, [r5, #0]
 8003200:	2b05      	cmp	r3, #5
 8003202:	d04e      	beq.n	80032a2 <Vector88+0x122>
 8003204:	2330      	movs	r3, #48	; 0x30
 8003206:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800320a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800320e:	2b00      	cmp	r3, #0
 8003210:	dd4f      	ble.n	80032b2 <Vector88+0x132>
 8003212:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d14b      	bne.n	80032b2 <Vector88+0x132>
  if (*trp != NULL) {
 800321a:	6968      	ldr	r0, [r5, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 800321c:	2201      	movs	r2, #1
 800321e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003222:	b168      	cbz	r0, 8003240 <Vector88+0xc0>
    tp->u.rdymsg = msg;
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	6282      	str	r2, [r0, #40]	; 0x28
    *trp = NULL;
 800322a:	616b      	str	r3, [r5, #20]
    (void) chSchReadyI(tp);
 800322c:	f7fe fec0 	bl	8001fb0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003230:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003234:	2b00      	cmp	r3, #0
 8003236:	dd39      	ble.n	80032ac <Vector88+0x12c>
 8003238:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800323c:	2b00      	cmp	r3, #0
 800323e:	dd35      	ble.n	80032ac <Vector88+0x12c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	2230      	movs	r2, #48	; 0x30
 800324c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003250:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003254:	2b00      	cmp	r3, #0
 8003256:	dd21      	ble.n	800329c <Vector88+0x11c>
 8003258:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800325c:	b9f1      	cbnz	r1, 800329c <Vector88+0x11c>
  oip->dbg.isr_cnt--;
 800325e:	3b01      	subs	r3, #1
 8003260:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003264:	f381 8811 	msr	BASEPRI, r1
 8003268:	f382 8811 	msr	BASEPRI, r2
 800326c:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <Vector88+0x144>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003274:	d10b      	bne.n	800328e <Vector88+0x10e>
 8003276:	f383 8811 	msr	BASEPRI, r3
}
 800327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 800327c:	782b      	ldrb	r3, [r5, #0]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d19a      	bne.n	80031b8 <Vector88+0x38>
      emask |= ADC_ERR_OVERFLOW;
 8003282:	f011 0f01 	tst.w	r1, #1
 8003286:	bf14      	ite	ne
 8003288:	2106      	movne	r1, #6
 800328a:	2102      	moveq	r1, #2
 800328c:	e797      	b.n	80031be <Vector88+0x3e>
}
 800328e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003292:	f7ff bc7d 	b.w	8002b90 <__port_irq_epilogue.part.0>
    chSysHalt("SV#8");
 8003296:	480c      	ldr	r0, [pc, #48]	; (80032c8 <Vector88+0x148>)
 8003298:	f7fd fe0a 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 800329c:	480b      	ldr	r0, [pc, #44]	; (80032cc <Vector88+0x14c>)
 800329e:	f7fd fe07 	bl	8000eb0 <chSysHalt>
      _adc_isr_error_code(adcp, emask);
 80032a2:	2202      	movs	r2, #2
 80032a4:	2300      	movs	r3, #0
 80032a6:	702a      	strb	r2, [r5, #0]
 80032a8:	612b      	str	r3, [r5, #16]
 80032aa:	e7ab      	b.n	8003204 <Vector88+0x84>
    chSysHalt("SV#7");
 80032ac:	4808      	ldr	r0, [pc, #32]	; (80032d0 <Vector88+0x150>)
 80032ae:	f7fd fdff 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#6");
 80032b2:	4808      	ldr	r0, [pc, #32]	; (80032d4 <Vector88+0x154>)
 80032b4:	f7fd fdfc 	bl	8000eb0 <chSysHalt>
 80032b8:	200009f0 	.word	0x200009f0
 80032bc:	20000808 	.word	0x20000808
 80032c0:	40012000 	.word	0x40012000
 80032c4:	e000ed00 	.word	0xe000ed00
 80032c8:	08005d48 	.word	0x08005d48
 80032cc:	08005d50 	.word	0x08005d50
 80032d0:	08005d18 	.word	0x08005d18
 80032d4:	08005d00 	.word	0x08005d00
	...

080032e0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80032e0:	b510      	push	{r4, lr}
 80032e2:	2330      	movs	r3, #48	; 0x30
 80032e4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80032e8:	4c1c      	ldr	r4, [pc, #112]	; (800335c <Vector6C+0x7c>)
 80032ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	db2a      	blt.n	8003348 <Vector6C+0x68>
 80032f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80032f6:	bb3a      	cbnz	r2, 8003348 <Vector6C+0x68>
  oip->dbg.isr_cnt++;
 80032f8:	3301      	adds	r3, #1
 80032fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80032fe:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <Vector6C+0x80>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 8003304:	4817      	ldr	r0, [pc, #92]	; (8003364 <Vector6C+0x84>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003306:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8003308:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800330a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800330e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8003310:	b10a      	cbz	r2, 8003316 <Vector6C+0x36>
    dma.streams[0].func(dma.streams[0].param, flags);
 8003312:	6880      	ldr	r0, [r0, #8]
 8003314:	4790      	blx	r2
 8003316:	2230      	movs	r2, #48	; 0x30
 8003318:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800331c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003320:	2b00      	cmp	r3, #0
 8003322:	dd14      	ble.n	800334e <Vector6C+0x6e>
 8003324:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003328:	b989      	cbnz	r1, 800334e <Vector6C+0x6e>
  oip->dbg.isr_cnt--;
 800332a:	3b01      	subs	r3, #1
 800332c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003330:	f381 8811 	msr	BASEPRI, r1
 8003334:	f382 8811 	msr	BASEPRI, r2
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <Vector6C+0x88>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003340:	d108      	bne.n	8003354 <Vector6C+0x74>
 8003342:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003346:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003348:	4808      	ldr	r0, [pc, #32]	; (800336c <Vector6C+0x8c>)
 800334a:	f7fd fdb1 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 800334e:	4808      	ldr	r0, [pc, #32]	; (8003370 <Vector6C+0x90>)
 8003350:	f7fd fdae 	bl	8000eb0 <chSysHalt>
 8003354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003358:	f7ff bc1a 	b.w	8002b90 <__port_irq_epilogue.part.0>
 800335c:	200009f0 	.word	0x200009f0
 8003360:	40026000 	.word	0x40026000
 8003364:	20000cf8 	.word	0x20000cf8
 8003368:	e000ed00 	.word	0xe000ed00
 800336c:	08005d48 	.word	0x08005d48
 8003370:	08005d50 	.word	0x08005d50
	...

08003380 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8003380:	b510      	push	{r4, lr}
 8003382:	2330      	movs	r3, #48	; 0x30
 8003384:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003388:	4c1d      	ldr	r4, [pc, #116]	; (8003400 <Vector70+0x80>)
 800338a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800338e:	2b00      	cmp	r3, #0
 8003390:	db2c      	blt.n	80033ec <Vector70+0x6c>
 8003392:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003396:	bb4a      	cbnz	r2, 80033ec <Vector70+0x6c>
  oip->dbg.isr_cnt++;
 8003398:	3301      	adds	r3, #1
 800339a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800339e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80033a2:	4b18      	ldr	r3, [pc, #96]	; (8003404 <Vector70+0x84>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <Vector70+0x88>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	0989      	lsrs	r1, r1, #6
 80033aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 80033ae:	0188      	lsls	r0, r1, #6
 80033b0:	6098      	str	r0, [r3, #8]
  if (dma.streams[1].func)
 80033b2:	68d3      	ldr	r3, [r2, #12]
 80033b4:	b10b      	cbz	r3, 80033ba <Vector70+0x3a>
    dma.streams[1].func(dma.streams[1].param, flags);
 80033b6:	6910      	ldr	r0, [r2, #16]
 80033b8:	4798      	blx	r3
 80033ba:	2230      	movs	r2, #48	; 0x30
 80033bc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80033c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	dd14      	ble.n	80033f2 <Vector70+0x72>
 80033c8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80033cc:	b989      	cbnz	r1, 80033f2 <Vector70+0x72>
  oip->dbg.isr_cnt--;
 80033ce:	3b01      	subs	r3, #1
 80033d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80033d4:	f381 8811 	msr	BASEPRI, r1
 80033d8:	f382 8811 	msr	BASEPRI, r2
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <Vector70+0x8c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80033e4:	d108      	bne.n	80033f8 <Vector70+0x78>
 80033e6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80033ea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80033ec:	4808      	ldr	r0, [pc, #32]	; (8003410 <Vector70+0x90>)
 80033ee:	f7fd fd5f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 80033f2:	4808      	ldr	r0, [pc, #32]	; (8003414 <Vector70+0x94>)
 80033f4:	f7fd fd5c 	bl	8000eb0 <chSysHalt>
 80033f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033fc:	f7ff bbc8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003400:	200009f0 	.word	0x200009f0
 8003404:	40026000 	.word	0x40026000
 8003408:	20000cf8 	.word	0x20000cf8
 800340c:	e000ed00 	.word	0xe000ed00
 8003410:	08005d48 	.word	0x08005d48
 8003414:	08005d50 	.word	0x08005d50
	...

08003420 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8003420:	b510      	push	{r4, lr}
 8003422:	2330      	movs	r3, #48	; 0x30
 8003424:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003428:	4c1d      	ldr	r4, [pc, #116]	; (80034a0 <Vector74+0x80>)
 800342a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800342e:	2b00      	cmp	r3, #0
 8003430:	db2c      	blt.n	800348c <Vector74+0x6c>
 8003432:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003436:	bb4a      	cbnz	r2, 800348c <Vector74+0x6c>
  oip->dbg.isr_cnt++;
 8003438:	3301      	adds	r3, #1
 800343a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800343e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <Vector74+0x84>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 8003444:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <Vector74+0x88>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	0c09      	lsrs	r1, r1, #16
 800344a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800344e:	0408      	lsls	r0, r1, #16
 8003450:	6098      	str	r0, [r3, #8]
  if (dma.streams[2].func)
 8003452:	6953      	ldr	r3, [r2, #20]
 8003454:	b10b      	cbz	r3, 800345a <Vector74+0x3a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8003456:	6990      	ldr	r0, [r2, #24]
 8003458:	4798      	blx	r3
 800345a:	2230      	movs	r2, #48	; 0x30
 800345c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003460:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003464:	2b00      	cmp	r3, #0
 8003466:	dd14      	ble.n	8003492 <Vector74+0x72>
 8003468:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800346c:	b989      	cbnz	r1, 8003492 <Vector74+0x72>
  oip->dbg.isr_cnt--;
 800346e:	3b01      	subs	r3, #1
 8003470:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003474:	f381 8811 	msr	BASEPRI, r1
 8003478:	f382 8811 	msr	BASEPRI, r2
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <Vector74+0x8c>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003484:	d108      	bne.n	8003498 <Vector74+0x78>
 8003486:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800348a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800348c:	4808      	ldr	r0, [pc, #32]	; (80034b0 <Vector74+0x90>)
 800348e:	f7fd fd0f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003492:	4808      	ldr	r0, [pc, #32]	; (80034b4 <Vector74+0x94>)
 8003494:	f7fd fd0c 	bl	8000eb0 <chSysHalt>
 8003498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800349c:	f7ff bb78 	b.w	8002b90 <__port_irq_epilogue.part.0>
 80034a0:	200009f0 	.word	0x200009f0
 80034a4:	40026000 	.word	0x40026000
 80034a8:	20000cf8 	.word	0x20000cf8
 80034ac:	e000ed00 	.word	0xe000ed00
 80034b0:	08005d48 	.word	0x08005d48
 80034b4:	08005d50 	.word	0x08005d50
	...

080034c0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80034c0:	b510      	push	{r4, lr}
 80034c2:	2330      	movs	r3, #48	; 0x30
 80034c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80034c8:	4c1d      	ldr	r4, [pc, #116]	; (8003540 <Vector78+0x80>)
 80034ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db2c      	blt.n	800352c <Vector78+0x6c>
 80034d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80034d6:	bb4a      	cbnz	r2, 800352c <Vector78+0x6c>
  oip->dbg.isr_cnt++;
 80034d8:	3301      	adds	r3, #1
 80034da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80034de:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <Vector78+0x84>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 80034e4:	4a18      	ldr	r2, [pc, #96]	; (8003548 <Vector78+0x88>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	0d89      	lsrs	r1, r1, #22
 80034ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80034ee:	0588      	lsls	r0, r1, #22
 80034f0:	6098      	str	r0, [r3, #8]
  if (dma.streams[3].func)
 80034f2:	69d3      	ldr	r3, [r2, #28]
 80034f4:	b10b      	cbz	r3, 80034fa <Vector78+0x3a>
    dma.streams[3].func(dma.streams[3].param, flags);
 80034f6:	6a10      	ldr	r0, [r2, #32]
 80034f8:	4798      	blx	r3
 80034fa:	2230      	movs	r2, #48	; 0x30
 80034fc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003500:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003504:	2b00      	cmp	r3, #0
 8003506:	dd14      	ble.n	8003532 <Vector78+0x72>
 8003508:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800350c:	b989      	cbnz	r1, 8003532 <Vector78+0x72>
  oip->dbg.isr_cnt--;
 800350e:	3b01      	subs	r3, #1
 8003510:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003514:	f381 8811 	msr	BASEPRI, r1
 8003518:	f382 8811 	msr	BASEPRI, r2
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <Vector78+0x8c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003524:	d108      	bne.n	8003538 <Vector78+0x78>
 8003526:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800352a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800352c:	4808      	ldr	r0, [pc, #32]	; (8003550 <Vector78+0x90>)
 800352e:	f7fd fcbf 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003532:	4808      	ldr	r0, [pc, #32]	; (8003554 <Vector78+0x94>)
 8003534:	f7fd fcbc 	bl	8000eb0 <chSysHalt>
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800353c:	f7ff bb28 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003540:	200009f0 	.word	0x200009f0
 8003544:	40026000 	.word	0x40026000
 8003548:	20000cf8 	.word	0x20000cf8
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	08005d48 	.word	0x08005d48
 8003554:	08005d50 	.word	0x08005d50
	...

08003560 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003560:	b510      	push	{r4, lr}
 8003562:	2330      	movs	r3, #48	; 0x30
 8003564:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003568:	4c1c      	ldr	r4, [pc, #112]	; (80035dc <Vector7C+0x7c>)
 800356a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800356e:	2b00      	cmp	r3, #0
 8003570:	db2a      	blt.n	80035c8 <Vector7C+0x68>
 8003572:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003576:	bb3a      	cbnz	r2, 80035c8 <Vector7C+0x68>
  oip->dbg.isr_cnt++;
 8003578:	3301      	adds	r3, #1
 800357a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800357e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <Vector7C+0x80>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 8003584:	4817      	ldr	r0, [pc, #92]	; (80035e4 <Vector7C+0x84>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003586:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8003588:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800358a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800358e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8003590:	b10a      	cbz	r2, 8003596 <Vector7C+0x36>
    dma.streams[4].func(dma.streams[4].param, flags);
 8003592:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003594:	4790      	blx	r2
 8003596:	2230      	movs	r2, #48	; 0x30
 8003598:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800359c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	dd14      	ble.n	80035ce <Vector7C+0x6e>
 80035a4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80035a8:	b989      	cbnz	r1, 80035ce <Vector7C+0x6e>
  oip->dbg.isr_cnt--;
 80035aa:	3b01      	subs	r3, #1
 80035ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80035b0:	f381 8811 	msr	BASEPRI, r1
 80035b4:	f382 8811 	msr	BASEPRI, r2
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <Vector7C+0x88>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80035c0:	d108      	bne.n	80035d4 <Vector7C+0x74>
 80035c2:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80035c6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80035c8:	4808      	ldr	r0, [pc, #32]	; (80035ec <Vector7C+0x8c>)
 80035ca:	f7fd fc71 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 80035ce:	4808      	ldr	r0, [pc, #32]	; (80035f0 <Vector7C+0x90>)
 80035d0:	f7fd fc6e 	bl	8000eb0 <chSysHalt>
 80035d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d8:	f7ff bada 	b.w	8002b90 <__port_irq_epilogue.part.0>
 80035dc:	200009f0 	.word	0x200009f0
 80035e0:	40026000 	.word	0x40026000
 80035e4:	20000cf8 	.word	0x20000cf8
 80035e8:	e000ed00 	.word	0xe000ed00
 80035ec:	08005d48 	.word	0x08005d48
 80035f0:	08005d50 	.word	0x08005d50
	...

08003600 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003600:	b510      	push	{r4, lr}
 8003602:	2330      	movs	r3, #48	; 0x30
 8003604:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003608:	4c1d      	ldr	r4, [pc, #116]	; (8003680 <Vector80+0x80>)
 800360a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800360e:	2b00      	cmp	r3, #0
 8003610:	db2c      	blt.n	800366c <Vector80+0x6c>
 8003612:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003616:	bb4a      	cbnz	r2, 800366c <Vector80+0x6c>
  oip->dbg.isr_cnt++;
 8003618:	3301      	adds	r3, #1
 800361a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800361e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <Vector80+0x84>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <Vector80+0x88>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	0989      	lsrs	r1, r1, #6
 800362a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800362e:	0188      	lsls	r0, r1, #6
 8003630:	60d8      	str	r0, [r3, #12]
  if (dma.streams[5].func)
 8003632:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003634:	b10b      	cbz	r3, 800363a <Vector80+0x3a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003636:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003638:	4798      	blx	r3
 800363a:	2230      	movs	r2, #48	; 0x30
 800363c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003640:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003644:	2b00      	cmp	r3, #0
 8003646:	dd14      	ble.n	8003672 <Vector80+0x72>
 8003648:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800364c:	b989      	cbnz	r1, 8003672 <Vector80+0x72>
  oip->dbg.isr_cnt--;
 800364e:	3b01      	subs	r3, #1
 8003650:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003654:	f381 8811 	msr	BASEPRI, r1
 8003658:	f382 8811 	msr	BASEPRI, r2
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <Vector80+0x8c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003664:	d108      	bne.n	8003678 <Vector80+0x78>
 8003666:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800366a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800366c:	4808      	ldr	r0, [pc, #32]	; (8003690 <Vector80+0x90>)
 800366e:	f7fd fc1f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <Vector80+0x94>)
 8003674:	f7fd fc1c 	bl	8000eb0 <chSysHalt>
 8003678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800367c:	f7ff ba88 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003680:	200009f0 	.word	0x200009f0
 8003684:	40026000 	.word	0x40026000
 8003688:	20000cf8 	.word	0x20000cf8
 800368c:	e000ed00 	.word	0xe000ed00
 8003690:	08005d48 	.word	0x08005d48
 8003694:	08005d50 	.word	0x08005d50
	...

080036a0 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80036a0:	b510      	push	{r4, lr}
 80036a2:	2330      	movs	r3, #48	; 0x30
 80036a4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80036a8:	4c1d      	ldr	r4, [pc, #116]	; (8003720 <Vector84+0x80>)
 80036aa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db2c      	blt.n	800370c <Vector84+0x6c>
 80036b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80036b6:	bb4a      	cbnz	r2, 800370c <Vector84+0x6c>
  oip->dbg.isr_cnt++;
 80036b8:	3301      	adds	r3, #1
 80036ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80036be:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <Vector84+0x84>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <Vector84+0x88>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	0c09      	lsrs	r1, r1, #16
 80036ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 80036ce:	0408      	lsls	r0, r1, #16
 80036d0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[6].func)
 80036d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80036d4:	b10b      	cbz	r3, 80036da <Vector84+0x3a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80036d6:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80036d8:	4798      	blx	r3
 80036da:	2230      	movs	r2, #48	; 0x30
 80036dc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80036e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	dd14      	ble.n	8003712 <Vector84+0x72>
 80036e8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80036ec:	b989      	cbnz	r1, 8003712 <Vector84+0x72>
  oip->dbg.isr_cnt--;
 80036ee:	3b01      	subs	r3, #1
 80036f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80036f4:	f381 8811 	msr	BASEPRI, r1
 80036f8:	f382 8811 	msr	BASEPRI, r2
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <Vector84+0x8c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003704:	d108      	bne.n	8003718 <Vector84+0x78>
 8003706:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800370a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800370c:	4808      	ldr	r0, [pc, #32]	; (8003730 <Vector84+0x90>)
 800370e:	f7fd fbcf 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003712:	4808      	ldr	r0, [pc, #32]	; (8003734 <Vector84+0x94>)
 8003714:	f7fd fbcc 	bl	8000eb0 <chSysHalt>
 8003718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800371c:	f7ff ba38 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003720:	200009f0 	.word	0x200009f0
 8003724:	40026000 	.word	0x40026000
 8003728:	20000cf8 	.word	0x20000cf8
 800372c:	e000ed00 	.word	0xe000ed00
 8003730:	08005d48 	.word	0x08005d48
 8003734:	08005d50 	.word	0x08005d50
	...

08003740 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8003740:	b510      	push	{r4, lr}
 8003742:	2330      	movs	r3, #48	; 0x30
 8003744:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003748:	4c1d      	ldr	r4, [pc, #116]	; (80037c0 <VectorFC+0x80>)
 800374a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800374e:	2b00      	cmp	r3, #0
 8003750:	db2c      	blt.n	80037ac <VectorFC+0x6c>
 8003752:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003756:	bb4a      	cbnz	r2, 80037ac <VectorFC+0x6c>
  oip->dbg.isr_cnt++;
 8003758:	3301      	adds	r3, #1
 800375a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800375e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <VectorFC+0x84>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <VectorFC+0x88>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	0d89      	lsrs	r1, r1, #22
 800376a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 800376e:	0588      	lsls	r0, r1, #22
 8003770:	60d8      	str	r0, [r3, #12]
  if (dma.streams[7].func)
 8003772:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003774:	b10b      	cbz	r3, 800377a <VectorFC+0x3a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8003776:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003778:	4798      	blx	r3
 800377a:	2230      	movs	r2, #48	; 0x30
 800377c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003780:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003784:	2b00      	cmp	r3, #0
 8003786:	dd14      	ble.n	80037b2 <VectorFC+0x72>
 8003788:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800378c:	b989      	cbnz	r1, 80037b2 <VectorFC+0x72>
  oip->dbg.isr_cnt--;
 800378e:	3b01      	subs	r3, #1
 8003790:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003794:	f381 8811 	msr	BASEPRI, r1
 8003798:	f382 8811 	msr	BASEPRI, r2
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <VectorFC+0x8c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80037a4:	d108      	bne.n	80037b8 <VectorFC+0x78>
 80037a6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80037aa:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80037ac:	4808      	ldr	r0, [pc, #32]	; (80037d0 <VectorFC+0x90>)
 80037ae:	f7fd fb7f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 80037b2:	4808      	ldr	r0, [pc, #32]	; (80037d4 <VectorFC+0x94>)
 80037b4:	f7fd fb7c 	bl	8000eb0 <chSysHalt>
 80037b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037bc:	f7ff b9e8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 80037c0:	200009f0 	.word	0x200009f0
 80037c4:	40026000 	.word	0x40026000
 80037c8:	20000cf8 	.word	0x20000cf8
 80037cc:	e000ed00 	.word	0xe000ed00
 80037d0:	08005d48 	.word	0x08005d48
 80037d4:	08005d50 	.word	0x08005d50
	...

080037e0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80037e0:	b510      	push	{r4, lr}
 80037e2:	2330      	movs	r3, #48	; 0x30
 80037e4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80037e8:	4c1c      	ldr	r4, [pc, #112]	; (800385c <Vector120+0x7c>)
 80037ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db2a      	blt.n	8003848 <Vector120+0x68>
 80037f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80037f6:	bb3a      	cbnz	r2, 8003848 <Vector120+0x68>
  oip->dbg.isr_cnt++;
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80037fe:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <Vector120+0x80>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 8003804:	4817      	ldr	r0, [pc, #92]	; (8003864 <Vector120+0x84>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003806:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8003808:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800380a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800380e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8003810:	b10a      	cbz	r2, 8003816 <Vector120+0x36>
    dma.streams[8].func(dma.streams[8].param, flags);
 8003812:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003814:	4790      	blx	r2
 8003816:	2230      	movs	r2, #48	; 0x30
 8003818:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800381c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003820:	2b00      	cmp	r3, #0
 8003822:	dd14      	ble.n	800384e <Vector120+0x6e>
 8003824:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003828:	b989      	cbnz	r1, 800384e <Vector120+0x6e>
  oip->dbg.isr_cnt--;
 800382a:	3b01      	subs	r3, #1
 800382c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003830:	f381 8811 	msr	BASEPRI, r1
 8003834:	f382 8811 	msr	BASEPRI, r2
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <Vector120+0x88>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003840:	d108      	bne.n	8003854 <Vector120+0x74>
 8003842:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003846:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003848:	4808      	ldr	r0, [pc, #32]	; (800386c <Vector120+0x8c>)
 800384a:	f7fd fb31 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 800384e:	4808      	ldr	r0, [pc, #32]	; (8003870 <Vector120+0x90>)
 8003850:	f7fd fb2e 	bl	8000eb0 <chSysHalt>
 8003854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003858:	f7ff b99a 	b.w	8002b90 <__port_irq_epilogue.part.0>
 800385c:	200009f0 	.word	0x200009f0
 8003860:	40026400 	.word	0x40026400
 8003864:	20000cf8 	.word	0x20000cf8
 8003868:	e000ed00 	.word	0xe000ed00
 800386c:	08005d48 	.word	0x08005d48
 8003870:	08005d50 	.word	0x08005d50
	...

08003880 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8003880:	b510      	push	{r4, lr}
 8003882:	2330      	movs	r3, #48	; 0x30
 8003884:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003888:	4c1d      	ldr	r4, [pc, #116]	; (8003900 <Vector124+0x80>)
 800388a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800388e:	2b00      	cmp	r3, #0
 8003890:	db2c      	blt.n	80038ec <Vector124+0x6c>
 8003892:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003896:	bb4a      	cbnz	r2, 80038ec <Vector124+0x6c>
  oip->dbg.isr_cnt++;
 8003898:	3301      	adds	r3, #1
 800389a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800389e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80038a2:	4b18      	ldr	r3, [pc, #96]	; (8003904 <Vector124+0x84>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <Vector124+0x88>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	0989      	lsrs	r1, r1, #6
 80038aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 80038ae:	0188      	lsls	r0, r1, #6
 80038b0:	6098      	str	r0, [r3, #8]
  if (dma.streams[9].func)
 80038b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038b4:	b10b      	cbz	r3, 80038ba <Vector124+0x3a>
    dma.streams[9].func(dma.streams[9].param, flags);
 80038b6:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80038b8:	4798      	blx	r3
 80038ba:	2230      	movs	r2, #48	; 0x30
 80038bc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80038c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	dd14      	ble.n	80038f2 <Vector124+0x72>
 80038c8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80038cc:	b989      	cbnz	r1, 80038f2 <Vector124+0x72>
  oip->dbg.isr_cnt--;
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80038d4:	f381 8811 	msr	BASEPRI, r1
 80038d8:	f382 8811 	msr	BASEPRI, r2
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <Vector124+0x8c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80038e4:	d108      	bne.n	80038f8 <Vector124+0x78>
 80038e6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80038ea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80038ec:	4808      	ldr	r0, [pc, #32]	; (8003910 <Vector124+0x90>)
 80038ee:	f7fd fadf 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 80038f2:	4808      	ldr	r0, [pc, #32]	; (8003914 <Vector124+0x94>)
 80038f4:	f7fd fadc 	bl	8000eb0 <chSysHalt>
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fc:	f7ff b948 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003900:	200009f0 	.word	0x200009f0
 8003904:	40026400 	.word	0x40026400
 8003908:	20000cf8 	.word	0x20000cf8
 800390c:	e000ed00 	.word	0xe000ed00
 8003910:	08005d48 	.word	0x08005d48
 8003914:	08005d50 	.word	0x08005d50
	...

08003920 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8003920:	b510      	push	{r4, lr}
 8003922:	2330      	movs	r3, #48	; 0x30
 8003924:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003928:	4c1d      	ldr	r4, [pc, #116]	; (80039a0 <Vector128+0x80>)
 800392a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800392e:	2b00      	cmp	r3, #0
 8003930:	db2c      	blt.n	800398c <Vector128+0x6c>
 8003932:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003936:	bb4a      	cbnz	r2, 800398c <Vector128+0x6c>
  oip->dbg.isr_cnt++;
 8003938:	3301      	adds	r3, #1
 800393a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800393e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <Vector128+0x84>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <Vector128+0x88>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	0c09      	lsrs	r1, r1, #16
 800394a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800394e:	0408      	lsls	r0, r1, #16
 8003950:	6098      	str	r0, [r3, #8]
  if (dma.streams[10].func)
 8003952:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003954:	b10b      	cbz	r3, 800395a <Vector128+0x3a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003956:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8003958:	4798      	blx	r3
 800395a:	2230      	movs	r2, #48	; 0x30
 800395c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003960:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003964:	2b00      	cmp	r3, #0
 8003966:	dd14      	ble.n	8003992 <Vector128+0x72>
 8003968:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800396c:	b989      	cbnz	r1, 8003992 <Vector128+0x72>
  oip->dbg.isr_cnt--;
 800396e:	3b01      	subs	r3, #1
 8003970:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003974:	f381 8811 	msr	BASEPRI, r1
 8003978:	f382 8811 	msr	BASEPRI, r2
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <Vector128+0x8c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003984:	d108      	bne.n	8003998 <Vector128+0x78>
 8003986:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800398a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <Vector128+0x90>)
 800398e:	f7fd fa8f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003992:	4808      	ldr	r0, [pc, #32]	; (80039b4 <Vector128+0x94>)
 8003994:	f7fd fa8c 	bl	8000eb0 <chSysHalt>
 8003998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800399c:	f7ff b8f8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 80039a0:	200009f0 	.word	0x200009f0
 80039a4:	40026400 	.word	0x40026400
 80039a8:	20000cf8 	.word	0x20000cf8
 80039ac:	e000ed00 	.word	0xe000ed00
 80039b0:	08005d48 	.word	0x08005d48
 80039b4:	08005d50 	.word	0x08005d50
	...

080039c0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80039c0:	b510      	push	{r4, lr}
 80039c2:	2330      	movs	r3, #48	; 0x30
 80039c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80039c8:	4c1d      	ldr	r4, [pc, #116]	; (8003a40 <Vector12C+0x80>)
 80039ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db2c      	blt.n	8003a2c <Vector12C+0x6c>
 80039d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80039d6:	bb4a      	cbnz	r2, 8003a2c <Vector12C+0x6c>
  oip->dbg.isr_cnt++;
 80039d8:	3301      	adds	r3, #1
 80039da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80039de:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80039e2:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <Vector12C+0x84>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 80039e4:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <Vector12C+0x88>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	0d89      	lsrs	r1, r1, #22
 80039ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 80039ee:	0588      	lsls	r0, r1, #22
 80039f0:	6098      	str	r0, [r3, #8]
  if (dma.streams[11].func)
 80039f2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80039f4:	b10b      	cbz	r3, 80039fa <Vector12C+0x3a>
    dma.streams[11].func(dma.streams[11].param, flags);
 80039f6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80039f8:	4798      	blx	r3
 80039fa:	2230      	movs	r2, #48	; 0x30
 80039fc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003a00:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	dd14      	ble.n	8003a32 <Vector12C+0x72>
 8003a08:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003a0c:	b989      	cbnz	r1, 8003a32 <Vector12C+0x72>
  oip->dbg.isr_cnt--;
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003a14:	f381 8811 	msr	BASEPRI, r1
 8003a18:	f382 8811 	msr	BASEPRI, r2
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <Vector12C+0x8c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003a24:	d108      	bne.n	8003a38 <Vector12C+0x78>
 8003a26:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003a2a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003a2c:	4808      	ldr	r0, [pc, #32]	; (8003a50 <Vector12C+0x90>)
 8003a2e:	f7fd fa3f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003a32:	4808      	ldr	r0, [pc, #32]	; (8003a54 <Vector12C+0x94>)
 8003a34:	f7fd fa3c 	bl	8000eb0 <chSysHalt>
 8003a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a3c:	f7ff b8a8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003a40:	200009f0 	.word	0x200009f0
 8003a44:	40026400 	.word	0x40026400
 8003a48:	20000cf8 	.word	0x20000cf8
 8003a4c:	e000ed00 	.word	0xe000ed00
 8003a50:	08005d48 	.word	0x08005d48
 8003a54:	08005d50 	.word	0x08005d50
	...

08003a60 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8003a60:	b510      	push	{r4, lr}
 8003a62:	2330      	movs	r3, #48	; 0x30
 8003a64:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003a68:	4c1c      	ldr	r4, [pc, #112]	; (8003adc <Vector130+0x7c>)
 8003a6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	db2a      	blt.n	8003ac8 <Vector130+0x68>
 8003a72:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003a76:	bb3a      	cbnz	r2, 8003ac8 <Vector130+0x68>
  oip->dbg.isr_cnt++;
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003a7e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003a82:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <Vector130+0x80>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 8003a84:	4817      	ldr	r0, [pc, #92]	; (8003ae4 <Vector130+0x84>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003a86:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8003a88:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003a8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8003a8e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8003a90:	b10a      	cbz	r2, 8003a96 <Vector130+0x36>
    dma.streams[12].func(dma.streams[12].param, flags);
 8003a92:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003a94:	4790      	blx	r2
 8003a96:	2230      	movs	r2, #48	; 0x30
 8003a98:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003a9c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	dd14      	ble.n	8003ace <Vector130+0x6e>
 8003aa4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003aa8:	b989      	cbnz	r1, 8003ace <Vector130+0x6e>
  oip->dbg.isr_cnt--;
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003ab0:	f381 8811 	msr	BASEPRI, r1
 8003ab4:	f382 8811 	msr	BASEPRI, r2
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <Vector130+0x88>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003ac0:	d108      	bne.n	8003ad4 <Vector130+0x74>
 8003ac2:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003ac6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003ac8:	4808      	ldr	r0, [pc, #32]	; (8003aec <Vector130+0x8c>)
 8003aca:	f7fd f9f1 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003ace:	4808      	ldr	r0, [pc, #32]	; (8003af0 <Vector130+0x90>)
 8003ad0:	f7fd f9ee 	bl	8000eb0 <chSysHalt>
 8003ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad8:	f7ff b85a 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003adc:	200009f0 	.word	0x200009f0
 8003ae0:	40026400 	.word	0x40026400
 8003ae4:	20000cf8 	.word	0x20000cf8
 8003ae8:	e000ed00 	.word	0xe000ed00
 8003aec:	08005d48 	.word	0x08005d48
 8003af0:	08005d50 	.word	0x08005d50
	...

08003b00 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8003b00:	b510      	push	{r4, lr}
 8003b02:	2330      	movs	r3, #48	; 0x30
 8003b04:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003b08:	4c1d      	ldr	r4, [pc, #116]	; (8003b80 <Vector150+0x80>)
 8003b0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db2c      	blt.n	8003b6c <Vector150+0x6c>
 8003b12:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b16:	bb4a      	cbnz	r2, 8003b6c <Vector150+0x6c>
  oip->dbg.isr_cnt++;
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003b1e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <Vector150+0x84>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <Vector150+0x88>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	0989      	lsrs	r1, r1, #6
 8003b2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8003b2e:	0188      	lsls	r0, r1, #6
 8003b30:	60d8      	str	r0, [r3, #12]
  if (dma.streams[13].func)
 8003b32:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8003b34:	b10b      	cbz	r3, 8003b3a <Vector150+0x3a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8003b36:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8003b38:	4798      	blx	r3
 8003b3a:	2230      	movs	r2, #48	; 0x30
 8003b3c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003b40:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	dd14      	ble.n	8003b72 <Vector150+0x72>
 8003b48:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003b4c:	b989      	cbnz	r1, 8003b72 <Vector150+0x72>
  oip->dbg.isr_cnt--;
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003b54:	f381 8811 	msr	BASEPRI, r1
 8003b58:	f382 8811 	msr	BASEPRI, r2
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <Vector150+0x8c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003b64:	d108      	bne.n	8003b78 <Vector150+0x78>
 8003b66:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003b6a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003b6c:	4808      	ldr	r0, [pc, #32]	; (8003b90 <Vector150+0x90>)
 8003b6e:	f7fd f99f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003b72:	4808      	ldr	r0, [pc, #32]	; (8003b94 <Vector150+0x94>)
 8003b74:	f7fd f99c 	bl	8000eb0 <chSysHalt>
 8003b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b7c:	f7ff b808 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003b80:	200009f0 	.word	0x200009f0
 8003b84:	40026400 	.word	0x40026400
 8003b88:	20000cf8 	.word	0x20000cf8
 8003b8c:	e000ed00 	.word	0xe000ed00
 8003b90:	08005d48 	.word	0x08005d48
 8003b94:	08005d50 	.word	0x08005d50
	...

08003ba0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	2330      	movs	r3, #48	; 0x30
 8003ba4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003ba8:	4c1d      	ldr	r4, [pc, #116]	; (8003c20 <Vector154+0x80>)
 8003baa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db2c      	blt.n	8003c0c <Vector154+0x6c>
 8003bb2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003bb6:	bb4a      	cbnz	r2, 8003c0c <Vector154+0x6c>
  oip->dbg.isr_cnt++;
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003bbe:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003bc2:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <Vector154+0x84>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <Vector154+0x88>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	0c09      	lsrs	r1, r1, #16
 8003bca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8003bce:	0408      	lsls	r0, r1, #16
 8003bd0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[14].func)
 8003bd2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003bd4:	b10b      	cbz	r3, 8003bda <Vector154+0x3a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8003bd6:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8003bd8:	4798      	blx	r3
 8003bda:	2230      	movs	r2, #48	; 0x30
 8003bdc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003be0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	dd14      	ble.n	8003c12 <Vector154+0x72>
 8003be8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003bec:	b989      	cbnz	r1, 8003c12 <Vector154+0x72>
  oip->dbg.isr_cnt--;
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003bf4:	f381 8811 	msr	BASEPRI, r1
 8003bf8:	f382 8811 	msr	BASEPRI, r2
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <Vector154+0x8c>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003c04:	d108      	bne.n	8003c18 <Vector154+0x78>
 8003c06:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003c0a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003c0c:	4808      	ldr	r0, [pc, #32]	; (8003c30 <Vector154+0x90>)
 8003c0e:	f7fd f94f 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003c12:	4808      	ldr	r0, [pc, #32]	; (8003c34 <Vector154+0x94>)
 8003c14:	f7fd f94c 	bl	8000eb0 <chSysHalt>
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1c:	f7fe bfb8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003c20:	200009f0 	.word	0x200009f0
 8003c24:	40026400 	.word	0x40026400
 8003c28:	20000cf8 	.word	0x20000cf8
 8003c2c:	e000ed00 	.word	0xe000ed00
 8003c30:	08005d48 	.word	0x08005d48
 8003c34:	08005d50 	.word	0x08005d50
	...

08003c40 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8003c40:	b510      	push	{r4, lr}
 8003c42:	2330      	movs	r3, #48	; 0x30
 8003c44:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003c48:	4c1e      	ldr	r4, [pc, #120]	; (8003cc4 <Vector158+0x84>)
 8003c4a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db2d      	blt.n	8003cae <Vector158+0x6e>
 8003c52:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003c56:	bb52      	cbnz	r2, 8003cae <Vector158+0x6e>
  oip->dbg.isr_cnt++;
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003c5e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003c62:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <Vector158+0x88>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 8003c64:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <Vector158+0x8c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	0d89      	lsrs	r1, r1, #22
 8003c6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8003c6e:	0588      	lsls	r0, r1, #22
 8003c70:	60d8      	str	r0, [r3, #12]
  if (dma.streams[15].func)
 8003c72:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8003c74:	b113      	cbz	r3, 8003c7c <Vector158+0x3c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8003c76:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8003c7a:	4798      	blx	r3
 8003c7c:	2230      	movs	r2, #48	; 0x30
 8003c7e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003c82:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	dd14      	ble.n	8003cb4 <Vector158+0x74>
 8003c8a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003c8e:	b989      	cbnz	r1, 8003cb4 <Vector158+0x74>
  oip->dbg.isr_cnt--;
 8003c90:	3b01      	subs	r3, #1
 8003c92:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003c96:	f381 8811 	msr	BASEPRI, r1
 8003c9a:	f382 8811 	msr	BASEPRI, r2
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <Vector158+0x90>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003ca6:	d108      	bne.n	8003cba <Vector158+0x7a>
 8003ca8:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003cac:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003cae:	4809      	ldr	r0, [pc, #36]	; (8003cd4 <Vector158+0x94>)
 8003cb0:	f7fd f8fe 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003cb4:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <Vector158+0x98>)
 8003cb6:	f7fd f8fb 	bl	8000eb0 <chSysHalt>
 8003cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cbe:	f7fe bf67 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003cc2:	bf00      	nop
 8003cc4:	200009f0 	.word	0x200009f0
 8003cc8:	40026400 	.word	0x40026400
 8003ccc:	20000cf8 	.word	0x20000cf8
 8003cd0:	e000ed00 	.word	0xe000ed00
 8003cd4:	08005d48 	.word	0x08005d48
 8003cd8:	08005d50 	.word	0x08005d50
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <VectorC4>:
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	2130      	movs	r1, #48	; 0x30
 8003ce4:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003ce8:	4c7d      	ldr	r4, [pc, #500]	; (8003ee0 <VectorC4+0x200>)
 8003cea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f2c0 80e5 	blt.w	8003ebe <VectorC4+0x1de>
 8003cf4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003cf8:	2a00      	cmp	r2, #0
 8003cfa:	f040 80e0 	bne.w	8003ebe <VectorC4+0x1de>
  oip->dbg.isr_cnt++;
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003d04:	f382 8811 	msr	BASEPRI, r2
  I2C_TypeDef *dp = i2cp->i2c;
 8003d08:	4a76      	ldr	r2, [pc, #472]	; (8003ee4 <VectorC4+0x204>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003d0a:	4877      	ldr	r0, [pc, #476]	; (8003ee8 <VectorC4+0x208>)
  I2C_TypeDef *dp = i2cp->i2c;
 8003d0c:	6b55      	ldr	r5, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8003d0e:	69ab      	ldr	r3, [r5, #24]
  uint32_t event = dp->SR1;
 8003d10:	696e      	ldr	r6, [r5, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003d12:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8003d16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003d1a:	4283      	cmp	r3, r0
 8003d1c:	d836      	bhi.n	8003d8c <VectorC4+0xac>
 8003d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d22:	d90f      	bls.n	8003d44 <VectorC4+0x64>
 8003d24:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d80d      	bhi.n	8003d4a <VectorC4+0x6a>
 8003d2e:	e8df f003 	tbb	[pc, r3]
 8003d32:	5942      	.short	0x5942
 8003d34:	0c0c0c0c 	.word	0x0c0c0c0c
 8003d38:	0c0c6f0c 	.word	0x0c0c6f0c
 8003d3c:	0c0c0c0c 	.word	0x0c0c0c0c
 8003d40:	0c0c      	.short	0x0c0c
 8003d42:	74          	.byte	0x74
 8003d43:	00          	.byte	0x00
 8003d44:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003d48:	d035      	beq.n	8003db6 <VectorC4+0xd6>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8003d4a:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 8003d4e:	bf18      	it	ne
 8003d50:	69ab      	ldrne	r3, [r5, #24]
 8003d52:	2230      	movs	r2, #48	; 0x30
 8003d54:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003d58:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f340 80b1 	ble.w	8003ec4 <VectorC4+0x1e4>
 8003d62:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003d66:	2900      	cmp	r1, #0
 8003d68:	f040 80ac 	bne.w	8003ec4 <VectorC4+0x1e4>
  oip->dbg.isr_cnt--;
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003d72:	f381 8811 	msr	BASEPRI, r1
 8003d76:	f382 8811 	msr	BASEPRI, r2
 8003d7a:	4b5c      	ldr	r3, [pc, #368]	; (8003eec <VectorC4+0x20c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003d82:	f040 80a2 	bne.w	8003eca <VectorC4+0x1ea>
 8003d86:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003d8c:	4858      	ldr	r0, [pc, #352]	; (8003ef0 <VectorC4+0x210>)
 8003d8e:	4283      	cmp	r3, r0
 8003d90:	d01d      	beq.n	8003dce <VectorC4+0xee>
 8003d92:	3002      	adds	r0, #2
 8003d94:	4283      	cmp	r3, r0
 8003d96:	d1d8      	bne.n	8003d4a <VectorC4+0x6a>
    (void)dp->DR; /* Clear BTF.*/
 8003d98:	692b      	ldr	r3, [r5, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8003d9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d064      	beq.n	8003e6e <VectorC4+0x18e>
      i2cp->addr |= 0x01;
 8003da4:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003da6:	682b      	ldr	r3, [r5, #0]
      i2cp->addr |= 0x01;
 8003da8:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003dac:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8003db0:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003db2:	602b      	str	r3, [r5, #0]
      return;
 8003db4:	e7cd      	b.n	8003d52 <VectorC4+0x72>
    if ((i2cp->addr >> 8) > 0) {
 8003db6:	8c13      	ldrh	r3, [r2, #32]
 8003db8:	0a1a      	lsrs	r2, r3, #8
 8003dba:	d02c      	beq.n	8003e16 <VectorC4+0x136>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8003dbc:	f002 0206 	and.w	r2, r2, #6
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003dca:	612b      	str	r3, [r5, #16]
 8003dcc:	e7bd      	b.n	8003d4a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003dce:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003dd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003dd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8003dd6:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003dd8:	606b      	str	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6013      	str	r3, [r2, #0]
    break;
 8003de2:	e7b2      	b.n	8003d4a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003de4:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003de6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003de8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8003dec:	680b      	ldr	r3, [r1, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003dee:	606a      	str	r2, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8003df8:	686a      	ldr	r2, [r5, #4]
 8003dfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dfe:	606a      	str	r2, [r5, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d8a1      	bhi.n	8003d4a <VectorC4+0x6a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8003e06:	682b      	ldr	r3, [r5, #0]
 8003e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	e79c      	b.n	8003d4a <VectorC4+0x6a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8003e10:	8c13      	ldrh	r3, [r2, #32]
 8003e12:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003e16:	612b      	str	r3, [r5, #16]
    break;
 8003e18:	e797      	b.n	8003d4a <VectorC4+0x6a>
  dmaStreamDisable(i2cp->dmatx);
 8003e1a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  dp->CR1 = I2C_CR1_SWRST;
 8003e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e20:	602b      	str	r3, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 8003e22:	6801      	ldr	r1, [r0, #0]
  dp->CR1 = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	602b      	str	r3, [r5, #0]
  dp->CR2 = 0;
 8003e28:	606b      	str	r3, [r5, #4]
  dp->SR1 = 0;
 8003e2a:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8003e2c:	680b      	ldr	r3, [r1, #0]
 8003e2e:	f023 031f 	bic.w	r3, r3, #31
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	680b      	ldr	r3, [r1, #0]
 8003e36:	07db      	lsls	r3, r3, #31
 8003e38:	d4fc      	bmi.n	8003e34 <VectorC4+0x154>
 8003e3a:	f890 c009 	ldrb.w	ip, [r0, #9]
  dmaStreamDisable(i2cp->dmarx);
 8003e3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8003e40:	6842      	ldr	r2, [r0, #4]
 8003e42:	233d      	movs	r3, #61	; 0x3d
 8003e44:	fa03 f30c 	lsl.w	r3, r3, ip
 8003e48:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8003e4a:	680a      	ldr	r2, [r1, #0]
 8003e4c:	6813      	ldr	r3, [r2, #0]
 8003e4e:	f023 031f 	bic.w	r3, r3, #31
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	6813      	ldr	r3, [r2, #0]
 8003e56:	07db      	lsls	r3, r3, #31
 8003e58:	d4fc      	bmi.n	8003e54 <VectorC4+0x174>
 8003e5a:	684a      	ldr	r2, [r1, #4]
 8003e5c:	7a49      	ldrb	r1, [r1, #9]
 8003e5e:	233d      	movs	r3, #61	; 0x3d
 8003e60:	408b      	lsls	r3, r1
 8003e62:	6013      	str	r3, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003e64:	686b      	ldr	r3, [r5, #4]
 8003e66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e6a:	606b      	str	r3, [r5, #4]
    break;
 8003e6c:	e76d      	b.n	8003d4a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003e6e:	686b      	ldr	r3, [r5, #4]
 8003e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e74:	606b      	str	r3, [r5, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003e82:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dd23      	ble.n	8003ed2 <VectorC4+0x1f2>
 8003e8a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003e8e:	bb03      	cbnz	r3, 8003ed2 <VectorC4+0x1f2>
  if (*trp != NULL) {
 8003e90:	69d0      	ldr	r0, [r2, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 8003e92:	2101      	movs	r1, #1
 8003e94:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8003e98:	b158      	cbz	r0, 8003eb2 <VectorC4+0x1d2>
    *trp = NULL;
 8003e9a:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8003e9c:	6283      	str	r3, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 8003e9e:	f7fe f887 	bl	8001fb0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003ea2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dd16      	ble.n	8003ed8 <VectorC4+0x1f8>
 8003eaa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dd12      	ble.n	8003ed8 <VectorC4+0x1f8>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	e745      	b.n	8003d4a <VectorC4+0x6a>
    chSysHalt("SV#8");
 8003ebe:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <VectorC4+0x214>)
 8003ec0:	f7fc fff6 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <VectorC4+0x218>)
 8003ec6:	f7fc fff3 	bl	8000eb0 <chSysHalt>
}
 8003eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ece:	f7fe be5f 	b.w	8002b90 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 8003ed2:	480a      	ldr	r0, [pc, #40]	; (8003efc <VectorC4+0x21c>)
 8003ed4:	f7fc ffec 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#7");
 8003ed8:	4809      	ldr	r0, [pc, #36]	; (8003f00 <VectorC4+0x220>)
 8003eda:	f7fc ffe9 	bl	8000eb0 <chSysHalt>
 8003ede:	bf00      	nop
 8003ee0:	200009f0 	.word	0x200009f0
 8003ee4:	2000087c 	.word	0x2000087c
 8003ee8:	00030011 	.word	0x00030011
 8003eec:	e000ed00 	.word	0xe000ed00
 8003ef0:	00070082 	.word	0x00070082
 8003ef4:	08005d48 	.word	0x08005d48
 8003ef8:	08005d50 	.word	0x08005d50
 8003efc:	08005d00 	.word	0x08005d00
 8003f00:	08005d18 	.word	0x08005d18
	...

08003f10 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 8003f10:	495a      	ldr	r1, [pc, #360]	; (800407c <VectorC8+0x16c>)
 8003f12:	6b4a      	ldr	r2, [r1, #52]	; 0x34
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 8003f16:	6955      	ldr	r5, [r2, #20]
 8003f18:	2330      	movs	r3, #48	; 0x30
 8003f1a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003f1e:	4c58      	ldr	r4, [pc, #352]	; (8004080 <VectorC8+0x170>)
 8003f20:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f2c0 8098 	blt.w	800405a <VectorC8+0x14a>
 8003f2a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	f040 8093 	bne.w	800405a <VectorC8+0x14a>
  oip->dbg.isr_cnt++;
 8003f34:	3301      	adds	r3, #1
 8003f36:	b2a8      	uxth	r0, r5
 8003f38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003f3c:	f382 8811 	msr	BASEPRI, r2
  dmaStreamDisable(i2cp->dmatx);
 8003f40:	e9d1 760c 	ldrd	r7, r6, [r1, #48]	; 0x30

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8003f44:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 8003f48:	683a      	ldr	r2, [r7, #0]
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	6173      	str	r3, [r6, #20]
  dmaStreamDisable(i2cp->dmatx);
 8003f4e:	6813      	ldr	r3, [r2, #0]
 8003f50:	f023 031f 	bic.w	r3, r3, #31
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	6813      	ldr	r3, [r2, #0]
 8003f58:	07db      	lsls	r3, r3, #31
 8003f5a:	d4fc      	bmi.n	8003f56 <VectorC8+0x46>
 8003f5c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8003f60:	687a      	ldr	r2, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8003f62:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8003f64:	233d      	movs	r3, #61	; 0x3d
 8003f66:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f6a:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	f023 031f 	bic.w	r3, r3, #31
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	07db      	lsls	r3, r3, #31
 8003f7a:	d4fc      	bmi.n	8003f76 <VectorC8+0x66>
 8003f7c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	233d      	movs	r3, #61	; 0x3d
 8003f84:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f88:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8003f8a:	f3c0 2300 	ubfx	r3, r0, #8, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8003f8e:	0582      	lsls	r2, r0, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8003f90:	bf48      	it	mi
 8003f92:	f043 0302 	orrmi.w	r3, r3, #2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8003f96:	0547      	lsls	r7, r0, #21
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8003f98:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8003f9a:	d50a      	bpl.n	8003fb2 <VectorC8+0xa2>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8003f9c:	6872      	ldr	r2, [r6, #4]
 8003f9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fa2:	6072      	str	r2, [r6, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003fa4:	6832      	ldr	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fae:	6032      	str	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003fb0:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8003fb2:	0502      	lsls	r2, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8003fb4:	bf44      	itt	mi
 8003fb6:	f043 0308 	orrmi.w	r3, r3, #8
 8003fba:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8003fbc:	0447      	lsls	r7, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 8003fbe:	bf44      	itt	mi
 8003fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8003fc4:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8003fc6:	04c6      	lsls	r6, r0, #19
 8003fc8:	d41c      	bmi.n	8004004 <VectorC8+0xf4>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003fca:	042a      	lsls	r2, r5, #16
 8003fcc:	d41f      	bmi.n	800400e <VectorC8+0xfe>
  if (i2cp->errors != I2C_NO_ERROR)
 8003fce:	bb0b      	cbnz	r3, 8004014 <VectorC8+0x104>
 8003fd0:	2230      	movs	r2, #48	; 0x30
 8003fd2:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003fd6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	dd40      	ble.n	8004060 <VectorC8+0x150>
 8003fde:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	d13c      	bne.n	8004060 <VectorC8+0x150>
  oip->dbg.isr_cnt--;
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003fec:	f381 8811 	msr	BASEPRI, r1
 8003ff0:	f382 8811 	msr	BASEPRI, r2
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <VectorC8+0x174>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003ffc:	d133      	bne.n	8004066 <VectorC8+0x156>
 8003ffe:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 8004002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->errors |= I2C_PEC_ERROR;
 8004004:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8004008:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 800400a:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800400c:	d502      	bpl.n	8004014 <VectorC8+0x104>
    i2cp->errors |= I2C_SMB_ALERT;
 800400e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004012:	608b      	str	r3, [r1, #8]
 8004014:	2330      	movs	r3, #48	; 0x30
 8004016:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800401a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800401e:	2b00      	cmp	r3, #0
 8004020:	dd25      	ble.n	800406e <VectorC8+0x15e>
 8004022:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004026:	bb13      	cbnz	r3, 800406e <VectorC8+0x15e>
  if (*trp != NULL) {
 8004028:	69c8      	ldr	r0, [r1, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 800402a:	2201      	movs	r2, #1
 800402c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8004030:	b168      	cbz	r0, 800404e <VectorC8+0x13e>
    tp->u.rdymsg = msg;
 8004032:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 8004036:	61cb      	str	r3, [r1, #28]
    tp->u.rdymsg = msg;
 8004038:	6282      	str	r2, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 800403a:	f7fd ffb9 	bl	8001fb0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800403e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004042:	2b00      	cmp	r3, #0
 8004044:	dd16      	ble.n	8004074 <VectorC8+0x164>
 8004046:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800404a:	2b00      	cmp	r3, #0
 800404c:	dd12      	ble.n	8004074 <VectorC8+0x164>
  oip->dbg.lock_cnt = (cnt_t)0;
 800404e:	2300      	movs	r3, #0
 8004050:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	e7ba      	b.n	8003fd0 <VectorC8+0xc0>
    chSysHalt("SV#8");
 800405a:	480b      	ldr	r0, [pc, #44]	; (8004088 <VectorC8+0x178>)
 800405c:	f7fc ff28 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 8004060:	480a      	ldr	r0, [pc, #40]	; (800408c <VectorC8+0x17c>)
 8004062:	f7fc ff25 	bl	8000eb0 <chSysHalt>
}
 8004066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800406a:	f7fe bd91 	b.w	8002b90 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 800406e:	4808      	ldr	r0, [pc, #32]	; (8004090 <VectorC8+0x180>)
 8004070:	f7fc ff1e 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#7");
 8004074:	4807      	ldr	r0, [pc, #28]	; (8004094 <VectorC8+0x184>)
 8004076:	f7fc ff1b 	bl	8000eb0 <chSysHalt>
 800407a:	bf00      	nop
 800407c:	2000087c 	.word	0x2000087c
 8004080:	200009f0 	.word	0x200009f0
 8004084:	e000ed00 	.word	0xe000ed00
 8004088:	08005d48 	.word	0x08005d48
 800408c:	08005d50 	.word	0x08005d50
 8004090:	08005d00 	.word	0x08005d00
 8004094:	08005d18 	.word	0x08005d18
	...

080040a0 <chSchDoPreemption>:
  thread_t *otp = __instance_get_currthread(oip);
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <chSchDoPreemption+0x4c>)
  ch_priority_queue_t *p = pqp->next;
 80040a2:	6810      	ldr	r0, [r2, #0]
 80040a4:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 80040a6:	6803      	ldr	r3, [r0, #0]
static void __sch_reschedule_ahead(void) {
 80040a8:	b510      	push	{r4, lr}
  ntp->state = CH_STATE_CURRENT;
 80040aa:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80040b2:	2400      	movs	r4, #0
  pqp->next       = p->next;
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80040ba:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio > p->prio));
 80040bc:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 80040be:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 80040c0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	42a2      	cmp	r2, r4
 80040c6:	d8fb      	bhi.n	80040c0 <chSchDoPreemption+0x20>
  p->prev       = pqp->prev;
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80040ce:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 80040d0:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80040d2:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(ntp, otp);
 80040d6:	6a0a      	ldr	r2, [r1, #32]
 80040d8:	3b64      	subs	r3, #100	; 0x64
 80040da:	429a      	cmp	r2, r3
 80040dc:	d803      	bhi.n	80040e6 <chSchDoPreemption+0x46>
}
 80040de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSysSwitch(ntp, otp);
 80040e2:	f7fc b90f 	b.w	8000304 <__port_switch>
 80040e6:	4802      	ldr	r0, [pc, #8]	; (80040f0 <chSchDoPreemption+0x50>)
 80040e8:	f7fc fee2 	bl	8000eb0 <chSysHalt>
 80040ec:	200009f0 	.word	0x200009f0
 80040f0:	08005d28 	.word	0x08005d28
	...

08004100 <myprintf>:
int myprintf(const char *fmt, ...) {
 8004100:	b40f      	push	{r0, r1, r2, r3}
 8004102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004106:	b091      	sub	sp, #68	; 0x44
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004108:	2330      	movs	r3, #48	; 0x30
 800410a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800410c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004110:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 800430c <myprintf+0x20c>
 8004114:	e9db 5322 	ldrd	r5, r3, [fp, #136]	; 0x88
 8004118:	431d      	orrs	r5, r3
 800411a:	f040 8197 	bne.w	800444c <myprintf+0x34c>

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 800411e:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8004308 <myprintf+0x208>
  return __sch_get_currthread();
 8004122:	f8db 600c 	ldr.w	r6, [fp, #12]
 8004126:	f8da 0008 	ldr.w	r0, [sl, #8]
  oip->dbg.lock_cnt = (cnt_t)1;
 800412a:	2301      	movs	r3, #1
 800412c:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8004130:	2800      	cmp	r0, #0
 8004132:	f000 82a0 	beq.w	8004676 <myprintf+0x576>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8004136:	68b3      	ldr	r3, [r6, #8]
 8004138:	6882      	ldr	r2, [r0, #8]
 800413a:	4293      	cmp	r3, r2
 800413c:	d90b      	bls.n	8004156 <myprintf+0x56>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 800413e:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8004140:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004144:	2b06      	cmp	r3, #6
 8004146:	f000 81a9 	beq.w	800449c <myprintf+0x39c>
 800414a:	2b07      	cmp	r3, #7
 800414c:	f000 818b 	beq.w	8004466 <myprintf+0x366>
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 819c 	beq.w	800448e <myprintf+0x38e>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 8004156:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <myprintf+0x208>)
 8004158:	e003      	b.n	8004162 <myprintf+0x62>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 800415a:	6899      	ldr	r1, [r3, #8]
 800415c:	68b2      	ldr	r2, [r6, #8]
 800415e:	4291      	cmp	r1, r2
 8004160:	d302      	bcc.n	8004168 <myprintf+0x68>
    cp = cp->next;
 8004162:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8004164:	4553      	cmp	r3, sl
 8004166:	d1f8      	bne.n	800415a <myprintf+0x5a>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 8004168:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 800416a:	6033      	str	r3, [r6, #0]
  tp->prev       = cp->prev;
 800416c:	6072      	str	r2, [r6, #4]
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
      currtp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 800416e:	2006      	movs	r0, #6
  tp->prev->next = tp;
 8004170:	6016      	str	r6, [r2, #0]
  cp->prev       = tp;
 8004172:	605e      	str	r6, [r3, #4]
      currtp->u.wtmtxp = mp;
 8004174:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
      chSchGoSleepS(CH_STATE_WTMTX);
 8004178:	f7fe f89a 	bl	80022b0 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800417c:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 8275 	bne.w	8004670 <myprintf+0x570>
 8004186:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800418a:	2b00      	cmp	r3, #0
 800418c:	f340 8270 	ble.w	8004670 <myprintf+0x570>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004190:	2300      	movs	r3, #0
 8004192:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8004196:	f383 8811 	msr	BASEPRI, r3
  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format)
 800419a:	7820      	ldrb	r0, [r4, #0]
    va_start(ap, fmt);
 800419c:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
 80041a0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80041a4:	2800      	cmp	r0, #0
 80041a6:	f000 82f0 	beq.w	800478a <myprintf+0x68a>
 80041aa:	4699      	mov	r9, r3
 80041ac:	a90e      	add	r1, sp, #56	; 0x38
 80041ae:	e00e      	b.n	80041ce <myprintf+0xce>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
      // no
      out(*format, buffer, idx++, maxlen);
 80041b0:	464a      	mov	r2, r9
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	910a      	str	r1, [sp, #40]	; 0x28
 80041b8:	f109 0501 	add.w	r5, r9, #1
 80041bc:	f7fe fb70 	bl	80028a0 <_out_char>
      format++;
      continue;
 80041c0:	990a      	ldr	r1, [sp, #40]	; 0x28
      format++;
 80041c2:	3401      	adds	r4, #1
      out(*format, buffer, idx++, maxlen);
 80041c4:	46a9      	mov	r9, r5
  while (*format)
 80041c6:	7820      	ldrb	r0, [r4, #0]
 80041c8:	2800      	cmp	r0, #0
 80041ca:	f000 80c1 	beq.w	8004350 <myprintf+0x250>
    if (*format != '%') {
 80041ce:	2825      	cmp	r0, #37	; 0x25
 80041d0:	d1ee      	bne.n	80041b0 <myprintf+0xb0>
    }
    else {
      // yes, evaluate it
      format++;
 80041d2:	1c63      	adds	r3, r4, #1
    }

    // evaluate flags
    flags = 0U;
 80041d4:	f04f 0c00 	mov.w	ip, #0
 80041d8:	461c      	mov	r4, r3
    do {
      switch (*format) {
 80041da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80041de:	f1a0 0220 	sub.w	r2, r0, #32
 80041e2:	2a10      	cmp	r2, #16
 80041e4:	d80a      	bhi.n	80041fc <myprintf+0xfc>
 80041e6:	e8df f002 	tbb	[pc, r2]
 80041ea:	098c      	.short	0x098c
 80041ec:	09098909 	.word	0x09098909
 80041f0:	09090909 	.word	0x09090909
 80041f4:	83098609 	.word	0x83098609
 80041f8:	0909      	.short	0x0909
 80041fa:	80          	.byte	0x80
 80041fb:	00          	.byte	0x00
      }
    } while (n);

    // evaluate width field
    width = 0U;
    if (_is_digit(*format)) {
 80041fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004200:	2b09      	cmp	r3, #9
 8004202:	f240 8115 	bls.w	8004430 <myprintf+0x330>
      width = _atoi(&format);
    }
    else if (*format == '*') {
 8004206:	282a      	cmp	r0, #42	; 0x2a
 8004208:	f000 8123 	beq.w	8004452 <myprintf+0x352>
    width = 0U;
 800420c:	2500      	movs	r5, #0
      format++;
    }

    // evaluate precision field
    precision = 0U;
    if (*format == '.') {
 800420e:	282e      	cmp	r0, #46	; 0x2e
 8004210:	f000 80ff 	beq.w	8004412 <myprintf+0x312>
    precision = 0U;
 8004214:	2700      	movs	r7, #0
        format++;
      }
    }

    // evaluate length field
    switch (*format) {
 8004216:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800421a:	2b12      	cmp	r3, #18
 800421c:	d818      	bhi.n	8004250 <myprintf+0x150>
 800421e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004222:	0177      	.short	0x0177
 8004224:	01870017 	.word	0x01870017
 8004228:	017f0017 	.word	0x017f0017
 800422c:	00170017 	.word	0x00170017
 8004230:	00170017 	.word	0x00170017
 8004234:	00170017 	.word	0x00170017
 8004238:	00130017 	.word	0x00130017
 800423c:	00170017 	.word	0x00170017
 8004240:	00170017 	.word	0x00170017
 8004244:	00130017 	.word	0x00130017
      case 'l' :
        flags |= FLAGS_LONG;
        format++;
        if (*format == 'l') {
 8004248:	7860      	ldrb	r0, [r4, #1]
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800424a:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
        format++;
 800424e:	3401      	adds	r4, #1
      default :
        break;
    }

    // evaluate specifier
    switch (*format) {
 8004250:	2867      	cmp	r0, #103	; 0x67
 8004252:	d85d      	bhi.n	8004310 <myprintf+0x210>
 8004254:	2824      	cmp	r0, #36	; 0x24
 8004256:	d96d      	bls.n	8004334 <myprintf+0x234>
 8004258:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800425c:	2b42      	cmp	r3, #66	; 0x42
 800425e:	d869      	bhi.n	8004334 <myprintf+0x234>
 8004260:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004264:	006801e5 	.word	0x006801e5
 8004268:	00680068 	.word	0x00680068
 800426c:	00680068 	.word	0x00680068
 8004270:	00680068 	.word	0x00680068
 8004274:	00680068 	.word	0x00680068
 8004278:	00680068 	.word	0x00680068
 800427c:	00680068 	.word	0x00680068
 8004280:	00680068 	.word	0x00680068
 8004284:	00680068 	.word	0x00680068
 8004288:	00680068 	.word	0x00680068
 800428c:	00680068 	.word	0x00680068
 8004290:	00680068 	.word	0x00680068
 8004294:	00680068 	.word	0x00680068
 8004298:	00680068 	.word	0x00680068
 800429c:	00680068 	.word	0x00680068
 80042a0:	00680068 	.word	0x00680068
 80042a4:	01ab0136 	.word	0x01ab0136
 80042a8:	00680136 	.word	0x00680136
 80042ac:	00680068 	.word	0x00680068
 80042b0:	00680068 	.word	0x00680068
 80042b4:	00680068 	.word	0x00680068
 80042b8:	00680068 	.word	0x00680068
 80042bc:	00680068 	.word	0x00680068
 80042c0:	00680068 	.word	0x00680068
 80042c4:	00680068 	.word	0x00680068
 80042c8:	01750068 	.word	0x01750068
 80042cc:	00680068 	.word	0x00680068
 80042d0:	00680068 	.word	0x00680068
 80042d4:	00680068 	.word	0x00680068
 80042d8:	00680068 	.word	0x00680068
 80042dc:	01750068 	.word	0x01750068
 80042e0:	017501c3 	.word	0x017501c3
 80042e4:	01ab0136 	.word	0x01ab0136
 80042e8:	0136      	.short	0x0136
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80042ea:	f04c 0c01 	orr.w	ip, ip, #1
 80042ee:	e773      	b.n	80041d8 <myprintf+0xd8>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80042f0:	f04c 0c02 	orr.w	ip, ip, #2
 80042f4:	e770      	b.n	80041d8 <myprintf+0xd8>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80042f6:	f04c 0c04 	orr.w	ip, ip, #4
 80042fa:	e76d      	b.n	80041d8 <myprintf+0xd8>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80042fc:	f04c 0c10 	orr.w	ip, ip, #16
 8004300:	e76a      	b.n	80041d8 <myprintf+0xd8>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004302:	f04c 0c08 	orr.w	ip, ip, #8
 8004306:	e767      	b.n	80041d8 <myprintf+0xd8>
 8004308:	20000d7c 	.word	0x20000d7c
 800430c:	200009f0 	.word	0x200009f0
    switch (*format) {
 8004310:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d80c      	bhi.n	8004334 <myprintf+0x234>
 800431a:	2601      	movs	r6, #1
 800431c:	409e      	lsls	r6, r3
 800431e:	f249 0241 	movw	r2, #36929	; 0x9041
 8004322:	4016      	ands	r6, r2
 8004324:	f040 8110 	bne.w	8004548 <myprintf+0x448>
 8004328:	2b0a      	cmp	r3, #10
 800432a:	f000 81ac 	beq.w	8004686 <myprintf+0x586>
 800432e:	2b07      	cmp	r3, #7
 8004330:	f000 81ea 	beq.w	8004708 <myprintf+0x608>
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
        format++;
 8004334:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 8004336:	464a      	mov	r2, r9
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	910a      	str	r1, [sp, #40]	; 0x28
 800433e:	f7fe faaf 	bl	80028a0 <_out_char>
  while (*format)
 8004342:	7820      	ldrb	r0, [r4, #0]
        out(*format, buffer, idx++, maxlen);
 8004344:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004346:	f109 0901 	add.w	r9, r9, #1
  while (*format)
 800434a:	2800      	cmp	r0, #0
 800434c:	f47f af3f 	bne.w	80041ce <myprintf+0xce>
 8004350:	f06f 0201 	mvn.w	r2, #1
 8004354:	454a      	cmp	r2, r9

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
 8004356:	464d      	mov	r5, r9
 8004358:	bf28      	it	cs
 800435a:	464a      	movcs	r2, r9
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	2000      	movs	r0, #0
 8004362:	f7fe fa9d 	bl	80028a0 <_out_char>
 8004366:	f8db 100c 	ldr.w	r1, [fp, #12]
 800436a:	2330      	movs	r3, #48	; 0x30
 800436c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004370:	e9db 3222 	ldrd	r3, r2, [fp, #136]	; 0x88
 8004374:	431a      	orrs	r2, r3
 8004376:	d169      	bne.n	800444c <myprintf+0x34c>
  return (bool)(qp->next != qp);
 8004378:	f8da 0000 	ldr.w	r0, [sl]
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 800437c:	f8da 300c 	ldr.w	r3, [sl, #12]
  oip->dbg.lock_cnt = (cnt_t)1;
 8004380:	2401      	movs	r4, #1

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8004382:	4550      	cmp	r0, sl
 8004384:	f8cb 408c 	str.w	r4, [fp, #140]	; 0x8c
    currtp->mtxlist = mp->next;
 8004388:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 800438a:	f000 81ea 	beq.w	8004762 <myprintf+0x662>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 800438e:	6c0c      	ldr	r4, [r1, #64]	; 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 8004390:	b14b      	cbz	r3, 80043a6 <myprintf+0x2a6>
 8004392:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <myprintf+0x2a0>
 8004398:	6892      	ldr	r2, [r2, #8]
 800439a:	4294      	cmp	r4, r2
 800439c:	bf38      	it	cc
 800439e:	4614      	movcc	r4, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 80043a0:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f5      	bne.n	8004392 <myprintf+0x292>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 80043a6:	608c      	str	r4, [r1, #8]
  qp->next       = p->next;
 80043a8:	6803      	ldr	r3, [r0, #0]
 80043aa:	f8ca 3000 	str.w	r3, [sl]
  qp->next->prev = qp;
 80043ae:	f8c3 a004 	str.w	sl, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80043b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      tp->mtxlist = mp;
 80043b4:	f8c0 a03c 	str.w	sl, [r0, #60]	; 0x3c
      mp->next = tp->mtxlist;
 80043b8:	e9ca 0302 	strd	r0, r3, [sl, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80043bc:	f7fd fdf8 	bl	8001fb0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80043c0:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 829a 	bne.w	80048fe <myprintf+0x7fe>
 80043ca:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f340 8295 	ble.w	80048fe <myprintf+0x7fe>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 80043d4:	f8db 2000 	ldr.w	r2, [fp]
 80043d8:	f8db 300c 	ldr.w	r3, [fp, #12]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d90b      	bls.n	80043fc <myprintf+0x2fc>
    __sch_reschedule_ahead();
 80043e4:	f7ff fe5c 	bl	80040a0 <chSchDoPreemption>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80043e8:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 813f 	bne.w	8004670 <myprintf+0x570>
 80043f2:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f340 813a 	ble.w	8004670 <myprintf+0x570>
  oip->dbg.lock_cnt = (cnt_t)0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8004402:	f383 8811 	msr	BASEPRI, r3
}
 8004406:	4628      	mov	r0, r5
 8004408:	b011      	add	sp, #68	; 0x44
 800440a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440e:	b004      	add	sp, #16
 8004410:	4770      	bx	lr
      if (_is_digit(*format)) {
 8004412:	7860      	ldrb	r0, [r4, #1]
 8004414:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004418:	2b09      	cmp	r3, #9
      flags |= FLAGS_PRECISION;
 800441a:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      format++;
 800441e:	f104 0201 	add.w	r2, r4, #1
      if (_is_digit(*format)) {
 8004422:	f240 818f 	bls.w	8004744 <myprintf+0x644>
      else if (*format == '*') {
 8004426:	282a      	cmp	r0, #42	; 0x2a
 8004428:	f000 8087 	beq.w	800453a <myprintf+0x43a>
      format++;
 800442c:	4614      	mov	r4, r2
 800442e:	e6f1      	b.n	8004214 <myprintf+0x114>
  unsigned int i = 0U;
 8004430:	2500      	movs	r5, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004432:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004436:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  while (_is_digit(**str)) {
 800443a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800443e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004442:	2b09      	cmp	r3, #9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004444:	f1a5 0530 	sub.w	r5, r5, #48	; 0x30
  while (_is_digit(**str)) {
 8004448:	d9f3      	bls.n	8004432 <myprintf+0x332>
 800444a:	e6e0      	b.n	800420e <myprintf+0x10e>
    chSysHalt("SV#4");
 800444c:	48ab      	ldr	r0, [pc, #684]	; (80046fc <myprintf+0x5fc>)
 800444e:	f7fc fd2f 	bl	8000eb0 <chSysHalt>
      const int w = va_arg(va, int);
 8004452:	f858 5b04 	ldr.w	r5, [r8], #4
    if (*format == '.') {
 8004456:	7860      	ldrb	r0, [r4, #1]
      if (w < 0) {
 8004458:	2d00      	cmp	r5, #0
        flags |= FLAGS_LEFT;    // reverse padding
 800445a:	bfbc      	itt	lt
 800445c:	f04c 0c02 	orrlt.w	ip, ip, #2
        width = (unsigned int)-w;
 8004460:	426d      	neglt	r5, r5
      format++;
 8004462:	3401      	adds	r4, #1
 8004464:	e6d3      	b.n	800420e <myprintf+0x10e>
  p->prev->next = p->next;
 8004466:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 800446a:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800446c:	6013      	str	r3, [r2, #0]
  ch_queue_t *cp = qp;
 800446e:	4639      	mov	r1, r7
  p->next->prev = p->prev;
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	e003      	b.n	800447c <myprintf+0x37c>
  } while ((cp != qp) &&
 8004474:	688a      	ldr	r2, [r1, #8]
 8004476:	6883      	ldr	r3, [r0, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <myprintf+0x382>
    cp = cp->next;
 800447c:	6809      	ldr	r1, [r1, #0]
  } while ((cp != qp) &&
 800447e:	428f      	cmp	r7, r1
 8004480:	d1f8      	bne.n	8004474 <myprintf+0x374>
  tp->prev       = cp->prev;
 8004482:	684b      	ldr	r3, [r1, #4]
  tp->next       = cp;
 8004484:	6001      	str	r1, [r0, #0]
  tp->prev       = cp->prev;
 8004486:	6043      	str	r3, [r0, #4]
  tp->prev->next = tp;
 8004488:	6018      	str	r0, [r3, #0]
  cp->prev       = tp;
 800448a:	6048      	str	r0, [r1, #4]
}
 800448c:	e663      	b.n	8004156 <myprintf+0x56>
  p->prev->next = p->next;
 800448e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004492:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8004494:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8004496:	f7fd fd8b 	bl	8001fb0 <chSchReadyI.isra.0>
          break;
 800449a:	e65c      	b.n	8004156 <myprintf+0x56>
  p->prev->next = p->next;
 800449c:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 80044a0:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80044a2:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80044a4:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 80044a6:	463b      	mov	r3, r7
 80044a8:	e003      	b.n	80044b2 <myprintf+0x3b2>
  } while ((cp != qp) &&
 80044aa:	6899      	ldr	r1, [r3, #8]
 80044ac:	6882      	ldr	r2, [r0, #8]
 80044ae:	4291      	cmp	r1, r2
 80044b0:	d302      	bcc.n	80044b8 <myprintf+0x3b8>
    cp = cp->next;
 80044b2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 80044b4:	429f      	cmp	r7, r3
 80044b6:	d1f8      	bne.n	80044aa <myprintf+0x3aa>
  tp->prev       = cp->prev;
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	6042      	str	r2, [r0, #4]
  tp->next       = cp;
 80044bc:	6003      	str	r3, [r0, #0]
  tp->prev->next = tp;
 80044be:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 80044c0:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 80044c2:	68b8      	ldr	r0, [r7, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 80044c4:	68b3      	ldr	r3, [r6, #8]
 80044c6:	6882      	ldr	r2, [r0, #8]
 80044c8:	4293      	cmp	r3, r2
 80044ca:	f63f ae38 	bhi.w	800413e <myprintf+0x3e>
 80044ce:	e642      	b.n	8004156 <myprintf+0x56>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80044d0:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 80044d4:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80044d6:	bf04      	itt	eq
 80044d8:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80044dc:	f44c 6c00 	orreq.w	ip, ip, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80044e0:	2845      	cmp	r0, #69	; 0x45
 80044e2:	bf08      	it	eq
 80044e4:	f04c 0c20 	orreq.w	ip, ip, #32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80044e8:	e9cd 5c03 	strd	r5, ip, [sp, #12]
 80044ec:	f108 0807 	add.w	r8, r8, #7
 80044f0:	9702      	str	r7, [sp, #8]
 80044f2:	f028 0807 	bic.w	r8, r8, #7
 80044f6:	e8f8 6702 	ldrd	r6, r7, [r8], #8
 80044fa:	464a      	mov	r2, r9
 80044fc:	e9cd 6700 	strd	r6, r7, [sp]
 8004500:	487f      	ldr	r0, [pc, #508]	; (8004700 <myprintf+0x600>)
 8004502:	910a      	str	r1, [sp, #40]	; 0x28
 8004504:	f7fc fef4 	bl	80012f0 <_etoa.constprop.0>
        format++;
 8004508:	3401      	adds	r4, #1
        break;
 800450a:	990a      	ldr	r1, [sp, #40]	; 0x28
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800450c:	4681      	mov	r9, r0
        break;
 800450e:	e65a      	b.n	80041c6 <myprintf+0xc6>
        if (*format == 'h') {
 8004510:	7860      	ldrb	r0, [r4, #1]
 8004512:	2868      	cmp	r0, #104	; 0x68
 8004514:	f000 812f 	beq.w	8004776 <myprintf+0x676>
        flags |= FLAGS_SHORT;
 8004518:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        format++;
 800451c:	3401      	adds	r4, #1
 800451e:	e697      	b.n	8004250 <myprintf+0x150>
        if (*format == 'l') {
 8004520:	7860      	ldrb	r0, [r4, #1]
 8004522:	286c      	cmp	r0, #108	; 0x6c
 8004524:	f000 812c 	beq.w	8004780 <myprintf+0x680>
        flags |= FLAGS_LONG;
 8004528:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
        format++;
 800452c:	3401      	adds	r4, #1
 800452e:	e68f      	b.n	8004250 <myprintf+0x150>
        if (*format == 'l') {
 8004530:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004532:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
        format++;
 8004536:	3401      	adds	r4, #1
        break;
 8004538:	e68a      	b.n	8004250 <myprintf+0x150>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800453a:	f858 7b04 	ldr.w	r7, [r8], #4
    switch (*format) {
 800453e:	78a0      	ldrb	r0, [r4, #2]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004540:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
        format++;
 8004544:	3402      	adds	r4, #2
 8004546:	e666      	b.n	8004216 <myprintf+0x116>
        if (*format == 'x' || *format == 'X') {
 8004548:	2878      	cmp	r0, #120	; 0x78
 800454a:	f000 8121 	beq.w	8004790 <myprintf+0x690>
 800454e:	2862      	cmp	r0, #98	; 0x62
 8004550:	f000 81c8 	beq.w	80048e4 <myprintf+0x7e4>
 8004554:	286f      	cmp	r0, #111	; 0x6f
 8004556:	f000 81a2 	beq.w	800489e <myprintf+0x79e>
 800455a:	2858      	cmp	r0, #88	; 0x58
 800455c:	f000 8146 	beq.w	80047ec <myprintf+0x6ec>
        if ((*format != 'i') && (*format != 'd')) {
 8004560:	2869      	cmp	r0, #105	; 0x69
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004562:	f02c 0c10 	bic.w	ip, ip, #16
          base = 10U;
 8004566:	f04f 0e0a 	mov.w	lr, #10
        if ((*format != 'i') && (*format != 'd')) {
 800456a:	f040 8194 	bne.w	8004896 <myprintf+0x796>
        if (flags & FLAGS_PRECISION) {
 800456e:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 8004572:	4666      	mov	r6, ip
 8004574:	d067      	beq.n	8004646 <myprintf+0x546>
          flags &= ~FLAGS_ZEROPAD;
 8004576:	f026 0601 	bic.w	r6, r6, #1
        if ((*format == 'i') || (*format == 'd')) {
 800457a:	2869      	cmp	r0, #105	; 0x69
 800457c:	d063      	beq.n	8004646 <myprintf+0x546>
 800457e:	2864      	cmp	r0, #100	; 0x64
 8004580:	d061      	beq.n	8004646 <myprintf+0x546>
          if (flags & FLAGS_LONG_LONG) {
 8004582:	f416 7000 	ands.w	r0, r6, #512	; 0x200
 8004586:	f040 810c 	bne.w	80047a2 <myprintf+0x6a2>
          else if (flags & FLAGS_LONG) {
 800458a:	05f3      	lsls	r3, r6, #23
 800458c:	f100 81be 	bmi.w	800490c <myprintf+0x80c>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004590:	0670      	lsls	r0, r6, #25
 8004592:	f858 3b04 	ldr.w	r3, [r8], #4
 8004596:	f140 81b5 	bpl.w	8004904 <myprintf+0x804>
 800459a:	b2db      	uxtb	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800459c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80045a0:	e9cd e701 	strd	lr, r7, [sp, #4]
 80045a4:	464a      	mov	r2, r9
 80045a6:	2000      	movs	r0, #0
 80045a8:	9000      	str	r0, [sp, #0]
 80045aa:	4855      	ldr	r0, [pc, #340]	; (8004700 <myprintf+0x600>)
 80045ac:	910a      	str	r1, [sp, #40]	; 0x28
 80045ae:	f7fc fe57 	bl	8001260 <_ntoa_long.constprop.0>
 80045b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80045b4:	4681      	mov	r9, r0
        format++;
 80045b6:	3401      	adds	r4, #1
        break;
 80045b8:	e605      	b.n	80041c6 <myprintf+0xc6>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80045ba:	2846      	cmp	r0, #70	; 0x46
 80045bc:	bf08      	it	eq
 80045be:	f04c 0c20 	orreq.w	ip, ip, #32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80045c2:	e9cd 5c03 	strd	r5, ip, [sp, #12]
 80045c6:	f108 0807 	add.w	r8, r8, #7
 80045ca:	9702      	str	r7, [sp, #8]
 80045cc:	f028 0807 	bic.w	r8, r8, #7
 80045d0:	e8f8 6702 	ldrd	r6, r7, [r8], #8
 80045d4:	464a      	mov	r2, r9
 80045d6:	e9cd 6700 	strd	r6, r7, [sp]
 80045da:	4849      	ldr	r0, [pc, #292]	; (8004700 <myprintf+0x600>)
 80045dc:	910a      	str	r1, [sp, #40]	; 0x28
 80045de:	f7fd f877 	bl	80016d0 <_ftoa.constprop.0>
        format++;
 80045e2:	3401      	adds	r4, #1
        break;
 80045e4:	990a      	ldr	r1, [sp, #40]	; 0x28
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80045e6:	4681      	mov	r9, r0
        break;
 80045e8:	e5ed      	b.n	80041c6 <myprintf+0xc6>
        if (!(flags & FLAGS_LEFT)) {
 80045ea:	f01c 0f02 	tst.w	ip, #2
 80045ee:	f000 8133 	beq.w	8004858 <myprintf+0x758>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80045f2:	f858 0b04 	ldr.w	r0, [r8], #4
 80045f6:	910a      	str	r1, [sp, #40]	; 0x28
 80045f8:	464a      	mov	r2, r9
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	b2c0      	uxtb	r0, r0
 8004600:	f7fe f94e 	bl	80028a0 <_out_char>
 8004604:	f109 0601 	add.w	r6, r9, #1
          while (l++ < width) {
 8004608:	2d01      	cmp	r5, #1
 800460a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800460c:	bf98      	it	ls
 800460e:	46b1      	movls	r9, r6
 8004610:	d9d1      	bls.n	80045b6 <myprintf+0x4b6>
 8004612:	44a9      	add	r9, r5
 8004614:	460d      	mov	r5, r1
 8004616:	4632      	mov	r2, r6
            out(' ', buffer, idx++, maxlen);
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	3601      	adds	r6, #1
 800461e:	4629      	mov	r1, r5
 8004620:	2020      	movs	r0, #32
 8004622:	f7fe f93d 	bl	80028a0 <_out_char>
          while (l++ < width) {
 8004626:	454e      	cmp	r6, r9
 8004628:	d1f5      	bne.n	8004616 <myprintf+0x516>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800462a:	4629      	mov	r1, r5
 800462c:	e7c3      	b.n	80045b6 <myprintf+0x4b6>
        out('%', buffer, idx++, maxlen);
 800462e:	464a      	mov	r2, r9
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	2025      	movs	r0, #37	; 0x25
 8004636:	910a      	str	r1, [sp, #40]	; 0x28
        format++;
 8004638:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 800463a:	f7fe f931 	bl	80028a0 <_out_char>
 800463e:	f109 0901 	add.w	r9, r9, #1
        break;
 8004642:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004644:	e5bf      	b.n	80041c6 <myprintf+0xc6>
          if (flags & FLAGS_LONG_LONG) {
 8004646:	05b2      	lsls	r2, r6, #22
 8004648:	f100 812c 	bmi.w	80048a4 <myprintf+0x7a4>
          else if (flags & FLAGS_LONG) {
 800464c:	05f3      	lsls	r3, r6, #23
 800464e:	f100 80c0 	bmi.w	80047d2 <myprintf+0x6d2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004652:	0670      	lsls	r0, r6, #25
 8004654:	f140 8149 	bpl.w	80048ea <myprintf+0x7ea>
 8004658:	f858 2b04 	ldr.w	r2, [r8], #4
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	4613      	mov	r3, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004660:	0fd2      	lsrs	r2, r2, #31
 8004662:	9200      	str	r2, [sp, #0]
 8004664:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8004668:	e9cd e701 	strd	lr, r7, [sp, #4]
 800466c:	464a      	mov	r2, r9
 800466e:	e79c      	b.n	80045aa <myprintf+0x4aa>
    chSysHalt("SV#5");
 8004670:	4824      	ldr	r0, [pc, #144]	; (8004704 <myprintf+0x604>)
 8004672:	f7fc fc1d 	bl	8000eb0 <chSysHalt>
    mp->next = currtp->mtxlist;
 8004676:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    mp->owner = currtp;
 8004678:	f8ca 6008 	str.w	r6, [sl, #8]
    mp->next = currtp->mtxlist;
 800467c:	f8ca 300c 	str.w	r3, [sl, #12]
    currtp->mtxlist = mp;
 8004680:	f8c6 a03c 	str.w	sl, [r6, #60]	; 0x3c
void __dbg_check_unlock(void) {
 8004684:	e584      	b.n	8004190 <myprintf+0x90>
        const char* p = va_arg(va, char*);
 8004686:	4643      	mov	r3, r8
 8004688:	f853 8b04 	ldr.w	r8, [r3], #4
 800468c:	930a      	str	r3, [sp, #40]	; 0x28
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800468e:	2f00      	cmp	r7, #0
 8004690:	d06a      	beq.n	8004768 <myprintf+0x668>
  for (s = str; *s && maxsize--; ++s);
 8004692:	f898 0000 	ldrb.w	r0, [r8]
 8004696:	b160      	cbz	r0, 80046b2 <myprintf+0x5b2>
 8004698:	1e7a      	subs	r2, r7, #1
 800469a:	3201      	adds	r2, #1
 800469c:	4442      	add	r2, r8
        const char* p = va_arg(va, char*);
 800469e:	4646      	mov	r6, r8
 80046a0:	e001      	b.n	80046a6 <myprintf+0x5a6>
  for (s = str; *s && maxsize--; ++s);
 80046a2:	4296      	cmp	r6, r2
 80046a4:	d003      	beq.n	80046ae <myprintf+0x5ae>
 80046a6:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f9      	bne.n	80046a2 <myprintf+0x5a2>
  return (unsigned int)(s - str);
 80046ae:	eba6 0608 	sub.w	r6, r6, r8
        if (flags & FLAGS_PRECISION) {
 80046b2:	f41c 6380 	ands.w	r3, ip, #1024	; 0x400
 80046b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80046b8:	d002      	beq.n	80046c0 <myprintf+0x5c0>
          l = (l < precision ? l : precision);
 80046ba:	42be      	cmp	r6, r7
 80046bc:	bf28      	it	cs
 80046be:	463e      	movcs	r6, r7
        if (!(flags & FLAGS_LEFT)) {
 80046c0:	f01c 0302 	ands.w	r3, ip, #2
 80046c4:	930c      	str	r3, [sp, #48]	; 0x30
 80046c6:	f000 8096 	beq.w	80047f6 <myprintf+0x6f6>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f000 80b1 	beq.w	8004832 <myprintf+0x732>
 80046d0:	960d      	str	r6, [sp, #52]	; 0x34
          out(*(p++), buffer, idx++, maxlen);
 80046d2:	464a      	mov	r2, r9
 80046d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80046d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80046d8:	460c      	mov	r4, r1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80046da:	b116      	cbz	r6, 80046e2 <myprintf+0x5e2>
 80046dc:	1e7b      	subs	r3, r7, #1
 80046de:	b33f      	cbz	r7, 8004730 <myprintf+0x630>
 80046e0:	461f      	mov	r7, r3
          out(*(p++), buffer, idx++, maxlen);
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295
 80046e6:	4621      	mov	r1, r4
 80046e8:	f7fe f8da 	bl	80028a0 <_out_char>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80046ec:	f818 0f01 	ldrb.w	r0, [r8, #1]!
          out(*(p++), buffer, idx++, maxlen);
 80046f0:	f109 0901 	add.w	r9, r9, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80046f4:	b1e0      	cbz	r0, 8004730 <myprintf+0x630>
          out(*(p++), buffer, idx++, maxlen);
 80046f6:	464a      	mov	r2, r9
 80046f8:	e7ef      	b.n	80046da <myprintf+0x5da>
 80046fa:	bf00      	nop
 80046fc:	08005d10 	.word	0x08005d10
 8004700:	080028a1 	.word	0x080028a1
 8004704:	08005d38 	.word	0x08005d38
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004708:	f04c 0021 	orr.w	r0, ip, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800470c:	f858 3b04 	ldr.w	r3, [r8], #4
 8004710:	9004      	str	r0, [sp, #16]
 8004712:	2008      	movs	r0, #8
 8004714:	9003      	str	r0, [sp, #12]
 8004716:	2010      	movs	r0, #16
 8004718:	464a      	mov	r2, r9
 800471a:	9001      	str	r0, [sp, #4]
 800471c:	9702      	str	r7, [sp, #8]
 800471e:	4886      	ldr	r0, [pc, #536]	; (8004938 <myprintf+0x838>)
 8004720:	9600      	str	r6, [sp, #0]
 8004722:	910a      	str	r1, [sp, #40]	; 0x28
 8004724:	f7fc fd9c 	bl	8001260 <_ntoa_long.constprop.0>
        format++;
 8004728:	3401      	adds	r4, #1
        break;
 800472a:	990a      	ldr	r1, [sp, #40]	; 0x28
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800472c:	4681      	mov	r9, r0
        break;
 800472e:	e54a      	b.n	80041c6 <myprintf+0xc6>
 8004730:	4621      	mov	r1, r4
        if (flags & FLAGS_LEFT) {
 8004732:	e9dd 430b 	ldrd	r4, r3, [sp, #44]	; 0x2c
 8004736:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8004738:	2b00      	cmp	r3, #0
 800473a:	d17a      	bne.n	8004832 <myprintf+0x732>
        const char* p = va_arg(va, char*);
 800473c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
        format++;
 8004740:	3401      	adds	r4, #1
        break;
 8004742:	e540      	b.n	80041c6 <myprintf+0xc6>
  unsigned int i = 0U;
 8004744:	2700      	movs	r7, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004746:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800474a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 800474e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
  while (_is_digit(**str)) {
 8004752:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8004756:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800475a:	2b09      	cmp	r3, #9
 800475c:	d9f3      	bls.n	8004746 <myprintf+0x646>
 800475e:	4614      	mov	r4, r2
 8004760:	e559      	b.n	8004216 <myprintf+0x116>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8004762:	f8ca 2008 	str.w	r2, [sl, #8]
 8004766:	e649      	b.n	80043fc <myprintf+0x2fc>
  for (s = str; *s && maxsize--; ++s);
 8004768:	f898 0000 	ldrb.w	r0, [r8]
 800476c:	f06f 0201 	mvn.w	r2, #1
 8004770:	2800      	cmp	r0, #0
 8004772:	d192      	bne.n	800469a <myprintf+0x59a>
 8004774:	e79d      	b.n	80046b2 <myprintf+0x5b2>
    switch (*format) {
 8004776:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 8004778:	f04c 0cc0 	orr.w	ip, ip, #192	; 0xc0
          format++;
 800477c:	3402      	adds	r4, #2
 800477e:	e567      	b.n	8004250 <myprintf+0x150>
    switch (*format) {
 8004780:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 8004782:	f44c 7c40 	orr.w	ip, ip, #768	; 0x300
          format++;
 8004786:	3402      	adds	r4, #2
 8004788:	e562      	b.n	8004250 <myprintf+0x150>
  while (*format)
 800478a:	4602      	mov	r2, r0
 800478c:	a90e      	add	r1, sp, #56	; 0x38
 800478e:	e5e5      	b.n	800435c <myprintf+0x25c>
          base = 16U;
 8004790:	f04f 0e10 	mov.w	lr, #16
        if (flags & FLAGS_PRECISION) {
 8004794:	f41c 6f80 	tst.w	ip, #1024	; 0x400
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004798:	f02c 060c 	bic.w	r6, ip, #12
        if (flags & FLAGS_PRECISION) {
 800479c:	f43f aeed 	beq.w	800457a <myprintf+0x47a>
 80047a0:	e6e9      	b.n	8004576 <myprintf+0x476>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80047a2:	e9cd 5607 	strd	r5, r6, [sp, #28]
 80047a6:	2300      	movs	r3, #0
 80047a8:	f108 0807 	add.w	r8, r8, #7
 80047ac:	9706      	str	r7, [sp, #24]
 80047ae:	f8cd e010 	str.w	lr, [sp, #16]
 80047b2:	9305      	str	r3, [sp, #20]
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	f028 0807 	bic.w	r8, r8, #7
 80047ba:	e8f8 6702 	ldrd	r6, r7, [r8], #8
 80047be:	464a      	mov	r2, r9
 80047c0:	e9cd 6700 	strd	r6, r7, [sp]
 80047c4:	485c      	ldr	r0, [pc, #368]	; (8004938 <myprintf+0x838>)
 80047c6:	910a      	str	r1, [sp, #40]	; 0x28
 80047c8:	f7fc fce2 	bl	8001190 <_ntoa_long_long.constprop.0>
 80047cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047ce:	4681      	mov	r9, r0
 80047d0:	e6f1      	b.n	80045b6 <myprintf+0x4b6>
            const long value = va_arg(va, long);
 80047d2:	f858 3b04 	ldr.w	r3, [r8], #4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80047d6:	0fd8      	lsrs	r0, r3, #31
 80047d8:	2b00      	cmp	r3, #0
 80047da:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80047de:	e9cd e701 	strd	lr, r7, [sp, #4]
 80047e2:	464a      	mov	r2, r9
 80047e4:	9000      	str	r0, [sp, #0]
 80047e6:	bfb8      	it	lt
 80047e8:	425b      	neglt	r3, r3
 80047ea:	e6de      	b.n	80045aa <myprintf+0x4aa>
          flags |= FLAGS_UPPERCASE;
 80047ec:	f04c 0c20 	orr.w	ip, ip, #32
 80047f0:	f04f 0e10 	mov.w	lr, #16
 80047f4:	e7ce      	b.n	8004794 <myprintf+0x694>
          while (l++ < width) {
 80047f6:	42b5      	cmp	r5, r6
 80047f8:	f106 0301 	add.w	r3, r6, #1
 80047fc:	f240 8097 	bls.w	800492e <myprintf+0x82e>
 8004800:	eb09 0305 	add.w	r3, r9, r5
 8004804:	940d      	str	r4, [sp, #52]	; 0x34
 8004806:	1b9e      	subs	r6, r3, r6
 8004808:	460c      	mov	r4, r1
 800480a:	464a      	mov	r2, r9
            out(' ', buffer, idx++, maxlen);
 800480c:	f04f 33ff 	mov.w	r3, #4294967295
 8004810:	f109 0901 	add.w	r9, r9, #1
 8004814:	4621      	mov	r1, r4
 8004816:	2020      	movs	r0, #32
 8004818:	f7fe f842 	bl	80028a0 <_out_char>
          while (l++ < width) {
 800481c:	45b1      	cmp	r9, r6
 800481e:	d1f4      	bne.n	800480a <myprintf+0x70a>
 8004820:	f898 0000 	ldrb.w	r0, [r8]
 8004824:	4621      	mov	r1, r4
 8004826:	1c6e      	adds	r6, r5, #1
 8004828:	9c0d      	ldr	r4, [sp, #52]	; 0x34
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800482a:	2800      	cmp	r0, #0
 800482c:	f47f af50 	bne.w	80046d0 <myprintf+0x5d0>
 8004830:	e784      	b.n	800473c <myprintf+0x63c>
          while (l++ < width) {
 8004832:	42b5      	cmp	r5, r6
 8004834:	464f      	mov	r7, r9
 8004836:	d981      	bls.n	800473c <myprintf+0x63c>
 8004838:	44a9      	add	r9, r5
 800483a:	eba9 0906 	sub.w	r9, r9, r6
 800483e:	460d      	mov	r5, r1
 8004840:	463a      	mov	r2, r7
            out(' ', buffer, idx++, maxlen);
 8004842:	f04f 33ff 	mov.w	r3, #4294967295
 8004846:	3701      	adds	r7, #1
 8004848:	4629      	mov	r1, r5
 800484a:	2020      	movs	r0, #32
 800484c:	f7fe f828 	bl	80028a0 <_out_char>
          while (l++ < width) {
 8004850:	454f      	cmp	r7, r9
 8004852:	d1f5      	bne.n	8004840 <myprintf+0x740>
 8004854:	4629      	mov	r1, r5
 8004856:	e771      	b.n	800473c <myprintf+0x63c>
          while (l++ < width) {
 8004858:	2d01      	cmp	r5, #1
 800485a:	d966      	bls.n	800492a <myprintf+0x82a>
 800485c:	f109 33ff 	add.w	r3, r9, #4294967295
 8004860:	441d      	add	r5, r3
 8004862:	460e      	mov	r6, r1
 8004864:	464a      	mov	r2, r9
            out(' ', buffer, idx++, maxlen);
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	f109 0901 	add.w	r9, r9, #1
 800486e:	4631      	mov	r1, r6
 8004870:	2020      	movs	r0, #32
 8004872:	f7fe f815 	bl	80028a0 <_out_char>
          while (l++ < width) {
 8004876:	45a9      	cmp	r9, r5
 8004878:	d1f4      	bne.n	8004864 <myprintf+0x764>
 800487a:	4631      	mov	r1, r6
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800487c:	f858 0b04 	ldr.w	r0, [r8], #4
 8004880:	910a      	str	r1, [sp, #40]	; 0x28
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	b2c0      	uxtb	r0, r0
 8004888:	462a      	mov	r2, r5
 800488a:	f7fe f809 	bl	80028a0 <_out_char>
 800488e:	f105 0901 	add.w	r9, r5, #1
 8004892:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004894:	e68f      	b.n	80045b6 <myprintf+0x4b6>
        if ((*format != 'i') && (*format != 'd')) {
 8004896:	2864      	cmp	r0, #100	; 0x64
 8004898:	f43f ae69 	beq.w	800456e <myprintf+0x46e>
 800489c:	e77a      	b.n	8004794 <myprintf+0x694>
          while (l++ < width) {
 800489e:	f04f 0e08 	mov.w	lr, #8
 80048a2:	e777      	b.n	8004794 <myprintf+0x694>
            const long long value = va_arg(va, long long);
 80048a4:	f108 0807 	add.w	r8, r8, #7
 80048a8:	f028 0807 	bic.w	r8, r8, #7
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80048ac:	2000      	movs	r0, #0
            const long long value = va_arg(va, long long);
 80048ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80048b2:	f858 2b08 	ldr.w	r2, [r8], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80048b6:	9005      	str	r0, [sp, #20]
 80048b8:	0fd8      	lsrs	r0, r3, #31
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	e9cd 5607 	strd	r5, r6, [sp, #28]
 80048c0:	9706      	str	r7, [sp, #24]
 80048c2:	f8cd e010 	str.w	lr, [sp, #16]
 80048c6:	9002      	str	r0, [sp, #8]
 80048c8:	da02      	bge.n	80048d0 <myprintf+0x7d0>
 80048ca:	4252      	negs	r2, r2
 80048cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80048d0:	e9cd 2300 	strd	r2, r3, [sp]
 80048d4:	4818      	ldr	r0, [pc, #96]	; (8004938 <myprintf+0x838>)
 80048d6:	910a      	str	r1, [sp, #40]	; 0x28
 80048d8:	464a      	mov	r2, r9
 80048da:	f7fc fc59 	bl	8001190 <_ntoa_long_long.constprop.0>
 80048de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80048e0:	4681      	mov	r9, r0
 80048e2:	e668      	b.n	80045b6 <myprintf+0x4b6>
        format++;
 80048e4:	f04f 0e02 	mov.w	lr, #2
 80048e8:	e754      	b.n	8004794 <myprintf+0x694>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80048ea:	0632      	lsls	r2, r6, #24
 80048ec:	d516      	bpl.n	800491c <myprintf+0x81c>
 80048ee:	f938 2b04 	ldrsh.w	r2, [r8], #4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80048f2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80048f6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	e6b0      	b.n	8004660 <myprintf+0x560>
    chSysHalt("SV#11");
 80048fe:	480f      	ldr	r0, [pc, #60]	; (800493c <myprintf+0x83c>)
 8004900:	f7fc fad6 	bl	8000eb0 <chSysHalt>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004904:	0632      	lsls	r2, r6, #24
 8004906:	bf48      	it	mi
 8004908:	b29b      	uxthmi	r3, r3
 800490a:	e647      	b.n	800459c <myprintf+0x49c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800490c:	f858 3b04 	ldr.w	r3, [r8], #4
 8004910:	464a      	mov	r2, r9
 8004912:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8004916:	e9cd e701 	strd	lr, r7, [sp, #4]
 800491a:	e645      	b.n	80045a8 <myprintf+0x4a8>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800491c:	f858 2b04 	ldr.w	r2, [r8], #4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004920:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8004924:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8004928:	e69a      	b.n	8004660 <myprintf+0x560>
          while (l++ < width) {
 800492a:	464d      	mov	r5, r9
 800492c:	e7a6      	b.n	800487c <myprintf+0x77c>
          while (l++ < width) {
 800492e:	461e      	mov	r6, r3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004930:	2800      	cmp	r0, #0
 8004932:	f47f aecd 	bne.w	80046d0 <myprintf+0x5d0>
 8004936:	e701      	b.n	800473c <myprintf+0x63c>
 8004938:	080028a1 	.word	0x080028a1
 800493c:	08005d20 	.word	0x08005d20

08004940 <ThdSerial>:



/* Serial Manager thread. */
static THD_WORKING_AREA(waThdSerial, 2000); //256
static THD_FUNCTION(ThdSerial, arg) {
 8004940:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <ThdSerial+0x94>)
 8004944:	4924      	ldr	r1, [pc, #144]	; (80049d8 <ThdSerial+0x98>)
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	2330      	movs	r3, #48	; 0x30
 800494a:	61d1      	str	r1, [r2, #28]
 800494c:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8004950:	f7fe f9ae 	bl	8002cb0 <__dbg_check_lock>
  if (sdp->state == SD_STOP) {
 8004954:	4921      	ldr	r1, [pc, #132]	; (80049dc <ThdSerial+0x9c>)
 8004956:	7a0b      	ldrb	r3, [r1, #8]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d02f      	beq.n	80049bc <ThdSerial+0x7c>
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800495c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800495e:	4820      	ldr	r0, [pc, #128]	; (80049e0 <ThdSerial+0xa0>)
 8004960:	f503 32e1 	add.w	r2, r3, #115200	; 0x1c200
 8004964:	fba0 0202 	umull	r0, r2, r0, r2
  USART_TypeDef *u = sdp->usart;
 8004968:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800496a:	0c52      	lsrs	r2, r2, #17
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800496c:	2440      	movs	r4, #64	; 0x40
  u->BRR = brr;
 800496e:	609a      	str	r2, [r3, #8]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004970:	2001      	movs	r0, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004972:	611c      	str	r4, [r3, #16]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004974:	f242 122c 	movw	r2, #8492	; 0x212c
  u->SR = 0;
 8004978:	2400      	movs	r4, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800497a:	6158      	str	r0, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800497c:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 800497e:	20ff      	movs	r0, #255	; 0xff
  u->SR = 0;
 8004980:	601c      	str	r4, [r3, #0]
    sdp->state = SD_READY;
 8004982:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 8004984:	681d      	ldr	r5, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8004986:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8004988:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
 800498c:	720a      	strb	r2, [r1, #8]
  __dbg_check_unlock();
 800498e:	f7fe f977 	bl	8002c80 <__dbg_check_unlock>
 8004992:	f384 8811 	msr	BASEPRI, r4
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD2, &my_config);

  myprintf("ThdSerial\n");
 8004996:	4813      	ldr	r0, [pc, #76]	; (80049e4 <ThdSerial+0xa4>)

  while(true) {


    // Getting data from Serial Driver with a timeout.
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(100));
 8004998:	4d13      	ldr	r5, [pc, #76]	; (80049e8 <ThdSerial+0xa8>)
    // Checking if a timeout has occurred.
    if(tkn != MSG_TIMEOUT)
      sdPut(&SD1, tkn);    // Not a timeout-> forward to GNSS
 800499a:	4c14      	ldr	r4, [pc, #80]	; (80049ec <ThdSerial+0xac>)
  myprintf("ThdSerial\n");
 800499c:	f7ff fbb0 	bl	8004100 <myprintf>
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(100));
 80049a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80049a4:	4628      	mov	r0, r5
 80049a6:	f7fd fdfb 	bl	80025a0 <iqGetTimeout>
    if(tkn != MSG_TIMEOUT)
 80049aa:	1c43      	adds	r3, r0, #1
      sdPut(&SD1, tkn);    // Not a timeout-> forward to GNSS
 80049ac:	b2c1      	uxtb	r1, r0
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295
 80049b2:	4620      	mov	r0, r4
    if(tkn != MSG_TIMEOUT)
 80049b4:	d0f4      	beq.n	80049a0 <ThdSerial+0x60>
      sdPut(&SD1, tkn);    // Not a timeout-> forward to GNSS
 80049b6:	f7fd ff0b 	bl	80027d0 <oqPutTimeout>
 80049ba:	e7f1      	b.n	80049a0 <ThdSerial+0x60>
      rccEnableUSART2(true);
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <ThdSerial+0xb0>)
 80049be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
 80049c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60
 80049ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d0:	e7c4      	b.n	800495c <ThdSerial+0x1c>
 80049d2:	bf00      	nop
 80049d4:	200009f0 	.word	0x200009f0
 80049d8:	08005d58 	.word	0x08005d58
 80049dc:	20000934 	.word	0x20000934
 80049e0:	91a2b3c5 	.word	0x91a2b3c5
 80049e4:	08005d68 	.word	0x08005d68
 80049e8:	20000940 	.word	0x20000940
 80049ec:	200008e4 	.word	0x200008e4
 80049f0:	40023800 	.word	0x40023800
	...

08004a00 <ThdBlinker>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThdBlinker, 128);
static THD_FUNCTION(ThdBlinker, arg) {
 8004a00:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004a04:	4ca8      	ldr	r4, [pc, #672]	; (8004ca8 <ThdBlinker+0x2a8>)
 8004a06:	4aa9      	ldr	r2, [pc, #676]	; (8004cac <ThdBlinker+0x2ac>)
 8004a08:	68e3      	ldr	r3, [r4, #12]
  (void)arg;
  chRegSetThreadName("blinker");
  chThdSleepMilliseconds(100);
  myprintf("ThdBlinker\n");

  for(float i=150; i>30; i=i*0.9){
 8004a0a:	4da9      	ldr	r5, [pc, #676]	; (8004cb0 <ThdBlinker+0x2b0>)
 8004a0c:	61da      	str	r2, [r3, #28]
static THD_FUNCTION(ThdBlinker, arg) {
 8004a0e:	b083      	sub	sp, #12
  chThdSleepMilliseconds(100);
 8004a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a14:	f7fd ff54 	bl	80028c0 <chThdSleep>
  myprintf("ThdBlinker\n");
 8004a18:	48a6      	ldr	r0, [pc, #664]	; (8004cb4 <ThdBlinker+0x2b4>)
    palSetPad(GPIOB, GPIOB_LED1);
 8004a1a:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8004ccc <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8004a1e:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8004cbc <ThdBlinker+0x2bc>
  myprintf("ThdBlinker\n");
 8004a22:	f7ff fb6d 	bl	8004100 <myprintf>
    palSetPad(GPIOB, GPIOB_LED1);
 8004a26:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  myprintf("ThdBlinker\n");
 8004a2a:	2310      	movs	r3, #16
 8004a2c:	9301      	str	r3, [sp, #4]
    palSetPad(GPIOB, GPIOB_LED1);
 8004a2e:	4647      	mov	r7, r8
    chThdSleepMilliseconds(i);
 8004a30:	f240 36e7 	movw	r6, #999	; 0x3e7
    palSetPad(GPIOB, GPIOB_LED1);
 8004a34:	f8ab 7018 	strh.w	r7, [fp, #24]
    chThdSleepMilliseconds(i);
 8004a38:	4628      	mov	r0, r5
    palClearPad(GPIOC, GPIOC_LED2);
 8004a3a:	f8aa 701a 	strh.w	r7, [sl, #26]
    chThdSleepMilliseconds(i);
 8004a3e:	f000 ffcf 	bl	80059e0 <__aeabi_f2ulz>
 8004a42:	0082      	lsls	r2, r0, #2
 8004a44:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8004a48:	1813      	adds	r3, r2, r0
 8004a4a:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 8004a4e:	eb41 020c 	adc.w	r2, r1, ip
 8004a52:	00d2      	lsls	r2, r2, #3
 8004a54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	1a1b      	subs	r3, r3, r0
 8004a5c:	eb62 0201 	sbc.w	r2, r2, r1
 8004a60:	0112      	lsls	r2, r2, #4
 8004a62:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1818      	adds	r0, r3, r0
 8004a6a:	eb41 0102 	adc.w	r1, r1, r2
 8004a6e:	0103      	lsls	r3, r0, #4
 8004a70:	0109      	lsls	r1, r1, #4
 8004a72:	ea41 7110 	orr.w	r1, r1, r0, lsr #28
 8004a76:	1998      	adds	r0, r3, r6
 8004a78:	f141 0100 	adc.w	r1, r1, #0
 8004a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a80:	2300      	movs	r3, #0
 8004a82:	f7fc f9e7 	bl	8000e54 <__aeabi_uldivmod>
 8004a86:	f04f 0930 	mov.w	r9, #48	; 0x30
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004a90:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f040 80f6 	bne.w	8004c86 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f000 80f3 	beq.w	8004c8c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004aa6:	9000      	str	r0, [sp, #0]
 8004aa8:	2008      	movs	r0, #8
 8004aaa:	f7fd fc31 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004aae:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8004ab2:	9900      	ldr	r1, [sp, #0]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	f040 80e2 	bne.w	8004c80 <ThdBlinker+0x280>
 8004abc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f340 80dd 	ble.w	8004c80 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004ac6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8004aca:	f382 8811 	msr	BASEPRI, r2
    palClearPad(GPIOB, GPIOB_LED1);
 8004ace:	f8ab 801a 	strh.w	r8, [fp, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 8004ad2:	f8aa 8018 	strh.w	r8, [sl, #24]
 8004ad6:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004ada:	e9d4 2022 	ldrd	r2, r0, [r4, #136]	; 0x88
 8004ade:	4302      	orrs	r2, r0
 8004ae0:	f040 80d1 	bne.w	8004c86 <ThdBlinker+0x286>
 8004ae4:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8004ae6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004aea:	f7fd fc11 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004aee:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 80c4 	bne.w	8004c80 <ThdBlinker+0x280>
 8004af8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	f340 80bf 	ble.w	8004c80 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004b02:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004b06:	f383 8811 	msr	BASEPRI, r3
  for(float i=150; i>30; i=i*0.9){
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7fb fe18 	bl	8000740 <__aeabi_f2d>
 8004b10:	a361      	add	r3, pc, #388	; (adr r3, 8004c98 <ThdBlinker+0x298>)
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f7fb fe6b 	bl	80007f0 <__aeabi_dmul>
 8004b1a:	f7fc f94b 	bl	8000db4 <__aeabi_d2f>
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	4605      	mov	r5, r0
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	d185      	bne.n	8004a34 <ThdBlinker+0x34>
    chThdSleepMilliseconds(i);
  }
  for(float i=30; i<150; i=i*1.1){
    palSetPad(GPIOB, GPIOB_LED1);
 8004b28:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 8004b2c:	2311      	movs	r3, #17
 8004b2e:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8004ccc <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8004b32:	f8df b188 	ldr.w	fp, [pc, #392]	; 8004cbc <ThdBlinker+0x2bc>
  for(float i=30; i<150; i=i*1.1){
 8004b36:	4e60      	ldr	r6, [pc, #384]	; (8004cb8 <ThdBlinker+0x2b8>)
 8004b38:	9300      	str	r3, [sp, #0]
    palSetPad(GPIOB, GPIOB_LED1);
 8004b3a:	46c8      	mov	r8, r9
    chThdSleepMilliseconds(i);
 8004b3c:	f242 7510 	movw	r5, #10000	; 0x2710
    palSetPad(GPIOB, GPIOB_LED1);
 8004b40:	f8aa 8018 	strh.w	r8, [sl, #24]
    chThdSleepMilliseconds(i);
 8004b44:	4630      	mov	r0, r6
    palClearPad(GPIOC, GPIOC_LED2);
 8004b46:	f8ab 801a 	strh.w	r8, [fp, #26]
    chThdSleepMilliseconds(i);
 8004b4a:	f000 ff49 	bl	80059e0 <__aeabi_f2ulz>
 8004b4e:	fba0 0305 	umull	r0, r3, r0, r5
 8004b52:	fb05 3101 	mla	r1, r5, r1, r3
 8004b56:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004b5a:	18c0      	adds	r0, r0, r3
 8004b5c:	f141 0100 	adc.w	r1, r1, #0
 8004b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b64:	2300      	movs	r3, #0
 8004b66:	f7fc f975 	bl	8000e54 <__aeabi_uldivmod>
 8004b6a:	2730      	movs	r7, #48	; 0x30
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004b72:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f040 8085 	bne.w	8004c86 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8004b82:	2800      	cmp	r0, #0
 8004b84:	f000 8082 	beq.w	8004c8c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004b88:	9001      	str	r0, [sp, #4]
 8004b8a:	2008      	movs	r0, #8
 8004b8c:	f7fd fbc0 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004b90:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d173      	bne.n	8004c80 <ThdBlinker+0x280>
 8004b98:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	dd6f      	ble.n	8004c80 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004ba0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004ba4:	f383 8811 	msr	BASEPRI, r3
    palClearPad(GPIOB, GPIOB_LED1);
 8004ba8:	f8aa 901a 	strh.w	r9, [sl, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 8004bac:	f8ab 9018 	strh.w	r9, [fp, #24]
 8004bb0:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004bb4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	d164      	bne.n	8004c86 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	9901      	ldr	r1, [sp, #4]
 8004bc0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004bc4:	2008      	movs	r0, #8
 8004bc6:	f7fd fba3 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004bca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d156      	bne.n	8004c80 <ThdBlinker+0x280>
 8004bd2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	dd52      	ble.n	8004c80 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004bda:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004bde:	f383 8811 	msr	BASEPRI, r3
  for(float i=30; i<150; i=i*1.1){
 8004be2:	4630      	mov	r0, r6
 8004be4:	f7fb fdac 	bl	8000740 <__aeabi_f2d>
 8004be8:	a32d      	add	r3, pc, #180	; (adr r3, 8004ca0 <ThdBlinker+0x2a0>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fdff 	bl	80007f0 <__aeabi_dmul>
 8004bf2:	f7fc f8df 	bl	8000db4 <__aeabi_d2f>
 8004bf6:	9b00      	ldr	r3, [sp, #0]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	d19f      	bne.n	8004b40 <ThdBlinker+0x140>
    chThdSleepMilliseconds(i);
  }

  while (true) {
    palSetPad(GPIOB, GPIOB_LED1);
 8004c00:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8004c04:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8004ccc <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8004c08:	4e2c      	ldr	r6, [pc, #176]	; (8004cbc <ThdBlinker+0x2bc>)
    palSetPad(GPIOB, GPIOB_LED1);
 8004c0a:	46a9      	mov	r9, r5
 8004c0c:	f8a8 9018 	strh.w	r9, [r8, #24]
    palClearPad(GPIOC, GPIOC_LED2);
 8004c10:	f8a6 901a 	strh.w	r9, [r6, #26]
 8004c14:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004c18:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	d132      	bne.n	8004c86 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f242 7110 	movw	r1, #10000	; 0x2710
 8004c26:	2008      	movs	r0, #8
 8004c28:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004c2c:	f7fd fb70 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004c30:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004c34:	bb23      	cbnz	r3, 8004c80 <ThdBlinker+0x280>
 8004c36:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	dd20      	ble.n	8004c80 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004c3e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004c42:	f383 8811 	msr	BASEPRI, r3
    chThdSleepMilliseconds(1000);
    palClearPad(GPIOB, GPIOC_LED2);
 8004c46:	f8a8 501a 	strh.w	r5, [r8, #26]
    palSetPad(GPIOC, GPIOB_LED1);
 8004c4a:	8335      	strh	r5, [r6, #24]
 8004c4c:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004c50:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004c54:	4313      	orrs	r3, r2
 8004c56:	d116      	bne.n	8004c86 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f242 7110 	movw	r1, #10000	; 0x2710
 8004c5e:	2008      	movs	r0, #8
 8004c60:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004c64:	f7fd fb54 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004c68:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004c6c:	b943      	cbnz	r3, 8004c80 <ThdBlinker+0x280>
 8004c6e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	dd04      	ble.n	8004c80 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004c76:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004c7a:	f383 8811 	msr	BASEPRI, r3
}
 8004c7e:	e7c5      	b.n	8004c0c <ThdBlinker+0x20c>
    chSysHalt("SV#5");
 8004c80:	480f      	ldr	r0, [pc, #60]	; (8004cc0 <ThdBlinker+0x2c0>)
 8004c82:	f7fc f915 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#4");
 8004c86:	480f      	ldr	r0, [pc, #60]	; (8004cc4 <ThdBlinker+0x2c4>)
 8004c88:	f7fc f912 	bl	8000eb0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8004c8c:	480e      	ldr	r0, [pc, #56]	; (8004cc8 <ThdBlinker+0x2c8>)
 8004c8e:	f7fc f90f 	bl	8000eb0 <chSysHalt>
 8004c92:	bf00      	nop
 8004c94:	f3af 8000 	nop.w
 8004c98:	cccccccd 	.word	0xcccccccd
 8004c9c:	3feccccc 	.word	0x3feccccc
 8004ca0:	9999999a 	.word	0x9999999a
 8004ca4:	3ff19999 	.word	0x3ff19999
 8004ca8:	200009f0 	.word	0x200009f0
 8004cac:	08005d74 	.word	0x08005d74
 8004cb0:	43160000 	.word	0x43160000
 8004cb4:	08005d7c 	.word	0x08005d7c
 8004cb8:	41f00000 	.word	0x41f00000
 8004cbc:	40020800 	.word	0x40020800
 8004cc0:	08005d38 	.word	0x08005d38
 8004cc4:	08005d10 	.word	0x08005d10
 8004cc8:	08005e1c 	.word	0x08005e1c
 8004ccc:	40020400 	.word	0x40020400

08004cd0 <ThdGNSS>:

/*
 * GNSS (UART1) receive and forward
 */
static THD_WORKING_AREA(waThdGNSS, 256);
static THD_FUNCTION(ThdGNSS, arg) {
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	4c14      	ldr	r4, [pc, #80]	; (8004d24 <ThdGNSS+0x54>)
 8004cd4:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <ThdGNSS+0x58>)
 8004cd6:	68e3      	ldr	r3, [r4, #12]
  (void)arg;
  chRegSetThreadName("GNSS");
  myprintf("ThdGNSS\n");
 8004cd8:	4814      	ldr	r0, [pc, #80]	; (8004d2c <ThdGNSS+0x5c>)
 8004cda:	61da      	str	r2, [r3, #28]
 8004cdc:	f7ff fa10 	bl	8004100 <myprintf>
 8004ce0:	2330      	movs	r3, #48	; 0x30
 8004ce2:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004ce6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004cea:	4313      	orrs	r3, r2
 8004cec:	d113      	bne.n	8004d16 <ThdGNSS+0x46>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004cee:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004cf0:	f242 7110 	movw	r1, #10000	; 0x2710
 8004cf4:	2008      	movs	r0, #8
 8004cf6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004cfa:	f7fd fb09 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004cfe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004d02:	b95b      	cbnz	r3, 8004d1c <ThdGNSS+0x4c>
 8004d04:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004d08:	2a00      	cmp	r2, #0
 8004d0a:	dd07      	ble.n	8004d1c <ThdGNSS+0x4c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004d0c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004d10:	f383 8811 	msr	BASEPRI, r3
    }
  }
*/

  chThdSleepMilliseconds(1000); //for debugging when disabled
}
 8004d14:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 8004d16:	4806      	ldr	r0, [pc, #24]	; (8004d30 <ThdGNSS+0x60>)
 8004d18:	f7fc f8ca 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 8004d1c:	4805      	ldr	r0, [pc, #20]	; (8004d34 <ThdGNSS+0x64>)
 8004d1e:	f7fc f8c7 	bl	8000eb0 <chSysHalt>
 8004d22:	bf00      	nop
 8004d24:	200009f0 	.word	0x200009f0
 8004d28:	08005d88 	.word	0x08005d88
 8004d2c:	08005d90 	.word	0x08005d90
 8004d30:	08005d10 	.word	0x08005d10
 8004d34:	08005d38 	.word	0x08005d38
	...

08004d40 <ThdBeeper>:
/*
 * Piezo beeper
 */

static THD_WORKING_AREA(waThdBeeper, 128);
static THD_FUNCTION(ThdBeeper, arg) {
 8004d40:	b580      	push	{r7, lr}
  (void)arg;
  myprintf("ThdBeeper\n");
 8004d42:	483b      	ldr	r0, [pc, #236]	; (8004e30 <ThdBeeper+0xf0>)
 8004d44:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004e48 <ThdBeeper+0x108>
 8004d48:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8004e4c <ThdBeeper+0x10c>
void heater_disable(void){
  palClearPad(GPIOA, GPIOA_heater_enable);
}

void piezo_toggle(void){
  palTogglePad(GPIOC, GPIOC_PIEZO_A);
 8004d4c:	4d39      	ldr	r5, [pc, #228]	; (8004e34 <ThdBeeper+0xf4>)
 8004d4e:	f7ff f9d7 	bl	8004100 <myprintf>

  while(true){

    if(beep_ms){
 8004d52:	f8d9 3000 	ldr.w	r3, [r9]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d046      	beq.n	8004de8 <ThdBeeper+0xa8>
      systime_t start = chVTGetSystemTimeX();
      systime_t end = chTimeAddX(start, TIME_MS2I(beep_ms));
 8004d5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d5e:	f240 30e7 	movw	r0, #999	; 0x3e7
 8004d62:	2100      	movs	r1, #0
 8004d64:	fbe3 0102 	umlal	r0, r1, r3, r2
 8004d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f7fc f871 	bl	8000e54 <__aeabi_uldivmod>
 8004d72:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8004d76:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004d7a:	b2bf      	uxth	r7, r7
 8004d7c:	d255      	bcs.n	8004e2a <ThdBeeper+0xea>
 8004d7e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8004d82:	4c2d      	ldr	r4, [pc, #180]	; (8004e38 <ThdBeeper+0xf8>)
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8004d84:	1bdb      	subs	r3, r3, r7
  return systime + (systime_t)interval;
 8004d86:	b286      	uxth	r6, r0
      while (chTimeIsInRangeX(chVTGetSystemTimeX(), start, end)) {
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	42b3      	cmp	r3, r6
 8004d8c:	bf38      	it	cc
 8004d8e:	f04f 0a30 	movcc.w	sl, #48	; 0x30
 8004d92:	d225      	bcs.n	8004de0 <ThdBeeper+0xa0>
 8004d94:	696b      	ldr	r3, [r5, #20]
 8004d96:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8004d9a:	616b      	str	r3, [r5, #20]
  palTogglePad(GPIOC, GPIOC_PIEZO_B);
 8004d9c:	696b      	ldr	r3, [r5, #20]
 8004d9e:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 8004da2:	616b      	str	r3, [r5, #20]
 8004da4:	f38a 8811 	msr	BASEPRI, sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004da8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004dac:	4313      	orrs	r3, r2
 8004dae:	d136      	bne.n	8004e1e <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004db0:	2301      	movs	r3, #1
 8004db2:	210a      	movs	r1, #10
 8004db4:	2008      	movs	r0, #8
 8004db6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004dba:	f7fd faa9 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004dbe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004dc2:	bb7b      	cbnz	r3, 8004e24 <ThdBeeper+0xe4>
 8004dc4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004dc8:	2a00      	cmp	r2, #0
 8004dca:	dd2b      	ble.n	8004e24 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004dcc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8004dd8:	1bdb      	subs	r3, r3, r7
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	429e      	cmp	r6, r3
 8004dde:	d8d9      	bhi.n	8004d94 <ThdBeeper+0x54>
        piezo_toggle();
        chThdSleepMilliseconds(1);
      }
      beep_ms = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f8c9 3000 	str.w	r3, [r9]
 8004de6:	e000      	b.n	8004dea <ThdBeeper+0xaa>
 8004de8:	4c13      	ldr	r4, [pc, #76]	; (8004e38 <ThdBeeper+0xf8>)
 8004dea:	2330      	movs	r3, #48	; 0x30
 8004dec:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004df0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d112      	bne.n	8004e1e <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	2164      	movs	r1, #100	; 0x64
 8004dfc:	2008      	movs	r0, #8
 8004dfe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004e02:	f7fd fa85 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004e06:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004e0a:	b95b      	cbnz	r3, 8004e24 <ThdBeeper+0xe4>
 8004e0c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004e10:	2a00      	cmp	r2, #0
 8004e12:	dd07      	ble.n	8004e24 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004e14:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	e799      	b.n	8004d52 <ThdBeeper+0x12>
    chSysHalt("SV#4");
 8004e1e:	4807      	ldr	r0, [pc, #28]	; (8004e3c <ThdBeeper+0xfc>)
 8004e20:	f7fc f846 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 8004e24:	4806      	ldr	r0, [pc, #24]	; (8004e40 <ThdBeeper+0x100>)
 8004e26:	f7fc f843 	bl	8000eb0 <chSysHalt>
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8004e2a:	4806      	ldr	r0, [pc, #24]	; (8004e44 <ThdBeeper+0x104>)
 8004e2c:	f7fc f840 	bl	8000eb0 <chSysHalt>
 8004e30:	08005d9c 	.word	0x08005d9c
 8004e34:	40020800 	.word	0x40020800
 8004e38:	200009f0 	.word	0x200009f0
 8004e3c:	08005d10 	.word	0x08005d10
 8004e40:	08005d38 	.word	0x08005d38
 8004e44:	08005e3c 	.word	0x08005e3c
 8004e48:	20000800 	.word	0x20000800
 8004e4c:	40014800 	.word	0x40014800

08004e50 <ThdCntr>:
    chThdSleepMilliseconds(10);
  }
}

static THD_WORKING_AREA(waThdCntr, 256);
static THD_FUNCTION(ThdCntr, arg) {
 8004e50:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
}



void ThdCntrFunc(void) {
  myprintf("ThdCntr\n");
 8004e54:	486a      	ldr	r0, [pc, #424]	; (8005000 <ThdCntr+0x1b0>)
void TIM5_init(void){
#warning GPIOA_CNT_IN pin mode alternate wasnt set in board.h! try again with board.h
  palSetPadMode(GPIOA, GPIOA_CNT_IN, PAL_MODE_ALTERNATE(2) | PAL_MODE_INPUT); //setting alternate function in board.h didn't work
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)

  TIM5->CR2 = 0; //defaults
 8004e56:	4c6b      	ldr	r4, [pc, #428]	; (8005004 <ThdCntr+0x1b4>)
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN); //enable peripheral clock
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //assert reset
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //deassert reset -> registers should be at power up defaults

  //trigger input
  TIM9->CCMR1 = TIM_CCMR1_CC2S_0 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0; //channel 2 is input, PWM mode 2: positive pulse after delay
 8004e58:	4e6b      	ldr	r6, [pc, #428]	; (8005008 <ThdCntr+0x1b8>)
 8004e5a:	4d6c      	ldr	r5, [pc, #432]	; (800500c <ThdCntr+0x1bc>)
    uint32_t a,b;
    while(!(TIM5->SR & TIM_SR_CC1IF));
    a = TIM5->CCR1; //flag CC1IF cleared by this read
    while(!(TIM5->SR & TIM_SR_CC1IF));
    b = TIM5->CCR1;
    myprintf("a: %10u, b: %10u, b-a: %10u\n", a, b, b-a);
 8004e5c:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8005038 <ThdCntr+0x1e8>
  myprintf("ThdCntr\n");
 8004e60:	f7ff f94e 	bl	8004100 <myprintf>
  palSetPadMode(GPIOA, GPIOA_CNT_IN, PAL_MODE_ALTERNATE(2) | PAL_MODE_INPUT); //setting alternate function in board.h didn't work
 8004e64:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f7fc fe39 	bl	8001ae0 <_pal_lld_setgroupmode.constprop.0>
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8004e6e:	4b68      	ldr	r3, [pc, #416]	; (8005010 <ThdCntr+0x1c0>)
  timepulse_capt_curr = 0;
 8004e70:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 800503c <ThdCntr+0x1ec>
 8004e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e76:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8005040 <ThdCntr+0x1f0>
  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8004e7a:	f04f 0901 	mov.w	r9, #1
  TIM5->CR2 = 0; //defaults
 8004e7e:	2100      	movs	r1, #0
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8004e80:	f042 0208 	orr.w	r2, r2, #8
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
  TIM5->CR2 = 0; //defaults
 8004e8a:	6061      	str	r1, [r4, #4]
  TIM5->SMCR = 0; // Reset the SMCR register
 8004e8c:	60a1      	str	r1, [r4, #8]
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 8004e8e:	62e0      	str	r0, [r4, #44]	; 0x2c
  TIM5->PSC = 0; //prescaler 1
 8004e90:	62a1      	str	r1, [r4, #40]	; 0x28
  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8004e92:	f8c4 9014 	str.w	r9, [r4, #20]
  TIM5->CCER = 0; //all CC channels off
 8004e96:	6221      	str	r1, [r4, #32]
  TIM5->CCMR1 = 0;
 8004e98:	61a1      	str	r1, [r4, #24]
  TIM5->CCMR1 |= TIM_CCMR1_CC1S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 8004e9a:	69a2      	ldr	r2, [r4, #24]
  myprintf("calModeIntRef100M\n");
 8004e9c:	485d      	ldr	r0, [pc, #372]	; (8005014 <ThdCntr+0x1c4>)
 8004e9e:	ea42 0209 	orr.w	r2, r2, r9
 8004ea2:	61a2      	str	r2, [r4, #24]
  TIM5->CCER |= TIM_CCER_CC1E; //CC1 enabled
 8004ea4:	6a22      	ldr	r2, [r4, #32]
 8004ea6:	ea42 0209 	orr.w	r2, r2, r9
 8004eaa:	6222      	str	r2, [r4, #32]
  TIM5->CR1 = 0;//upcounter, continuous
 8004eac:	6021      	str	r1, [r4, #0]
  TIM5->CR1 |= TIM_CR1_CEN; //enable
 8004eae:	6822      	ldr	r2, [r4, #0]
  timepulse_capt_curr = 0;
 8004eb0:	ed9f 7b51 	vldr	d7, [pc, #324]	; 8004ff8 <ThdCntr+0x1a8>
 8004eb4:	ea42 0209 	orr.w	r2, r2, r9
 8004eb8:	6022      	str	r2, [r4, #0]
  TIM5->SR = ~TIM_SR_CC1IF; //Clear event flag
 8004eba:	f06f 0202 	mvn.w	r2, #2
 8004ebe:	6122      	str	r2, [r4, #16]
 8004ec0:	ed8c 7b00 	vstr	d7, [ip]
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system?)
 8004ec4:	f8d3 c044 	ldr.w	ip, [r3, #68]	; 0x44
  TIM1->DIER = TIM_DIER_UIE; //Update interrupt enable
 8004ec8:	4a53      	ldr	r2, [pc, #332]	; (8005018 <ThdCntr+0x1c8>)
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system?)
 8004eca:	ea4c 0c09 	orr.w	ip, ip, r9
 8004ece:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST); //assert reset
 8004ed2:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 8004ed6:	ea4c 0c09 	orr.w	ip, ip, r9
 8004eda:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST); //deassert reset -> registers should be at power up defaults
 8004ede:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
  TIM1->ARR = 0xFFFF; //auto reload (period) set to max (16bit)
 8004ee2:	f64f 7bff 	movw	fp, #65535	; 0xffff
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST); //deassert reset -> registers should be at power up defaults
 8004ee6:	f02c 0c01 	bic.w	ip, ip, #1
 8004eea:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  TIM1->DIER = TIM_DIER_UIE; //Update interrupt enable
 8004eee:	f8c2 900c 	str.w	r9, [r2, #12]
  TIM1->ARR = 0xFFFF; //auto reload (period) set to max (16bit)
 8004ef2:	f8c2 b02c 	str.w	fp, [r2, #44]	; 0x2c
  TIM1->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8004ef6:	f8c2 9014 	str.w	r9, [r2, #20]
  TIM1->CCMR2 |= TIM_CCMR2_CC4S_0; //CC4 channel is configured as input, IC4 is mapped on TI4
 8004efa:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8004efe:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8004f02:	f8c2 c01c 	str.w	ip, [r2, #28]
  TIM1->CCER |= TIM_CCER_CC4E; //CC4 enabled
 8004f06:	f8d2 c020 	ldr.w	ip, [r2, #32]
  TIM1->SR = ~TIM_SR_CC4IF; //Clear event flag
 8004f0a:	f06f 0710 	mvn.w	r7, #16
  TIM1->CCER |= TIM_CCER_CC4E; //CC4 enabled
 8004f0e:	f44c 5c80 	orr.w	ip, ip, #4096	; 0x1000
 8004f12:	f8c2 c020 	str.w	ip, [r2, #32]
  TIM1->CR1 = TIM_CR1_CEN; //enable
 8004f16:	f8c2 9000 	str.w	r9, [r2]
  TIM1->SR = ~TIM_SR_CC4IF; //Clear event flag
 8004f1a:	6117      	str	r7, [r2, #16]
  tim1_overflows = 0;
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	; (800501c <ThdCntr+0x1cc>)
 8004f1e:	f04f 0a70 	mov.w	sl, #112	; 0x70
 8004f22:	6011      	str	r1, [r2, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f28:	f88e a319 	strb.w	sl, [lr, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f2c:	f8ce 2000 	str.w	r2, [lr]
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN); //enable peripheral clock
 8004f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f36:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //assert reset
 8004f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //deassert reset -> registers should be at power up defaults
 8004f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
  TIM9->CCMR1 = TIM_CCMR1_CC2S_0 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0; //channel 2 is input, PWM mode 2: positive pulse after delay
 8004f48:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8004f4c:	61b3      	str	r3, [r6, #24]
  TIM9->CCER = TIM_CCER_CC2P | TIM_CCER_CC1E; //falling edge, CC1 output enabled
 8004f4e:	2321      	movs	r3, #33	; 0x21
 8004f50:	6233      	str	r3, [r6, #32]
  TIM9->SMCR = TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1; //trigger input = Filtered Timer Input 2 (TI2FP2)
 8004f52:	2366      	movs	r3, #102	; 0x66
 8004f54:	60b3      	str	r3, [r6, #8]
                                                                                //Slave mode = trigger (counter starts on trigger)
  //output
  TIM9->CCR1 = delay; //delay after trigger
 8004f56:	235a      	movs	r3, #90	; 0x5a
 8004f58:	6373      	str	r3, [r6, #52]	; 0x34
  TIM9->ARR = delay + width; //pulse width
 8004f5a:	2364      	movs	r3, #100	; 0x64
 8004f5c:	62f3      	str	r3, [r6, #44]	; 0x2c
  TIM9->CR1 = TIM_CR1_OPM; //stop after one pulse (CEN cleared by hw)
 8004f5e:	2308      	movs	r3, #8
 8004f60:	6033      	str	r3, [r6, #0]
  myprintf("calModeIntRef100M\n");
 8004f62:	f7ff f8cd 	bl	8004100 <myprintf>
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 8004f66:	4b2e      	ldr	r3, [pc, #184]	; (8005020 <ThdCntr+0x1d0>)
  palSetPad(GPIOA, GPIOA_CAL_EN);
 8004f68:	4a2e      	ldr	r2, [pc, #184]	; (8005024 <ThdCntr+0x1d4>)
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	8319      	strh	r1, [r3, #24]
  palSetPad(GPIOA, GPIOA_CAL_EN);
 8004f6e:	2140      	movs	r1, #64	; 0x40
  palClearPad(GPIOB, GPIOB_REF_INT_SEL);
 8004f70:	f8a3 901a 	strh.w	r9, [r3, #26]
  palSetPad(GPIOA, GPIOA_CAL_EN);
 8004f74:	8311      	strh	r1, [r2, #24]
  palSetPad(GPIOB, GPIOB_CAL_SOUR_SEL);
 8004f76:	2210      	movs	r2, #16
 8004f78:	831a      	strh	r2, [r3, #24]

  //R4 -----------------------------------------------------------
  //default: all 0

  //Programming sequence R4,R3,..,R0 (write to R0 transfers double buffered settings)
  adf_write_reg(ADF4156_reg[4]);
 8004f7a:	2004      	movs	r0, #4
 8004f7c:	f7fd fcd0 	bl	8002920 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 8004f80:	2013      	movs	r0, #19
 8004f82:	f7fd fccd 	bl	8002920 <adf_write_reg>
  adf_write_reg(ADF4156_reg[2]);
 8004f86:	4828      	ldr	r0, [pc, #160]	; (8005028 <ThdCntr+0x1d8>)
 8004f88:	f7fd fcca 	bl	8002920 <adf_write_reg>
  adf_write_reg(ADF4156_reg[1]);
 8004f8c:	2009      	movs	r0, #9
 8004f8e:	f7fd fcc7 	bl	8002920 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 8004f92:	4826      	ldr	r0, [pc, #152]	; (800502c <ThdCntr+0x1dc>)
 8004f94:	f7fd fcc4 	bl	8002920 <adf_write_reg>
    while(!(TIM5->SR & TIM_SR_CC1IF));
 8004f98:	6923      	ldr	r3, [r4, #16]
 8004f9a:	079a      	lsls	r2, r3, #30
 8004f9c:	d5fc      	bpl.n	8004f98 <ThdCntr+0x148>
    a = TIM5->CCR1; //flag CC1IF cleared by this read
 8004f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    while(!(TIM5->SR & TIM_SR_CC1IF));
 8004fa0:	6922      	ldr	r2, [r4, #16]
 8004fa2:	0793      	lsls	r3, r2, #30
 8004fa4:	d5fc      	bpl.n	8004fa0 <ThdCntr+0x150>
    b = TIM5->CCR1;
 8004fa6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    myprintf("a: %10u, b: %10u, b-a: %10u\n", a, b, b-a);
 8004fa8:	4640      	mov	r0, r8
 8004faa:	1a53      	subs	r3, r2, r1
 8004fac:	f7ff f8a8 	bl	8004100 <myprintf>
 8004fb0:	2330      	movs	r3, #48	; 0x30
 8004fb2:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004fb6:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	d113      	bne.n	8004fe6 <ThdCntr+0x196>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f242 7110 	movw	r1, #10000	; 0x2710
 8004fc4:	2008      	movs	r0, #8
 8004fc6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004fca:	f7fd f9a1 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004fce:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004fd2:	b95b      	cbnz	r3, 8004fec <ThdCntr+0x19c>
 8004fd4:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	dd07      	ble.n	8004fec <ThdCntr+0x19c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004fdc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	e7d8      	b.n	8004f98 <ThdCntr+0x148>
    chSysHalt("SV#4");
 8004fe6:	4812      	ldr	r0, [pc, #72]	; (8005030 <ThdCntr+0x1e0>)
 8004fe8:	f7fb ff62 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 8004fec:	4811      	ldr	r0, [pc, #68]	; (8005034 <ThdCntr+0x1e4>)
 8004fee:	f7fb ff5f 	bl	8000eb0 <chSysHalt>
 8004ff2:	bf00      	nop
 8004ff4:	f3af 8000 	nop.w
	...
 8005000:	08005da8 	.word	0x08005da8
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40014000 	.word	0x40014000
 800500c:	200009f0 	.word	0x200009f0
 8005010:	40023800 	.word	0x40023800
 8005014:	08005db4 	.word	0x08005db4
 8005018:	40010000 	.word	0x40010000
 800501c:	20000d8c 	.word	0x20000d8c
 8005020:	40020400 	.word	0x40020400
 8005024:	40020000 	.word	0x40020000
 8005028:	00108012 	.word	0x00108012
 800502c:	70fa0000 	.word	0x70fa0000
 8005030:	08005d10 	.word	0x08005d10
 8005034:	08005d38 	.word	0x08005d38
 8005038:	08005dc8 	.word	0x08005dc8
 800503c:	20000d90 	.word	0x20000d90
 8005040:	e000e100 	.word	0xe000e100
	...

08005050 <chThdExit>:
void chThdExit(msg_t msg) {
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	2330      	movs	r3, #48	; 0x30
 8005054:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <chThdExit+0x60>)
 800505a:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 800505e:	430a      	orrs	r2, r1
 8005060:	d11a      	bne.n	8005098 <chThdExit+0x48>
  return __sch_get_currthread();
 8005062:	68dc      	ldr	r4, [r3, #12]
  return (bool)(lp->next != lp);
 8005064:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005066:	f104 052c 	add.w	r5, r4, #44	; 0x2c
  oip->dbg.lock_cnt = (cnt_t)1;
 800506a:	2101      	movs	r1, #1
 800506c:	4295      	cmp	r5, r2
 800506e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  currtp->u.exitcode = msg;
 8005072:	62a0      	str	r0, [r4, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005074:	d107      	bne.n	8005086 <chThdExit+0x36>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8005076:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800507a:	b183      	cbz	r3, 800509e <chThdExit+0x4e>
}
 800507c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8005080:	200f      	movs	r0, #15
 8005082:	f7fd b915 	b.w	80022b0 <chSchGoSleepS>
  lp->next = p->next;
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	62e3      	str	r3, [r4, #44]	; 0x2c
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 800508a:	4610      	mov	r0, r2
 800508c:	f7fc ff90 	bl	8001fb0 <chSchReadyI.isra.0>
  return (bool)(lp->next != lp);
 8005090:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005092:	42aa      	cmp	r2, r5
 8005094:	d0ef      	beq.n	8005076 <chThdExit+0x26>
 8005096:	e7f6      	b.n	8005086 <chThdExit+0x36>
    chSysHalt("SV#4");
 8005098:	4806      	ldr	r0, [pc, #24]	; (80050b4 <chThdExit+0x64>)
 800509a:	f7fb ff09 	bl	8000eb0 <chSysHalt>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800509e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80050a2:	079b      	lsls	r3, r3, #30
 80050a4:	d1ea      	bne.n	800507c <chThdExit+0x2c>
  p->prev->next = p->next;
 80050a6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80050aa:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80050ac:	605a      	str	r2, [r3, #4]
  return p;
 80050ae:	e7e5      	b.n	800507c <chThdExit+0x2c>
 80050b0:	200009f0 	.word	0x200009f0
 80050b4:	08005d10 	.word	0x08005d10
	...

080050c0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80050c0:	f3ef 8309 	mrs	r3, PSP
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80050c4:	4905      	ldr	r1, [pc, #20]	; (80050dc <SVC_Handler+0x1c>)
 80050c6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80050c8:	f022 0201 	bic.w	r2, r2, #1
    psp += sizeof (struct port_extctx);
 80050cc:	3368      	adds	r3, #104	; 0x68
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80050ce:	634a      	str	r2, [r1, #52]	; 0x34
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80050d0:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80050d4:	2300      	movs	r3, #0
 80050d6:	f383 8811 	msr	BASEPRI, r3
}
 80050da:	4770      	bx	lr
 80050dc:	e000ef00 	.word	0xe000ef00

080050e0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80050e0:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <__early_init+0x178>)
  gpiop->OTYPER  = config->otyper;
 80050e2:	495e      	ldr	r1, [pc, #376]	; (800525c <__early_init+0x17c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80050e4:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 80050e6:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80052a4 <__early_init+0x1c4>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80050ea:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80050ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80050f2:	611a      	str	r2, [r3, #16]
 80050f4:	6918      	ldr	r0, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80050f6:	4c5a      	ldr	r4, [pc, #360]	; (8005260 <__early_init+0x180>)
  gpiop->PUPDR   = config->pupdr;
 80050f8:	4f5a      	ldr	r7, [pc, #360]	; (8005264 <__early_init+0x184>)
  gpiop->MODER   = config->moder;
 80050fa:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80052a8 <__early_init+0x1c8>
  gpiop->PUPDR   = config->pupdr;
 80050fe:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80052ac <__early_init+0x1cc>
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8005102:	4e59      	ldr	r6, [pc, #356]	; (8005268 <__early_init+0x188>)
  gpiop->MODER   = config->moder;
 8005104:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80052b0 <__early_init+0x1d0>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8005108:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 800510c:	6118      	str	r0, [r3, #16]
 800510e:	6918      	ldr	r0, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8005110:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005112:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 8005116:	6318      	str	r0, [r3, #48]	; 0x30
 8005118:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800511a:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 800511e:	6518      	str	r0, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8005120:	2200      	movs	r2, #0
  gpiop->OSPEEDR = config->ospeedr;
 8005122:	4852      	ldr	r0, [pc, #328]	; (800526c <__early_init+0x18c>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8005124:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8005126:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005128:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800512a:	4851      	ldr	r0, [pc, #324]	; (8005270 <__early_init+0x190>)
 800512c:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 800512e:	2002      	movs	r0, #2
 8005130:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8005132:	f247 7002 	movw	r0, #30466	; 0x7702
 8005136:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8005138:	f241 7070 	movw	r0, #6000	; 0x1770
 800513c:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800513e:	484d      	ldr	r0, [pc, #308]	; (8005274 <__early_init+0x194>)
 8005140:	6008      	str	r0, [r1, #0]
  gpiop->ODR     = config->odr;
 8005142:	f44f 5a81 	mov.w	sl, #4128	; 0x1020
  gpiop->OTYPER  = config->otyper;
 8005146:	484c      	ldr	r0, [pc, #304]	; (8005278 <__early_init+0x198>)
  gpiop->OSPEEDR = config->ospeedr;
 8005148:	494c      	ldr	r1, [pc, #304]	; (800527c <__early_init+0x19c>)
  gpiop->OTYPER  = config->otyper;
 800514a:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800514c:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
 8005150:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8005152:	60e7      	str	r7, [r4, #12]
  gpiop->OTYPER  = config->otyper;
 8005154:	494a      	ldr	r1, [pc, #296]	; (8005280 <__early_init+0x1a0>)
  gpiop->ODR     = config->odr;
 8005156:	f8c4 a014 	str.w	sl, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800515a:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800515c:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800515e:	f8c4 9000 	str.w	r9, [r4]
  gpiop->ODR     = config->odr;
 8005162:	f44f 6400 	mov.w	r4, #2048	; 0x800
  gpiop->OTYPER  = config->otyper;
 8005166:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005168:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 800516a:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->ODR     = config->odr;
 800516e:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8005170:	f44f 144c 	mov.w	r4, #3342336	; 0x330000
 8005174:	6204      	str	r4, [r0, #32]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8005176:	4f43      	ldr	r7, [pc, #268]	; (8005284 <__early_init+0x1a4>)
  gpiop->AFRH    = config->afrh;
 8005178:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800517a:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 800517e:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005180:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8005182:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8005186:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8005188:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800518a:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800518c:	600a      	str	r2, [r1, #0]
  PWR->CR = STM32_VOS;
 800518e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8005192:	641f      	str	r7, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8005194:	6032      	str	r2, [r6, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	0794      	lsls	r4, r2, #30
 80051a2:	d5fc      	bpl.n	800519e <__early_init+0xbe>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80051a4:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80051a6:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <__early_init+0x178>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80051a8:	f021 0103 	bic.w	r1, r1, #3
 80051ac:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80051ae:	6893      	ldr	r3, [r2, #8]
 80051b0:	f013 030c 	ands.w	r3, r3, #12
 80051b4:	d1fb      	bne.n	80051ae <__early_init+0xce>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80051b6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80051b8:	4927      	ldr	r1, [pc, #156]	; (8005258 <__early_init+0x178>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80051ba:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80051be:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80051c0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80051c8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80051ca:	680b      	ldr	r3, [r1, #0]
 80051cc:	0398      	lsls	r0, r3, #14
 80051ce:	d5fc      	bpl.n	80051ca <__early_init+0xea>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80051d0:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <__early_init+0x1a8>)
 80051d2:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80051d4:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80051d6:	4a24      	ldr	r2, [pc, #144]	; (8005268 <__early_init+0x188>)
  RCC->CR |= RCC_CR_PLLON;
 80051d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051dc:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80051de:	6853      	ldr	r3, [r2, #4]
 80051e0:	0459      	lsls	r1, r3, #17
 80051e2:	d5fc      	bpl.n	80051de <__early_init+0xfe>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80051e4:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <__early_init+0x178>)
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	019b      	lsls	r3, r3, #6
 80051ea:	d5fc      	bpl.n	80051e6 <__early_init+0x106>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <__early_init+0x1ac>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80051ee:	4c28      	ldr	r4, [pc, #160]	; (8005290 <__early_init+0x1b0>)
 80051f0:	6094      	str	r4, [r2, #8]
    RCC->DCKCFGR = dckcfgr |
 80051f2:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80051f4:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 80051f6:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80051fa:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b24      	ldr	r3, [pc, #144]	; (8005294 <__early_init+0x1b4>)
 8005202:	429a      	cmp	r2, r3
 8005204:	d01e      	beq.n	8005244 <__early_init+0x164>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8005206:	4b24      	ldr	r3, [pc, #144]	; (8005298 <__early_init+0x1b8>)
 8005208:	f240 7203 	movw	r2, #1795	; 0x703
 800520c:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800520e:	4a22      	ldr	r2, [pc, #136]	; (8005298 <__early_init+0x1b8>)
 8005210:	6813      	ldr	r3, [r2, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	2b03      	cmp	r3, #3
 8005218:	d1fa      	bne.n	8005210 <__early_init+0x130>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800521a:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <__early_init+0x178>)
 800521c:	6893      	ldr	r3, [r2, #8]
 800521e:	f043 0302 	orr.w	r3, r3, #2
 8005222:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8005224:	6893      	ldr	r3, [r2, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b08      	cmp	r3, #8
 800522c:	d1fa      	bne.n	8005224 <__early_init+0x144>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 800522e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005234:	6453      	str	r3, [r2, #68]	; 0x44
 8005236:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8005238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800523c:	6653      	str	r3, [r2, #100]	; 0x64
 800523e:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <__early_init+0x1bc>)
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <__early_init+0x1c0>)
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d1db      	bne.n	8005206 <__early_init+0x126>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <__early_init+0x1b8>)
 8005250:	f240 1203 	movw	r2, #259	; 0x103
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e7da      	b.n	800520e <__early_init+0x12e>
 8005258:	40023800 	.word	0x40023800
 800525c:	40020000 	.word	0x40020000
 8005260:	40020400 	.word	0x40020400
 8005264:	00aaa0a8 	.word	0x00aaa0a8
 8005268:	40007000 	.word	0x40007000
 800526c:	556b75a5 	.word	0x556b75a5
 8005270:	a8000a02 	.word	0xa8000a02
 8005274:	29a8d0a4 	.word	0x29a8d0a4
 8005278:	40020800 	.word	0x40020800
 800527c:	9a555555 	.word	0x9a555555
 8005280:	40021c00 	.word	0x40021c00
 8005284:	10000400 	.word	0x10000400
 8005288:	04401818 	.word	0x04401818
 800528c:	e0042000 	.word	0xe0042000
 8005290:	38881000 	.word	0x38881000
 8005294:	20006411 	.word	0x20006411
 8005298:	40023c00 	.word	0x40023c00
 800529c:	e000ed00 	.word	0xe000ed00
 80052a0:	410fc241 	.word	0x410fc241
 80052a4:	aaaaaaa0 	.word	0xaaaaaaa0
 80052a8:	55000581 	.word	0x55000581
 80052ac:	890aa082 	.word	0x890aa082
 80052b0:	10500a34 	.word	0x10500a34
	...

080052c0 <VectorA4>:
CH_IRQ_HANDLER(STM32_TIM1_UP_TIM10_HANDLER){
 80052c0:	b510      	push	{r4, lr}
 80052c2:	2330      	movs	r3, #48	; 0x30
 80052c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80052c8:	4b20      	ldr	r3, [pc, #128]	; (800534c <VectorA4+0x8c>)
 80052ca:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80052ce:	2900      	cmp	r1, #0
 80052d0:	db32      	blt.n	8005338 <VectorA4+0x78>
 80052d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052d6:	bb7a      	cbnz	r2, 8005338 <VectorA4+0x78>
  oip->dbg.isr_cnt++;
 80052d8:	3101      	adds	r1, #1
 80052da:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 80052de:	f382 8811 	msr	BASEPRI, r2
  uint32_t sr = TIM1->SR;
 80052e2:	491b      	ldr	r1, [pc, #108]	; (8005350 <VectorA4+0x90>)
 80052e4:	6908      	ldr	r0, [r1, #16]
  TIM1->SR = 0; //clear all
 80052e6:	610a      	str	r2, [r1, #16]
  if(sr & TIM_SR_CC4IF){ //capture event
 80052e8:	06c0      	lsls	r0, r0, #27
  uint16_t ccr = TIM1->CCR4;
 80052ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
  if(sr & TIM_SR_CC4IF){ //capture event
 80052ec:	d41c      	bmi.n	8005328 <VectorA4+0x68>
    timepulse_capt_curr = ((uint64_t)ccr << 16) + ((uint64_t)tim1_overflows << 32);
 80052ee:	4819      	ldr	r0, [pc, #100]	; (8005354 <VectorA4+0x94>)
 80052f0:	6801      	ldr	r1, [r0, #0]
  tim1_overflows++;
 80052f2:	3101      	adds	r1, #1
 80052f4:	6001      	str	r1, [r0, #0]
 80052f6:	2130      	movs	r1, #48	; 0x30
 80052f8:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80052fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005300:	2a00      	cmp	r2, #0
 8005302:	dd1c      	ble.n	800533e <VectorA4+0x7e>
 8005304:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8005308:	b9c8      	cbnz	r0, 800533e <VectorA4+0x7e>
  oip->dbg.isr_cnt--;
 800530a:	3a01      	subs	r2, #1
 800530c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005310:	f380 8811 	msr	BASEPRI, r0
 8005314:	f381 8811 	msr	BASEPRI, r1
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8005318:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <VectorA4+0x98>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005320:	d110      	bne.n	8005344 <VectorA4+0x84>
 8005322:	f383 8811 	msr	BASEPRI, r3
}
 8005326:	bd10      	pop	{r4, pc}
    timepulse_capt_curr = ((uint64_t)ccr << 16) + ((uint64_t)tim1_overflows << 32);
 8005328:	480a      	ldr	r0, [pc, #40]	; (8005354 <VectorA4+0x94>)
 800532a:	4c0c      	ldr	r4, [pc, #48]	; (800535c <VectorA4+0x9c>)
 800532c:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	e9c4 2100 	strd	r2, r1, [r4]
 8005336:	e7dc      	b.n	80052f2 <VectorA4+0x32>
    chSysHalt("SV#8");
 8005338:	4809      	ldr	r0, [pc, #36]	; (8005360 <VectorA4+0xa0>)
 800533a:	f7fb fdb9 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#9");
 800533e:	4809      	ldr	r0, [pc, #36]	; (8005364 <VectorA4+0xa4>)
 8005340:	f7fb fdb6 	bl	8000eb0 <chSysHalt>
}
 8005344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005348:	f7fd bc22 	b.w	8002b90 <__port_irq_epilogue.part.0>
 800534c:	200009f0 	.word	0x200009f0
 8005350:	40010000 	.word	0x40010000
 8005354:	20000d8c 	.word	0x20000d8c
 8005358:	e000ed00 	.word	0xe000ed00
 800535c:	20000d90 	.word	0x20000d90
 8005360:	08005d48 	.word	0x08005d48
 8005364:	08005d50 	.word	0x08005d50
	...

08005370 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8005370:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <main+0x88>)
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	f062 0287 	orn	r2, r2, #135	; 0x87


/*
 * Application entry point.
 */
int main(void) {
 8005378:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800537c:	611a      	str	r2, [r3, #16]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	f002 0287 	and.w	r2, r2, #135	; 0x87
 8005384:	611a      	str	r2, [r3, #16]
 8005386:	691a      	ldr	r2, [r3, #16]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 800538e:	621a      	str	r2, [r3, #32]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005396:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800539c:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800539e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a0:	6258      	str	r0, [r3, #36]	; 0x24
 80053a2:	2100      	movs	r1, #0
 80053a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a6:	6259      	str	r1, [r3, #36]	; 0x24
 80053a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 80053aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 80053ac:	4813      	ldr	r0, [pc, #76]	; (80053fc <main+0x8c>)
  rccEnablePWRInterface(true);
 80053ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
 80053b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053ba:	661a      	str	r2, [r3, #96]	; 0x60
 80053bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 80053be:	6802      	ldr	r2, [r0, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80053c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80053cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80053d0:	b089      	sub	sp, #36	; 0x24
 80053d2:	d003      	beq.n	80053dc <main+0x6c>
    RCC->BDCR = RCC_BDCR_BDRST;
 80053d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053d8:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80053da:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80053dc:	4807      	ldr	r0, [pc, #28]	; (80053fc <main+0x8c>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <main+0x90>)
 80053e0:	6841      	ldr	r1, [r0, #4]
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <main+0x94>)
 80053e4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80053e8:	2400      	movs	r4, #0
 80053ea:	6041      	str	r1, [r0, #4]
 80053ec:	4906      	ldr	r1, [pc, #24]	; (8005408 <main+0x98>)
 80053ee:	6014      	str	r4, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80053f0:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80053f4:	e00c      	b.n	8005410 <main+0xa0>
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000
 8005400:	20000cf8 	.word	0x20000cf8
 8005404:	08005e94 	.word	0x08005e94
 8005408:	40026010 	.word	0x40026010
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800540c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8005410:	600c      	str	r4, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005412:	330c      	adds	r3, #12
 8005414:	4298      	cmp	r0, r3
 8005416:	f102 0208 	add.w	r2, r2, #8
    dma.streams[i].func = NULL;
 800541a:	f842 4c04 	str.w	r4, [r2, #-4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800541e:	d1f5      	bne.n	800540c <main+0x9c>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005420:	4bc1      	ldr	r3, [pc, #772]	; (8005728 <main+0x3b8>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8005422:	49c2      	ldr	r1, [pc, #776]	; (800572c <main+0x3bc>)
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005424:	4ac2      	ldr	r2, [pc, #776]	; (8005730 <main+0x3c0>)
  rccResetADC();
 8005426:	4dc3      	ldr	r5, [pc, #780]	; (8005734 <main+0x3c4>)
 *
 * @init
 */
void dacObjectInit(DACDriver *dacp) {

  dacp->state = DAC_STOP;
 8005428:	4ec3      	ldr	r6, [pc, #780]	; (8005738 <main+0x3c8>)
  sdObjectInit(&SD1, NULL, notify1);
 800542a:	f8df a39c 	ldr.w	sl, [pc, #924]	; 80057c8 <main+0x458>
  sdObjectInit(&SD2, NULL, notify2);
 800542e:	f8df b39c 	ldr.w	fp, [pc, #924]	; 80057cc <main+0x45c>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state           = SPI_STOP;
 8005432:	f8df 839c 	ldr.w	r8, [pc, #924]	; 80057d0 <main+0x460>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005436:	f04f 37ff 	mov.w	r7, #4294967295
 800543a:	609f      	str	r7, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 800543c:	60df      	str	r7, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800543e:	608f      	str	r7, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8005440:	60cf      	str	r7, [r1, #12]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8005442:	49be      	ldr	r1, [pc, #760]	; (800573c <main+0x3cc>)
 8005444:	2370      	movs	r3, #112	; 0x70
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005446:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800544a:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
  adcp->config   = NULL;
  adcp->samples  = NULL;
 800544e:	e9c1 4401 	strd	r4, r4, [r1, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 8005452:	e9c1 4403 	strd	r4, r4, [r1, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8005456:	614c      	str	r4, [r1, #20]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005458:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800545c:	6010      	str	r0, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800545e:	f882 3336 	strb.w	r3, [r2, #822]	; 0x336
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005466:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 800546a:	2020      	movs	r0, #32
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800546c:	6053      	str	r3, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800546e:	23c0      	movs	r3, #192	; 0xc0
 8005470:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005474:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005478:	6050      	str	r0, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800547a:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800547e:	2340      	movs	r3, #64	; 0x40
  adcp->state    = ADC_STOP;
 8005480:	f04f 0901 	mov.w	r9, #1
 8005484:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8005488:	f101 0018 	add.w	r0, r1, #24
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800548c:	6053      	str	r3, [r2, #4]
 800548e:	f881 9000 	strb.w	r9, [r1]
 8005492:	f7fc fc75 	bl	8001d80 <chMtxObjectInit>
 8005496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  ADCD1.dmastp  = NULL;
 8005498:	62cc      	str	r4, [r1, #44]	; 0x2c
  rccResetADC();
 800549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549e:	626b      	str	r3, [r5, #36]	; 0x24
 80054a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a6:	626b      	str	r3, [r5, #36]	; 0x24
 80054a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80054aa:	2060      	movs	r0, #96	; 0x60
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80054ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  dacp->config = NULL;
#if DAC_USE_WAIT
  dacp->thread = NULL;
 80054b0:	e9c6 4404 	strd	r4, r4, [r6, #16]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80054b4:	f882 0312 	strb.w	r0, [r2, #786]	; 0x312
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80054b8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80054bc:	6013      	str	r3, [r2, #0]
  ADCD1.adc     = ADC1;
 80054be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054c2:	f5a3 3338 	sub.w	r3, r3, #188416	; 0x2e000
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80054c6:	4a9e      	ldr	r2, [pc, #632]	; (8005740 <main+0x3d0>)
 80054c8:	628b      	str	r3, [r1, #40]	; 0x28
 80054ca:	f106 0018 	add.w	r0, r6, #24
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80054ce:	4b9d      	ldr	r3, [pc, #628]	; (8005744 <main+0x3d4>)
 80054d0:	630b      	str	r3, [r1, #48]	; 0x30
  dacp->state = DAC_STOP;
 80054d2:	f886 9000 	strb.w	r9, [r6]
  DACD1.params  = &dac1_ch1_params;
 80054d6:	499c      	ldr	r1, [pc, #624]	; (8005748 <main+0x3d8>)
 80054d8:	f7fc fc52 	bl	8001d80 <chMtxObjectInit>
  GPTD6.tim = STM32_TIM6;
 80054dc:	4b9b      	ldr	r3, [pc, #620]	; (800574c <main+0x3dc>)
 80054de:	62b1      	str	r1, [r6, #40]	; 0x28
 80054e0:	f102 000c 	add.w	r0, r2, #12
 80054e4:	499a      	ldr	r1, [pc, #616]	; (8005750 <main+0x3e0>)
 80054e6:	f882 9000 	strb.w	r9, [r2]
  i2cp->config = NULL;
 80054ea:	6054      	str	r4, [r2, #4]
 80054ec:	60d9      	str	r1, [r3, #12]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80054ee:	f883 9000 	strb.w	r9, [r3]
  sdObjectInit(&SD1, NULL, notify1);
 80054f2:	4998      	ldr	r1, [pc, #608]	; (8005754 <main+0x3e4>)
  gptp->config = NULL;
 80054f4:	605c      	str	r4, [r3, #4]
  DACD1.dma = NULL;
 80054f6:	62f4      	str	r4, [r6, #44]	; 0x2c
 80054f8:	f7fc fc42 	bl	8001d80 <chMtxObjectInit>
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 80054fc:	4b96      	ldr	r3, [pc, #600]	; (8005758 <main+0x3e8>)
 80054fe:	6353      	str	r3, [r2, #52]	; 0x34
 8005500:	4650      	mov	r0, sl
  I2CD2.dmarx  = NULL;
  I2CD2.dmatx  = NULL;
 8005502:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
  I2CD2.thread = NULL;
 8005506:	61d4      	str	r4, [r2, #28]
 8005508:	f7fc fb72 	bl	8001bf0 <sdObjectInit.constprop.0>
  SD1.clock = STM32_PCLK2;
 800550c:	4b93      	ldr	r3, [pc, #588]	; (800575c <main+0x3ec>)
 800550e:	4994      	ldr	r1, [pc, #592]	; (8005760 <main+0x3f0>)
  sdObjectInit(&SD2, NULL, notify2);
 8005510:	4658      	mov	r0, fp
  SD1.clock = STM32_PCLK2;
 8005512:	e9ca 131d 	strd	r1, r3, [sl, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
 8005516:	4993      	ldr	r1, [pc, #588]	; (8005764 <main+0x3f4>)
 8005518:	f7fc fb6a 	bl	8001bf0 <sdObjectInit.constprop.0>
  SD2.clock = STM32_PCLK1;
 800551c:	4b92      	ldr	r3, [pc, #584]	; (8005768 <main+0x3f8>)
 800551e:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 80057d4 <main+0x464>
 8005522:	f888 9000 	strb.w	r9, [r8]
 8005526:	f108 000c 	add.w	r0, r8, #12
 800552a:	e9cb c31d 	strd	ip, r3, [fp, #116]	; 0x74
  spip->config          = NULL;
#if SPI_USE_SYNCHRONIZATION == TRUE
  spip->sync_transfer   = NULL;
 800552e:	e9c8 4401 	strd	r4, r4, [r8, #4]
 8005532:	f7fc fc25 	bl	8001d80 <chMtxObjectInit>
  ST_ENABLE_CLOCK();
 8005536:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  ST_ENABLE_STOP();
 8005538:	498c      	ldr	r1, [pc, #560]	; (800576c <main+0x3fc>)
  ST_ENABLE_CLOCK();
 800553a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
 800553e:	e9c8 4408 	strd	r4, r4, [r8, #32]
 8005542:	646b      	str	r3, [r5, #68]	; 0x44
 8005544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800554a:	666b      	str	r3, [r5, #100]	; 0x64
 800554c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  ST_ENABLE_STOP();
 800554e:	68ca      	ldr	r2, [r1, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005550:	4b87      	ldr	r3, [pc, #540]	; (8005770 <main+0x400>)
  ST_ENABLE_STOP();
 8005552:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005556:	60ca      	str	r2, [r1, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005558:	f242 720e 	movw	r2, #9998	; 0x270e
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800555e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8005564:	619c      	str	r4, [r3, #24]
  tmp->cumulative = (rttime_t)0;
 8005566:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
 8005568:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800556a:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800556c:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800556e:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8005572:	f8c3 9000 	str.w	r9, [r3]
 8005576:	2300      	movs	r3, #0
 8005578:	e9cd 2306 	strd	r2, r3, [sp, #24]
  SPID2.spi       = SPI2;
 800557c:	4b7d      	ldr	r3, [pc, #500]	; (8005774 <main+0x404>)
 800557e:	f8c8 301c 	str.w	r3, [r8, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8005582:	4b7d      	ldr	r3, [pc, #500]	; (8005778 <main+0x408>)
 8005584:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  tmp->worst      = (rtcnt_t)0;
 8005588:	e9cd 7402 	strd	r7, r4, [sp, #8]
  tmp->n          = (ucnt_t)0;
 800558c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ch_system.state = ch_sys_initializing;
 8005590:	4f7a      	ldr	r7, [pc, #488]	; (800577c <main+0x40c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8005592:	3330      	adds	r3, #48	; 0x30
}
 8005594:	2504      	movs	r5, #4
 8005596:	f887 9000 	strb.w	r9, [r7]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 800559a:	60bc      	str	r4, [r7, #8]
 800559c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 80055a0:	a802      	add	r0, sp, #8
 80055a2:	f7fb fc9d 	bl	8000ee0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80055a6:	f7fb fca3 	bl	8000ef0 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 80055aa:	3d01      	subs	r5, #1
 80055ac:	d1f8      	bne.n	80055a0 <main+0x230>
  tcp->offset = tm.best;
 80055ae:	9a02      	ldr	r2, [sp, #8]
  ch_memcore.basemem = __heap_base__;
 80055b0:	4b73      	ldr	r3, [pc, #460]	; (8005780 <main+0x410>)
 80055b2:	60ba      	str	r2, [r7, #8]
 80055b4:	4a73      	ldr	r2, [pc, #460]	; (8005784 <main+0x414>)
 80055b6:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 80055b8:	4a73      	ldr	r2, [pc, #460]	; (8005788 <main+0x418>)
 80055ba:	605a      	str	r2, [r3, #4]
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80055bc:	4b73      	ldr	r3, [pc, #460]	; (800578c <main+0x41c>)
 80055be:	4a74      	ldr	r2, [pc, #464]	; (8005790 <main+0x420>)
 80055c0:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 80055c2:	f103 000c 	add.w	r0, r3, #12
  H_PAGES(&default_heap.header) = 0;
 80055c6:	e9c3 5501 	strd	r5, r5, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 80055ca:	f7fc fbd9 	bl	8001d80 <chMtxObjectInit>
 * @init
 */
void __factory_init(void) {

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 80055ce:	4871      	ldr	r0, [pc, #452]	; (8005794 <main+0x424>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 80055d0:	4c71      	ldr	r4, [pc, #452]	; (8005798 <main+0x428>)
 80055d2:	f7fc fbd5 	bl	8001d80 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 80055d6:	f100 0310 	add.w	r3, r0, #16
 80055da:	6103      	str	r3, [r0, #16]
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 80055dc:	2214      	movs	r2, #20
 80055de:	2304      	movs	r3, #4
 80055e0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80055e4:	6343      	str	r3, [r0, #52]	; 0x34
 80055e6:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80055ea:	63c3      	str	r3, [r0, #60]	; 0x3c
 80055ec:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80055f0:	6403      	str	r3, [r0, #64]	; 0x40
 80055f2:	f100 0344 	add.w	r3, r0, #68	; 0x44
 80055f6:	6443      	str	r3, [r0, #68]	; 0x44
  mp->provider = provider;
 80055f8:	4b68      	ldr	r3, [pc, #416]	; (800579c <main+0x42c>)
 80055fa:	6203      	str	r3, [r0, #32]
 80055fc:	6383      	str	r3, [r0, #56]	; 0x38

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 80055fe:	4b68      	ldr	r3, [pc, #416]	; (80057a0 <main+0x430>)
 8005600:	63a3      	str	r3, [r4, #56]	; 0x38
 8005602:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8005606:	6243      	str	r3, [r0, #36]	; 0x24
 8005608:	f100 0328 	add.w	r3, r0, #40	; 0x28
 800560c:	6283      	str	r3, [r0, #40]	; 0x28
  mp->object_size = size;
 800560e:	231c      	movs	r3, #28
  mp->next = NULL;
 8005610:	6145      	str	r5, [r0, #20]
 8005612:	62c5      	str	r5, [r0, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 8005614:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 8005616:	6325      	str	r5, [r4, #48]	; 0x30
  mp->object_size = size;
 8005618:	6303      	str	r3, [r0, #48]	; 0x30
 800561a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800561e:	f38a 8811 	msr	BASEPRI, sl
  __ASM volatile ("cpsie i" : : : "memory");
 8005622:	b662      	cpsie	i
  pqp->prio = (tprio_t)0;
 8005624:	e9c4 4501 	strd	r4, r5, [r4, #4]
  tp->epending          = (eventmask_t)0;
 8005628:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800562c:	4b5d      	ldr	r3, [pc, #372]	; (80057a4 <main+0x434>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 800562e:	6365      	str	r5, [r4, #52]	; 0x34

  sdp->panic_msg = NULL;

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 8005630:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8005634:	68d9      	ldr	r1, [r3, #12]

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8005636:	83a5      	strh	r5, [r4, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005638:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 800563c:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 800563e:	4a5a      	ldr	r2, [pc, #360]	; (80057a8 <main+0x438>)
  tp->owner             = oip;
 8005640:	6564      	str	r4, [r4, #84]	; 0x54
 8005642:	430a      	orrs	r2, r1
  SCB->AIRCR =  reg_value;
 8005644:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005646:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800564a:	4958      	ldr	r1, [pc, #352]	; (80057ac <main+0x43c>)
 800564c:	4848      	ldr	r0, [pc, #288]	; (8005770 <main+0x400>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800564e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005652:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005656:	680a      	ldr	r2, [r1, #0]
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005658:	f04f 0b20 	mov.w	fp, #32
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	600a      	str	r2, [r1, #0]
 8005662:	f883 b01f 	strb.w	fp, [r3, #31]
  dlhp->next  = dlhp;
 8005666:	f104 0110 	add.w	r1, r4, #16
 800566a:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
 800566e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005670:	9301      	str	r3, [sp, #4]
  dlhp->prev  = dlhp;
 8005672:	e9c4 1104 	strd	r1, r1, [r4, #16]
  tp->hdr.pqueue.prio   = prio;
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	6461      	str	r1, [r4, #68]	; 0x44
  tp->realprio          = prio;
 800567a:	67e1      	str	r1, [r4, #124]	; 0x7c
  p->prev       = qp->prev;
 800567c:	f104 0128 	add.w	r1, r4, #40	; 0x28
  tp->wabase = tdp->wbase;
 8005680:	4b4b      	ldr	r3, [pc, #300]	; (80057b0 <main+0x440>)
 8005682:	6521      	str	r1, [r4, #80]	; 0x50
  qp->next = qp;
 8005684:	f104 016c 	add.w	r1, r4, #108	; 0x6c
  qp->prev = qp;
 8005688:	e9c4 111b 	strd	r1, r1, [r4, #108]	; 0x6c
  p->prev->next = p;
 800568c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
  tp->name              = name;
 8005690:	4948      	ldr	r1, [pc, #288]	; (80057b4 <main+0x444>)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8005692:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005696:	62a0      	str	r0, [r4, #40]	; 0x28
  dlhp->delta = (sysinterval_t)-1;
 8005698:	f04f 3cff 	mov.w	ip, #4294967295
  sdp->lock_cnt = (cnt_t)1;
 800569c:	2201      	movs	r2, #1
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800569e:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
  tp->name              = name;
 80056a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80056a4:	f8c4 c018 	str.w	ip, [r4, #24]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 80056a8:	4943      	ldr	r1, [pc, #268]	; (80057b8 <main+0x448>)
 80056aa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  lp->next = lp;
 80056ae:	f104 0c68 	add.w	ip, r4, #104	; 0x68
 80056b2:	46a9      	mov	r9, r5
 80056b4:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  pqp->next = pqp;
 80056b8:	6024      	str	r4, [r4, #0]
 80056ba:	e9c4 8908 	strd	r8, r9, [r4, #32]
 80056be:	65e1      	str	r1, [r4, #92]	; 0x5c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80056c0:	f1a0 0164 	sub.w	r1, r0, #100	; 0x64
 80056c4:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
 80056c8:	493c      	ldr	r1, [pc, #240]	; (80057bc <main+0x44c>)
 80056ca:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 80056ce:	493c      	ldr	r1, [pc, #240]	; (80057c0 <main+0x450>)
 80056d0:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
  tp->name              = name;
 80056d4:	493b      	ldr	r1, [pc, #236]	; (80057c4 <main+0x454>)
 80056d6:	f8c3 11d4 	str.w	r1, [r3, #468]	; 0x1d4
  p->next       = qp;
 80056da:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80056de:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 80056e2:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  p->prev       = qp->prev;
 80056e6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  tp->refs              = (trefs_t)1;
 80056ea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  tp->hdr.pqueue.prio   = prio;
 80056ee:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tp->realprio          = prio;
 80056f2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  tp->refs              = (trefs_t)1;
 80056f6:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
  tp->state             = CH_STATE_WTSTART;
 80056fa:	f04f 0202 	mov.w	r2, #2
  qp->next = qp;
 80056fe:	f503 7ef4 	add.w	lr, r3, #488	; 0x1e8
  p->prev       = qp->prev;
 8005702:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
 8005706:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
  lp->next = lp;
 800570a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  p->prev->next = p;
 800570e:	f100 0210 	add.w	r2, r0, #16
  qp->prev = qp;
 8005712:	e9c3 ee7a 	strd	lr, lr, [r3, #488]	; 0x1e8
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8005716:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
  lp->next = lp;
 800571a:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
  tp->epending          = (eventmask_t)0;
 800571e:	e9c3 557c 	strd	r5, r5, [r3, #496]	; 0x1f0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005722:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
 8005726:	e057      	b.n	80057d8 <main+0x468>
 8005728:	40026000 	.word	0x40026000
 800572c:	40026400 	.word	0x40026400
 8005730:	e000e100 	.word	0xe000e100
 8005734:	40023800 	.word	0x40023800
 8005738:	2000083c 	.word	0x2000083c
 800573c:	20000808 	.word	0x20000808
 8005740:	2000087c 	.word	0x2000087c
 8005744:	00022c16 	.word	0x00022c16
 8005748:	08005f88 	.word	0x08005f88
 800574c:	2000086c 	.word	0x2000086c
 8005750:	40001000 	.word	0x40001000
 8005754:	08000e91 	.word	0x08000e91
 8005758:	40005800 	.word	0x40005800
 800575c:	05f5e0f0 	.word	0x05f5e0f0
 8005760:	40011000 	.word	0x40011000
 8005764:	08000ea1 	.word	0x08000ea1
 8005768:	02faf078 	.word	0x02faf078
 800576c:	e0042000 	.word	0xe0042000
 8005770:	40014800 	.word	0x40014800
 8005774:	40003800 	.word	0x40003800
 8005778:	00010016 	.word	0x00010016
 800577c:	20000cd0 	.word	0x20000cd0
 8005780:	20000cc8 	.word	0x20000cc8
 8005784:	20002128 	.word	0x20002128
 8005788:	20008000 	.word	0x20008000
 800578c:	20000cdc 	.word	0x20000cdc
 8005790:	08001e41 	.word	0x08001e41
 8005794:	20000c80 	.word	0x20000c80
 8005798:	200009f0 	.word	0x200009f0
 800579c:	08001ec1 	.word	0x08001ec1
 80057a0:	08005f48 	.word	0x08005f48
 80057a4:	e000ed00 	.word	0xe000ed00
 80057a8:	05fa0300 	.word	0x05fa0300
 80057ac:	e0001000 	.word	0xe0001000
 80057b0:	20000a80 	.word	0x20000a80
 80057b4:	08005f5c 	.word	0x08005f5c
 80057b8:	20000400 	.word	0x20000400
 80057bc:	08000ed1 	.word	0x08000ed1
 80057c0:	0800031d 	.word	0x0800031d
 80057c4:	08005de8 	.word	0x08005de8
 80057c8:	200008b4 	.word	0x200008b4
 80057cc:	20000934 	.word	0x20000934
 80057d0:	200009b4 	.word	0x200009b4
 80057d4:	40004400 	.word	0x40004400
  tp->owner             = oip;
 80057d8:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  p->prev->next = p;
 80057dc:	64e2      	str	r2, [r4, #76]	; 0x4c
  qp->prev      = p;
 80057de:	62e2      	str	r2, [r4, #44]	; 0x2c
  sdp->panic_msg = NULL;
 80057e0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tp->wabase = tdp->wbase;
 80057e4:	f8c3 31d8 	str.w	r3, [r3, #472]	; 0x1d8
 80057e8:	f8c4 c00c 	str.w	ip, [r4, #12]
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 80057ec:	f7fc fbe0 	bl	8001fb0 <chSchReadyI.isra.0>
  ch_system.state = ch_sys_running;
 80057f0:	f04f 0302 	mov.w	r3, #2
 80057f4:	703b      	strb	r3, [r7, #0]
 80057f6:	f7fd fa43 	bl	8002c80 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80057fa:	f385 8811 	msr	BASEPRI, r5
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  chMtxObjectInit(&mutex_bsp2);
 80057fe:	483e      	ldr	r0, [pc, #248]	; (80058f8 <main+0x588>)
 8005800:	f7fc fabe 	bl	8001d80 <chMtxObjectInit>
  palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 8005804:	2103      	movs	r1, #3
 8005806:	4658      	mov	r0, fp
 8005808:	f7fc f96a 	bl	8001ae0 <_pal_lld_setgroupmode.constprop.0>
 800580c:	f38a 8811 	msr	BASEPRI, sl
  __dbg_check_lock();
 8005810:	f7fd fa4e 	bl	8002cb0 <__dbg_check_lock>
  if (dacp->state == DAC_STOP) {
 8005814:	7833      	ldrb	r3, [r6, #0]
  osalSysLock();

  osalDbgAssert((dacp->state == DAC_STOP) || (dacp->state == DAC_READY),
                "invalid state");

  dacp->config = config;
 8005816:	4a39      	ldr	r2, [pc, #228]	; (80058fc <main+0x58c>)
 8005818:	6132      	str	r2, [r6, #16]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d054      	beq.n	80058c8 <main+0x558>
#else
  dac_lld_start(dacp);
  msg = HAL_RET_SUCCESS;
#endif
  if (msg == HAL_RET_SUCCESS) {
    dacp->state = DAC_READY;
 800581e:	2302      	movs	r3, #2
 8005820:	7033      	strb	r3, [r6, #0]
  __dbg_check_unlock();
 8005822:	f7fd fa2d 	bl	8002c80 <__dbg_check_unlock>
 8005826:	2300      	movs	r3, #0
 8005828:	f383 8811 	msr	BASEPRI, r3
void dacPutChannelX(DACDriver *dacp, dacchannel_t channel, dacsample_t sample) {

  osalDbgCheck(channel < (dacchannel_t)DAC_MAX_CHANNELS);
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");

  dac_lld_put_channel(dacp, channel, sample);
 800582c:	f640 7031 	movw	r0, #3889	; 0xf31
 8005830:	f7fc f9be 	bl	8001bb0 <dac_lld_put_channel.constprop.0>
  chThdSleepMilliseconds(100); //wait for opamp input to settle
 8005834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005838:	f7fd f842 	bl	80028c0 <chThdSleep>
  palSetPad(GPIOA, GPIOA_heater_enable);
 800583c:	4b30      	ldr	r3, [pc, #192]	; (8005900 <main+0x590>)

  /*
   * Create threads
   */

  chThdCreateStatic(waThdBlinker, sizeof(waThdBlinker), NORMALPRIO, ThdBlinker, NULL);
 800583e:	4a31      	ldr	r2, [pc, #196]	; (8005904 <main+0x594>)
 8005840:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005844:	8318      	strh	r0, [r3, #24]
 8005846:	f44f 7110 	mov.w	r1, #576	; 0x240
 800584a:	482f      	ldr	r0, [pc, #188]	; (8005908 <main+0x598>)
 800584c:	f7fd fa48 	bl	8002ce0 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdSerial, sizeof(waThdSerial), NORMALPRIO, ThdSerial, NULL);
 8005850:	4a2e      	ldr	r2, [pc, #184]	; (800590c <main+0x59c>)
 8005852:	482f      	ldr	r0, [pc, #188]	; (8005910 <main+0x5a0>)
 8005854:	f44f 6119 	mov.w	r1, #2448	; 0x990
 8005858:	f7fd fa42 	bl	8002ce0 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdBeeper, sizeof(waThdBeeper), NORMALPRIO, ThdBeeper, NULL);
 800585c:	4a2d      	ldr	r2, [pc, #180]	; (8005914 <main+0x5a4>)
 800585e:	482e      	ldr	r0, [pc, #184]	; (8005918 <main+0x5a8>)
 8005860:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005864:	f7fd fa3c 	bl	8002ce0 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdGNSS, sizeof(waThdGNSS), NORMALPRIO, ThdGNSS, NULL);
 8005868:	4a2c      	ldr	r2, [pc, #176]	; (800591c <main+0x5ac>)
 800586a:	482d      	ldr	r0, [pc, #180]	; (8005920 <main+0x5b0>)
 800586c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8005870:	f7fd fa36 	bl	8002ce0 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdCntr, sizeof(waThdCntr), NORMALPRIO, ThdCntr, NULL);
 8005874:	4a2b      	ldr	r2, [pc, #172]	; (8005924 <main+0x5b4>)
 8005876:	482c      	ldr	r0, [pc, #176]	; (8005928 <main+0x5b8>)
 8005878:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800587c:	f7fd fa30 	bl	8002ce0 <chThdCreateStatic.constprop.0.isra.0>

  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  myprintf("Thdmain\n");
 8005880:	482a      	ldr	r0, [pc, #168]	; (800592c <main+0x5bc>)
 8005882:	f7fe fc3d 	bl	8004100 <myprintf>
 8005886:	2530      	movs	r5, #48	; 0x30
  oip->dbg.lock_cnt = (cnt_t)1;
 8005888:	2601      	movs	r6, #1
 800588a:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800588e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005892:	4313      	orrs	r3, r2
 8005894:	d112      	bne.n	80058bc <main+0x54c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005896:	f241 3188 	movw	r1, #5000	; 0x1388
 800589a:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 800589c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80058a0:	f7fc fd36 	bl	8002310 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80058a4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80058a8:	b95b      	cbnz	r3, 80058c2 <main+0x552>
 80058aa:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	dd07      	ble.n	80058c2 <main+0x552>
  oip->dbg.lock_cnt = (cnt_t)0;
 80058b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80058b6:	f383 8811 	msr	BASEPRI, r3
}
 80058ba:	e7e6      	b.n	800588a <main+0x51a>
    chSysHalt("SV#4");
 80058bc:	481c      	ldr	r0, [pc, #112]	; (8005930 <main+0x5c0>)
 80058be:	f7fb faf7 	bl	8000eb0 <chSysHalt>
    chSysHalt("SV#5");
 80058c2:	481c      	ldr	r0, [pc, #112]	; (8005934 <main+0x5c4>)
 80058c4:	f7fb faf4 	bl	8000eb0 <chSysHalt>
      rccEnableDAC1(true);
 80058c8:	4a1b      	ldr	r2, [pc, #108]	; (8005938 <main+0x5c8>)
 80058ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80058cc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80058d0:	6411      	str	r1, [r2, #64]	; 0x40
 80058d2:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80058d4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80058d8:	6611      	str	r1, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 80058da:	6ab1      	ldr	r1, [r6, #40]	; 0x28
      rccEnableDAC1(true);
 80058dc:	6e12      	ldr	r2, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 80058de:	6808      	ldr	r0, [r1, #0]
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 80058e0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80058e4:	4093      	lsls	r3, r2
      cr = dacp->params->dac->CR;
 80058e6:	6802      	ldr	r2, [r0, #0]
      cr &= dacp->params->regmask;
 80058e8:	402a      	ands	r2, r5
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 80058ea:	4313      	orrs	r3, r2
      dacp->params->dac->CR = cr;
 80058ec:	6003      	str	r3, [r0, #0]
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 80058ee:	f640 70ff 	movw	r0, #4095	; 0xfff
 80058f2:	f7fc f95d 	bl	8001bb0 <dac_lld_put_channel.constprop.0>
 80058f6:	e792      	b.n	800581e <main+0x4ae>
 80058f8:	20000d7c 	.word	0x20000d7c
 80058fc:	08005fa4 	.word	0x08005fa4
 8005900:	40020000 	.word	0x40020000
 8005904:	08004a01 	.word	0x08004a01
 8005908:	20000fd8 	.word	0x20000fd8
 800590c:	08004941 	.word	0x08004941
 8005910:	20001798 	.word	0x20001798
 8005914:	08004d41 	.word	0x08004d41
 8005918:	20000d98 	.word	0x20000d98
 800591c:	08004cd1 	.word	0x08004cd1
 8005920:	200014d8 	.word	0x200014d8
 8005924:	08004e51 	.word	0x08004e51
 8005928:	20001218 	.word	0x20001218
 800592c:	08005df0 	.word	0x08005df0
 8005930:	08005d10 	.word	0x08005d10
 8005934:	08005d38 	.word	0x08005d38
 8005938:	40023800 	.word	0x40023800

0800593c <memset>:
 800593c:	0783      	lsls	r3, r0, #30
 800593e:	b530      	push	{r4, r5, lr}
 8005940:	d048      	beq.n	80059d4 <memset+0x98>
 8005942:	1e54      	subs	r4, r2, #1
 8005944:	2a00      	cmp	r2, #0
 8005946:	d03f      	beq.n	80059c8 <memset+0x8c>
 8005948:	b2ca      	uxtb	r2, r1
 800594a:	4603      	mov	r3, r0
 800594c:	e001      	b.n	8005952 <memset+0x16>
 800594e:	3c01      	subs	r4, #1
 8005950:	d33a      	bcc.n	80059c8 <memset+0x8c>
 8005952:	f803 2b01 	strb.w	r2, [r3], #1
 8005956:	079d      	lsls	r5, r3, #30
 8005958:	d1f9      	bne.n	800594e <memset+0x12>
 800595a:	2c03      	cmp	r4, #3
 800595c:	d92d      	bls.n	80059ba <memset+0x7e>
 800595e:	b2cd      	uxtb	r5, r1
 8005960:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005964:	2c0f      	cmp	r4, #15
 8005966:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800596a:	d936      	bls.n	80059da <memset+0x9e>
 800596c:	f1a4 0210 	sub.w	r2, r4, #16
 8005970:	f022 0c0f 	bic.w	ip, r2, #15
 8005974:	f103 0e20 	add.w	lr, r3, #32
 8005978:	44e6      	add	lr, ip
 800597a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800597e:	f103 0210 	add.w	r2, r3, #16
 8005982:	e942 5504 	strd	r5, r5, [r2, #-16]
 8005986:	e942 5502 	strd	r5, r5, [r2, #-8]
 800598a:	3210      	adds	r2, #16
 800598c:	4572      	cmp	r2, lr
 800598e:	d1f8      	bne.n	8005982 <memset+0x46>
 8005990:	f10c 0201 	add.w	r2, ip, #1
 8005994:	f014 0f0c 	tst.w	r4, #12
 8005998:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800599c:	f004 0c0f 	and.w	ip, r4, #15
 80059a0:	d013      	beq.n	80059ca <memset+0x8e>
 80059a2:	f1ac 0304 	sub.w	r3, ip, #4
 80059a6:	f023 0303 	bic.w	r3, r3, #3
 80059aa:	3304      	adds	r3, #4
 80059ac:	4413      	add	r3, r2
 80059ae:	f842 5b04 	str.w	r5, [r2], #4
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d1fb      	bne.n	80059ae <memset+0x72>
 80059b6:	f00c 0403 	and.w	r4, ip, #3
 80059ba:	b12c      	cbz	r4, 80059c8 <memset+0x8c>
 80059bc:	b2c9      	uxtb	r1, r1
 80059be:	441c      	add	r4, r3
 80059c0:	f803 1b01 	strb.w	r1, [r3], #1
 80059c4:	429c      	cmp	r4, r3
 80059c6:	d1fb      	bne.n	80059c0 <memset+0x84>
 80059c8:	bd30      	pop	{r4, r5, pc}
 80059ca:	4664      	mov	r4, ip
 80059cc:	4613      	mov	r3, r2
 80059ce:	2c00      	cmp	r4, #0
 80059d0:	d1f4      	bne.n	80059bc <memset+0x80>
 80059d2:	e7f9      	b.n	80059c8 <memset+0x8c>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4614      	mov	r4, r2
 80059d8:	e7bf      	b.n	800595a <memset+0x1e>
 80059da:	461a      	mov	r2, r3
 80059dc:	46a4      	mov	ip, r4
 80059de:	e7e0      	b.n	80059a2 <memset+0x66>

080059e0 <__aeabi_f2ulz>:
 80059e0:	b5d0      	push	{r4, r6, r7, lr}
 80059e2:	f7fa fead 	bl	8000740 <__aeabi_f2d>
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <__aeabi_f2ulz+0x38>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	4606      	mov	r6, r0
 80059ec:	460f      	mov	r7, r1
 80059ee:	f7fa feff 	bl	80007f0 <__aeabi_dmul>
 80059f2:	f7fb f9bf 	bl	8000d74 <__aeabi_d2uiz>
 80059f6:	4604      	mov	r4, r0
 80059f8:	f7fa fe80 	bl	80006fc <__aeabi_ui2d>
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <__aeabi_f2ulz+0x3c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	f7fa fef6 	bl	80007f0 <__aeabi_dmul>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fd38 	bl	8000480 <__aeabi_dsub>
 8005a10:	f7fb f9b0 	bl	8000d74 <__aeabi_d2uiz>
 8005a14:	4621      	mov	r1, r4
 8005a16:	bdd0      	pop	{r4, r6, r7, pc}
 8005a18:	3df00000 	.word	0x3df00000
 8005a1c:	41f00000 	.word	0x41f00000

08005a20 <__udivmoddi4>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	9e08      	ldr	r6, [sp, #32]
 8005a26:	460d      	mov	r5, r1
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460f      	mov	r7, r1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d14a      	bne.n	8005ac6 <__udivmoddi4+0xa6>
 8005a30:	428a      	cmp	r2, r1
 8005a32:	4694      	mov	ip, r2
 8005a34:	d965      	bls.n	8005b02 <__udivmoddi4+0xe2>
 8005a36:	fab2 f382 	clz	r3, r2
 8005a3a:	b143      	cbz	r3, 8005a4e <__udivmoddi4+0x2e>
 8005a3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8005a40:	f1c3 0220 	rsb	r2, r3, #32
 8005a44:	409f      	lsls	r7, r3
 8005a46:	fa20 f202 	lsr.w	r2, r0, r2
 8005a4a:	4317      	orrs	r7, r2
 8005a4c:	409c      	lsls	r4, r3
 8005a4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8005a52:	fa1f f58c 	uxth.w	r5, ip
 8005a56:	fbb7 f1fe 	udiv	r1, r7, lr
 8005a5a:	0c22      	lsrs	r2, r4, #16
 8005a5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8005a60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8005a64:	fb01 f005 	mul.w	r0, r1, r5
 8005a68:	4290      	cmp	r0, r2
 8005a6a:	d90a      	bls.n	8005a82 <__udivmoddi4+0x62>
 8005a6c:	eb1c 0202 	adds.w	r2, ip, r2
 8005a70:	f101 37ff 	add.w	r7, r1, #4294967295
 8005a74:	f080 811c 	bcs.w	8005cb0 <__udivmoddi4+0x290>
 8005a78:	4290      	cmp	r0, r2
 8005a7a:	f240 8119 	bls.w	8005cb0 <__udivmoddi4+0x290>
 8005a7e:	3902      	subs	r1, #2
 8005a80:	4462      	add	r2, ip
 8005a82:	1a12      	subs	r2, r2, r0
 8005a84:	b2a4      	uxth	r4, r4
 8005a86:	fbb2 f0fe 	udiv	r0, r2, lr
 8005a8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8005a8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005a92:	fb00 f505 	mul.w	r5, r0, r5
 8005a96:	42a5      	cmp	r5, r4
 8005a98:	d90a      	bls.n	8005ab0 <__udivmoddi4+0x90>
 8005a9a:	eb1c 0404 	adds.w	r4, ip, r4
 8005a9e:	f100 32ff 	add.w	r2, r0, #4294967295
 8005aa2:	f080 8107 	bcs.w	8005cb4 <__udivmoddi4+0x294>
 8005aa6:	42a5      	cmp	r5, r4
 8005aa8:	f240 8104 	bls.w	8005cb4 <__udivmoddi4+0x294>
 8005aac:	4464      	add	r4, ip
 8005aae:	3802      	subs	r0, #2
 8005ab0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005ab4:	1b64      	subs	r4, r4, r5
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	b11e      	cbz	r6, 8005ac2 <__udivmoddi4+0xa2>
 8005aba:	40dc      	lsrs	r4, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	e9c6 4300 	strd	r4, r3, [r6]
 8005ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac6:	428b      	cmp	r3, r1
 8005ac8:	d908      	bls.n	8005adc <__udivmoddi4+0xbc>
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	f000 80ed 	beq.w	8005caa <__udivmoddi4+0x28a>
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	e9c6 0500 	strd	r0, r5, [r6]
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	fab3 f183 	clz	r1, r3
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	d149      	bne.n	8005b78 <__udivmoddi4+0x158>
 8005ae4:	42ab      	cmp	r3, r5
 8005ae6:	d302      	bcc.n	8005aee <__udivmoddi4+0xce>
 8005ae8:	4282      	cmp	r2, r0
 8005aea:	f200 80f8 	bhi.w	8005cde <__udivmoddi4+0x2be>
 8005aee:	1a84      	subs	r4, r0, r2
 8005af0:	eb65 0203 	sbc.w	r2, r5, r3
 8005af4:	2001      	movs	r0, #1
 8005af6:	4617      	mov	r7, r2
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	d0e2      	beq.n	8005ac2 <__udivmoddi4+0xa2>
 8005afc:	e9c6 4700 	strd	r4, r7, [r6]
 8005b00:	e7df      	b.n	8005ac2 <__udivmoddi4+0xa2>
 8005b02:	b902      	cbnz	r2, 8005b06 <__udivmoddi4+0xe6>
 8005b04:	deff      	udf	#255	; 0xff
 8005b06:	fab2 f382 	clz	r3, r2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 8090 	bne.w	8005c30 <__udivmoddi4+0x210>
 8005b10:	1a8a      	subs	r2, r1, r2
 8005b12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005b16:	fa1f fe8c 	uxth.w	lr, ip
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8005b20:	fb07 2015 	mls	r0, r7, r5, r2
 8005b24:	0c22      	lsrs	r2, r4, #16
 8005b26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b2a:	fb0e f005 	mul.w	r0, lr, r5
 8005b2e:	4290      	cmp	r0, r2
 8005b30:	d908      	bls.n	8005b44 <__udivmoddi4+0x124>
 8005b32:	eb1c 0202 	adds.w	r2, ip, r2
 8005b36:	f105 38ff 	add.w	r8, r5, #4294967295
 8005b3a:	d202      	bcs.n	8005b42 <__udivmoddi4+0x122>
 8005b3c:	4290      	cmp	r0, r2
 8005b3e:	f200 80cb 	bhi.w	8005cd8 <__udivmoddi4+0x2b8>
 8005b42:	4645      	mov	r5, r8
 8005b44:	1a12      	subs	r2, r2, r0
 8005b46:	b2a4      	uxth	r4, r4
 8005b48:	fbb2 f0f7 	udiv	r0, r2, r7
 8005b4c:	fb07 2210 	mls	r2, r7, r0, r2
 8005b50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005b54:	fb0e fe00 	mul.w	lr, lr, r0
 8005b58:	45a6      	cmp	lr, r4
 8005b5a:	d908      	bls.n	8005b6e <__udivmoddi4+0x14e>
 8005b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8005b60:	f100 32ff 	add.w	r2, r0, #4294967295
 8005b64:	d202      	bcs.n	8005b6c <__udivmoddi4+0x14c>
 8005b66:	45a6      	cmp	lr, r4
 8005b68:	f200 80bb 	bhi.w	8005ce2 <__udivmoddi4+0x2c2>
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	eba4 040e 	sub.w	r4, r4, lr
 8005b72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005b76:	e79f      	b.n	8005ab8 <__udivmoddi4+0x98>
 8005b78:	f1c1 0720 	rsb	r7, r1, #32
 8005b7c:	408b      	lsls	r3, r1
 8005b7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8005b82:	ea4c 0c03 	orr.w	ip, ip, r3
 8005b86:	fa05 f401 	lsl.w	r4, r5, r1
 8005b8a:	fa20 f307 	lsr.w	r3, r0, r7
 8005b8e:	40fd      	lsrs	r5, r7
 8005b90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8005b94:	4323      	orrs	r3, r4
 8005b96:	fbb5 f8f9 	udiv	r8, r5, r9
 8005b9a:	fa1f fe8c 	uxth.w	lr, ip
 8005b9e:	fb09 5518 	mls	r5, r9, r8, r5
 8005ba2:	0c1c      	lsrs	r4, r3, #16
 8005ba4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005ba8:	fb08 f50e 	mul.w	r5, r8, lr
 8005bac:	42a5      	cmp	r5, r4
 8005bae:	fa02 f201 	lsl.w	r2, r2, r1
 8005bb2:	fa00 f001 	lsl.w	r0, r0, r1
 8005bb6:	d90b      	bls.n	8005bd0 <__udivmoddi4+0x1b0>
 8005bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8005bbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8005bc0:	f080 8088 	bcs.w	8005cd4 <__udivmoddi4+0x2b4>
 8005bc4:	42a5      	cmp	r5, r4
 8005bc6:	f240 8085 	bls.w	8005cd4 <__udivmoddi4+0x2b4>
 8005bca:	f1a8 0802 	sub.w	r8, r8, #2
 8005bce:	4464      	add	r4, ip
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	b29d      	uxth	r5, r3
 8005bd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8005bd8:	fb09 4413 	mls	r4, r9, r3, r4
 8005bdc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8005be0:	fb03 fe0e 	mul.w	lr, r3, lr
 8005be4:	45a6      	cmp	lr, r4
 8005be6:	d908      	bls.n	8005bfa <__udivmoddi4+0x1da>
 8005be8:	eb1c 0404 	adds.w	r4, ip, r4
 8005bec:	f103 35ff 	add.w	r5, r3, #4294967295
 8005bf0:	d26c      	bcs.n	8005ccc <__udivmoddi4+0x2ac>
 8005bf2:	45a6      	cmp	lr, r4
 8005bf4:	d96a      	bls.n	8005ccc <__udivmoddi4+0x2ac>
 8005bf6:	3b02      	subs	r3, #2
 8005bf8:	4464      	add	r4, ip
 8005bfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005bfe:	fba3 9502 	umull	r9, r5, r3, r2
 8005c02:	eba4 040e 	sub.w	r4, r4, lr
 8005c06:	42ac      	cmp	r4, r5
 8005c08:	46c8      	mov	r8, r9
 8005c0a:	46ae      	mov	lr, r5
 8005c0c:	d356      	bcc.n	8005cbc <__udivmoddi4+0x29c>
 8005c0e:	d053      	beq.n	8005cb8 <__udivmoddi4+0x298>
 8005c10:	b156      	cbz	r6, 8005c28 <__udivmoddi4+0x208>
 8005c12:	ebb0 0208 	subs.w	r2, r0, r8
 8005c16:	eb64 040e 	sbc.w	r4, r4, lr
 8005c1a:	fa04 f707 	lsl.w	r7, r4, r7
 8005c1e:	40ca      	lsrs	r2, r1
 8005c20:	40cc      	lsrs	r4, r1
 8005c22:	4317      	orrs	r7, r2
 8005c24:	e9c6 7400 	strd	r7, r4, [r6]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c30:	f1c3 0120 	rsb	r1, r3, #32
 8005c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8005c38:	fa20 f201 	lsr.w	r2, r0, r1
 8005c3c:	fa25 f101 	lsr.w	r1, r5, r1
 8005c40:	409d      	lsls	r5, r3
 8005c42:	432a      	orrs	r2, r5
 8005c44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005c48:	fa1f fe8c 	uxth.w	lr, ip
 8005c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8005c50:	fb07 1510 	mls	r5, r7, r0, r1
 8005c54:	0c11      	lsrs	r1, r2, #16
 8005c56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005c5a:	fb00 f50e 	mul.w	r5, r0, lr
 8005c5e:	428d      	cmp	r5, r1
 8005c60:	fa04 f403 	lsl.w	r4, r4, r3
 8005c64:	d908      	bls.n	8005c78 <__udivmoddi4+0x258>
 8005c66:	eb1c 0101 	adds.w	r1, ip, r1
 8005c6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8005c6e:	d22f      	bcs.n	8005cd0 <__udivmoddi4+0x2b0>
 8005c70:	428d      	cmp	r5, r1
 8005c72:	d92d      	bls.n	8005cd0 <__udivmoddi4+0x2b0>
 8005c74:	3802      	subs	r0, #2
 8005c76:	4461      	add	r1, ip
 8005c78:	1b49      	subs	r1, r1, r5
 8005c7a:	b292      	uxth	r2, r2
 8005c7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8005c80:	fb07 1115 	mls	r1, r7, r5, r1
 8005c84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005c88:	fb05 f10e 	mul.w	r1, r5, lr
 8005c8c:	4291      	cmp	r1, r2
 8005c8e:	d908      	bls.n	8005ca2 <__udivmoddi4+0x282>
 8005c90:	eb1c 0202 	adds.w	r2, ip, r2
 8005c94:	f105 38ff 	add.w	r8, r5, #4294967295
 8005c98:	d216      	bcs.n	8005cc8 <__udivmoddi4+0x2a8>
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	d914      	bls.n	8005cc8 <__udivmoddi4+0x2a8>
 8005c9e:	3d02      	subs	r5, #2
 8005ca0:	4462      	add	r2, ip
 8005ca2:	1a52      	subs	r2, r2, r1
 8005ca4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8005ca8:	e738      	b.n	8005b1c <__udivmoddi4+0xfc>
 8005caa:	4631      	mov	r1, r6
 8005cac:	4630      	mov	r0, r6
 8005cae:	e708      	b.n	8005ac2 <__udivmoddi4+0xa2>
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	e6e6      	b.n	8005a82 <__udivmoddi4+0x62>
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	e6fb      	b.n	8005ab0 <__udivmoddi4+0x90>
 8005cb8:	4548      	cmp	r0, r9
 8005cba:	d2a9      	bcs.n	8005c10 <__udivmoddi4+0x1f0>
 8005cbc:	ebb9 0802 	subs.w	r8, r9, r2
 8005cc0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	e7a3      	b.n	8005c10 <__udivmoddi4+0x1f0>
 8005cc8:	4645      	mov	r5, r8
 8005cca:	e7ea      	b.n	8005ca2 <__udivmoddi4+0x282>
 8005ccc:	462b      	mov	r3, r5
 8005cce:	e794      	b.n	8005bfa <__udivmoddi4+0x1da>
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	e7d1      	b.n	8005c78 <__udivmoddi4+0x258>
 8005cd4:	46d0      	mov	r8, sl
 8005cd6:	e77b      	b.n	8005bd0 <__udivmoddi4+0x1b0>
 8005cd8:	3d02      	subs	r5, #2
 8005cda:	4462      	add	r2, ip
 8005cdc:	e732      	b.n	8005b44 <__udivmoddi4+0x124>
 8005cde:	4608      	mov	r0, r1
 8005ce0:	e70a      	b.n	8005af8 <__udivmoddi4+0xd8>
 8005ce2:	4464      	add	r4, ip
 8005ce4:	3802      	subs	r0, #2
 8005ce6:	e742      	b.n	8005b6e <__udivmoddi4+0x14e>
