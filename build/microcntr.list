
build/microcntr.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002fd 	.word	0x080002fd
 8000008:	080002ff 	.word	0x080002ff
 800000c:	080002ff 	.word	0x080002ff
 8000010:	080002ff 	.word	0x080002ff
 8000014:	080002ff 	.word	0x080002ff
 8000018:	080002ff 	.word	0x080002ff
 800001c:	080002ff 	.word	0x080002ff
 8000020:	080002ff 	.word	0x080002ff
 8000024:	080002ff 	.word	0x080002ff
 8000028:	080002ff 	.word	0x080002ff
 800002c:	08004191 	.word	0x08004191
 8000030:	080002ff 	.word	0x080002ff
 8000034:	080002ff 	.word	0x080002ff
 8000038:	080002ff 	.word	0x080002ff
 800003c:	080002ff 	.word	0x080002ff
 8000040:	080002ff 	.word	0x080002ff
 8000044:	080002ff 	.word	0x080002ff
 8000048:	080002ff 	.word	0x080002ff
 800004c:	080002ff 	.word	0x080002ff
 8000050:	080002ff 	.word	0x080002ff
 8000054:	080002ff 	.word	0x080002ff
 8000058:	080002ff 	.word	0x080002ff
 800005c:	080002ff 	.word	0x080002ff
 8000060:	080002ff 	.word	0x080002ff
 8000064:	080002ff 	.word	0x080002ff
 8000068:	080002ff 	.word	0x080002ff
 800006c:	08002541 	.word	0x08002541
 8000070:	080025e1 	.word	0x080025e1
 8000074:	08002681 	.word	0x08002681
 8000078:	08002721 	.word	0x08002721
 800007c:	080027c1 	.word	0x080027c1
 8000080:	08002861 	.word	0x08002861
 8000084:	08002901 	.word	0x08002901
 8000088:	080023e1 	.word	0x080023e1
 800008c:	080002ff 	.word	0x080002ff
 8000090:	080002ff 	.word	0x080002ff
 8000094:	080002ff 	.word	0x080002ff
 8000098:	080002ff 	.word	0x080002ff
 800009c:	080002ff 	.word	0x080002ff
 80000a0:	080002ff 	.word	0x080002ff
 80000a4:	080002ff 	.word	0x080002ff
 80000a8:	08002141 	.word	0x08002141
 80000ac:	080002ff 	.word	0x080002ff
 80000b0:	080002ff 	.word	0x080002ff
 80000b4:	080002ff 	.word	0x080002ff
 80000b8:	080002ff 	.word	0x080002ff
 80000bc:	080002ff 	.word	0x080002ff
 80000c0:	080002ff 	.word	0x080002ff
 80000c4:	08002f41 	.word	0x08002f41
 80000c8:	08003171 	.word	0x08003171
 80000cc:	080002ff 	.word	0x080002ff
 80000d0:	080002ff 	.word	0x080002ff
 80000d4:	08002041 	.word	0x08002041
 80000d8:	080020c1 	.word	0x080020c1
 80000dc:	080002ff 	.word	0x080002ff
 80000e0:	080002ff 	.word	0x080002ff
 80000e4:	080002ff 	.word	0x080002ff
 80000e8:	080002ff 	.word	0x080002ff
 80000ec:	080002ff 	.word	0x080002ff
 80000f0:	080002ff 	.word	0x080002ff
 80000f4:	080002ff 	.word	0x080002ff
 80000f8:	080002ff 	.word	0x080002ff
 80000fc:	080029a1 	.word	0x080029a1
 8000100:	080002ff 	.word	0x080002ff
 8000104:	080002ff 	.word	0x080002ff
 8000108:	080002ff 	.word	0x080002ff
 800010c:	080002ff 	.word	0x080002ff
 8000110:	080002ff 	.word	0x080002ff
 8000114:	080002ff 	.word	0x080002ff
 8000118:	08002321 	.word	0x08002321
 800011c:	080002ff 	.word	0x080002ff
 8000120:	08002a41 	.word	0x08002a41
 8000124:	08002ae1 	.word	0x08002ae1
 8000128:	08002b81 	.word	0x08002b81
 800012c:	08002c21 	.word	0x08002c21
 8000130:	08002cc1 	.word	0x08002cc1
 8000134:	080002ff 	.word	0x080002ff
 8000138:	080002ff 	.word	0x080002ff
 800013c:	080002ff 	.word	0x080002ff
 8000140:	080002ff 	.word	0x080002ff
 8000144:	080002ff 	.word	0x080002ff
 8000148:	080002ff 	.word	0x080002ff
 800014c:	080002ff 	.word	0x080002ff
 8000150:	08002d61 	.word	0x08002d61
 8000154:	08002e01 	.word	0x08002e01
 8000158:	08002ea1 	.word	0x08002ea1
 800015c:	080002ff 	.word	0x080002ff
 8000160:	080002ff 	.word	0x080002ff
 8000164:	080002ff 	.word	0x080002ff
 8000168:	080002ff 	.word	0x080002ff
 800016c:	080002ff 	.word	0x080002ff
 8000170:	080002ff 	.word	0x080002ff
 8000174:	080002ff 	.word	0x080002ff
 8000178:	080002ff 	.word	0x080002ff
 800017c:	080002ff 	.word	0x080002ff
 8000180:	080002ff 	.word	0x080002ff
 8000184:	080002ff 	.word	0x080002ff
 8000188:	080002ff 	.word	0x080002ff
 800018c:	080002ff 	.word	0x080002ff
 8000190:	080002ff 	.word	0x080002ff
 8000194:	080002ff 	.word	0x080002ff
 8000198:	080002ff 	.word	0x080002ff
 800019c:	080002ff 	.word	0x080002ff
 80001a0:	080002ff 	.word	0x080002ff
 80001a4:	080002ff 	.word	0x080002ff
 80001a8:	080002ff 	.word	0x080002ff
 80001ac:	080002ff 	.word	0x080002ff
 80001b0:	080002ff 	.word	0x080002ff
 80001b4:	080002ff 	.word	0x080002ff
 80001b8:	080002ff 	.word	0x080002ff
 80001bc:	080002ff 	.word	0x080002ff
 80001c0:	080002ff 	.word	0x080002ff
 80001c4:	080002ff 	.word	0x080002ff
 80001c8:	080002ff 	.word	0x080002ff
 80001cc:	080002ff 	.word	0x080002ff
 80001d0:	080002ff 	.word	0x080002ff
 80001d4:	080002ff 	.word	0x080002ff
 80001d8:	080002ff 	.word	0x080002ff
 80001dc:	080002ff 	.word	0x080002ff

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4837      	ldr	r0, [pc, #220]	; (80002c0 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4836      	ldr	r0, [pc, #216]	; (80002c4 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4836      	ldr	r0, [pc, #216]	; (80002c8 <endfiniloop+0xc>)
                ldr     r1, =SCB_VTOR
 80001f0:	4936      	ldr	r1, [pc, #216]	; (80002cc <endfiniloop+0x10>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001f4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001f8:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001fc:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000200:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000204:	6008      	str	r0, [r1, #0]
                dsb
 8000206:	f3bf 8f4f 	dsb	sy
                isb
 800020a:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800020e:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000212:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000216:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 800021a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021e:	6008      	str	r0, [r1, #0]
                dsb
 8000220:	f3bf 8f4f 	dsb	sy
                isb
 8000224:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000228:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800022c:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000230:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000234:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000238:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800023a:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800023c:	f380 8814 	msr	CONTROL, r0
                isb
 8000240:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000244:	f001 fd94 	bl	8001d70 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000248:	f003 ffb2 	bl	80041b0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800024c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000250:	491f      	ldr	r1, [pc, #124]	; (80002d0 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8000252:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <endfiniloop+0x4>)

08000254 <msloop>:
msloop:
                cmp     r1, r2
 8000254:	4291      	cmp	r1, r2
                itt     lo
 8000256:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000258:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800025c:	e7fa      	bcc.n	8000254 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800025e:	491d      	ldr	r1, [pc, #116]	; (80002d4 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <endfiniloop+0x8>)

08000262 <psloop>:
psloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800026a:	e7fa      	bcc.n	8000262 <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 800026c:	491a      	ldr	r1, [pc, #104]	; (80002d8 <endfiniloop+0x1c>)
                ldr     r2, =__data_base__
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <endfiniloop+0x20>)
                ldr     r3, =__data_end__
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <endfiniloop+0x24>)

08000272 <dloop>:
dloop:
                cmp     r2, r3
 8000272:	429a      	cmp	r2, r3
                ittt    lo
 8000274:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000276:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800027a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800027e:	e7f8      	bcc.n	8000272 <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 8000280:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000282:	4918      	ldr	r1, [pc, #96]	; (80002e4 <endfiniloop+0x28>)
                ldr     r2, =__bss_end__
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <endfiniloop+0x2c>)

08000286 <bloop>:
bloop:
                cmp     r1, r2
 8000286:	4291      	cmp	r1, r2
                itt     lo
 8000288:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800028a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800028e:	e7fa      	bcc.n	8000286 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000290:	f001 fd86 	bl	8001da0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000294:	f001 fd74 	bl	8001d80 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000298:	4c14      	ldr	r4, [pc, #80]	; (80002ec <endfiniloop+0x30>)
                ldr     r5, =__init_array_end__
 800029a:	4d15      	ldr	r5, [pc, #84]	; (80002f0 <endfiniloop+0x34>)

0800029c <initloop>:
initloop:
                cmp     r4, r5
 800029c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800029e:	da03      	bge.n	80002a8 <endinitloop>
                ldr     r1, [r4], #4
 80002a0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002a4:	4788      	blx	r1
                b       initloop
 80002a6:	e7f9      	b.n	800029c <initloop>

080002a8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002a8:	f004 f872 	bl	8004390 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002ac:	4c11      	ldr	r4, [pc, #68]	; (80002f4 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end__
 80002ae:	4d12      	ldr	r5, [pc, #72]	; (80002f8 <endfiniloop+0x3c>)

080002b0 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b2:	da03      	bge.n	80002bc <endfiniloop>
                ldr     r1, [r4], #4
 80002b4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b8:	4788      	blx	r1
                b       finiloop
 80002ba:	e7f9      	b.n	80002b0 <finiloop>

080002bc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002bc:	f001 bd68 	b.w	8001d90 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002c0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002c4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002c8:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 80002cc:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 80002d0:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d4:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002d8:	080050d0 	.word	0x080050d0
                ldr     r2, =__data_base__
 80002dc:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002e0:	20000804 	.word	0x20000804
                ldr     r1, =__bss_base__
 80002e4:	20000808 	.word	0x20000808
                ldr     r2, =__bss_end__
 80002e8:	20002020 	.word	0x20002020
                ldr     r4, =__init_array_base__
 80002ec:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002f8:	080001e0 	.word	0x080001e0

080002fc <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002fc:	e770      	b.n	80001e0 <_crt0_entry>

080002fe <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002fe:	f000 f800 	bl	8000302 <_unhandled_exception>

08000302 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000302:	e7fe      	b.n	8000302 <_unhandled_exception>

08000304 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
 8000308:	ed2d 8a10 	vpush	{s16-s31}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 800030c:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000310:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000312:	469d      	mov	sp, r3
#endif
#endif

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
 8000314:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800031c <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800031c:	f001 fd78 	bl	8001e10 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f003 fef8 	bl	8004120 <chThdExit>

08000330 <.zombies>:
.zombies:       b       .zombies
 8000330:	e7fe      	b.n	8000330 <.zombies>

08000332 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 8000332:	f001 fd85 	bl	8001e40 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 8000336:	f002 ffe3 	bl	8003300 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800033a:	f001 fd69 	bl	8001e10 <__dbg_check_unlock>

0800033e <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033e:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000340:	e7fe      	b.n	8000340 <__port_exit_from_isr+0x2>
	...

08000344 <memcpy>:
 8000344:	4684      	mov	ip, r0
 8000346:	ea41 0300 	orr.w	r3, r1, r0
 800034a:	f013 0303 	ands.w	r3, r3, #3
 800034e:	d16d      	bne.n	800042c <memcpy+0xe8>
 8000350:	3a40      	subs	r2, #64	; 0x40
 8000352:	d341      	bcc.n	80003d8 <memcpy+0x94>
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a40      	subs	r2, #64	; 0x40
 80003d6:	d2bd      	bcs.n	8000354 <memcpy+0x10>
 80003d8:	3230      	adds	r2, #48	; 0x30
 80003da:	d311      	bcc.n	8000400 <memcpy+0xbc>
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	3a10      	subs	r2, #16
 80003fe:	d2ed      	bcs.n	80003dc <memcpy+0x98>
 8000400:	320c      	adds	r2, #12
 8000402:	d305      	bcc.n	8000410 <memcpy+0xcc>
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	3a04      	subs	r2, #4
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0xc0>
 8000410:	3204      	adds	r2, #4
 8000412:	d008      	beq.n	8000426 <memcpy+0xe2>
 8000414:	07d2      	lsls	r2, r2, #31
 8000416:	bf1c      	itt	ne
 8000418:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800041c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000420:	d301      	bcc.n	8000426 <memcpy+0xe2>
 8000422:	880b      	ldrh	r3, [r1, #0]
 8000424:	8003      	strh	r3, [r0, #0]
 8000426:	4660      	mov	r0, ip
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2a08      	cmp	r2, #8
 800042e:	d313      	bcc.n	8000458 <memcpy+0x114>
 8000430:	078b      	lsls	r3, r1, #30
 8000432:	d08d      	beq.n	8000350 <memcpy+0xc>
 8000434:	f010 0303 	ands.w	r3, r0, #3
 8000438:	d08a      	beq.n	8000350 <memcpy+0xc>
 800043a:	f1c3 0304 	rsb	r3, r3, #4
 800043e:	1ad2      	subs	r2, r2, r3
 8000440:	07db      	lsls	r3, r3, #31
 8000442:	bf1c      	itt	ne
 8000444:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000448:	f800 3b01 	strbne.w	r3, [r0], #1
 800044c:	d380      	bcc.n	8000350 <memcpy+0xc>
 800044e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000452:	f820 3b02 	strh.w	r3, [r0], #2
 8000456:	e77b      	b.n	8000350 <memcpy+0xc>
 8000458:	3a04      	subs	r2, #4
 800045a:	d3d9      	bcc.n	8000410 <memcpy+0xcc>
 800045c:	3a01      	subs	r2, #1
 800045e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000462:	f800 3b01 	strb.w	r3, [r0], #1
 8000466:	d2f9      	bcs.n	800045c <memcpy+0x118>
 8000468:	780b      	ldrb	r3, [r1, #0]
 800046a:	7003      	strb	r3, [r0, #0]
 800046c:	784b      	ldrb	r3, [r1, #1]
 800046e:	7043      	strb	r3, [r0, #1]
 8000470:	788b      	ldrb	r3, [r1, #2]
 8000472:	7083      	strb	r3, [r0, #2]
 8000474:	4660      	mov	r0, ip
 8000476:	4770      	bx	lr

08000478 <__aeabi_dmul>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800047e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000486:	bf1d      	ittte	ne
 8000488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800048c:	ea94 0f0c 	teqne	r4, ip
 8000490:	ea95 0f0c 	teqne	r5, ip
 8000494:	f000 f8de 	bleq	8000654 <__aeabi_dmul+0x1dc>
 8000498:	442c      	add	r4, r5
 800049a:	ea81 0603 	eor.w	r6, r1, r3
 800049e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004aa:	bf18      	it	ne
 80004ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004b8:	d038      	beq.n	800052c <__aeabi_dmul+0xb4>
 80004ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80004be:	f04f 0500 	mov.w	r5, #0
 80004c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004ce:	f04f 0600 	mov.w	r6, #0
 80004d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004d6:	f09c 0f00 	teq	ip, #0
 80004da:	bf18      	it	ne
 80004dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80004e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004ec:	d204      	bcs.n	80004f8 <__aeabi_dmul+0x80>
 80004ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80004f2:	416d      	adcs	r5, r5
 80004f4:	eb46 0606 	adc.w	r6, r6, r6
 80004f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80004fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800050c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000510:	bf88      	it	hi
 8000512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000516:	d81e      	bhi.n	8000556 <__aeabi_dmul+0xde>
 8000518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800051c:	bf08      	it	eq
 800051e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000522:	f150 0000 	adcs.w	r0, r0, #0
 8000526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000530:	ea46 0101 	orr.w	r1, r6, r1
 8000534:	ea40 0002 	orr.w	r0, r0, r2
 8000538:	ea81 0103 	eor.w	r1, r1, r3
 800053c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000540:	bfc2      	ittt	gt
 8000542:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800054a:	bd70      	popgt	{r4, r5, r6, pc}
 800054c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000550:	f04f 0e00 	mov.w	lr, #0
 8000554:	3c01      	subs	r4, #1
 8000556:	f300 80ab 	bgt.w	80006b0 <__aeabi_dmul+0x238>
 800055a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800055e:	bfde      	ittt	le
 8000560:	2000      	movle	r0, #0
 8000562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000566:	bd70      	pople	{r4, r5, r6, pc}
 8000568:	f1c4 0400 	rsb	r4, r4, #0
 800056c:	3c20      	subs	r4, #32
 800056e:	da35      	bge.n	80005dc <__aeabi_dmul+0x164>
 8000570:	340c      	adds	r4, #12
 8000572:	dc1b      	bgt.n	80005ac <__aeabi_dmul+0x134>
 8000574:	f104 0414 	add.w	r4, r4, #20
 8000578:	f1c4 0520 	rsb	r5, r4, #32
 800057c:	fa00 f305 	lsl.w	r3, r0, r5
 8000580:	fa20 f004 	lsr.w	r0, r0, r4
 8000584:	fa01 f205 	lsl.w	r2, r1, r5
 8000588:	ea40 0002 	orr.w	r0, r0, r2
 800058c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000598:	fa21 f604 	lsr.w	r6, r1, r4
 800059c:	eb42 0106 	adc.w	r1, r2, r6
 80005a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f1c4 040c 	rsb	r4, r4, #12
 80005b0:	f1c4 0520 	rsb	r5, r4, #32
 80005b4:	fa00 f304 	lsl.w	r3, r0, r4
 80005b8:	fa20 f005 	lsr.w	r0, r0, r5
 80005bc:	fa01 f204 	lsl.w	r2, r1, r4
 80005c0:	ea40 0002 	orr.w	r0, r0, r2
 80005c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005cc:	f141 0100 	adc.w	r1, r1, #0
 80005d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005d4:	bf08      	it	eq
 80005d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f205 	lsl.w	r2, r0, r5
 80005e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005e8:	fa20 f304 	lsr.w	r3, r0, r4
 80005ec:	fa01 f205 	lsl.w	r2, r1, r5
 80005f0:	ea43 0302 	orr.w	r3, r3, r2
 80005f4:	fa21 f004 	lsr.w	r0, r1, r4
 80005f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000600:	ea20 0002 	bic.w	r0, r0, r2
 8000604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800060c:	bf08      	it	eq
 800060e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f094 0f00 	teq	r4, #0
 8000618:	d10f      	bne.n	800063a <__aeabi_dmul+0x1c2>
 800061a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800061e:	0040      	lsls	r0, r0, #1
 8000620:	eb41 0101 	adc.w	r1, r1, r1
 8000624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000628:	bf08      	it	eq
 800062a:	3c01      	subeq	r4, #1
 800062c:	d0f7      	beq.n	800061e <__aeabi_dmul+0x1a6>
 800062e:	ea41 0106 	orr.w	r1, r1, r6
 8000632:	f095 0f00 	teq	r5, #0
 8000636:	bf18      	it	ne
 8000638:	4770      	bxne	lr
 800063a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	eb43 0303 	adc.w	r3, r3, r3
 8000644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000648:	bf08      	it	eq
 800064a:	3d01      	subeq	r5, #1
 800064c:	d0f7      	beq.n	800063e <__aeabi_dmul+0x1c6>
 800064e:	ea43 0306 	orr.w	r3, r3, r6
 8000652:	4770      	bx	lr
 8000654:	ea94 0f0c 	teq	r4, ip
 8000658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800065c:	bf18      	it	ne
 800065e:	ea95 0f0c 	teqne	r5, ip
 8000662:	d00c      	beq.n	800067e <__aeabi_dmul+0x206>
 8000664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000668:	bf18      	it	ne
 800066a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800066e:	d1d1      	bne.n	8000614 <__aeabi_dmul+0x19c>
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000682:	bf06      	itte	eq
 8000684:	4610      	moveq	r0, r2
 8000686:	4619      	moveq	r1, r3
 8000688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800068c:	d019      	beq.n	80006c2 <__aeabi_dmul+0x24a>
 800068e:	ea94 0f0c 	teq	r4, ip
 8000692:	d102      	bne.n	800069a <__aeabi_dmul+0x222>
 8000694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000698:	d113      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 800069a:	ea95 0f0c 	teq	r5, ip
 800069e:	d105      	bne.n	80006ac <__aeabi_dmul+0x234>
 80006a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006a4:	bf1c      	itt	ne
 80006a6:	4610      	movne	r0, r2
 80006a8:	4619      	movne	r1, r3
 80006aa:	d10a      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006ca:	bd70      	pop	{r4, r5, r6, pc}

080006cc <__aeabi_drsub>:
 80006cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e002      	b.n	80006d8 <__adddf3>
 80006d2:	bf00      	nop

080006d4 <__aeabi_dsub>:
 80006d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080006d8 <__adddf3>:
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006e2:	ea94 0f05 	teq	r4, r5
 80006e6:	bf08      	it	eq
 80006e8:	ea90 0f02 	teqeq	r0, r2
 80006ec:	bf1f      	itttt	ne
 80006ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006fe:	f000 80e2 	beq.w	80008c6 <__adddf3+0x1ee>
 8000702:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000706:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800070a:	bfb8      	it	lt
 800070c:	426d      	neglt	r5, r5
 800070e:	dd0c      	ble.n	800072a <__adddf3+0x52>
 8000710:	442c      	add	r4, r5
 8000712:	ea80 0202 	eor.w	r2, r0, r2
 8000716:	ea81 0303 	eor.w	r3, r1, r3
 800071a:	ea82 0000 	eor.w	r0, r2, r0
 800071e:	ea83 0101 	eor.w	r1, r3, r1
 8000722:	ea80 0202 	eor.w	r2, r0, r2
 8000726:	ea81 0303 	eor.w	r3, r1, r3
 800072a:	2d36      	cmp	r5, #54	; 0x36
 800072c:	bf88      	it	hi
 800072e:	bd30      	pophi	{r4, r5, pc}
 8000730:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000734:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000738:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800073c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000740:	d002      	beq.n	8000748 <__adddf3+0x70>
 8000742:	4240      	negs	r0, r0
 8000744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000748:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000754:	d002      	beq.n	800075c <__adddf3+0x84>
 8000756:	4252      	negs	r2, r2
 8000758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075c:	ea94 0f05 	teq	r4, r5
 8000760:	f000 80a7 	beq.w	80008b2 <__adddf3+0x1da>
 8000764:	f1a4 0401 	sub.w	r4, r4, #1
 8000768:	f1d5 0e20 	rsbs	lr, r5, #32
 800076c:	db0d      	blt.n	800078a <__adddf3+0xb2>
 800076e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000772:	fa22 f205 	lsr.w	r2, r2, r5
 8000776:	1880      	adds	r0, r0, r2
 8000778:	f141 0100 	adc.w	r1, r1, #0
 800077c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000780:	1880      	adds	r0, r0, r2
 8000782:	fa43 f305 	asr.w	r3, r3, r5
 8000786:	4159      	adcs	r1, r3
 8000788:	e00e      	b.n	80007a8 <__adddf3+0xd0>
 800078a:	f1a5 0520 	sub.w	r5, r5, #32
 800078e:	f10e 0e20 	add.w	lr, lr, #32
 8000792:	2a01      	cmp	r2, #1
 8000794:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000798:	bf28      	it	cs
 800079a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800079e:	fa43 f305 	asr.w	r3, r3, r5
 80007a2:	18c0      	adds	r0, r0, r3
 80007a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80007a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ac:	d507      	bpl.n	80007be <__adddf3+0xe6>
 80007ae:	f04f 0e00 	mov.w	lr, #0
 80007b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80007b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80007ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80007be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80007c2:	d31b      	bcc.n	80007fc <__adddf3+0x124>
 80007c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80007c8:	d30c      	bcc.n	80007e4 <__adddf3+0x10c>
 80007ca:	0849      	lsrs	r1, r1, #1
 80007cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80007d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007d4:	f104 0401 	add.w	r4, r4, #1
 80007d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80007e0:	f080 809a 	bcs.w	8000918 <__adddf3+0x240>
 80007e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007e8:	bf08      	it	eq
 80007ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007ee:	f150 0000 	adcs.w	r0, r0, #0
 80007f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007f6:	ea41 0105 	orr.w	r1, r1, r5
 80007fa:	bd30      	pop	{r4, r5, pc}
 80007fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000800:	4140      	adcs	r0, r0
 8000802:	eb41 0101 	adc.w	r1, r1, r1
 8000806:	3c01      	subs	r4, #1
 8000808:	bf28      	it	cs
 800080a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800080e:	d2e9      	bcs.n	80007e4 <__adddf3+0x10c>
 8000810:	f091 0f00 	teq	r1, #0
 8000814:	bf04      	itt	eq
 8000816:	4601      	moveq	r1, r0
 8000818:	2000      	moveq	r0, #0
 800081a:	fab1 f381 	clz	r3, r1
 800081e:	bf08      	it	eq
 8000820:	3320      	addeq	r3, #32
 8000822:	f1a3 030b 	sub.w	r3, r3, #11
 8000826:	f1b3 0220 	subs.w	r2, r3, #32
 800082a:	da0c      	bge.n	8000846 <__adddf3+0x16e>
 800082c:	320c      	adds	r2, #12
 800082e:	dd08      	ble.n	8000842 <__adddf3+0x16a>
 8000830:	f102 0c14 	add.w	ip, r2, #20
 8000834:	f1c2 020c 	rsb	r2, r2, #12
 8000838:	fa01 f00c 	lsl.w	r0, r1, ip
 800083c:	fa21 f102 	lsr.w	r1, r1, r2
 8000840:	e00c      	b.n	800085c <__adddf3+0x184>
 8000842:	f102 0214 	add.w	r2, r2, #20
 8000846:	bfd8      	it	le
 8000848:	f1c2 0c20 	rsble	ip, r2, #32
 800084c:	fa01 f102 	lsl.w	r1, r1, r2
 8000850:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000854:	bfdc      	itt	le
 8000856:	ea41 010c 	orrle.w	r1, r1, ip
 800085a:	4090      	lslle	r0, r2
 800085c:	1ae4      	subs	r4, r4, r3
 800085e:	bfa2      	ittt	ge
 8000860:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000864:	4329      	orrge	r1, r5
 8000866:	bd30      	popge	{r4, r5, pc}
 8000868:	ea6f 0404 	mvn.w	r4, r4
 800086c:	3c1f      	subs	r4, #31
 800086e:	da1c      	bge.n	80008aa <__adddf3+0x1d2>
 8000870:	340c      	adds	r4, #12
 8000872:	dc0e      	bgt.n	8000892 <__adddf3+0x1ba>
 8000874:	f104 0414 	add.w	r4, r4, #20
 8000878:	f1c4 0220 	rsb	r2, r4, #32
 800087c:	fa20 f004 	lsr.w	r0, r0, r4
 8000880:	fa01 f302 	lsl.w	r3, r1, r2
 8000884:	ea40 0003 	orr.w	r0, r0, r3
 8000888:	fa21 f304 	lsr.w	r3, r1, r4
 800088c:	ea45 0103 	orr.w	r1, r5, r3
 8000890:	bd30      	pop	{r4, r5, pc}
 8000892:	f1c4 040c 	rsb	r4, r4, #12
 8000896:	f1c4 0220 	rsb	r2, r4, #32
 800089a:	fa20 f002 	lsr.w	r0, r0, r2
 800089e:	fa01 f304 	lsl.w	r3, r1, r4
 80008a2:	ea40 0003 	orr.w	r0, r0, r3
 80008a6:	4629      	mov	r1, r5
 80008a8:	bd30      	pop	{r4, r5, pc}
 80008aa:	fa21 f004 	lsr.w	r0, r1, r4
 80008ae:	4629      	mov	r1, r5
 80008b0:	bd30      	pop	{r4, r5, pc}
 80008b2:	f094 0f00 	teq	r4, #0
 80008b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80008ba:	bf06      	itte	eq
 80008bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80008c0:	3401      	addeq	r4, #1
 80008c2:	3d01      	subne	r5, #1
 80008c4:	e74e      	b.n	8000764 <__adddf3+0x8c>
 80008c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008ca:	bf18      	it	ne
 80008cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008d0:	d029      	beq.n	8000926 <__adddf3+0x24e>
 80008d2:	ea94 0f05 	teq	r4, r5
 80008d6:	bf08      	it	eq
 80008d8:	ea90 0f02 	teqeq	r0, r2
 80008dc:	d005      	beq.n	80008ea <__adddf3+0x212>
 80008de:	ea54 0c00 	orrs.w	ip, r4, r0
 80008e2:	bf04      	itt	eq
 80008e4:	4619      	moveq	r1, r3
 80008e6:	4610      	moveq	r0, r2
 80008e8:	bd30      	pop	{r4, r5, pc}
 80008ea:	ea91 0f03 	teq	r1, r3
 80008ee:	bf1e      	ittt	ne
 80008f0:	2100      	movne	r1, #0
 80008f2:	2000      	movne	r0, #0
 80008f4:	bd30      	popne	{r4, r5, pc}
 80008f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008fa:	d105      	bne.n	8000908 <__adddf3+0x230>
 80008fc:	0040      	lsls	r0, r0, #1
 80008fe:	4149      	adcs	r1, r1
 8000900:	bf28      	it	cs
 8000902:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000906:	bd30      	pop	{r4, r5, pc}
 8000908:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800090c:	bf3c      	itt	cc
 800090e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000912:	bd30      	popcc	{r4, r5, pc}
 8000914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000918:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800091c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	bd30      	pop	{r4, r5, pc}
 8000926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800092a:	bf1a      	itte	ne
 800092c:	4619      	movne	r1, r3
 800092e:	4610      	movne	r0, r2
 8000930:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000934:	bf1c      	itt	ne
 8000936:	460b      	movne	r3, r1
 8000938:	4602      	movne	r2, r0
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	bf06      	itte	eq
 8000940:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000944:	ea91 0f03 	teqeq	r1, r3
 8000948:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	bf00      	nop

08000950 <__aeabi_ui2d>:
 8000950:	f090 0f00 	teq	r0, #0
 8000954:	bf04      	itt	eq
 8000956:	2100      	moveq	r1, #0
 8000958:	4770      	bxeq	lr
 800095a:	b530      	push	{r4, r5, lr}
 800095c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000960:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000964:	f04f 0500 	mov.w	r5, #0
 8000968:	f04f 0100 	mov.w	r1, #0
 800096c:	e750      	b.n	8000810 <__adddf3+0x138>
 800096e:	bf00      	nop

08000970 <__aeabi_i2d>:
 8000970:	f090 0f00 	teq	r0, #0
 8000974:	bf04      	itt	eq
 8000976:	2100      	moveq	r1, #0
 8000978:	4770      	bxeq	lr
 800097a:	b530      	push	{r4, r5, lr}
 800097c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000980:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000984:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000988:	bf48      	it	mi
 800098a:	4240      	negmi	r0, r0
 800098c:	f04f 0100 	mov.w	r1, #0
 8000990:	e73e      	b.n	8000810 <__adddf3+0x138>
 8000992:	bf00      	nop

08000994 <__aeabi_f2d>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800099a:	ea4f 0131 	mov.w	r1, r1, rrx
 800099e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80009a2:	bf1f      	itttt	ne
 80009a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80009a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80009b0:	4770      	bxne	lr
 80009b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80009b6:	bf08      	it	eq
 80009b8:	4770      	bxeq	lr
 80009ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80009be:	bf04      	itt	eq
 80009c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80009c4:	4770      	bxeq	lr
 80009c6:	b530      	push	{r4, r5, lr}
 80009c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80009cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009d4:	e71c      	b.n	8000810 <__adddf3+0x138>
 80009d6:	bf00      	nop

080009d8 <__aeabi_ul2d>:
 80009d8:	ea50 0201 	orrs.w	r2, r0, r1
 80009dc:	bf08      	it	eq
 80009de:	4770      	bxeq	lr
 80009e0:	b530      	push	{r4, r5, lr}
 80009e2:	f04f 0500 	mov.w	r5, #0
 80009e6:	e00a      	b.n	80009fe <__aeabi_l2d+0x16>

080009e8 <__aeabi_l2d>:
 80009e8:	ea50 0201 	orrs.w	r2, r0, r1
 80009ec:	bf08      	it	eq
 80009ee:	4770      	bxeq	lr
 80009f0:	b530      	push	{r4, r5, lr}
 80009f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009f6:	d502      	bpl.n	80009fe <__aeabi_l2d+0x16>
 80009f8:	4240      	negs	r0, r0
 80009fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a02:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a0a:	f43f aed8 	beq.w	80007be <__adddf3+0xe6>
 8000a0e:	f04f 0203 	mov.w	r2, #3
 8000a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a16:	bf18      	it	ne
 8000a18:	3203      	addne	r2, #3
 8000a1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a1e:	bf18      	it	ne
 8000a20:	3203      	addne	r2, #3
 8000a22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a32:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a36:	ea40 000e 	orr.w	r0, r0, lr
 8000a3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a3e:	4414      	add	r4, r2
 8000a40:	e6bd      	b.n	80007be <__adddf3+0xe6>
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_uldivmod>:
 8000b34:	b953      	cbnz	r3, 8000b4c <__aeabi_uldivmod+0x18>
 8000b36:	b94a      	cbnz	r2, 8000b4c <__aeabi_uldivmod+0x18>
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	2800      	cmpeq	r0, #0
 8000b3e:	bf1c      	itt	ne
 8000b40:	f04f 31ff 	movne.w	r1, #4294967295
 8000b44:	f04f 30ff 	movne.w	r0, #4294967295
 8000b48:	f000 b80c 	b.w	8000b64 <__aeabi_idiv0>
 8000b4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b54:	f003 ff74 	bl	8004a40 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_idiv0>:
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr
	...

08000bb0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000bb0:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <notify1+0xc>)
 8000bb2:	68d3      	ldr	r3, [r2, #12]
 8000bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000bb8:	60d3      	str	r3, [r2, #12]
}
 8000bba:	4770      	bx	lr
 8000bbc:	40011000 	.word	0x40011000

08000bc0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000bc0:	4a02      	ldr	r2, [pc, #8]	; (8000bcc <notify2+0xc>)
 8000bc2:	68d3      	ldr	r3, [r2, #12]
 8000bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000bc8:	60d3      	str	r3, [r2, #12]
}
 8000bca:	4770      	bx	lr
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <chSysHalt>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8000bd2:	4903      	ldr	r1, [pc, #12]	; (8000be0 <chSysHalt+0x10>)
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <chSysHalt+0x14>)
  currcore->dbg.panic_msg = reason;
 8000bd6:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 8000bda:	2203      	movs	r2, #3
 8000bdc:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 8000bde:	e7fe      	b.n	8000bde <chSysHalt+0xe>
 8000be0:	200009f0 	.word	0x200009f0
 8000be4:	20000cd0 	.word	0x20000cd0
	...

08000bf0 <__idle_thread>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8000bf0:	e7fe      	b.n	8000bf0 <__idle_thread>
 8000bf2:	bf00      	nop
	...

08000c00 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <chTMStartMeasurementX+0x8>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000c04:	6083      	str	r3, [r0, #8]
}
 8000c06:	4770      	bx	lr
 8000c08:	e0001000 	.word	0xe0001000
 8000c0c:	00000000 	.word	0x00000000

08000c10 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <chTMStopMeasurementX+0x3c>)
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8000c14:	6881      	ldr	r1, [r0, #8]
 8000c16:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000c18:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000c1a:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c1c:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	6941      	ldr	r1, [r0, #20]
 8000c26:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000c28:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8000c2a:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c2c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000c30:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000c32:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000c34:	bf88      	it	hi
 8000c36:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000c38:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 8000c3a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 8000c3c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c40:	6141      	str	r1, [r0, #20]
}
 8000c42:	f85d 4b04 	ldr.w	r4, [sp], #4
    tmp->best = tmp->last;
 8000c46:	bf38      	it	cc
 8000c48:	6003      	strcc	r3, [r0, #0]
}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000cd0 	.word	0x20000cd0
 8000c50:	e0001000 	.word	0xe0001000
	...

08000c60 <_pal_lld_setgroupmode.constprop.0>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000c64:	f001 0503 	and.w	r5, r1, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000c68:	09cc      	lsrs	r4, r1, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000c6a:	46ae      	mov	lr, r5

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000c6c:	492d      	ldr	r1, [pc, #180]	; (8000d24 <_pal_lld_setgroupmode.constprop.0+0xc4>)
  uint32_t bit     = 0;
 8000c6e:	f04f 0c00 	mov.w	ip, #0
      m4 = 15 << ((bit & 7) * 4);
 8000c72:	f04f 080f 	mov.w	r8, #15
      m1 = 1 << bit;
 8000c76:	2701      	movs	r7, #1
      m2 = 3 << (bit * 2);
 8000c78:	2603      	movs	r6, #3
 8000c7a:	e013      	b.n	8000ca4 <_pal_lld_setgroupmode.constprop.0+0x44>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c7c:	680a      	ldr	r2, [r1, #0]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	ea43 030e 	orr.w	r3, r3, lr
        if (bit < 8)
 8000c84:	f1bc 0f07 	cmp.w	ip, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c88:	600b      	str	r3, [r1, #0]
        if (bit < 8)
 8000c8a:	d83c      	bhi.n	8000d06 <_pal_lld_setgroupmode.constprop.0+0xa6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000c8c:	6a0b      	ldr	r3, [r1, #32]
 8000c8e:	ea23 030a 	bic.w	r3, r3, sl
 8000c92:	ea43 0309 	orr.w	r3, r3, r9
 8000c96:	620b      	str	r3, [r1, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000c98:	0840      	lsrs	r0, r0, #1
 8000c9a:	d032      	beq.n	8000d02 <_pal_lld_setgroupmode.constprop.0+0xa2>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000c9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8000ca0:	f10c 0c01 	add.w	ip, ip, #1
    if ((mask & 1) != 0) {
 8000ca4:	07c3      	lsls	r3, r0, #31
 8000ca6:	d5f7      	bpl.n	8000c98 <_pal_lld_setgroupmode.constprop.0+0x38>
      altrmask = altr << ((bit & 7) * 4);
 8000ca8:	f00c 0307 	and.w	r3, ip, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	fa04 f903 	lsl.w	r9, r4, r3
      m4 = 15 << ((bit & 7) * 4);
 8000cb2:	fa08 fa03 	lsl.w	sl, r8, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000cb6:	684b      	ldr	r3, [r1, #4]
      m1 = 1 << bit;
 8000cb8:	fa07 f20c 	lsl.w	r2, r7, ip
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000cbc:	ea23 0302 	bic.w	r3, r3, r2
 8000cc0:	604b      	str	r3, [r1, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000cc2:	688a      	ldr	r2, [r1, #8]
      m2 = 3 << (bit * 2);
 8000cc4:	ea4f 034c 	mov.w	r3, ip, lsl #1
 8000cc8:	fa06 f303 	lsl.w	r3, r6, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000ccc:	ea22 0203 	bic.w	r2, r2, r3
 8000cd0:	608a      	str	r2, [r1, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000cd2:	68ca      	ldr	r2, [r1, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000cd4:	2d02      	cmp	r5, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000cd6:	ea22 0203 	bic.w	r2, r2, r3
 8000cda:	60ca      	str	r2, [r1, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000cdc:	ea6f 0303 	mvn.w	r3, r3
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000ce0:	d1cc      	bne.n	8000c7c <_pal_lld_setgroupmode.constprop.0+0x1c>
        if (bit < 8)
 8000ce2:	f1bc 0f07 	cmp.w	ip, #7
 8000ce6:	d815      	bhi.n	8000d14 <_pal_lld_setgroupmode.constprop.0+0xb4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000ce8:	6a0a      	ldr	r2, [r1, #32]
 8000cea:	ea22 020a 	bic.w	r2, r2, sl
 8000cee:	ea42 0209 	orr.w	r2, r2, r9
 8000cf2:	620a      	str	r2, [r1, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000cf4:	680a      	ldr	r2, [r1, #0]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	ea43 030e 	orr.w	r3, r3, lr
    if (!mask)
 8000cfc:	0840      	lsrs	r0, r0, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000cfe:	600b      	str	r3, [r1, #0]
    if (!mask)
 8000d00:	d1cc      	bne.n	8000c9c <_pal_lld_setgroupmode.constprop.0+0x3c>
  }
}
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000d06:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000d08:	ea23 030a 	bic.w	r3, r3, sl
 8000d0c:	ea43 0309 	orr.w	r3, r3, r9
 8000d10:	624b      	str	r3, [r1, #36]	; 0x24
 8000d12:	e7c1      	b.n	8000c98 <_pal_lld_setgroupmode.constprop.0+0x38>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000d14:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000d16:	ea22 020a 	bic.w	r2, r2, sl
 8000d1a:	ea42 0209 	orr.w	r2, r2, r9
 8000d1e:	624a      	str	r2, [r1, #36]	; 0x24
 8000d20:	e7e8      	b.n	8000cf4 <_pal_lld_setgroupmode.constprop.0+0x94>
 8000d22:	bf00      	nop
 8000d24:	40020000 	.word	0x40020000
	...

08000d30 <dac_lld_put_channel.constprop.0>:
 */
void dac_lld_put_channel(DACDriver *dacp,
                         dacchannel_t channel,
                         dacsample_t sample) {

  switch (dacp->config->datamode) {
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <dac_lld_put_channel.constprop.0+0x3c>)
 8000d32:	6913      	ldr	r3, [r2, #16]
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d003      	beq.n	8000d42 <dac_lld_put_channel.constprop.0+0x12>
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d008      	beq.n	8000d50 <dac_lld_put_channel.constprop.0+0x20>
 8000d3e:	b173      	cbz	r3, 8000d5e <dac_lld_put_channel.constprop.0+0x2e>
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
    break;
  }
}
 8000d40:	4770      	bx	lr
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 8000d42:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000d44:	e9d2 3200 	ldrd	r3, r2, [r2]
 8000d48:	330c      	adds	r3, #12
 8000d4a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d4e:	4770      	bx	lr
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8000d50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000d52:	e9d2 3200 	ldrd	r3, r2, [r2]
 8000d56:	3310      	adds	r3, #16
 8000d58:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
 8000d5c:	4770      	bx	lr
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8000d5e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000d60:	e9d2 3200 	ldrd	r3, r2, [r2]
 8000d64:	3308      	adds	r3, #8
 8000d66:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d6a:	4770      	bx	lr
 8000d6c:	2000083c 	.word	0x2000083c

08000d70 <sdObjectInit.constprop.0>:
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <sdObjectInit.constprop.0+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000d74:	b410      	push	{r4}
  sdp->vmt = &vmt;
 8000d76:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000d7a:	f100 040c 	add.w	r4, r0, #12
 8000d7e:	f100 0254 	add.w	r2, r0, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000d82:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_counter = 0;
 8000d84:	2100      	movs	r1, #0
 8000d86:	6141      	str	r1, [r0, #20]
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
  qp->prev = qp;
 8000d88:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_wrptr   = bp;
 8000d8c:	e9c0 2208 	strd	r2, r2, [r0, #32]
  oqp->q_counter = size;
 8000d90:	2410      	movs	r4, #16
  sdp->state = SD_STOP;
 8000d92:	f04f 0c01 	mov.w	ip, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000d96:	6043      	str	r3, [r0, #4]
  iqp->q_notify  = infy;
 8000d98:	6281      	str	r1, [r0, #40]	; 0x28
  iqp->q_top     = bp + size;
 8000d9a:	f100 0364 	add.w	r3, r0, #100	; 0x64
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000d9e:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_buffer  = bp;
 8000da2:	6182      	str	r2, [r0, #24]
  oqp->q_top     = bp + size;
 8000da4:	f100 0274 	add.w	r2, r0, #116	; 0x74
  oqp->q_counter = size;
 8000da8:	6384      	str	r4, [r0, #56]	; 0x38
  qp->next = qp;
 8000daa:	e9c0 010b 	strd	r0, r1, [r0, #44]	; 0x2c
  oqp->q_wrptr   = bp;
 8000dae:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
}
 8000db2:	f85d 4b04 	ldr.w	r4, [sp], #4
  sdp->state = SD_STOP;
 8000db6:	f880 c008 	strb.w	ip, [r0, #8]
  iqp->q_top     = bp + size;
 8000dba:	61c3      	str	r3, [r0, #28]
  qp->prev = qp;
 8000dbc:	6341      	str	r1, [r0, #52]	; 0x34
  oqp->q_buffer  = bp;
 8000dbe:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_top     = bp + size;
 8000dc0:	6402      	str	r2, [r0, #64]	; 0x40
  oqp->q_link    = link;
 8000dc2:	6500      	str	r0, [r0, #80]	; 0x50
}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	080050a0 	.word	0x080050a0
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <_ctl>:
  osalDbgCheck(sdp != NULL);
 8000dd0:	b120      	cbz	r0, 8000ddc <_ctl+0xc>
  switch (operation) {
 8000dd2:	2901      	cmp	r1, #1
 8000dd4:	d106      	bne.n	8000de4 <_ctl+0x14>
    osalDbgCheck(arg == NULL);
 8000dd6:	b90a      	cbnz	r2, 8000ddc <_ctl+0xc>
  return HAL_RET_SUCCESS;
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4770      	bx	lr
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8000ddc:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <_ctl+0x1c>)
 8000de0:	f7ff fef6 	bl	8000bd0 <chSysHalt>
    return HAL_RET_UNKNOWN_CTL;
 8000de4:	f06f 0013 	mvn.w	r0, #19
}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	08004eb8 	.word	0x08004eb8

08000df0 <vt_set_alarm>:
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;

  if (delay < currdelta) {
 8000df0:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 8000df4:	bf28      	it	cs
 8000df6:	f44f 417f 	movcs.w	r1, #65280	; 0xff00
 8000dfa:	2902      	cmp	r1, #2
 8000dfc:	bf38      	it	cc
 8000dfe:	2102      	movcc	r1, #2
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8000e00:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <vt_set_alarm+0x5c>)

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8000e04:	1843      	adds	r3, r0, r1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	6353      	str	r3, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000e0a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e0c:	b29b      	uxth	r3, r3
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000e0e:	1a18      	subs	r0, r3, r0
 8000e10:	b280      	uxth	r0, r0
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(now, newnow);
    if (likely(nowdelta < delay)) {
 8000e12:	4281      	cmp	r1, r0
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8000e14:	bf98      	it	ls
 8000e16:	2003      	movls	r0, #3
    if (likely(nowdelta < delay)) {
 8000e18:	d901      	bls.n	8000e1e <vt_set_alarm+0x2e>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8000e1a:	bd08      	pop	{r3, pc}
 8000e1c:	460b      	mov	r3, r1
  return systime + (systime_t)interval;
 8000e1e:	1819      	adds	r1, r3, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000e20:	b289      	uxth	r1, r1
 8000e22:	6351      	str	r1, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000e24:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000e26:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8000e28:	1acb      	subs	r3, r1, r3
 8000e2a:	b29b      	uxth	r3, r3
    if (likely(nowdelta < delay)) {
 8000e2c:	4283      	cmp	r3, r0
 8000e2e:	d205      	bcs.n	8000e3c <vt_set_alarm+0x4c>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <vt_set_alarm+0x60>)
 8000e32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000e3a:	bd08      	pop	{r3, pc}
    currdelta += (sysinterval_t)1;
 8000e3c:	3001      	adds	r0, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8000e3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000e42:	d1eb      	bne.n	8000e1c <vt_set_alarm+0x2c>
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <vt_set_alarm+0x64>)
 8000e46:	f7ff fec3 	bl	8000bd0 <chSysHalt>
 8000e4a:	bf00      	nop
 8000e4c:	40014800 	.word	0x40014800
 8000e50:	200009f0 	.word	0x200009f0
 8000e54:	08004e90 	.word	0x08004e90
	...

08000e60 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8000e60:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000e62:	2330      	movs	r3, #48	; 0x30
 8000e64:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <__sch_wakeup+0x94>)
 8000e6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	dd3c      	ble.n	8000eec <__sch_wakeup+0x8c>
 8000e72:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d138      	bne.n	8000eec <__sch_wakeup+0x8c>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8000e80:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8000e84:	2b0c      	cmp	r3, #12
 8000e86:	d810      	bhi.n	8000eaa <__sch_wakeup+0x4a>
 8000e88:	e8df f003 	tbb	[pc, r3]
 8000e8c:	260f0f2a 	.word	0x260f0f2a
 8000e90:	0b0f070b 	.word	0x0b0f070b
 8000e94:	0f0f0f0f 	.word	0x0f0f0f0f
 8000e98:	0b          	.byte	0x0b
 8000e99:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8000e9a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000e9c:	6883      	ldr	r3, [r0, #8]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	6083      	str	r3, [r0, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8000ea2:	e9d1 3000 	ldrd	r3, r0, [r1]
 8000ea6:	6003      	str	r3, [r0, #0]
  p->next->prev = p->prev;
 8000ea8:	6058      	str	r0, [r3, #4]
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8000eaa:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 8000eae:	2000      	movs	r0, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000eb0:	628c      	str	r4, [r1, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000eb2:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8000eb4:	688c      	ldr	r4, [r1, #8]
  tp->state = CH_STATE_READY;
 8000eb6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    pqp = pqp->next;
 8000eba:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000ebc:	6898      	ldr	r0, [r3, #8]
 8000ebe:	42a0      	cmp	r0, r4
 8000ec0:	d2fb      	bcs.n	8000eba <__sch_wakeup+0x5a>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8000ec2:	685c      	ldr	r4, [r3, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 8000eca:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8000ecc:	6059      	str	r1, [r3, #4]
 8000ece:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000ed2:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 8000ed6:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8000ed8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000eda:	2000      	movs	r0, #0
 8000edc:	6018      	str	r0, [r3, #0]
    break;
 8000ede:	e7e4      	b.n	8000eaa <__sch_wakeup+0x4a>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ee6:	f383 8811 	msr	BASEPRI, r3
}
 8000eea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#6");
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <__sch_wakeup+0x98>)
 8000eee:	f7ff fe6f 	bl	8000bd0 <chSysHalt>
 8000ef2:	bf00      	nop
 8000ef4:	200009f0 	.word	0x200009f0
 8000ef8:	08004d08 	.word	0x08004d08
 8000efc:	00000000 	.word	0x00000000

08000f00 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8000f00:	2300      	movs	r3, #0
  qp->prev = qp;
 8000f02:	e9c0 0000 	strd	r0, r0, [r0]
 8000f06:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @api
 */
void chDbgCheckClassI(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <chEvtBroadcastFlagsI+0x98>)
 8000f14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	db3e      	blt.n	8000f9a <chEvtBroadcastFlagsI+0x8a>
 8000f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	dd3a      	ble.n	8000f9a <chEvtBroadcastFlagsI+0x8a>
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000f24:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d019      	beq.n	8000f5e <chEvtBroadcastFlagsI+0x4e>
    tp->u.rdymsg = MSG_OK;
 8000f2a:	2500      	movs	r5, #0
  /*lint -restore*/
    elp->flags |= flags;
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000f32:	b111      	cbz	r1, 8000f3a <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000f34:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000f36:	4211      	tst	r1, r2
 8000f38:	d00e      	beq.n	8000f58 <chEvtBroadcastFlagsI+0x48>
      chEvtSignalI(elp->listener, elp->events);
 8000f3a:	685a      	ldr	r2, [r3, #4]
  chDbgCheck(tp != NULL);
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d02f      	beq.n	8000fa0 <chEvtBroadcastFlagsI+0x90>
  tp->epending |= events;
 8000f40:	689c      	ldr	r4, [r3, #8]
 8000f42:	6b96      	ldr	r6, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f44:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 8000f48:	4334      	orrs	r4, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f4a:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8000f4e:	6394      	str	r4, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f50:	d01c      	beq.n	8000f8c <chEvtBroadcastFlagsI+0x7c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000f52:	f1bc 0f0b 	cmp.w	ip, #11
 8000f56:	d003      	beq.n	8000f60 <chEvtBroadcastFlagsI+0x50>
    }
    elp = elp->next;
 8000f58:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000f5a:	4298      	cmp	r0, r3
 8000f5c:	d1e6      	bne.n	8000f2c <chEvtBroadcastFlagsI+0x1c>
  }
}
 8000f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000f60:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8000f62:	ea36 0404 	bics.w	r4, r6, r4
 8000f66:	d1f7      	bne.n	8000f58 <chEvtBroadcastFlagsI+0x48>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000f68:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000f6a:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8000f6c:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8000f6e:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 8000f72:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000f74:	68a6      	ldr	r6, [r4, #8]
 8000f76:	42be      	cmp	r6, r7
 8000f78:	d2fb      	bcs.n	8000f72 <chEvtBroadcastFlagsI+0x62>
    elp = elp->next;
 8000f7a:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8000f7c:	6866      	ldr	r6, [r4, #4]
  p->next       = pqp;
 8000f7e:	6014      	str	r4, [r2, #0]
  while (elp != (event_listener_t *)esp) {
 8000f80:	4298      	cmp	r0, r3
  p->prev       = pqp->prev;
 8000f82:	6056      	str	r6, [r2, #4]
  p->prev->next = p;
 8000f84:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 8000f86:	6062      	str	r2, [r4, #4]
 8000f88:	d1d0      	bne.n	8000f2c <chEvtBroadcastFlagsI+0x1c>
 8000f8a:	e7e8      	b.n	8000f5e <chEvtBroadcastFlagsI+0x4e>
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f8c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8000f8e:	4234      	tst	r4, r6
 8000f90:	d1ea      	bne.n	8000f68 <chEvtBroadcastFlagsI+0x58>
    elp = elp->next;
 8000f92:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000f94:	4298      	cmp	r0, r3
 8000f96:	d1c9      	bne.n	8000f2c <chEvtBroadcastFlagsI+0x1c>
 8000f98:	e7e1      	b.n	8000f5e <chEvtBroadcastFlagsI+0x4e>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <chEvtBroadcastFlagsI+0x9c>)
 8000f9c:	f7ff fe18 	bl	8000bd0 <chSysHalt>
  chDbgCheck(tp != NULL);
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <chEvtBroadcastFlagsI+0xa0>)
 8000fa2:	f7ff fe15 	bl	8000bd0 <chSysHalt>
 8000fa6:	bf00      	nop
 8000fa8:	200009f0 	.word	0x200009f0
 8000fac:	08004d10 	.word	0x08004d10
 8000fb0:	08004ea8 	.word	0x08004ea8
	...

08000fc0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <chCoreAllocFromTop+0x64>)
 8000fca:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8000fce:	ea54 0c05 	orrs.w	ip, r4, r5
 8000fd2:	d121      	bne.n	8001018 <chCoreAllocFromTop+0x58>
  oip->dbg.lock_cnt = (cnt_t)1;
 8000fd4:	2401      	movs	r4, #1
 8000fd6:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000fda:	b301      	cbz	r1, 800101e <chCoreAllocFromTop+0x5e>
 8000fdc:	f101 3cff 	add.w	ip, r1, #4294967295
 8000fe0:	ea1c 0c01 	ands.w	ip, ip, r1
 8000fe4:	d11b      	bne.n	800101e <chCoreAllocFromTop+0x5e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000fe6:	4c10      	ldr	r4, [pc, #64]	; (8001028 <chCoreAllocFromTop+0x68>)
 8000fe8:	6865      	ldr	r5, [r4, #4]
 8000fea:	4249      	negs	r1, r1
 8000fec:	1a28      	subs	r0, r5, r0
 8000fee:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000ff0:	6821      	ldr	r1, [r4, #0]
  prev = p - offset;
 8000ff2:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000ff4:	428a      	cmp	r2, r1
 8000ff6:	d308      	bcc.n	800100a <chCoreAllocFromTop+0x4a>
 8000ff8:	4295      	cmp	r5, r2
 8000ffa:	d306      	bcc.n	800100a <chCoreAllocFromTop+0x4a>
  ch_memcore.topmem = prev;
 8000ffc:	6062      	str	r2, [r4, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001004:	f382 8811 	msr	BASEPRI, r2
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8001008:	bd38      	pop	{r3, r4, r5, pc}
 800100a:	2200      	movs	r2, #0
    return NULL;
 800100c:	4660      	mov	r0, ip
 800100e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001012:	f382 8811 	msr	BASEPRI, r2
}
 8001016:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <chCoreAllocFromTop+0x6c>)
 800101a:	f7ff fdd9 	bl	8000bd0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <chCoreAllocFromTop+0x70>)
 8001020:	f7ff fdd6 	bl	8000bd0 <chSysHalt>
 8001024:	200009f0 	.word	0x200009f0
 8001028:	20000cc8 	.word	0x20000cc8
 800102c:	08004d18 	.word	0x08004d18
 8001030:	08004e60 	.word	0x08004e60
	...

08001040 <chCoreAllocAlignedI>:
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <chCoreAllocAlignedI+0x44>)
 8001042:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001046:	2a00      	cmp	r2, #0
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001048:	b510      	push	{r4, lr}
 800104a:	db15      	blt.n	8001078 <chCoreAllocAlignedI+0x38>
 800104c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001050:	2b00      	cmp	r3, #0
 8001052:	dd11      	ble.n	8001078 <chCoreAllocAlignedI+0x38>
 8001054:	b199      	cbz	r1, 800107e <chCoreAllocAlignedI+0x3e>
 8001056:	1e4b      	subs	r3, r1, #1
 8001058:	400b      	ands	r3, r1
 800105a:	d110      	bne.n	800107e <chCoreAllocAlignedI+0x3e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <chCoreAllocAlignedI+0x48>)
 800105e:	6854      	ldr	r4, [r2, #4]
 8001060:	4249      	negs	r1, r1
 8001062:	1a20      	subs	r0, r4, r0
 8001064:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001066:	6811      	ldr	r1, [r2, #0]
 8001068:	4288      	cmp	r0, r1
 800106a:	d303      	bcc.n	8001074 <chCoreAllocAlignedI+0x34>
 800106c:	4284      	cmp	r4, r0
 800106e:	d301      	bcc.n	8001074 <chCoreAllocAlignedI+0x34>
  ch_memcore.topmem = prev;
 8001070:	6050      	str	r0, [r2, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001072:	bd10      	pop	{r4, pc}
    return NULL;
 8001074:	4618      	mov	r0, r3
 8001076:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <chCoreAllocAlignedI+0x4c>)
 800107a:	f7ff fda9 	bl	8000bd0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <chCoreAllocAlignedI+0x50>)
 8001080:	f7ff fda6 	bl	8000bd0 <chSysHalt>
 8001084:	200009f0 	.word	0x200009f0
 8001088:	20000cc8 	.word	0x20000cc8
 800108c:	08004d10 	.word	0x08004d10
 8001090:	08004e60 	.word	0x08004e60
	...

080010a0 <vt_insert_first.constprop.0>:

/**
 * @brief   Inserts a timer as first element in a delta list.
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
 80010a0:	b538      	push	{r3, r4, r5, lr}
                            sysinterval_t delay) {
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 80010a2:	4c1e      	ldr	r4, [pc, #120]	; (800111c <vt_insert_first.constprop.0+0x7c>)
 80010a4:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
 80010a8:	83a1      	strh	r1, [r4, #28]
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {

  dlp->delta      = delta;
  dlp->prev       = dlhp;
 80010aa:	f104 0310 	add.w	r3, r4, #16
  dlp->delta      = delta;
 80010ae:	6082      	str	r2, [r0, #8]
 80010b0:	bf28      	it	cs
 80010b2:	f44f 427f 	movcs.w	r2, #65280	; 0xff00
  dlp->prev       = dlhp;
 80010b6:	6043      	str	r3, [r0, #4]
 80010b8:	2a02      	cmp	r2, #2
  dlp->next       = dlp->prev->next;
 80010ba:	6923      	ldr	r3, [r4, #16]
 80010bc:	6003      	str	r3, [r0, #0]
 80010be:	bf38      	it	cc
 80010c0:	2202      	movcc	r2, #2
  dlp->next->prev = dlp;
 80010c2:	6058      	str	r0, [r3, #4]
  return systime + (systime_t)interval;
 80010c4:	188d      	adds	r5, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <vt_insert_first.constprop.0+0x80>)
  dlhp->next      = dlp;
 80010c8:	6120      	str	r0, [r4, #16]
 80010ca:	b2ad      	uxth	r5, r5
  STM32_ST_TIM->SR     = 0;
 80010cc:	2000      	movs	r0, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80010ce:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80010d0:	6118      	str	r0, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80010d2:	2002      	movs	r0, #2
 80010d4:	60d8      	str	r0, [r3, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 80010d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010d8:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 80010da:	eba0 0c01 	sub.w	ip, r0, r1
 80010de:	fa1f fc8c 	uxth.w	ip, ip
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 80010e2:	4594      	cmp	ip, r2
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 80010e4:	bf28      	it	cs
 80010e6:	2503      	movcs	r5, #3
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 80010e8:	d206      	bcs.n	80010f8 <vt_insert_first.constprop.0+0x58>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
    currdelta += (sysinterval_t)1;
 80010ec:	3501      	adds	r5, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80010ee:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80010f2:	4601      	mov	r1, r0
 80010f4:	d00e      	beq.n	8001114 <vt_insert_first.constprop.0+0x74>
 80010f6:	4610      	mov	r0, r2
  return systime + (systime_t)interval;
 80010f8:	4429      	add	r1, r5
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80010fa:	b289      	uxth	r1, r1
 80010fc:	6359      	str	r1, [r3, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80010fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001100:	b292      	uxth	r2, r2
  return (sysinterval_t)((systime_t)(end - start));
 8001102:	1a11      	subs	r1, r2, r0
 8001104:	b289      	uxth	r1, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8001106:	42a9      	cmp	r1, r5
 8001108:	d2f0      	bcs.n	80010ec <vt_insert_first.constprop.0+0x4c>
 800110a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001112:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <vt_insert_first.constprop.0+0x84>)
 8001116:	f7ff fd5b 	bl	8000bd0 <chSysHalt>
 800111a:	bf00      	nop
 800111c:	200009f0 	.word	0x200009f0
 8001120:	40014800 	.word	0x40014800
 8001124:	08004e90 	.word	0x08004e90
	...

08001130 <chSchReadyI.isra.0>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001130:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <chSchReadyI.isra.0+0x40>)
 8001134:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001138:	2a00      	cmp	r2, #0
 800113a:	db13      	blt.n	8001164 <chSchReadyI.isra.0+0x34>
 800113c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001140:	2b00      	cmp	r3, #0
 8001142:	dd0f      	ble.n	8001164 <chSchReadyI.isra.0+0x34>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8001144:	b188      	cbz	r0, 800116a <chSchReadyI.isra.0+0x3a>
  tp->state = CH_STATE_READY;
 8001146:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001148:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800114a:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 800114c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    pqp = pqp->next;
 8001150:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	428a      	cmp	r2, r1
 8001156:	d2fb      	bcs.n	8001150 <chSchReadyI.isra.0+0x20>
  p->prev       = pqp->prev;
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800115e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001160:	6058      	str	r0, [r3, #4]
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
}
 8001162:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <chSchReadyI.isra.0+0x44>)
 8001166:	f7ff fd33 	bl	8000bd0 <chSysHalt>
  chDbgCheck(tp != NULL);
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <chSchReadyI.isra.0+0x48>)
 800116c:	f7ff fd30 	bl	8000bd0 <chSysHalt>
 8001170:	200009f0 	.word	0x200009f0
 8001174:	08004d10 	.word	0x08004d10
 8001178:	08004e48 	.word	0x08004e48
 800117c:	00000000 	.word	0x00000000

08001180 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8001180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8001184:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001186:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 800118a:	f8d6 8000 	ldr.w	r8, [r6]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800118e:	f418 7f80 	tst.w	r8, #256	; 0x100
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8001192:	b083      	sub	sp, #12
 8001194:	4604      	mov	r4, r0
  if (sr & USART_SR_LBD) {
 8001196:	f040 8096 	bne.w	80012c6 <sd_lld_serve_interrupt+0x146>
 800119a:	4f9f      	ldr	r7, [pc, #636]	; (8001418 <sd_lld_serve_interrupt+0x298>)
 800119c:	2330      	movs	r3, #48	; 0x30
 800119e:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80011a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f340 80b0 	ble.w	800130c <sd_lld_serve_interrupt+0x18c>
 80011ac:	f8d7 908c 	ldr.w	r9, [r7, #140]	; 0x8c
 80011b0:	f1b9 0f00 	cmp.w	r9, #0
 80011b4:	f040 80aa 	bne.w	800130c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80011b8:	2301      	movs	r3, #1
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80011ba:	f018 0f2f 	tst.w	r8, #47	; 0x2f
 80011be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint16_t sr = u->SR;
 80011c2:	fa1f f588 	uxth.w	r5, r8
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80011c6:	d019      	beq.n	80011fc <sd_lld_serve_interrupt+0x7c>
  chnAddFlagsI(sdp, sts);
 80011c8:	f104 0804 	add.w	r8, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80011cc:	f104 0b0c 	add.w	fp, r4, #12
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80011d0:	0729      	lsls	r1, r5, #28
 80011d2:	d127      	bne.n	8001224 <sd_lld_serve_interrupt+0xa4>
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 80011d4:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80011d6:	6872      	ldr	r2, [r6, #4]
 80011d8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 80011dc:	d439      	bmi.n	8001252 <sd_lld_serve_interrupt+0xd2>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80011de:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80011e0:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80011e4:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80011e6:	d1f3      	bne.n	80011d0 <sd_lld_serve_interrupt+0x50>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80011e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f340 80ad 	ble.w	800134c <sd_lld_serve_interrupt+0x1cc>
 80011f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f340 80a8 	ble.w	800134c <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001202:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001206:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800120a:	d002      	beq.n	8001212 <sd_lld_serve_interrupt+0x92>
 800120c:	062a      	lsls	r2, r5, #24
 800120e:	f100 80a0 	bmi.w	8001352 <sd_lld_serve_interrupt+0x1d2>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8001212:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001216:	d002      	beq.n	800121e <sd_lld_serve_interrupt+0x9e>
 8001218:	066b      	lsls	r3, r5, #25
 800121a:	f100 80d5 	bmi.w	80013c8 <sd_lld_serve_interrupt+0x248>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
    }
    osalSysUnlockFromISR();
  }
}
 800121e:	b003      	add	sp, #12
 8001220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sr & USART_SR_ORE)
 8001224:	f3c5 01c0 	ubfx	r1, r5, #3, #1
 8001228:	0209      	lsls	r1, r1, #8
  if (sr & USART_SR_PE)
 800122a:	07ea      	lsls	r2, r5, #31
    sts |= SD_PARITY_ERROR;
 800122c:	bf48      	it	mi
 800122e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001232:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 8001234:	bf48      	it	mi
 8001236:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800123a:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 800123c:	bf48      	it	mi
 800123e:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001242:	4640      	mov	r0, r8
 8001244:	f7ff fe64 	bl	8000f10 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001248:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800124a:	6872      	ldr	r2, [r6, #4]
 800124c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 8001250:	d5c5      	bpl.n	80011de <sd_lld_serve_interrupt+0x5e>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001252:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001256:	2900      	cmp	r1, #0
 8001258:	db32      	blt.n	80012c0 <sd_lld_serve_interrupt+0x140>
 800125a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800125e:	2900      	cmp	r1, #0
 8001260:	dd2e      	ble.n	80012c0 <sd_lld_serve_interrupt+0x140>
  if (iqIsEmptyI(&sdp->iqueue))
 8001262:	6961      	ldr	r1, [r4, #20]
 8001264:	b1e1      	cbz	r1, 80012a0 <sd_lld_serve_interrupt+0x120>
  if (!iqIsFullI(iqp)) {
 8001266:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800126a:	4281      	cmp	r1, r0
 800126c:	d051      	beq.n	8001312 <sd_lld_serve_interrupt+0x192>
    b = (uint8_t)u->DR & sdp->rxmask;
 800126e:	4013      	ands	r3, r2
    iqp->q_counter++;
 8001270:	6962      	ldr	r2, [r4, #20]
 8001272:	3201      	adds	r2, #1
 8001274:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8001276:	1c4a      	adds	r2, r1, #1
 8001278:	6222      	str	r2, [r4, #32]
 800127a:	700b      	strb	r3, [r1, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800127c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	d301      	bcc.n	8001288 <sd_lld_serve_interrupt+0x108>
      iqp->q_wrptr = iqp->q_buffer;
 8001284:	69a3      	ldr	r3, [r4, #24]
 8001286:	6223      	str	r3, [r4, #32]
  return (bool)(qp->next != qp);
 8001288:	68e0      	ldr	r0, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 800128a:	4583      	cmp	fp, r0
 800128c:	d0a7      	beq.n	80011de <sd_lld_serve_interrupt+0x5e>
  qp->next       = p->next;
 800128e:	6803      	ldr	r3, [r0, #0]
 8001290:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 8001292:	f8c3 b004 	str.w	fp, [r3, #4]

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001296:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 800129a:	f7ff ff49 	bl	8001130 <chSchReadyI.isra.0>
 800129e:	e79e      	b.n	80011de <sd_lld_serve_interrupt+0x5e>
 80012a0:	2104      	movs	r1, #4
 80012a2:	4640      	mov	r0, r8
 80012a4:	e9cd 2300 	strd	r2, r3, [sp]
 80012a8:	f7ff fe32 	bl	8000f10 <chEvtBroadcastFlagsI>
 80012ac:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80012b0:	2900      	cmp	r1, #0
 80012b2:	db05      	blt.n	80012c0 <sd_lld_serve_interrupt+0x140>
 80012b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80012b8:	2900      	cmp	r1, #0
 80012ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80012be:	dcd2      	bgt.n	8001266 <sd_lld_serve_interrupt+0xe6>
    chSysHalt("SV#10");
 80012c0:	4856      	ldr	r0, [pc, #344]	; (800141c <sd_lld_serve_interrupt+0x29c>)
 80012c2:	f7ff fc85 	bl	8000bd0 <chSysHalt>
 80012c6:	2330      	movs	r3, #48	; 0x30
 80012c8:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80012cc:	4f52      	ldr	r7, [pc, #328]	; (8001418 <sd_lld_serve_interrupt+0x298>)
 80012ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dd1a      	ble.n	800130c <sd_lld_serve_interrupt+0x18c>
 80012d6:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 80012da:	b9bd      	cbnz	r5, 800130c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80012dc:	2301      	movs	r3, #1
 80012de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e2:	3004      	adds	r0, #4
 80012e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012e8:	f7ff fe12 	bl	8000f10 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80012ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    u->SR = ~USART_SR_LBD;
 80012f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	6032      	str	r2, [r6, #0]
 80012f8:	dd28      	ble.n	800134c <sd_lld_serve_interrupt+0x1cc>
 80012fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dd24      	ble.n	800134c <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001302:	f8c7 508c 	str.w	r5, [r7, #140]	; 0x8c
 8001306:	f385 8811 	msr	BASEPRI, r5
}
 800130a:	e747      	b.n	800119c <sd_lld_serve_interrupt+0x1c>
    chSysHalt("SV#6");
 800130c:	4844      	ldr	r0, [pc, #272]	; (8001420 <sd_lld_serve_interrupt+0x2a0>)
 800130e:	f7ff fc5f 	bl	8000bd0 <chSysHalt>
  if (!iqIsFullI(iqp)) {
 8001312:	6960      	ldr	r0, [r4, #20]
 8001314:	2800      	cmp	r0, #0
 8001316:	d0aa      	beq.n	800126e <sd_lld_serve_interrupt+0xee>
  chEvtBroadcastFlagsI(esp, flags);
 8001318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131c:	4640      	mov	r0, r8
 800131e:	f7ff fdf7 	bl	8000f10 <chEvtBroadcastFlagsI>
}
 8001322:	e75c      	b.n	80011de <sd_lld_serve_interrupt+0x5e>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001326:	2b00      	cmp	r3, #0
 8001328:	d060      	beq.n	80013ec <sd_lld_serve_interrupt+0x26c>
  chEvtBroadcastFlagsI(esp, flags);
 800132a:	2110      	movs	r1, #16
 800132c:	1d20      	adds	r0, r4, #4
 800132e:	f7ff fdef 	bl	8000f10 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001332:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001336:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800133a:	ea0a 0303 	and.w	r3, sl, r3
 800133e:	2a00      	cmp	r2, #0
 8001340:	60f3      	str	r3, [r6, #12]
 8001342:	dd03      	ble.n	800134c <sd_lld_serve_interrupt+0x1cc>
 8001344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001348:	2b00      	cmp	r3, #0
 800134a:	dc4f      	bgt.n	80013ec <sd_lld_serve_interrupt+0x26c>
    chSysHalt("SV#7");
 800134c:	4835      	ldr	r0, [pc, #212]	; (8001424 <sd_lld_serve_interrupt+0x2a4>)
 800134e:	f7ff fc3f 	bl	8000bd0 <chSysHalt>
 8001352:	2330      	movs	r3, #48	; 0x30
 8001354:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001358:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800135c:	2b00      	cmp	r3, #0
 800135e:	ddd5      	ble.n	800130c <sd_lld_serve_interrupt+0x18c>
 8001360:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001364:	2a00      	cmp	r2, #0
 8001366:	d1d1      	bne.n	800130c <sd_lld_serve_interrupt+0x18c>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001368:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
  oip->dbg.lock_cnt = (cnt_t)1;
 800136c:	2001      	movs	r0, #1
 800136e:	4291      	cmp	r1, r2
 8001370:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    b = oqGetI(&sdp->oqueue);
 8001374:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001378:	d03e      	beq.n	80013f8 <sd_lld_serve_interrupt+0x278>
    uint8_t b;

    oqp->q_counter++;
 800137a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800137c:	3101      	adds	r1, #1
 800137e:	63a1      	str	r1, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8001380:	1c51      	adds	r1, r2, #1
 8001382:	64a1      	str	r1, [r4, #72]	; 0x48
 8001384:	f892 8000 	ldrb.w	r8, [r2]
    if (oqp->q_rdptr >= oqp->q_top) {
 8001388:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800138a:	4291      	cmp	r1, r2
 800138c:	d301      	bcc.n	8001392 <sd_lld_serve_interrupt+0x212>
      oqp->q_rdptr = oqp->q_buffer;
 800138e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001390:	64a2      	str	r2, [r4, #72]	; 0x48
  return (bool)(qp->next != qp);
 8001392:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001394:	4584      	cmp	ip, r0
 8001396:	d009      	beq.n	80013ac <sd_lld_serve_interrupt+0x22c>
  qp->next       = p->next;
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 800139c:	f8c3 c004 	str.w	ip, [r3, #4]
  tp->u.rdymsg = msg;
 80013a0:	2300      	movs	r3, #0
 80013a2:	6283      	str	r3, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 80013a4:	f7ff fec4 	bl	8001130 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80013a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
      u->DR = b;
 80013ac:	f8c6 8004 	str.w	r8, [r6, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	ddcb      	ble.n	800134c <sd_lld_serve_interrupt+0x1cc>
 80013b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	ddc7      	ble.n	800134c <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80013c2:	f383 8811 	msr	BASEPRI, r3
}
 80013c6:	e724      	b.n	8001212 <sd_lld_serve_interrupt+0x92>
 80013c8:	2330      	movs	r3, #48	; 0x30
 80013ca:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80013ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dd9a      	ble.n	800130c <sd_lld_serve_interrupt+0x18c>
 80013d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d196      	bne.n	800130c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80013de:	2301      	movs	r3, #1
 80013e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (oqIsEmptyI(&sdp->oqueue)) {
 80013e4:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d09b      	beq.n	8001324 <sd_lld_serve_interrupt+0x1a4>
  oip->dbg.lock_cnt = (cnt_t)0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80013f2:	f383 8811 	msr	BASEPRI, r3
}
 80013f6:	e712      	b.n	800121e <sd_lld_serve_interrupt+0x9e>
  if (!oqIsEmptyI(oqp)) {
 80013f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80013fa:	2900      	cmp	r1, #0
 80013fc:	d0bd      	beq.n	800137a <sd_lld_serve_interrupt+0x1fa>
  chEvtBroadcastFlagsI(esp, flags);
 80013fe:	2108      	movs	r1, #8
 8001400:	1d20      	adds	r0, r4, #4
 8001402:	f7ff fd85 	bl	8000f10 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8001406:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800140a:	ea0a 0303 	and.w	r3, sl, r3
 800140e:	60f3      	str	r3, [r6, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001414:	e7cc      	b.n	80013b0 <sd_lld_serve_interrupt+0x230>
 8001416:	bf00      	nop
 8001418:	200009f0 	.word	0x200009f0
 800141c:	08004d10 	.word	0x08004d10
 8001420:	08004d08 	.word	0x08004d08
 8001424:	08004d20 	.word	0x08004d20
	...

08001430 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001430:	b508      	push	{r3, lr}
 * @api
 */
void chDbgCheckClassS(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <chSchGoSleepS+0x4c>)
 8001434:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001438:	b9ea      	cbnz	r2, 8001476 <chSchGoSleepS+0x46>
 800143a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800143e:	2a00      	cmp	r2, #0
 8001440:	dd19      	ble.n	8001476 <chSchGoSleepS+0x46>
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 8001442:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001444:	681a      	ldr	r2, [r3, #0]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8001446:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800144a:	6810      	ldr	r0, [r2, #0]
 800144c:	6018      	str	r0, [r3, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 800144e:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8001452:	6043      	str	r3, [r0, #4]
 8001454:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8001458:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800145a:	f3ef 8309 	mrs	r3, PSP
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 800145e:	6a08      	ldr	r0, [r1, #32]
 8001460:	3b64      	subs	r3, #100	; 0x64
 8001462:	4298      	cmp	r0, r3
 8001464:	d804      	bhi.n	8001470 <chSchGoSleepS+0x40>
}
 8001466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chSysSwitch(ntp, otp);
 800146a:	4610      	mov	r0, r2
 800146c:	f7fe bf4a 	b.w	8000304 <__port_switch>
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <chSchGoSleepS+0x50>)
 8001472:	f7ff fbad 	bl	8000bd0 <chSysHalt>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <chSchGoSleepS+0x54>)
 8001478:	f7ff fbaa 	bl	8000bd0 <chSysHalt>
 800147c:	200009f0 	.word	0x200009f0
 8001480:	08004d30 	.word	0x08004d30
 8001484:	08004d28 	.word	0x08004d28
	...

08001490 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001494:	4d45      	ldr	r5, [pc, #276]	; (80015ac <chSchGoSleepTimeoutS+0x11c>)
 8001496:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800149a:	b088      	sub	sp, #32
 800149c:	2b00      	cmp	r3, #0
 800149e:	d15e      	bne.n	800155e <chSchGoSleepTimeoutS+0xce>
 80014a0:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	dd5a      	ble.n	800155e <chSchGoSleepTimeoutS+0xce>
  thread_t *tp = __instance_get_currthread(currcore);

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 80014a8:	1c4c      	adds	r4, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 80014aa:	68ef      	ldr	r7, [r5, #12]
  if (TIME_INFINITE != timeout) {
 80014ac:	460a      	mov	r2, r1
 80014ae:	d04d      	beq.n	800154c <chSchGoSleepTimeoutS+0xbc>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80014b0:	2900      	cmp	r1, #0
 80014b2:	d051      	beq.n	8001558 <chSchGoSleepTimeoutS+0xc8>

  /* Timer initialization.*/
  vtp->par     = par;
 80014b4:	e9cd 7306 	strd	r7, r3, [sp, #24]
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <chSchGoSleepTimeoutS+0x120>)
  return (bool)(dlhp == dlhp->next);
 80014ba:	46a8      	mov	r8, r5
 80014bc:	4606      	mov	r6, r0
 80014be:	6a58      	ldr	r0, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 80014c0:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <chSchGoSleepTimeoutS+0x124>)
 80014c2:	9305      	str	r3, [sp, #20]
 80014c4:	f858 3f10 	ldr.w	r3, [r8, #16]!
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80014c8:	4543      	cmp	r3, r8
 80014ca:	b280      	uxth	r0, r0
 80014cc:	d064      	beq.n	8001598 <chSchGoSleepTimeoutS+0x108>
  return (sysinterval_t)((systime_t)(end - start));
 80014ce:	8bac      	ldrh	r4, [r5, #28]
    if (delta < vtlp->dlist.next->delta) {
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	1b04      	subs	r4, r0, r4
 80014d4:	b2a4      	uxth	r4, r4
    if (delta < nowdelta) {
 80014d6:	190c      	adds	r4, r1, r4
 80014d8:	bf28      	it	cs
 80014da:	460c      	movcs	r4, r1
    if (delta < vtlp->dlist.next->delta) {
 80014dc:	42a2      	cmp	r2, r4
 80014de:	d908      	bls.n	80014f2 <chSchGoSleepTimeoutS+0x62>
 80014e0:	9301      	str	r3, [sp, #4]
      vt_set_alarm(now, delay);
 80014e2:	f7ff fc85 	bl	8000df0 <vt_set_alarm>
 80014e6:	9b01      	ldr	r3, [sp, #4]
 80014e8:	689a      	ldr	r2, [r3, #8]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
 80014ea:	e002      	b.n	80014f2 <chSchGoSleepTimeoutS+0x62>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 80014ec:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 80014ee:	1aa4      	subs	r4, r4, r2
  while (likely(dlp->delta < delta)) {
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	42a2      	cmp	r2, r4
 80014f4:	d3fa      	bcc.n	80014ec <chSchGoSleepTimeoutS+0x5c>
  dlp->delta      = delta;
 80014f6:	9404      	str	r4, [sp, #16]

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 80014f8:	689a      	ldr	r2, [r3, #8]
  dlp->prev       = dlp->next->prev;
 80014fa:	6859      	ldr	r1, [r3, #4]
  dlp->next       = dlhp;
 80014fc:	9302      	str	r3, [sp, #8]
  dlp->delta -= delta;
 80014fe:	1b12      	subs	r2, r2, r4
  dlp->prev->next = dlp;
 8001500:	ac02      	add	r4, sp, #8
  dlp->prev       = dlp->next->prev;
 8001502:	9103      	str	r1, [sp, #12]
  dlp->prev->next = dlp;
 8001504:	600c      	str	r4, [r1, #0]
  dlhp->prev      = dlp;
 8001506:	e9c3 4201 	strd	r4, r2, [r3, #4]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	61ab      	str	r3, [r5, #24]
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
 8001510:	4630      	mov	r0, r6
 8001512:	f7ff ff8d 	bl	8001430 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001516:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800151a:	2b00      	cmp	r3, #0
 800151c:	db22      	blt.n	8001564 <chSchGoSleepTimeoutS+0xd4>
 800151e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001522:	2b00      	cmp	r3, #0
 8001524:	dd1e      	ble.n	8001564 <chSchGoSleepTimeoutS+0xd4>
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8001526:	9b02      	ldr	r3, [sp, #8]
    if (chVTIsArmedI(&vt)) {
 8001528:	b163      	cbz	r3, 8001544 <chSchGoSleepTimeoutS+0xb4>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 800152a:	692a      	ldr	r2, [r5, #16]
 800152c:	42a2      	cmp	r2, r4
 800152e:	d01c      	beq.n	800156a <chSchGoSleepTimeoutS+0xda>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 8001530:	e9dd 1003 	ldrd	r1, r0, [sp, #12]

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	4402      	add	r2, r0
 800153a:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	61ab      	str	r3, [r5, #24]
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 8001544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001546:	b008      	add	sp, #32
 8001548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchGoSleepS(newstate);
 800154c:	f7ff ff70 	bl	8001430 <chSchGoSleepS>
}
 8001550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001552:	b008      	add	sp, #32
 8001554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001558:	4817      	ldr	r0, [pc, #92]	; (80015b8 <chSchGoSleepTimeoutS+0x128>)
 800155a:	f7ff fb39 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#11");
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <chSchGoSleepTimeoutS+0x12c>)
 8001560:	f7ff fb36 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#10");
 8001564:	4816      	ldr	r0, [pc, #88]	; (80015c0 <chSchGoSleepTimeoutS+0x130>)
 8001566:	f7ff fb33 	bl	8000bd0 <chSysHalt>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 800156a:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 800156c:	4543      	cmp	r3, r8
  dlhp->next       = dlp->next;
 800156e:	612b      	str	r3, [r5, #16]
  vtp->dlist.next = NULL;
 8001570:	9202      	str	r2, [sp, #8]
  dlhp->next->prev = dlhp;
 8001572:	f8c3 8004 	str.w	r8, [r3, #4]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8001576:	d015      	beq.n	80015a4 <chSchGoSleepTimeoutS+0x114>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	9804      	ldr	r0, [sp, #16]
 800157c:	8baa      	ldrh	r2, [r5, #28]
 800157e:	4401      	add	r1, r0
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <chSchGoSleepTimeoutS+0x120>)
 8001582:	6099      	str	r1, [r3, #8]
 8001584:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001586:	b280      	uxth	r0, r0
 8001588:	1a83      	subs	r3, r0, r2
 800158a:	b29b      	uxth	r3, r3
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 800158c:	4299      	cmp	r1, r3
 800158e:	d9d9      	bls.n	8001544 <chSchGoSleepTimeoutS+0xb4>

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 8001590:	1ac9      	subs	r1, r1, r3
 8001592:	f7ff fc2d 	bl	8000df0 <vt_set_alarm>
 8001596:	e7d5      	b.n	8001544 <chSchGoSleepTimeoutS+0xb4>
      vt_insert_first(vtlp, vtp, now, delay);
 8001598:	ac02      	add	r4, sp, #8
 800159a:	4601      	mov	r1, r0
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff fd7f 	bl	80010a0 <vt_insert_first.constprop.0>
      return;
 80015a2:	e7b5      	b.n	8001510 <chSchGoSleepTimeoutS+0x80>
  STM32_ST_TIM->DIER = 0U;
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <chSchGoSleepTimeoutS+0x120>)
 80015a6:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 80015a8:	e7cc      	b.n	8001544 <chSchGoSleepTimeoutS+0xb4>
 80015aa:	bf00      	nop
 80015ac:	200009f0 	.word	0x200009f0
 80015b0:	40014800 	.word	0x40014800
 80015b4:	08000e61 	.word	0x08000e61
 80015b8:	08004e9c 	.word	0x08004e9c
 80015bc:	08004d28 	.word	0x08004d28
 80015c0:	08004d10 	.word	0x08004d10
	...

080015d0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80015d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qnotify_t nfy = iqp->q_notify;
 80015d4:	f8d0 a01c 	ldr.w	sl, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 80015d8:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 80015da:	2a00      	cmp	r2, #0
 80015dc:	f000 8089 	beq.w	80016f2 <iqReadTimeout+0x122>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80015e0:	4690      	mov	r8, r2
 80015e2:	460f      	mov	r7, r1
 80015e4:	4699      	mov	r9, r3
 80015e6:	2230      	movs	r2, #48	; 0x30
 80015e8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80015ec:	4e42      	ldr	r6, [pc, #264]	; (80016f8 <iqReadTimeout+0x128>)
 80015ee:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 80015f2:	430b      	orrs	r3, r1
 80015f4:	d177      	bne.n	80016e6 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	46c3      	mov	fp, r8
 80015fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80015fe:	4604      	mov	r4, r0
 8001600:	9201      	str	r2, [sp, #4]
 8001602:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001606:	46b8      	mov	r8, r7
  if (n > iqGetFullI(iqp)) {
 8001608:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800160a:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 800160c:	455a      	cmp	r2, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800160e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8001610:	bf34      	ite	cc
 8001612:	68a5      	ldrcc	r5, [r4, #8]
 8001614:	465d      	movcs	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001616:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8001618:	42aa      	cmp	r2, r5
 800161a:	d85d      	bhi.n	80016d8 <iqReadTimeout+0x108>
  else if (n > s1) {
 800161c:	d246      	bcs.n	80016ac <iqReadTimeout+0xdc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800161e:	4640      	mov	r0, r8
    s2 = n - s1;
 8001620:	1aaf      	subs	r7, r5, r2
 8001622:	9202      	str	r2, [sp, #8]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001624:	f7fe fe8e 	bl	8000344 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001628:	9a02      	ldr	r2, [sp, #8]
 800162a:	68e1      	ldr	r1, [r4, #12]
 800162c:	eb08 0002 	add.w	r0, r8, r2
 8001630:	463a      	mov	r2, r7
 8001632:	f7fe fe87 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8001636:	68e2      	ldr	r2, [r4, #12]
 8001638:	443a      	add	r2, r7
    iqp->q_rdptr += n;
 800163a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800163c:	68a2      	ldr	r2, [r4, #8]
 800163e:	1b52      	subs	r2, r2, r5
 8001640:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8001642:	2d00      	cmp	r5, #0
 8001644:	d038      	beq.n	80016b8 <iqReadTimeout+0xe8>
      if (nfy != NULL) {
 8001646:	f1ba 0f00 	cmp.w	sl, #0
 800164a:	d001      	beq.n	8001650 <iqReadTimeout+0x80>
        nfy(iqp);
 800164c:	4620      	mov	r0, r4
 800164e:	47d0      	blx	sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001650:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8001654:	2a00      	cmp	r2, #0
 8001656:	d149      	bne.n	80016ec <iqReadTimeout+0x11c>
 8001658:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800165c:	2900      	cmp	r1, #0
 800165e:	dd45      	ble.n	80016ec <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001660:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8001664:	f382 8811 	msr	BASEPRI, r2
 8001668:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 800166a:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 800166e:	44a8      	add	r8, r5
 8001670:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001674:	e9d6 2122 	ldrd	r2, r1, [r6, #136]	; 0x88
 8001678:	430a      	orrs	r2, r1
 800167a:	d134      	bne.n	80016e6 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 800167c:	2301      	movs	r3, #1
 800167e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 8001682:	f1bb 0f00 	cmp.w	fp, #0
 8001686:	d1bf      	bne.n	8001608 <iqReadTimeout+0x38>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001688:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800168c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001690:	bb62      	cbnz	r2, 80016ec <iqReadTimeout+0x11c>
 8001692:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8001696:	2900      	cmp	r1, #0
 8001698:	dd28      	ble.n	80016ec <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 800169a:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 800169e:	f382 8811 	msr	BASEPRI, r2
}
 80016a2:	eba8 000b 	sub.w	r0, r8, fp
 80016a6:	b005      	add	sp, #20
 80016a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80016ac:	462a      	mov	r2, r5
 80016ae:	4640      	mov	r0, r8
 80016b0:	f7fe fe48 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80016b4:	68e2      	ldr	r2, [r4, #12]
 80016b6:	e7c0      	b.n	800163a <iqReadTimeout+0x6a>
  return __sch_get_currthread();
 80016b8:	68f2      	ldr	r2, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80016ba:	f1b9 0f00 	cmp.w	r9, #0
 80016be:	d0e3      	beq.n	8001688 <iqReadTimeout+0xb8>
  p->prev       = qp->prev;
 80016c0:	6861      	ldr	r1, [r4, #4]
 80016c2:	6051      	str	r1, [r2, #4]
  p->next       = qp;
 80016c4:	6014      	str	r4, [r2, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80016c6:	2004      	movs	r0, #4
  p->prev->next = p;
 80016c8:	600a      	str	r2, [r1, #0]
  qp->prev      = p;
 80016ca:	6062      	str	r2, [r4, #4]
 80016cc:	4649      	mov	r1, r9
 80016ce:	f7ff fedf 	bl	8001490 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d098      	beq.n	8001608 <iqReadTimeout+0x38>
 80016d6:	e7d7      	b.n	8001688 <iqReadTimeout+0xb8>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80016d8:	462a      	mov	r2, r5
 80016da:	4640      	mov	r0, r8
 80016dc:	f7fe fe32 	bl	8000344 <memcpy>
    iqp->q_rdptr += n;
 80016e0:	69a2      	ldr	r2, [r4, #24]
 80016e2:	442a      	add	r2, r5
 80016e4:	e7a9      	b.n	800163a <iqReadTimeout+0x6a>
    chSysHalt("SV#4");
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <iqReadTimeout+0x12c>)
 80016e8:	f7ff fa72 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <iqReadTimeout+0x130>)
 80016ee:	f7ff fa6f 	bl	8000bd0 <chSysHalt>
  osalDbgCheck(n > 0U);
 80016f2:	4804      	ldr	r0, [pc, #16]	; (8001704 <iqReadTimeout+0x134>)
 80016f4:	f7ff fa6c 	bl	8000bd0 <chSysHalt>
 80016f8:	200009f0 	.word	0x200009f0
 80016fc:	08004d18 	.word	0x08004d18
 8001700:	08004d40 	.word	0x08004d40
 8001704:	08004e80 	.word	0x08004e80
	...

08001710 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	300c      	adds	r0, #12
 8001716:	f7ff bf5b 	b.w	80015d0 <iqReadTimeout>
 800171a:	bf00      	nop
 800171c:	0000      	movs	r0, r0
	...

08001720 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001720:	300c      	adds	r0, #12
 8001722:	f7ff bf55 	b.w	80015d0 <iqReadTimeout>
 8001726:	bf00      	nop
	...

08001730 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	2330      	movs	r3, #48	; 0x30
 8001734:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001738:	4e26      	ldr	r6, [pc, #152]	; (80017d4 <iqGetTimeout+0xa4>)
 800173a:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 800173e:	4313      	orrs	r3, r2
 8001740:	d144      	bne.n	80017cc <iqGetTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001742:	2301      	movs	r3, #1
 8001744:	4604      	mov	r4, r0
 8001746:	460d      	mov	r5, r1
 8001748:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
}
 800174c:	e00a      	b.n	8001764 <iqGetTimeout+0x34>
  p->prev       = qp->prev;
 800174e:	6862      	ldr	r2, [r4, #4]
 8001750:	4629      	mov	r1, r5
 8001752:	e9c3 4200 	strd	r4, r2, [r3]
 8001756:	2004      	movs	r0, #4
  p->prev->next = p;
 8001758:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800175a:	6063      	str	r3, [r4, #4]
 800175c:	f7ff fe98 	bl	8001490 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8001760:	2800      	cmp	r0, #0
 8001762:	db06      	blt.n	8001772 <iqGetTimeout+0x42>
  while (iqIsEmptyI(iqp)) {
 8001764:	68a3      	ldr	r3, [r4, #8]
 8001766:	b983      	cbnz	r3, 800178a <iqGetTimeout+0x5a>
 8001768:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800176a:	2d00      	cmp	r5, #0
 800176c:	d1ef      	bne.n	800174e <iqGetTimeout+0x1e>
    return MSG_TIMEOUT;
 800176e:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001772:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8001776:	bb33      	cbnz	r3, 80017c6 <iqGetTimeout+0x96>
 8001778:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 800177c:	2a00      	cmp	r2, #0
 800177e:	dd22      	ble.n	80017c6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001780:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001784:	f383 8811 	msr	BASEPRI, r3
}
 8001788:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 800178a:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800178c:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 800178e:	3b01      	subs	r3, #1
 8001790:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001792:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8001794:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001796:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8001798:	bf28      	it	cs
 800179a:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800179c:	61a2      	str	r2, [r4, #24]
 800179e:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80017a0:	bf28      	it	cs
 80017a2:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80017a4:	69e3      	ldr	r3, [r4, #28]
 80017a6:	b10b      	cbz	r3, 80017ac <iqGetTimeout+0x7c>
    iqp->q_notify(iqp);
 80017a8:	4620      	mov	r0, r4
 80017aa:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80017ac:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80017b0:	b94b      	cbnz	r3, 80017c6 <iqGetTimeout+0x96>
 80017b2:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	dd05      	ble.n	80017c6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80017ba:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80017be:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80017c2:	4628      	mov	r0, r5
}
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 80017c6:	4804      	ldr	r0, [pc, #16]	; (80017d8 <iqGetTimeout+0xa8>)
 80017c8:	f7ff fa02 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#4");
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <iqGetTimeout+0xac>)
 80017ce:	f7ff f9ff 	bl	8000bd0 <chSysHalt>
 80017d2:	bf00      	nop
 80017d4:	200009f0 	.word	0x200009f0
 80017d8:	08004d40 	.word	0x08004d40
 80017dc:	08004d18 	.word	0x08004d18

080017e0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	300c      	adds	r0, #12
 80017e6:	f7ff bfa3 	b.w	8001730 <iqGetTimeout>
 80017ea:	bf00      	nop
 80017ec:	0000      	movs	r0, r0
	...

080017f0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80017f0:	300c      	adds	r0, #12
 80017f2:	f7ff bf9d 	b.w	8001730 <iqGetTimeout>
 80017f6:	bf00      	nop
	...

08001800 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4615      	mov	r5, r2
 8001804:	2330      	movs	r3, #48	; 0x30
 8001806:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800180a:	4f26      	ldr	r7, [pc, #152]	; (80018a4 <oqPutTimeout+0xa4>)
 800180c:	e9d7 3222 	ldrd	r3, r2, [r7, #136]	; 0x88
 8001810:	4313      	orrs	r3, r2
 8001812:	d143      	bne.n	800189c <oqPutTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001814:	2301      	movs	r3, #1
 8001816:	4604      	mov	r4, r0
 8001818:	460e      	mov	r6, r1
 800181a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
}
 800181e:	e00a      	b.n	8001836 <oqPutTimeout+0x36>
  p->prev       = qp->prev;
 8001820:	6860      	ldr	r0, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001822:	4629      	mov	r1, r5
 8001824:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 8001828:	6003      	str	r3, [r0, #0]
 800182a:	2004      	movs	r0, #4
  qp->prev      = p;
 800182c:	6063      	str	r3, [r4, #4]
 800182e:	f7ff fe2f 	bl	8001490 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8001832:	2800      	cmp	r0, #0
 8001834:	db06      	blt.n	8001844 <oqPutTimeout+0x44>
  while (oqIsFullI(oqp)) {
 8001836:	68a3      	ldr	r3, [r4, #8]
 8001838:	b983      	cbnz	r3, 800185c <oqPutTimeout+0x5c>
 800183a:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800183c:	2d00      	cmp	r5, #0
 800183e:	d1ef      	bne.n	8001820 <oqPutTimeout+0x20>
    return MSG_TIMEOUT;
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001848:	bb2b      	cbnz	r3, 8001896 <oqPutTimeout+0x96>
 800184a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800184e:	2a00      	cmp	r2, #0
 8001850:	dd21      	ble.n	8001896 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001856:	f383 8811 	msr	BASEPRI, r3
}
 800185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  oqp->q_counter--;
 800185c:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800185e:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001860:	3b01      	subs	r3, #1
 8001862:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001864:	1c53      	adds	r3, r2, #1
 8001866:	6163      	str	r3, [r4, #20]
 8001868:	7016      	strb	r6, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800186a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800186e:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001870:	bf24      	itt	cs
 8001872:	68e3      	ldrcs	r3, [r4, #12]
 8001874:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8001876:	69e3      	ldr	r3, [r4, #28]
 8001878:	b10b      	cbz	r3, 800187e <oqPutTimeout+0x7e>
    oqp->q_notify(oqp);
 800187a:	4620      	mov	r0, r4
 800187c:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800187e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001882:	b940      	cbnz	r0, 8001896 <oqPutTimeout+0x96>
 8001884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001888:	2b00      	cmp	r3, #0
 800188a:	dd04      	ble.n	8001896 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 800188c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001890:	f380 8811 	msr	BASEPRI, r0
}
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <oqPutTimeout+0xa8>)
 8001898:	f7ff f99a 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#4");
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <oqPutTimeout+0xac>)
 800189e:	f7ff f997 	bl	8000bd0 <chSysHalt>
 80018a2:	bf00      	nop
 80018a4:	200009f0 	.word	0x200009f0
 80018a8:	08004d40 	.word	0x08004d40
 80018ac:	08004d18 	.word	0x08004d18

080018b0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	3030      	adds	r0, #48	; 0x30
 80018b6:	f7ff bfa3 	b.w	8001800 <oqPutTimeout>
 80018ba:	bf00      	nop
 80018bc:	0000      	movs	r0, r0
	...

080018c0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80018c0:	3030      	adds	r0, #48	; 0x30
 80018c2:	f7ff bf9d 	b.w	8001800 <oqPutTimeout>
 80018c6:	bf00      	nop
	...

080018d0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80018d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d4:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 80018d6:	f8d0 b01c 	ldr.w	fp, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 80018da:	9302      	str	r3, [sp, #8]
  size_t max = n;

  osalDbgCheck(n > 0U);
 80018dc:	2a00      	cmp	r2, #0
 80018de:	f000 8081 	beq.w	80019e4 <oqWriteTimeout+0x114>
 80018e2:	4691      	mov	r9, r2
 80018e4:	4688      	mov	r8, r1
 80018e6:	2230      	movs	r2, #48	; 0x30
 80018e8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80018ec:	4e3f      	ldr	r6, [pc, #252]	; (80019ec <oqWriteTimeout+0x11c>)
 80018ee:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 80018f2:	430b      	orrs	r3, r1
 80018f4:	d170      	bne.n	80019d8 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	4604      	mov	r4, r0
 80018fa:	9201      	str	r2, [sp, #4]
 80018fc:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001900:	46ca      	mov	sl, r9
  if (n > oqGetEmptyI(oqp)) {
 8001902:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001904:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8001908:	4553      	cmp	r3, sl
    n = oqGetEmptyI(oqp);
 800190a:	bf34      	ite	cc
 800190c:	68a5      	ldrcc	r5, [r4, #8]
 800190e:	4655      	movcs	r5, sl
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001910:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8001912:	42af      	cmp	r7, r5
 8001914:	d859      	bhi.n	80019ca <oqWriteTimeout+0xfa>
  else if (n > s1) {
 8001916:	d243      	bcs.n	80019a0 <oqWriteTimeout+0xd0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001918:	463a      	mov	r2, r7
 800191a:	4641      	mov	r1, r8
 800191c:	f7fe fd12 	bl	8000344 <memcpy>
    s2 = n - s1;
 8001920:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001922:	68e0      	ldr	r0, [r4, #12]
 8001924:	9203      	str	r2, [sp, #12]
 8001926:	eb08 0107 	add.w	r1, r8, r7
 800192a:	f7fe fd0b 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800192e:	68e3      	ldr	r3, [r4, #12]
 8001930:	9a03      	ldr	r2, [sp, #12]
 8001932:	441a      	add	r2, r3
  oqp->q_counter -= n;
 8001934:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr += n;
 8001936:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8001938:	1b5b      	subs	r3, r3, r5
 800193a:	60a3      	str	r3, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 800193c:	b3b5      	cbz	r5, 80019ac <oqWriteTimeout+0xdc>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 800193e:	f1bb 0f00 	cmp.w	fp, #0
 8001942:	d001      	beq.n	8001948 <oqWriteTimeout+0x78>
        nfy(oqp);
 8001944:	4620      	mov	r0, r4
 8001946:	47d8      	blx	fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001948:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 800194c:	2b00      	cmp	r3, #0
 800194e:	d146      	bne.n	80019de <oqWriteTimeout+0x10e>
 8001950:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8001954:	2a00      	cmp	r2, #0
 8001956:	dd42      	ble.n	80019de <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001958:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800195c:	f383 8811 	msr	BASEPRI, r3
 8001960:	9b01      	ldr	r3, [sp, #4]
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8001962:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8001966:	44a8      	add	r8, r5
 8001968:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800196c:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 8001970:	4313      	orrs	r3, r2
 8001972:	d131      	bne.n	80019d8 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001974:	2301      	movs	r3, #1
 8001976:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 800197a:	f1ba 0f00 	cmp.w	sl, #0
 800197e:	d1c0      	bne.n	8001902 <oqWriteTimeout+0x32>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001980:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8001984:	bb5a      	cbnz	r2, 80019de <oqWriteTimeout+0x10e>
 8001986:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800198a:	2900      	cmp	r1, #0
 800198c:	dd27      	ble.n	80019de <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 800198e:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8001992:	f382 8811 	msr	BASEPRI, r2
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001996:	eba9 000a 	sub.w	r0, r9, sl
 800199a:	b005      	add	sp, #20
 800199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80019a0:	462a      	mov	r2, r5
 80019a2:	4641      	mov	r1, r8
 80019a4:	f7fe fcce 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80019a8:	68e2      	ldr	r2, [r4, #12]
 80019aa:	e7c3      	b.n	8001934 <oqWriteTimeout+0x64>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80019ac:	9902      	ldr	r1, [sp, #8]
 80019ae:	68f3      	ldr	r3, [r6, #12]
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d0e5      	beq.n	8001980 <oqWriteTimeout+0xb0>
  p->prev       = qp->prev;
 80019b4:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 80019b6:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 80019b8:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80019ba:	2004      	movs	r0, #4
  p->prev->next = p;
 80019bc:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80019be:	6063      	str	r3, [r4, #4]
 80019c0:	f7ff fd66 	bl	8001490 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d09c      	beq.n	8001902 <oqWriteTimeout+0x32>
 80019c8:	e7da      	b.n	8001980 <oqWriteTimeout+0xb0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80019ca:	462a      	mov	r2, r5
 80019cc:	4641      	mov	r1, r8
 80019ce:	f7fe fcb9 	bl	8000344 <memcpy>
    oqp->q_wrptr += n;
 80019d2:	6962      	ldr	r2, [r4, #20]
 80019d4:	442a      	add	r2, r5
 80019d6:	e7ad      	b.n	8001934 <oqWriteTimeout+0x64>
    chSysHalt("SV#4");
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <oqWriteTimeout+0x120>)
 80019da:	f7ff f8f9 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <oqWriteTimeout+0x124>)
 80019e0:	f7ff f8f6 	bl	8000bd0 <chSysHalt>
  osalDbgCheck(n > 0U);
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <oqWriteTimeout+0x128>)
 80019e6:	f7ff f8f3 	bl	8000bd0 <chSysHalt>
 80019ea:	bf00      	nop
 80019ec:	200009f0 	.word	0x200009f0
 80019f0:	08004d18 	.word	0x08004d18
 80019f4:	08004d40 	.word	0x08004d40
 80019f8:	08004e38 	.word	0x08004e38
 80019fc:	00000000 	.word	0x00000000

08001a00 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	3030      	adds	r0, #48	; 0x30
 8001a06:	f7ff bf63 	b.w	80018d0 <oqWriteTimeout>
 8001a0a:	bf00      	nop
 8001a0c:	0000      	movs	r0, r0
	...

08001a10 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001a10:	3030      	adds	r0, #48	; 0x30
 8001a12:	f7ff bf5d 	b.w	80018d0 <oqWriteTimeout>
 8001a16:	bf00      	nop
	...

08001a20 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001a20:	b510      	push	{r4, lr}
 8001a22:	2330      	movs	r3, #48	; 0x30
 8001a24:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001a28:	4c10      	ldr	r4, [pc, #64]	; (8001a6c <chThdSleep+0x4c>)
 8001a2a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	d113      	bne.n	8001a5a <chThdSleep+0x3a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	4601      	mov	r1, r0
 8001a36:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8001a3a:	b1a0      	cbz	r0, 8001a66 <chThdSleep+0x46>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001a3c:	2008      	movs	r0, #8
 8001a3e:	f7ff fd27 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001a42:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001a46:	b95b      	cbnz	r3, 8001a60 <chThdSleep+0x40>
 8001a48:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	dd07      	ble.n	8001a60 <chThdSleep+0x40>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001a50:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001a54:	f383 8811 	msr	BASEPRI, r3
}
 8001a58:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <chThdSleep+0x50>)
 8001a5c:	f7ff f8b8 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <chThdSleep+0x54>)
 8001a62:	f7ff f8b5 	bl	8000bd0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8001a66:	4804      	ldr	r0, [pc, #16]	; (8001a78 <chThdSleep+0x58>)
 8001a68:	f7ff f8b2 	bl	8000bd0 <chSysHalt>
 8001a6c:	200009f0 	.word	0x200009f0
 8001a70:	08004d18 	.word	0x08004d18
 8001a74:	08004d40 	.word	0x08004d40
 8001a78:	08004e54 	.word	0x08004e54
 8001a7c:	00000000 	.word	0x00000000

08001a80 <adf_write_reg>:
 *
 * @api
 */
//void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {

void adf_write_reg(uint32_t data){
 8001a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    spiSend(&SPID2, 1, &temp);
  }
  spiUnselect(&SPID2);            // Slave Select deassertion.
  */

  palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001a84:	4d9f      	ldr	r5, [pc, #636]	; (8001d04 <adf_write_reg+0x284>)
 8001a86:	4ca0      	ldr	r4, [pc, #640]	; (8001d08 <adf_write_reg+0x288>)
 8001a88:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  //myprintf("Bitbang adf_write_reg: 0x%08X\n", data);
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001a94:	836f      	strh	r7, [r5, #26]
void adf_write_reg(uint32_t data){
 8001a96:	4606      	mov	r6, r0
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001a98:	836a      	strh	r2, [r5, #26]
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 8001a9a:	f04f 0918 	mov.w	r9, #24
 8001a9e:	836b      	strh	r3, [r5, #26]
 8001aa0:	f04f 0830 	mov.w	r8, #48	; 0x30
   for(int i=3; i>=0; --i){
     uint8_t temp = data >> (i * 8);
 8001aa4:	fa26 fa09 	lsr.w	sl, r6, r9
     //myprintf("adf_write_ byte: 0x%X\n",temp);

     //MSB first
     if(temp&0x80)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001aa8:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001aac:	bf14      	ite	ne
 8001aae:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001ab0:	836f      	strheq	r7, [r5, #26]
 8001ab2:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001ab6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8001aba:	4313      	orrs	r3, r2
 8001abc:	f040 811f 	bne.w	8001cfe <adf_write_reg+0x27e>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001ac0:	f04f 0b01 	mov.w	fp, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001ac4:	210a      	movs	r1, #10
 8001ac6:	2008      	movs	r0, #8
 8001ac8:	f8c4 b08c 	str.w	fp, [r4, #140]	; 0x8c
 8001acc:	f7ff fce0 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001ad0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 810f 	bne.w	8001cf8 <adf_write_reg+0x278>
 8001ada:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	f340 810a 	ble.w	8001cf8 <adf_write_reg+0x278>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001ae4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001ae8:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af0:	832a      	strh	r2, [r5, #24]
 8001af2:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001af6:	e9d4 3122 	ldrd	r3, r1, [r4, #136]	; 0x88
 8001afa:	430b      	orrs	r3, r1
 8001afc:	f040 80ff 	bne.w	8001cfe <adf_write_reg+0x27e>
 8001b00:	210a      	movs	r1, #10
 8001b02:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8001b04:	f8c4 b08c 	str.w	fp, [r4, #140]	; 0x8c
 8001b08:	f7ff fcc2 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001b0c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 80f1 	bne.w	8001cf8 <adf_write_reg+0x278>
 8001b16:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	f340 80ec 	ble.w	8001cf8 <adf_write_reg+0x278>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001b20:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001b24:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000

     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001b2c:	f01a 0f40 	tst.w	sl, #64	; 0x40
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001b30:	836a      	strh	r2, [r5, #26]
     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001b32:	fa5f fb8a 	uxtb.w	fp, sl
 8001b36:	bf14      	ite	ne
 8001b38:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001b3a:	836f      	strheq	r7, [r5, #26]
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001b3c:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8001b40:	200a      	movs	r0, #10
 8001b42:	f7ff ff6d 	bl	8001a20 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001b46:	f8a5 a018 	strh.w	sl, [r5, #24]
     chThdSleepMilliseconds(1);
 8001b4a:	200a      	movs	r0, #10
 8001b4c:	f7ff ff68 	bl	8001a20 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001b50:	f01b 0f20 	tst.w	fp, #32
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001b54:	f8a5 a01a 	strh.w	sl, [r5, #26]
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001b58:	bf14      	ite	ne
 8001b5a:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001b5c:	836f      	strheq	r7, [r5, #26]
 8001b5e:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001b62:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f040 80c9 	bne.w	8001cfe <adf_write_reg+0x27e>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001b6c:	f04f 0a01 	mov.w	sl, #1
 8001b70:	210a      	movs	r1, #10
 8001b72:	2008      	movs	r0, #8
 8001b74:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8001b78:	f7ff fc8a 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001b7c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 80b9 	bne.w	8001cf8 <adf_write_reg+0x278>
 8001b86:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001b8a:	2a00      	cmp	r2, #0
 8001b8c:	f340 80b4 	ble.w	8001cf8 <adf_write_reg+0x278>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001b90:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001b94:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9c:	832a      	strh	r2, [r5, #24]
 8001b9e:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001ba2:	e9d4 3122 	ldrd	r3, r1, [r4, #136]	; 0x88
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	f040 80a9 	bne.w	8001cfe <adf_write_reg+0x27e>
 8001bac:	210a      	movs	r1, #10
 8001bae:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8001bb0:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8001bb4:	f7ff fc6c 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001bb8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 809b 	bne.w	8001cf8 <adf_write_reg+0x278>
 8001bc2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001bc6:	2900      	cmp	r1, #0
 8001bc8:	f340 8096 	ble.w	8001cf8 <adf_write_reg+0x278>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001bcc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001bd0:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001bd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000

     if(temp&0x10)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001bd8:	f01b 0f10 	tst.w	fp, #16
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001bdc:	836a      	strh	r2, [r5, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001bde:	f04f 000a 	mov.w	r0, #10
     if(temp&0x10)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001be2:	bf14      	ite	ne
 8001be4:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001be6:	836f      	strheq	r7, [r5, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001be8:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8001bec:	f7ff ff18 	bl	8001a20 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001bf0:	f8a5 a018 	strh.w	sl, [r5, #24]
 8001bf4:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001bf8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	d17e      	bne.n	8001cfe <adf_write_reg+0x27e>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	210a      	movs	r1, #10
 8001c04:	2008      	movs	r0, #8
 8001c06:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001c0a:	f7ff fc41 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001c0e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d170      	bne.n	8001cf8 <adf_write_reg+0x278>
 8001c16:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	dd6c      	ble.n	8001cf8 <adf_write_reg+0x278>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001c1e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001c22:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c26:	f01b 0f08 	tst.w	fp, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001c2a:	f8a5 a01a 	strh.w	sl, [r5, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001c2e:	f04f 000a 	mov.w	r0, #10
     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c32:	bf14      	ite	ne
 8001c34:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001c36:	836f      	strheq	r7, [r5, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001c38:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8001c3c:	f7ff fef0 	bl	8001a20 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001c40:	f8a5 a018 	strh.w	sl, [r5, #24]
     chThdSleepMilliseconds(1);
 8001c44:	200a      	movs	r0, #10
 8001c46:	f7ff feeb 	bl	8001a20 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c4a:	f01b 0f04 	tst.w	fp, #4
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001c4e:	f8a5 a01a 	strh.w	sl, [r5, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001c52:	f04f 000a 	mov.w	r0, #10
     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c56:	bf14      	ite	ne
 8001c58:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001c5a:	836f      	strheq	r7, [r5, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001c5c:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8001c60:	f7ff fede 	bl	8001a20 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001c64:	f8a5 a018 	strh.w	sl, [r5, #24]
     chThdSleepMilliseconds(1);
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f7ff fed9 	bl	8001a20 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c6e:	f01b 0f02 	tst.w	fp, #2
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001c72:	f8a5 a01a 	strh.w	sl, [r5, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001c76:	f04f 000a 	mov.w	r0, #10
     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c7a:	bf14      	ite	ne
 8001c7c:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001c7e:	836f      	strheq	r7, [r5, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001c80:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8001c84:	f7ff fecc 	bl	8001a20 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001c88:	f8a5 a018 	strh.w	sl, [r5, #24]
     chThdSleepMilliseconds(1);
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f7ff fec7 	bl	8001a20 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c92:	f01b 0f01 	tst.w	fp, #1
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001c96:	f8a5 a01a 	strh.w	sl, [r5, #26]
     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001c9a:	bf14      	ite	ne
 8001c9c:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001c9e:	836f      	strheq	r7, [r5, #26]
 8001ca0:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001ca4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	d128      	bne.n	8001cfe <adf_write_reg+0x27e>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	210a      	movs	r1, #10
 8001cb0:	2008      	movs	r0, #8
 8001cb2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001cb6:	f7ff fbeb 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001cba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001cbe:	b9db      	cbnz	r3, 8001cf8 <adf_write_reg+0x278>
 8001cc0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	dd17      	ble.n	8001cf8 <adf_write_reg+0x278>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001cc8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001ccc:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001cd0:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
   for(int i=3; i>=0; --i){
 8001cd4:	f1a9 0908 	sub.w	r9, r9, #8
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001cd8:	f8a5 a018 	strh.w	sl, [r5, #24]
     chThdSleepMilliseconds(1);
 8001cdc:	200a      	movs	r0, #10
 8001cde:	f7ff fe9f 	bl	8001a20 <chThdSleep>
   for(int i=3; i>=0; --i){
 8001ce2:	f119 0f08 	cmn.w	r9, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001ce6:	f8a5 a01a 	strh.w	sl, [r5, #26]
   for(int i=3; i>=0; --i){
 8001cea:	f47f aedb 	bne.w	8001aa4 <adf_write_reg+0x24>
   }
   palSetPad(GPIOB, GPIOB_ADF_LE);             // Slave Select deassertion.
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	832b      	strh	r3, [r5, #24]
}
 8001cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chSysHalt("SV#5");
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <adf_write_reg+0x28c>)
 8001cfa:	f7fe ff69 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#4");
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <adf_write_reg+0x290>)
 8001d00:	f7fe ff66 	bl	8000bd0 <chSysHalt>
 8001d04:	40020400 	.word	0x40020400
 8001d08:	200009f0 	.word	0x200009f0
 8001d0c:	08004d40 	.word	0x08004d40
 8001d10:	08004d18 	.word	0x08004d18
	...

08001d20 <__port_irq_epilogue.part.0>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8001d20:	b410      	push	{r4}
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8001d22:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001d26:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8001d2a:	3b68      	subs	r3, #104	; 0x68

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8001d2c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 8001d30:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <__port_irq_epilogue.part.0+0x38>)
    ectxp->xpsr = 0x01000000U;
 8001d32:	61d9      	str	r1, [r3, #28]
    ectxp->fpscr = FPU->FPDSCR;
 8001d34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d36:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001d38:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__port_irq_epilogue.part.0+0x3c>)

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <__port_irq_epilogue.part.0+0x40>)
 8001d40:	6808      	ldr	r0, [r1, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001d42:	68c9      	ldr	r1, [r1, #12]
    if (chSchIsPreemptionRequired()) {
 8001d44:	6884      	ldr	r4, [r0, #8]
 8001d46:	6888      	ldr	r0, [r1, #8]
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <__port_irq_epilogue.part.0+0x44>)
 8001d4a:	4284      	cmp	r4, r0
 8001d4c:	bf88      	it	hi
 8001d4e:	460a      	movhi	r2, r1
 8001d50:	619a      	str	r2, [r3, #24]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ef00 	.word	0xe000ef00
 8001d5c:	200009f0 	.word	0x200009f0
 8001d60:	0800033e 	.word	0x0800033e
 8001d64:	08000333 	.word	0x08000333
	...

08001d70 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
	...

08001d80 <__late_init>:
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
	...

08001d90 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001d90:	e7fe      	b.n	8001d90 <__default_exit>
 8001d92:	bf00      	nop
	...

08001da0 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da2:	4d15      	ldr	r5, [pc, #84]	; (8001df8 <__init_ram_areas+0x58>)
 8001da4:	4f15      	ldr	r7, [pc, #84]	; (8001dfc <__init_ram_areas+0x5c>)
 8001da6:	4916      	ldr	r1, [pc, #88]	; (8001e00 <__init_ram_areas+0x60>)
 8001da8:	4816      	ldr	r0, [pc, #88]	; (8001e04 <__init_ram_areas+0x64>)
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <__init_ram_areas+0x68>)
 8001dac:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001db0:	4281      	cmp	r1, r0
 8001db2:	d90d      	bls.n	8001dd0 <__init_ram_areas+0x30>
 8001db4:	3a04      	subs	r2, #4
 8001db6:	4603      	mov	r3, r0
      *p = *tp;
 8001db8:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8001dbc:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8001dc0:	4299      	cmp	r1, r3
 8001dc2:	d8f9      	bhi.n	8001db8 <__init_ram_areas+0x18>
      p++;
 8001dc4:	1e4b      	subs	r3, r1, #1
 8001dc6:	1a1b      	subs	r3, r3, r0
 8001dc8:	f023 0303 	bic.w	r3, r3, #3
 8001dcc:	3304      	adds	r3, #4
 8001dce:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001dd0:	4287      	cmp	r7, r0
 8001dd2:	d907      	bls.n	8001de4 <__init_ram_areas+0x44>
      *p = 0;
 8001dd4:	1e7a      	subs	r2, r7, #1
 8001dd6:	1a12      	subs	r2, r2, r0
 8001dd8:	f022 0203 	bic.w	r2, r2, #3
 8001ddc:	3204      	adds	r2, #4
 8001dde:	2100      	movs	r1, #0
 8001de0:	f002 fdbc 	bl	800495c <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001de4:	42a5      	cmp	r5, r4
 8001de6:	d005      	beq.n	8001df4 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8001de8:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 8001dec:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8001df0:	3510      	adds	r5, #16
 8001df2:	e7dd      	b.n	8001db0 <__init_ram_areas+0x10>
#endif
}
 8001df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08005020 	.word	0x08005020
 8001dfc:	20002020 	.word	0x20002020
 8001e00:	20002020 	.word	0x20002020
 8001e04:	20002020 	.word	0x20002020
 8001e08:	080050d4 	.word	0x080050d4
 8001e0c:	00000000 	.word	0x00000000

08001e10 <__dbg_check_unlock>:
void __dbg_check_unlock(void) {
 8001e10:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <__dbg_check_unlock+0x20>)
 8001e14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e18:	b932      	cbnz	r2, 8001e28 <__dbg_check_unlock+0x18>
 8001e1a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	dd02      	ble.n	8001e28 <__dbg_check_unlock+0x18>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001e26:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <__dbg_check_unlock+0x24>)
 8001e2a:	f7fe fed1 	bl	8000bd0 <chSysHalt>
 8001e2e:	bf00      	nop
 8001e30:	200009f0 	.word	0x200009f0
 8001e34:	08004d40 	.word	0x08004d40
	...

08001e40 <__dbg_check_lock>:
void __dbg_check_lock(void) {
 8001e40:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <__dbg_check_lock+0x1c>)
 8001e44:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	d103      	bne.n	8001e54 <__dbg_check_lock+0x14>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001e52:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <__dbg_check_lock+0x20>)
 8001e56:	f7fe febb 	bl	8000bd0 <chSysHalt>
 8001e5a:	bf00      	nop
 8001e5c:	200009f0 	.word	0x200009f0
 8001e60:	08004d18 	.word	0x08004d18
	...

08001e70 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e72:	4606      	mov	r6, r0
 8001e74:	460d      	mov	r5, r1
 8001e76:	4614      	mov	r4, r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e78:	2330      	movs	r3, #48	; 0x30
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 8001e7e:	f7ff ffdf 	bl	8001e40 <__dbg_check_lock>
  tp = threadref(((uint8_t *)wsp + size -
 8001e82:	f1a5 0c48 	sub.w	ip, r5, #72	; 0x48
 8001e86:	eb06 030c 	add.w	r3, r6, ip
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001e8a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	2100      	movs	r1, #0
  tp->refs              = (trefs_t)1;
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001e98:	e943 4109 	strd	r4, r1, [r3, #-36]	; 0x24
  tp->epending          = (eventmask_t)0;
 8001e9c:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
  tp->name              = name;
 8001ea0:	4a2d      	ldr	r2, [pc, #180]	; (8001f58 <chThdCreateStatic.constprop.0.isra.0+0xe8>)
 8001ea2:	61da      	str	r2, [r3, #28]
  tp->state             = CH_STATE_WTSTART;
 8001ea4:	2102      	movs	r1, #2
  tp->owner             = oip;
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <chThdCreateStatic.constprop.0.isra.0+0xec>)
  tp->state             = CH_STATE_WTSTART;
 8001ea8:	8499      	strh	r1, [r3, #36]	; 0x24
  tp->hdr.pqueue.prio   = prio;
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	6099      	str	r1, [r3, #8]
  p->prev       = qp->prev;
 8001eae:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001eb0:	4f2b      	ldr	r7, [pc, #172]	; (8001f60 <chThdCreateStatic.constprop.0.isra.0+0xf0>)
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001eb2:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  tp->realprio          = prio;
 8001eb6:	6419      	str	r1, [r3, #64]	; 0x40
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001eb8:	f843 7c04 	str.w	r7, [r3, #-4]
  REG_INSERT(oip, tp);
 8001ebc:	f103 0010 	add.w	r0, r3, #16
  ch_queue_init(&tp->msgqueue);
 8001ec0:	f103 0130 	add.w	r1, r3, #48	; 0x30
  p->next       = qp;
 8001ec4:	f102 0728 	add.w	r7, r2, #40	; 0x28
  tp->wabase = (stkalign_t *)wsp;
 8001ec8:	621e      	str	r6, [r3, #32]
  tp->owner             = oip;
 8001eca:	619a      	str	r2, [r3, #24]
  p->prev       = qp->prev;
 8001ecc:	615c      	str	r4, [r3, #20]
  p->next       = qp;
 8001ece:	611f      	str	r7, [r3, #16]
  p->prev->next = p;
 8001ed0:	6020      	str	r0, [r4, #0]
  qp->prev = qp;
 8001ed2:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
  ch_list_init(&tp->waiting);
 8001ed6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  qp->prev      = p;
 8001eda:	62d0      	str	r0, [r2, #44]	; 0x2c
  lp->next = lp;
 8001edc:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001ede:	bb45      	cbnz	r5, 8001f32 <chThdCreateStatic.constprop.0.isra.0+0xc2>
 8001ee0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	dd24      	ble.n	8001f32 <chThdCreateStatic.constprop.0.isra.0+0xc2>
  thread_t *otp = __instance_get_currthread(oip);
 8001ee8:	68d1      	ldr	r1, [r2, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8001eea:	6898      	ldr	r0, [r3, #8]
 8001eec:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 8001eee:	629d      	str	r5, [r3, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8001ef0:	42a0      	cmp	r0, r4
 8001ef2:	d924      	bls.n	8001f3e <chThdCreateStatic.constprop.0.isra.0+0xce>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8001ef4:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 8001ef6:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
    pqp = pqp->next;
 8001efa:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio > p->prio));
 8001efc:	6885      	ldr	r5, [r0, #8]
 8001efe:	42ac      	cmp	r4, r5
 8001f00:	d3fb      	bcc.n	8001efa <chThdCreateStatic.constprop.0.isra.0+0x8a>
  p->prev       = pqp->prev;
 8001f02:	6844      	ldr	r4, [r0, #4]
 8001f04:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 8001f08:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 8001f0a:	2401      	movs	r4, #1
  pqp->prev     = p;
 8001f0c:	6041      	str	r1, [r0, #4]
 8001f0e:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8001f12:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001f14:	f3ef 8209 	mrs	r2, PSP
    chSysSwitch(ntp, otp);
 8001f18:	6a08      	ldr	r0, [r1, #32]
 8001f1a:	3a64      	subs	r2, #100	; 0x64
 8001f1c:	4290      	cmp	r0, r2
 8001f1e:	d80b      	bhi.n	8001f38 <chThdCreateStatic.constprop.0.isra.0+0xc8>
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe f9ef 	bl	8000304 <__port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  __dbg_check_unlock();
 8001f26:	f7ff ff73 	bl	8001e10 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f383 8811 	msr	BASEPRI, r3
}
 8001f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#11");
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <chThdCreateStatic.constprop.0.isra.0+0xf4>)
 8001f34:	f7fe fe4c 	bl	8000bd0 <chSysHalt>
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <chThdCreateStatic.constprop.0.isra.0+0xf8>)
 8001f3a:	f7fe fe49 	bl	8000bd0 <chSysHalt>
  tp->state = CH_STATE_READY;
 8001f3e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
    pqp = pqp->next;
 8001f42:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001f44:	6891      	ldr	r1, [r2, #8]
 8001f46:	4288      	cmp	r0, r1
 8001f48:	d9fb      	bls.n	8001f42 <chThdCreateStatic.constprop.0.isra.0+0xd2>
  p->prev       = pqp->prev;
 8001f4a:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8001f4c:	f846 200c 	str.w	r2, [r6, ip]
  p->prev       = pqp->prev;
 8001f50:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8001f52:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001f54:	6053      	str	r3, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001f56:	e7e6      	b.n	8001f26 <chThdCreateStatic.constprop.0.isra.0+0xb6>
 8001f58:	08004d48 	.word	0x08004d48
 8001f5c:	200009f0 	.word	0x200009f0
 8001f60:	0800031d 	.word	0x0800031d
 8001f64:	08004d28 	.word	0x08004d28
 8001f68:	08004d30 	.word	0x08004d30
 8001f6c:	00000000 	.word	0x00000000

08001f70 <sdStart.isra.0>:
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	4604      	mov	r4, r0
 8001f74:	460d      	mov	r5, r1
 8001f76:	2330      	movs	r3, #48	; 0x30
 8001f78:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8001f7c:	f7ff ff60 	bl	8001e40 <__dbg_check_lock>
  if (sdp->state == SD_STOP) {
 8001f80:	7a23      	ldrb	r3, [r4, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d035      	beq.n	8001ff2 <sdStart.isra.0+0x82>
  USART_TypeDef *u = sdp->usart;
 8001f86:	e9d4 321d 	ldrd	r3, r2, [r4, #116]	; 0x74
  if (config->cr1 & USART_CR1_OVER8)
 8001f8a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8001f8e:	6829      	ldr	r1, [r5, #0]
  if (config->cr1 & USART_CR1_OVER8)
 8001f90:	2800      	cmp	r0, #0
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8001f92:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8001f96:	fbb2 f2f1 	udiv	r2, r2, r1
  if (config->cr1 & USART_CR1_OVER8)
 8001f9a:	88a9      	ldrh	r1, [r5, #4]
 8001f9c:	da05      	bge.n	8001faa <sdStart.isra.0+0x3a>
    brr = ((brr & ~7) * 2) | (brr & 7);
 8001f9e:	f022 0007 	bic.w	r0, r2, #7
 8001fa2:	f002 0207 	and.w	r2, r2, #7
 8001fa6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  u->BRR = brr;
 8001faa:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001fac:	88e8      	ldrh	r0, [r5, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001fae:	892a      	ldrh	r2, [r5, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001fb0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001fb8:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001fba:	615a      	str	r2, [r3, #20]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001fbc:	f441 5204 	orr.w	r2, r1, #8448	; 0x2100
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001fc0:	f401 51a0 	and.w	r1, r1, #5120	; 0x1400
    sdp->rxmask = 0xFF;
 8001fc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001fc8:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->SR = 0;
 8001fcc:	f04f 0500 	mov.w	r5, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001fd0:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 8001fd2:	bf08      	it	eq
 8001fd4:	217f      	moveq	r1, #127	; 0x7f
  u->SR = 0;
 8001fd6:	601d      	str	r5, [r3, #0]
    sdp->rxmask = 0xFF;
 8001fd8:	bf18      	it	ne
 8001fda:	21ff      	movne	r1, #255	; 0xff
    sdp->state = SD_READY;
 8001fdc:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 8001fde:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
 8001fe6:	7222      	strb	r2, [r4, #8]
  __dbg_check_unlock();
 8001fe8:	f7ff ff12 	bl	8001e10 <__dbg_check_unlock>
 8001fec:	f385 8811 	msr	BASEPRI, r5
}
 8001ff0:	bd38      	pop	{r3, r4, r5, pc}
    if (&SD1 == sdp) {
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <sdStart.isra.0+0xbc>)
 8001ff4:	429c      	cmp	r4, r3
 8001ff6:	d00d      	beq.n	8002014 <sdStart.isra.0+0xa4>
    if (&SD2 == sdp) {
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <sdStart.isra.0+0xc0>)
 8001ffa:	429c      	cmp	r4, r3
 8001ffc:	d1c3      	bne.n	8001f86 <sdStart.isra.0+0x16>
      rccEnableUSART2(true);
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <sdStart.isra.0+0xc4>)
 8002000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002002:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
 8002008:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800200a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800200e:	661a      	str	r2, [r3, #96]	; 0x60
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	e7b8      	b.n	8001f86 <sdStart.isra.0+0x16>
      rccEnableUSART1(true);
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <sdStart.isra.0+0xc4>)
 8002016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002018:	f042 0210 	orr.w	r2, r2, #16
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
 800201e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002020:	f042 0210 	orr.w	r2, r2, #16
 8002024:	665a      	str	r2, [r3, #100]	; 0x64
 8002026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002028:	e7ad      	b.n	8001f86 <sdStart.isra.0+0x16>
 800202a:	bf00      	nop
 800202c:	200008b4 	.word	0x200008b4
 8002030:	20000934 	.word	0x20000934
 8002034:	40023800 	.word	0x40023800
	...

08002040 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	2530      	movs	r5, #48	; 0x30
 8002044:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002048:	4c18      	ldr	r4, [pc, #96]	; (80020ac <VectorD4+0x6c>)
 800204a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800204e:	2b00      	cmp	r3, #0
 8002050:	db22      	blt.n	8002098 <VectorD4+0x58>
 8002052:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002056:	b9fa      	cbnz	r2, 8002098 <VectorD4+0x58>
  oip->dbg.isr_cnt++;
 8002058:	3301      	adds	r3, #1
 800205a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800205e:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
 8002062:	4813      	ldr	r0, [pc, #76]	; (80020b0 <VectorD4+0x70>)
 8002064:	f7ff f88c 	bl	8001180 <sd_lld_serve_interrupt>
 8002068:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800206c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002070:	2b00      	cmp	r3, #0
 8002072:	dd14      	ble.n	800209e <VectorD4+0x5e>
 8002074:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002078:	b98a      	cbnz	r2, 800209e <VectorD4+0x5e>
  oip->dbg.isr_cnt--;
 800207a:	3b01      	subs	r3, #1
 800207c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002080:	f382 8811 	msr	BASEPRI, r2
 8002084:	f385 8811 	msr	BASEPRI, r5
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <VectorD4+0x74>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002090:	d108      	bne.n	80020a4 <VectorD4+0x64>
 8002092:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002096:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <VectorD4+0x78>)
 800209a:	f7fe fd99 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 800209e:	4807      	ldr	r0, [pc, #28]	; (80020bc <VectorD4+0x7c>)
 80020a0:	f7fe fd96 	bl	8000bd0 <chSysHalt>
 80020a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020a8:	f7ff be3a 	b.w	8001d20 <__port_irq_epilogue.part.0>
 80020ac:	200009f0 	.word	0x200009f0
 80020b0:	200008b4 	.word	0x200008b4
 80020b4:	e000ed00 	.word	0xe000ed00
 80020b8:	08004d50 	.word	0x08004d50
 80020bc:	08004d58 	.word	0x08004d58

080020c0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	2530      	movs	r5, #48	; 0x30
 80020c4:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80020c8:	4c18      	ldr	r4, [pc, #96]	; (800212c <VectorD8+0x6c>)
 80020ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db22      	blt.n	8002118 <VectorD8+0x58>
 80020d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80020d6:	b9fa      	cbnz	r2, 8002118 <VectorD8+0x58>
  oip->dbg.isr_cnt++;
 80020d8:	3301      	adds	r3, #1
 80020da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80020de:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 80020e2:	4813      	ldr	r0, [pc, #76]	; (8002130 <VectorD8+0x70>)
 80020e4:	f7ff f84c 	bl	8001180 <sd_lld_serve_interrupt>
 80020e8:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80020ec:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	dd14      	ble.n	800211e <VectorD8+0x5e>
 80020f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80020f8:	b98a      	cbnz	r2, 800211e <VectorD8+0x5e>
  oip->dbg.isr_cnt--;
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002100:	f382 8811 	msr	BASEPRI, r2
 8002104:	f385 8811 	msr	BASEPRI, r5
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <VectorD8+0x74>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002110:	d108      	bne.n	8002124 <VectorD8+0x64>
 8002112:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002116:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8002118:	4807      	ldr	r0, [pc, #28]	; (8002138 <VectorD8+0x78>)
 800211a:	f7fe fd59 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 800211e:	4807      	ldr	r0, [pc, #28]	; (800213c <VectorD8+0x7c>)
 8002120:	f7fe fd56 	bl	8000bd0 <chSysHalt>
 8002124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002128:	f7ff bdfa 	b.w	8001d20 <__port_irq_epilogue.part.0>
 800212c:	200009f0 	.word	0x200009f0
 8002130:	20000934 	.word	0x20000934
 8002134:	e000ed00 	.word	0xe000ed00
 8002138:	08004d50 	.word	0x08004d50
 800213c:	08004d58 	.word	0x08004d58

08002140 <VectorA8>:
/**
 * @brief   TIM1-TRG-COM, TIM11 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_TRGCO_TIM11_HANDLER) {
 8002140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002144:	2130      	movs	r1, #48	; 0x30
 8002146:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 800214a:	4c6c      	ldr	r4, [pc, #432]	; (80022fc <VectorA8+0x1bc>)
 800214c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002150:	2b00      	cmp	r3, #0
 8002152:	f2c0 80a0 	blt.w	8002296 <VectorA8+0x156>
 8002156:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800215a:	2a00      	cmp	r2, #0
 800215c:	f040 809b 	bne.w	8002296 <VectorA8+0x156>
  oip->dbg.isr_cnt++;
 8002160:	3301      	adds	r3, #1
 8002162:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002166:	f382 8811 	msr	BASEPRI, r2
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 800216a:	4d65      	ldr	r5, [pc, #404]	; (8002300 <VectorA8+0x1c0>)
 800216c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800216e:	68ea      	ldr	r2, [r5, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002174:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002176:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002178:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 800217a:	d41b      	bmi.n	80021b4 <VectorA8+0x74>
 800217c:	2230      	movs	r2, #48	; 0x30
 800217e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002182:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002186:	2b00      	cmp	r3, #0
 8002188:	f340 8082 	ble.w	8002290 <VectorA8+0x150>
 800218c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002190:	2900      	cmp	r1, #0
 8002192:	d17d      	bne.n	8002290 <VectorA8+0x150>
  oip->dbg.isr_cnt--;
 8002194:	3b01      	subs	r3, #1
 8002196:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800219a:	f381 8811 	msr	BASEPRI, r1
 800219e:	f382 8811 	msr	BASEPRI, r2
 80021a2:	4b58      	ldr	r3, [pc, #352]	; (8002304 <VectorA8+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80021aa:	d17a      	bne.n	80022a2 <VectorA8+0x162>
 80021ac:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 80021b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b4:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80021b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80021bc:	2b00      	cmp	r3, #0
 80021be:	dd6d      	ble.n	800229c <VectorA8+0x15c>
 80021c0:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
 80021c4:	f1ba 0f00 	cmp.w	sl, #0
 80021c8:	d168      	bne.n	800229c <VectorA8+0x15c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80021d0:	f104 0b10 	add.w	fp, r4, #16
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 80021d4:	46d0      	mov	r8, sl
 80021d6:	f04f 0930 	mov.w	r9, #48	; 0x30
  return (systime_t)STM32_ST_TIM->CNT;
 80021da:	6a68      	ldr	r0, [r5, #36]	; 0x24
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80021dc:	6926      	ldr	r6, [r4, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80021de:	8ba3      	ldrh	r3, [r4, #28]
    if (nowdelta < vtp->dlist.delta) {
 80021e0:	68b1      	ldr	r1, [r6, #8]
 80021e2:	b280      	uxth	r0, r0
 80021e4:	1ac2      	subs	r2, r0, r3
 80021e6:	b292      	uxth	r2, r2
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d361      	bcc.n	80022b0 <VectorA8+0x170>
  return systime + (systime_t)interval;
 80021ec:	440b      	add	r3, r1
 80021ee:	b29f      	uxth	r7, r3
  dlp->prev->next = dlp->next;
 80021f0:	e9d6 3200 	ldrd	r3, r2, [r6]
    vtlp->lasttime = lasttime;
 80021f4:	83a7      	strh	r7, [r4, #28]
 80021f6:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80021f8:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 80021fa:	f8c6 a000 	str.w	sl, [r6]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80021fe:	6923      	ldr	r3, [r4, #16]
 8002200:	455b      	cmp	r3, fp
  STM32_ST_TIM->DIER = 0U;
 8002202:	bf08      	it	eq
 8002204:	f8c5 a00c 	streq.w	sl, [r5, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002208:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800220c:	2b00      	cmp	r3, #0
 800220e:	dd4c      	ble.n	80022aa <VectorA8+0x16a>
 8002210:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002214:	2b00      	cmp	r3, #0
 8002216:	dd48      	ble.n	80022aa <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002218:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800221c:	f388 8811 	msr	BASEPRI, r8
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 8002220:	e9d6 3103 	ldrd	r3, r1, [r6, #12]
 8002224:	4630      	mov	r0, r6
 8002226:	4798      	blx	r3
 8002228:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800222c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002230:	2b00      	cmp	r3, #0
 8002232:	dd33      	ble.n	800229c <VectorA8+0x15c>
 8002234:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002238:	bb80      	cbnz	r0, 800229c <VectorA8+0x15c>

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 800223a:	6972      	ldr	r2, [r6, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 800223c:	2301      	movs	r3, #1
 800223e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002242:	2a00      	cmp	r2, #0
 8002244:	d0c9      	beq.n	80021da <VectorA8+0x9a>
  return (systime_t)STM32_ST_TIM->CNT;
 8002246:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002248:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 800224a:	1bcf      	subs	r7, r1, r7
 800224c:	b2bf      	uxth	r7, r7
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 800224e:	42ba      	cmp	r2, r7
 8002250:	d343      	bcc.n	80022da <VectorA8+0x19a>
  return (bool)(dlhp == dlhp->next);
 8002252:	f8d4 c010 	ldr.w	ip, [r4, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002256:	45dc      	cmp	ip, fp
 8002258:	d049      	beq.n	80022ee <VectorA8+0x1ae>
  while (likely(dlp->delta < delta)) {
 800225a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	d906      	bls.n	8002270 <VectorA8+0x130>
    dlp = dlp->next;
 8002262:	f8dc c000 	ldr.w	ip, [ip]
    delta -= dlp->delta;
 8002266:	1ad2      	subs	r2, r2, r3
  while (likely(dlp->delta < delta)) {
 8002268:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800226c:	4293      	cmp	r3, r2
 800226e:	d3f8      	bcc.n	8002262 <VectorA8+0x122>
  dlp->delta      = delta;
 8002270:	60b2      	str	r2, [r6, #8]
  dlp->delta -= delta;
 8002272:	f8dc 3008 	ldr.w	r3, [ip, #8]
  dlp->next       = dlhp;
 8002276:	f8c6 c000 	str.w	ip, [r6]
  dlp->delta -= delta;
 800227a:	1a9b      	subs	r3, r3, r2
  dlp->prev       = dlp->next->prev;
 800227c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8002280:	6072      	str	r2, [r6, #4]
  dlp->prev->next = dlp;
 8002282:	6016      	str	r6, [r2, #0]
  dlp->delta -= delta;
 8002284:	e9cc 6301 	strd	r6, r3, [ip, #4]
  dlhp->delta = (sysinterval_t)-1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	61a3      	str	r3, [r4, #24]
}
 800228e:	e7a2      	b.n	80021d6 <VectorA8+0x96>
    chSysHalt("SV#9");
 8002290:	481d      	ldr	r0, [pc, #116]	; (8002308 <VectorA8+0x1c8>)
 8002292:	f7fe fc9d 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#8");
 8002296:	481d      	ldr	r0, [pc, #116]	; (800230c <VectorA8+0x1cc>)
 8002298:	f7fe fc9a 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#6");
 800229c:	481c      	ldr	r0, [pc, #112]	; (8002310 <VectorA8+0x1d0>)
 800229e:	f7fe fc97 	bl	8000bd0 <chSysHalt>
 80022a2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a6:	f7ff bd3b 	b.w	8001d20 <__port_irq_epilogue.part.0>
    chSysHalt("SV#7");
 80022aa:	481a      	ldr	r0, [pc, #104]	; (8002314 <VectorA8+0x1d4>)
 80022ac:	f7fe fc90 	bl	8000bd0 <chSysHalt>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80022b0:	455e      	cmp	r6, fp
 80022b2:	d004      	beq.n	80022be <VectorA8+0x17e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 80022b4:	1a89      	subs	r1, r1, r2
  vtlp->lasttime += nowdelta;
 80022b6:	83a0      	strh	r0, [r4, #28]
  vtp->dlist.delta -= nowdelta;
 80022b8:	60b1      	str	r1, [r6, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 80022ba:	f7fe fd99 	bl	8000df0 <vt_set_alarm>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80022be:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	ddf1      	ble.n	80022aa <VectorA8+0x16a>
 80022c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	dded      	ble.n	80022aa <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80022d4:	f383 8811 	msr	BASEPRI, r3
}
 80022d8:	e750      	b.n	800217c <VectorA8+0x3c>
 80022da:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 80022dc:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80022e0:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80022e4:	45dc      	cmp	ip, fp
 80022e6:	6363      	str	r3, [r4, #52]	; 0x34
 80022e8:	d006      	beq.n	80022f8 <VectorA8+0x1b8>
 80022ea:	463a      	mov	r2, r7
 80022ec:	e7b5      	b.n	800225a <VectorA8+0x11a>
        delay = vtp->reload - nowdelta;
 80022ee:	1bd2      	subs	r2, r2, r7
        vt_insert_first(vtlp, vtp, now, delay);
 80022f0:	4630      	mov	r0, r6
 80022f2:	f7fe fed5 	bl	80010a0 <vt_insert_first.constprop.0>
        return;
 80022f6:	e7e2      	b.n	80022be <VectorA8+0x17e>
        delay = (sysinterval_t)0;
 80022f8:	4602      	mov	r2, r0
 80022fa:	e7f9      	b.n	80022f0 <VectorA8+0x1b0>
 80022fc:	200009f0 	.word	0x200009f0
 8002300:	40014800 	.word	0x40014800
 8002304:	e000ed00 	.word	0xe000ed00
 8002308:	08004d58 	.word	0x08004d58
 800230c:	08004d50 	.word	0x08004d50
 8002310:	08004d08 	.word	0x08004d08
 8002314:	08004d20 	.word	0x08004d20
	...

08002320 <Vector118>:
/**
 * @brief   TIM6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM6_HANDLER) {
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	2330      	movs	r3, #48	; 0x30
 8002324:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002328:	4c26      	ldr	r4, [pc, #152]	; (80023c4 <Vector118+0xa4>)
 800232a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800232e:	2b00      	cmp	r3, #0
 8002330:	db3d      	blt.n	80023ae <Vector118+0x8e>
 8002332:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002336:	2800      	cmp	r0, #0
 8002338:	d139      	bne.n	80023ae <Vector118+0x8e>
  oip->dbg.isr_cnt++;
 800233a:	3301      	adds	r3, #1
 800233c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002340:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8002344:	4d20      	ldr	r5, [pc, #128]	; (80023c8 <Vector118+0xa8>)
 8002346:	68ea      	ldr	r2, [r5, #12]
 8002348:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800234a:	68d1      	ldr	r1, [r2, #12]
 800234c:	400b      	ands	r3, r1
 800234e:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 8002350:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8002352:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8002354:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8002356:	d418      	bmi.n	800238a <Vector118+0x6a>
 8002358:	2230      	movs	r2, #48	; 0x30
 800235a:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800235e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002362:	2b00      	cmp	r3, #0
 8002364:	dd26      	ble.n	80023b4 <Vector118+0x94>
 8002366:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800236a:	bb19      	cbnz	r1, 80023b4 <Vector118+0x94>
  oip->dbg.isr_cnt--;
 800236c:	3b01      	subs	r3, #1
 800236e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002372:	f381 8811 	msr	BASEPRI, r1
 8002376:	f382 8811 	msr	BASEPRI, r2
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <Vector118+0xac>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002382:	d11a      	bne.n	80023ba <Vector118+0x9a>
 8002384:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002388:	bd38      	pop	{r3, r4, r5, pc}
    _gpt_isr_invoke_cb(gptp);
 800238a:	782b      	ldrb	r3, [r5, #0]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d107      	bne.n	80023a0 <Vector118+0x80>
 8002390:	2302      	movs	r3, #2
 8002392:	702b      	strb	r3, [r5, #0]
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 8002394:	6010      	str	r0, [r2, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8002396:	6110      	str	r0, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8002398:	68d3      	ldr	r3, [r2, #12]
 800239a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800239e:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 80023a0:	686b      	ldr	r3, [r5, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0d7      	beq.n	8002358 <Vector118+0x38>
 80023a8:	4807      	ldr	r0, [pc, #28]	; (80023c8 <Vector118+0xa8>)
 80023aa:	4798      	blx	r3
 80023ac:	e7d4      	b.n	8002358 <Vector118+0x38>
    chSysHalt("SV#8");
 80023ae:	4808      	ldr	r0, [pc, #32]	; (80023d0 <Vector118+0xb0>)
 80023b0:	f7fe fc0e 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <Vector118+0xb4>)
 80023b6:	f7fe fc0b 	bl	8000bd0 <chSysHalt>
 80023ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023be:	f7ff bcaf 	b.w	8001d20 <__port_irq_epilogue.part.0>
 80023c2:	bf00      	nop
 80023c4:	200009f0 	.word	0x200009f0
 80023c8:	2000086c 	.word	0x2000086c
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	08004d50 	.word	0x08004d50
 80023d4:	08004d58 	.word	0x08004d58
	...

080023e0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	2330      	movs	r3, #48	; 0x30
 80023e4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80023e8:	4c4b      	ldr	r4, [pc, #300]	; (8002518 <Vector88+0x138>)
 80023ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f2c0 8081 	blt.w	80024f6 <Vector88+0x116>
 80023f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d17c      	bne.n	80024f6 <Vector88+0x116>
  oip->dbg.isr_cnt++;
 80023fc:	3301      	adds	r3, #1
 80023fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002402:	f382 8811 	msr	BASEPRI, r2
  if (adcp->grpp != NULL) {
 8002406:	4d45      	ldr	r5, [pc, #276]	; (800251c <Vector88+0x13c>)
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8002408:	4b45      	ldr	r3, [pc, #276]	; (8002520 <Vector88+0x140>)
  if (adcp->grpp != NULL) {
 800240a:	6928      	ldr	r0, [r5, #16]
  sr = ADC1->SR;
 800240c:	6819      	ldr	r1, [r3, #0]
  ADC1->SR = 0;
 800240e:	601a      	str	r2, [r3, #0]
  if (adcp->grpp != NULL) {
 8002410:	2800      	cmp	r0, #0
 8002412:	d04a      	beq.n	80024aa <Vector88+0xca>
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 8002414:	068a      	lsls	r2, r1, #26
 8002416:	d461      	bmi.n	80024dc <Vector88+0xfc>
    if (sr & ADC_SR_AWD) {
 8002418:	07cb      	lsls	r3, r1, #31
 800241a:	d546      	bpl.n	80024aa <Vector88+0xca>
 800241c:	2104      	movs	r1, #4
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800241e:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	f023 031f 	bic.w	r3, r3, #31
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	f013 0301 	ands.w	r3, r3, #1
 8002430:	d1fb      	bne.n	800242a <Vector88+0x4a>
 8002432:	f897 c009 	ldrb.w	ip, [r7, #9]
      _adc_isr_error_code(adcp, emask);
 8002436:	6886      	ldr	r6, [r0, #8]
  adcp->adc->CR1 = 0;
 8002438:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800243a:	687f      	ldr	r7, [r7, #4]
 800243c:	203d      	movs	r0, #61	; 0x3d
 800243e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002442:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8002444:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8002446:	6893      	ldr	r3, [r2, #8]
 8002448:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800244c:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800244e:	2301      	movs	r3, #1
 8002450:	6093      	str	r3, [r2, #8]
      _adc_isr_error_code(adcp, emask);
 8002452:	2e00      	cmp	r6, #0
 8002454:	d055      	beq.n	8002502 <Vector88+0x122>
 8002456:	2305      	movs	r3, #5
 8002458:	702b      	strb	r3, [r5, #0]
 800245a:	4830      	ldr	r0, [pc, #192]	; (800251c <Vector88+0x13c>)
 800245c:	47b0      	blx	r6
 800245e:	782b      	ldrb	r3, [r5, #0]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d04e      	beq.n	8002502 <Vector88+0x122>
 8002464:	2330      	movs	r3, #48	; 0x30
 8002466:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800246a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800246e:	2b00      	cmp	r3, #0
 8002470:	dd4f      	ble.n	8002512 <Vector88+0x132>
 8002472:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d14b      	bne.n	8002512 <Vector88+0x132>
  if (*trp != NULL) {
 800247a:	6968      	ldr	r0, [r5, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 800247c:	2201      	movs	r2, #1
 800247e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8002482:	b168      	cbz	r0, 80024a0 <Vector88+0xc0>
    tp->u.rdymsg = msg;
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	6282      	str	r2, [r0, #40]	; 0x28
    *trp = NULL;
 800248a:	616b      	str	r3, [r5, #20]
    (void) chSchReadyI(tp);
 800248c:	f7fe fe50 	bl	8001130 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002490:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002494:	2b00      	cmp	r3, #0
 8002496:	dd39      	ble.n	800250c <Vector88+0x12c>
 8002498:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800249c:	2b00      	cmp	r3, #0
 800249e:	dd35      	ble.n	800250c <Vector88+0x12c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	2230      	movs	r2, #48	; 0x30
 80024ac:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80024b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dd21      	ble.n	80024fc <Vector88+0x11c>
 80024b8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80024bc:	b9f1      	cbnz	r1, 80024fc <Vector88+0x11c>
  oip->dbg.isr_cnt--;
 80024be:	3b01      	subs	r3, #1
 80024c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80024c4:	f381 8811 	msr	BASEPRI, r1
 80024c8:	f382 8811 	msr	BASEPRI, r2
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <Vector88+0x144>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80024d4:	d10b      	bne.n	80024ee <Vector88+0x10e>
 80024d6:	f383 8811 	msr	BASEPRI, r3
}
 80024da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 80024dc:	782b      	ldrb	r3, [r5, #0]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d19a      	bne.n	8002418 <Vector88+0x38>
      emask |= ADC_ERR_OVERFLOW;
 80024e2:	f011 0f01 	tst.w	r1, #1
 80024e6:	bf14      	ite	ne
 80024e8:	2106      	movne	r1, #6
 80024ea:	2102      	moveq	r1, #2
 80024ec:	e797      	b.n	800241e <Vector88+0x3e>
}
 80024ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80024f2:	f7ff bc15 	b.w	8001d20 <__port_irq_epilogue.part.0>
    chSysHalt("SV#8");
 80024f6:	480c      	ldr	r0, [pc, #48]	; (8002528 <Vector88+0x148>)
 80024f8:	f7fe fb6a 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <Vector88+0x14c>)
 80024fe:	f7fe fb67 	bl	8000bd0 <chSysHalt>
      _adc_isr_error_code(adcp, emask);
 8002502:	2202      	movs	r2, #2
 8002504:	2300      	movs	r3, #0
 8002506:	702a      	strb	r2, [r5, #0]
 8002508:	612b      	str	r3, [r5, #16]
 800250a:	e7ab      	b.n	8002464 <Vector88+0x84>
    chSysHalt("SV#7");
 800250c:	4808      	ldr	r0, [pc, #32]	; (8002530 <Vector88+0x150>)
 800250e:	f7fe fb5f 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#6");
 8002512:	4808      	ldr	r0, [pc, #32]	; (8002534 <Vector88+0x154>)
 8002514:	f7fe fb5c 	bl	8000bd0 <chSysHalt>
 8002518:	200009f0 	.word	0x200009f0
 800251c:	20000808 	.word	0x20000808
 8002520:	40012000 	.word	0x40012000
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	08004d50 	.word	0x08004d50
 800252c:	08004d58 	.word	0x08004d58
 8002530:	08004d20 	.word	0x08004d20
 8002534:	08004d08 	.word	0x08004d08
	...

08002540 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002540:	b510      	push	{r4, lr}
 8002542:	2330      	movs	r3, #48	; 0x30
 8002544:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002548:	4c1c      	ldr	r4, [pc, #112]	; (80025bc <Vector6C+0x7c>)
 800254a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800254e:	2b00      	cmp	r3, #0
 8002550:	db2a      	blt.n	80025a8 <Vector6C+0x68>
 8002552:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002556:	bb3a      	cbnz	r2, 80025a8 <Vector6C+0x68>
  oip->dbg.isr_cnt++;
 8002558:	3301      	adds	r3, #1
 800255a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800255e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <Vector6C+0x80>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 8002564:	4817      	ldr	r0, [pc, #92]	; (80025c4 <Vector6C+0x84>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002566:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8002568:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800256a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800256e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8002570:	b10a      	cbz	r2, 8002576 <Vector6C+0x36>
    dma.streams[0].func(dma.streams[0].param, flags);
 8002572:	6880      	ldr	r0, [r0, #8]
 8002574:	4790      	blx	r2
 8002576:	2230      	movs	r2, #48	; 0x30
 8002578:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800257c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002580:	2b00      	cmp	r3, #0
 8002582:	dd14      	ble.n	80025ae <Vector6C+0x6e>
 8002584:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002588:	b989      	cbnz	r1, 80025ae <Vector6C+0x6e>
  oip->dbg.isr_cnt--;
 800258a:	3b01      	subs	r3, #1
 800258c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002590:	f381 8811 	msr	BASEPRI, r1
 8002594:	f382 8811 	msr	BASEPRI, r2
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <Vector6C+0x88>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80025a0:	d108      	bne.n	80025b4 <Vector6C+0x74>
 80025a2:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80025a6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80025a8:	4808      	ldr	r0, [pc, #32]	; (80025cc <Vector6C+0x8c>)
 80025aa:	f7fe fb11 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <Vector6C+0x90>)
 80025b0:	f7fe fb0e 	bl	8000bd0 <chSysHalt>
 80025b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025b8:	f7ff bbb2 	b.w	8001d20 <__port_irq_epilogue.part.0>
 80025bc:	200009f0 	.word	0x200009f0
 80025c0:	40026000 	.word	0x40026000
 80025c4:	20000cf8 	.word	0x20000cf8
 80025c8:	e000ed00 	.word	0xe000ed00
 80025cc:	08004d50 	.word	0x08004d50
 80025d0:	08004d58 	.word	0x08004d58
	...

080025e0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80025e0:	b510      	push	{r4, lr}
 80025e2:	2330      	movs	r3, #48	; 0x30
 80025e4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80025e8:	4c1d      	ldr	r4, [pc, #116]	; (8002660 <Vector70+0x80>)
 80025ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db2c      	blt.n	800264c <Vector70+0x6c>
 80025f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80025f6:	bb4a      	cbnz	r2, 800264c <Vector70+0x6c>
  oip->dbg.isr_cnt++;
 80025f8:	3301      	adds	r3, #1
 80025fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80025fe:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <Vector70+0x84>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <Vector70+0x88>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	0989      	lsrs	r1, r1, #6
 800260a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800260e:	0188      	lsls	r0, r1, #6
 8002610:	6098      	str	r0, [r3, #8]
  if (dma.streams[1].func)
 8002612:	68d3      	ldr	r3, [r2, #12]
 8002614:	b10b      	cbz	r3, 800261a <Vector70+0x3a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8002616:	6910      	ldr	r0, [r2, #16]
 8002618:	4798      	blx	r3
 800261a:	2230      	movs	r2, #48	; 0x30
 800261c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002620:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002624:	2b00      	cmp	r3, #0
 8002626:	dd14      	ble.n	8002652 <Vector70+0x72>
 8002628:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800262c:	b989      	cbnz	r1, 8002652 <Vector70+0x72>
  oip->dbg.isr_cnt--;
 800262e:	3b01      	subs	r3, #1
 8002630:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002634:	f381 8811 	msr	BASEPRI, r1
 8002638:	f382 8811 	msr	BASEPRI, r2
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <Vector70+0x8c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002644:	d108      	bne.n	8002658 <Vector70+0x78>
 8002646:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800264a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800264c:	4808      	ldr	r0, [pc, #32]	; (8002670 <Vector70+0x90>)
 800264e:	f7fe fabf 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002652:	4808      	ldr	r0, [pc, #32]	; (8002674 <Vector70+0x94>)
 8002654:	f7fe fabc 	bl	8000bd0 <chSysHalt>
 8002658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800265c:	f7ff bb60 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002660:	200009f0 	.word	0x200009f0
 8002664:	40026000 	.word	0x40026000
 8002668:	20000cf8 	.word	0x20000cf8
 800266c:	e000ed00 	.word	0xe000ed00
 8002670:	08004d50 	.word	0x08004d50
 8002674:	08004d58 	.word	0x08004d58
	...

08002680 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002680:	b510      	push	{r4, lr}
 8002682:	2330      	movs	r3, #48	; 0x30
 8002684:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002688:	4c1d      	ldr	r4, [pc, #116]	; (8002700 <Vector74+0x80>)
 800268a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800268e:	2b00      	cmp	r3, #0
 8002690:	db2c      	blt.n	80026ec <Vector74+0x6c>
 8002692:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002696:	bb4a      	cbnz	r2, 80026ec <Vector74+0x6c>
  oip->dbg.isr_cnt++;
 8002698:	3301      	adds	r3, #1
 800269a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800269e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <Vector74+0x84>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <Vector74+0x88>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	0c09      	lsrs	r1, r1, #16
 80026aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 80026ae:	0408      	lsls	r0, r1, #16
 80026b0:	6098      	str	r0, [r3, #8]
  if (dma.streams[2].func)
 80026b2:	6953      	ldr	r3, [r2, #20]
 80026b4:	b10b      	cbz	r3, 80026ba <Vector74+0x3a>
    dma.streams[2].func(dma.streams[2].param, flags);
 80026b6:	6990      	ldr	r0, [r2, #24]
 80026b8:	4798      	blx	r3
 80026ba:	2230      	movs	r2, #48	; 0x30
 80026bc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80026c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	dd14      	ble.n	80026f2 <Vector74+0x72>
 80026c8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80026cc:	b989      	cbnz	r1, 80026f2 <Vector74+0x72>
  oip->dbg.isr_cnt--;
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80026d4:	f381 8811 	msr	BASEPRI, r1
 80026d8:	f382 8811 	msr	BASEPRI, r2
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <Vector74+0x8c>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80026e4:	d108      	bne.n	80026f8 <Vector74+0x78>
 80026e6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80026ea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <Vector74+0x90>)
 80026ee:	f7fe fa6f 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80026f2:	4808      	ldr	r0, [pc, #32]	; (8002714 <Vector74+0x94>)
 80026f4:	f7fe fa6c 	bl	8000bd0 <chSysHalt>
 80026f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fc:	f7ff bb10 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002700:	200009f0 	.word	0x200009f0
 8002704:	40026000 	.word	0x40026000
 8002708:	20000cf8 	.word	0x20000cf8
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	08004d50 	.word	0x08004d50
 8002714:	08004d58 	.word	0x08004d58
	...

08002720 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002720:	b510      	push	{r4, lr}
 8002722:	2330      	movs	r3, #48	; 0x30
 8002724:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002728:	4c1d      	ldr	r4, [pc, #116]	; (80027a0 <Vector78+0x80>)
 800272a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800272e:	2b00      	cmp	r3, #0
 8002730:	db2c      	blt.n	800278c <Vector78+0x6c>
 8002732:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002736:	bb4a      	cbnz	r2, 800278c <Vector78+0x6c>
  oip->dbg.isr_cnt++;
 8002738:	3301      	adds	r3, #1
 800273a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800273e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <Vector78+0x84>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 8002744:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <Vector78+0x88>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	0d89      	lsrs	r1, r1, #22
 800274a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 800274e:	0588      	lsls	r0, r1, #22
 8002750:	6098      	str	r0, [r3, #8]
  if (dma.streams[3].func)
 8002752:	69d3      	ldr	r3, [r2, #28]
 8002754:	b10b      	cbz	r3, 800275a <Vector78+0x3a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8002756:	6a10      	ldr	r0, [r2, #32]
 8002758:	4798      	blx	r3
 800275a:	2230      	movs	r2, #48	; 0x30
 800275c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002760:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002764:	2b00      	cmp	r3, #0
 8002766:	dd14      	ble.n	8002792 <Vector78+0x72>
 8002768:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800276c:	b989      	cbnz	r1, 8002792 <Vector78+0x72>
  oip->dbg.isr_cnt--;
 800276e:	3b01      	subs	r3, #1
 8002770:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002774:	f381 8811 	msr	BASEPRI, r1
 8002778:	f382 8811 	msr	BASEPRI, r2
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <Vector78+0x8c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002784:	d108      	bne.n	8002798 <Vector78+0x78>
 8002786:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800278a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800278c:	4808      	ldr	r0, [pc, #32]	; (80027b0 <Vector78+0x90>)
 800278e:	f7fe fa1f 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002792:	4808      	ldr	r0, [pc, #32]	; (80027b4 <Vector78+0x94>)
 8002794:	f7fe fa1c 	bl	8000bd0 <chSysHalt>
 8002798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800279c:	f7ff bac0 	b.w	8001d20 <__port_irq_epilogue.part.0>
 80027a0:	200009f0 	.word	0x200009f0
 80027a4:	40026000 	.word	0x40026000
 80027a8:	20000cf8 	.word	0x20000cf8
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	08004d50 	.word	0x08004d50
 80027b4:	08004d58 	.word	0x08004d58
	...

080027c0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80027c0:	b510      	push	{r4, lr}
 80027c2:	2330      	movs	r3, #48	; 0x30
 80027c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80027c8:	4c1c      	ldr	r4, [pc, #112]	; (800283c <Vector7C+0x7c>)
 80027ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db2a      	blt.n	8002828 <Vector7C+0x68>
 80027d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80027d6:	bb3a      	cbnz	r2, 8002828 <Vector7C+0x68>
  oip->dbg.isr_cnt++;
 80027d8:	3301      	adds	r3, #1
 80027da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80027de:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <Vector7C+0x80>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 80027e4:	4817      	ldr	r0, [pc, #92]	; (8002844 <Vector7C+0x84>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80027e6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80027e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80027ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80027ee:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80027f0:	b10a      	cbz	r2, 80027f6 <Vector7C+0x36>
    dma.streams[4].func(dma.streams[4].param, flags);
 80027f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80027f4:	4790      	blx	r2
 80027f6:	2230      	movs	r2, #48	; 0x30
 80027f8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80027fc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002800:	2b00      	cmp	r3, #0
 8002802:	dd14      	ble.n	800282e <Vector7C+0x6e>
 8002804:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002808:	b989      	cbnz	r1, 800282e <Vector7C+0x6e>
  oip->dbg.isr_cnt--;
 800280a:	3b01      	subs	r3, #1
 800280c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002810:	f381 8811 	msr	BASEPRI, r1
 8002814:	f382 8811 	msr	BASEPRI, r2
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <Vector7C+0x88>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002820:	d108      	bne.n	8002834 <Vector7C+0x74>
 8002822:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002826:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002828:	4808      	ldr	r0, [pc, #32]	; (800284c <Vector7C+0x8c>)
 800282a:	f7fe f9d1 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 800282e:	4808      	ldr	r0, [pc, #32]	; (8002850 <Vector7C+0x90>)
 8002830:	f7fe f9ce 	bl	8000bd0 <chSysHalt>
 8002834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002838:	f7ff ba72 	b.w	8001d20 <__port_irq_epilogue.part.0>
 800283c:	200009f0 	.word	0x200009f0
 8002840:	40026000 	.word	0x40026000
 8002844:	20000cf8 	.word	0x20000cf8
 8002848:	e000ed00 	.word	0xe000ed00
 800284c:	08004d50 	.word	0x08004d50
 8002850:	08004d58 	.word	0x08004d58
	...

08002860 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002860:	b510      	push	{r4, lr}
 8002862:	2330      	movs	r3, #48	; 0x30
 8002864:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002868:	4c1d      	ldr	r4, [pc, #116]	; (80028e0 <Vector80+0x80>)
 800286a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800286e:	2b00      	cmp	r3, #0
 8002870:	db2c      	blt.n	80028cc <Vector80+0x6c>
 8002872:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002876:	bb4a      	cbnz	r2, 80028cc <Vector80+0x6c>
  oip->dbg.isr_cnt++;
 8002878:	3301      	adds	r3, #1
 800287a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800287e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <Vector80+0x84>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <Vector80+0x88>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	0989      	lsrs	r1, r1, #6
 800288a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800288e:	0188      	lsls	r0, r1, #6
 8002890:	60d8      	str	r0, [r3, #12]
  if (dma.streams[5].func)
 8002892:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002894:	b10b      	cbz	r3, 800289a <Vector80+0x3a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8002896:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002898:	4798      	blx	r3
 800289a:	2230      	movs	r2, #48	; 0x30
 800289c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80028a0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	dd14      	ble.n	80028d2 <Vector80+0x72>
 80028a8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80028ac:	b989      	cbnz	r1, 80028d2 <Vector80+0x72>
  oip->dbg.isr_cnt--;
 80028ae:	3b01      	subs	r3, #1
 80028b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80028b4:	f381 8811 	msr	BASEPRI, r1
 80028b8:	f382 8811 	msr	BASEPRI, r2
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <Vector80+0x8c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80028c4:	d108      	bne.n	80028d8 <Vector80+0x78>
 80028c6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80028ca:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80028cc:	4808      	ldr	r0, [pc, #32]	; (80028f0 <Vector80+0x90>)
 80028ce:	f7fe f97f 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80028d2:	4808      	ldr	r0, [pc, #32]	; (80028f4 <Vector80+0x94>)
 80028d4:	f7fe f97c 	bl	8000bd0 <chSysHalt>
 80028d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028dc:	f7ff ba20 	b.w	8001d20 <__port_irq_epilogue.part.0>
 80028e0:	200009f0 	.word	0x200009f0
 80028e4:	40026000 	.word	0x40026000
 80028e8:	20000cf8 	.word	0x20000cf8
 80028ec:	e000ed00 	.word	0xe000ed00
 80028f0:	08004d50 	.word	0x08004d50
 80028f4:	08004d58 	.word	0x08004d58
	...

08002900 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002900:	b510      	push	{r4, lr}
 8002902:	2330      	movs	r3, #48	; 0x30
 8002904:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002908:	4c1d      	ldr	r4, [pc, #116]	; (8002980 <Vector84+0x80>)
 800290a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800290e:	2b00      	cmp	r3, #0
 8002910:	db2c      	blt.n	800296c <Vector84+0x6c>
 8002912:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002916:	bb4a      	cbnz	r2, 800296c <Vector84+0x6c>
  oip->dbg.isr_cnt++;
 8002918:	3301      	adds	r3, #1
 800291a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800291e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002922:	4b18      	ldr	r3, [pc, #96]	; (8002984 <Vector84+0x84>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <Vector84+0x88>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	0c09      	lsrs	r1, r1, #16
 800292a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800292e:	0408      	lsls	r0, r1, #16
 8002930:	60d8      	str	r0, [r3, #12]
  if (dma.streams[6].func)
 8002932:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002934:	b10b      	cbz	r3, 800293a <Vector84+0x3a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8002936:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002938:	4798      	blx	r3
 800293a:	2230      	movs	r2, #48	; 0x30
 800293c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002940:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002944:	2b00      	cmp	r3, #0
 8002946:	dd14      	ble.n	8002972 <Vector84+0x72>
 8002948:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800294c:	b989      	cbnz	r1, 8002972 <Vector84+0x72>
  oip->dbg.isr_cnt--;
 800294e:	3b01      	subs	r3, #1
 8002950:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002954:	f381 8811 	msr	BASEPRI, r1
 8002958:	f382 8811 	msr	BASEPRI, r2
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <Vector84+0x8c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002964:	d108      	bne.n	8002978 <Vector84+0x78>
 8002966:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800296a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800296c:	4808      	ldr	r0, [pc, #32]	; (8002990 <Vector84+0x90>)
 800296e:	f7fe f92f 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002972:	4808      	ldr	r0, [pc, #32]	; (8002994 <Vector84+0x94>)
 8002974:	f7fe f92c 	bl	8000bd0 <chSysHalt>
 8002978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800297c:	f7ff b9d0 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002980:	200009f0 	.word	0x200009f0
 8002984:	40026000 	.word	0x40026000
 8002988:	20000cf8 	.word	0x20000cf8
 800298c:	e000ed00 	.word	0xe000ed00
 8002990:	08004d50 	.word	0x08004d50
 8002994:	08004d58 	.word	0x08004d58
	...

080029a0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80029a0:	b510      	push	{r4, lr}
 80029a2:	2330      	movs	r3, #48	; 0x30
 80029a4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80029a8:	4c1d      	ldr	r4, [pc, #116]	; (8002a20 <VectorFC+0x80>)
 80029aa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db2c      	blt.n	8002a0c <VectorFC+0x6c>
 80029b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80029b6:	bb4a      	cbnz	r2, 8002a0c <VectorFC+0x6c>
  oip->dbg.isr_cnt++;
 80029b8:	3301      	adds	r3, #1
 80029ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80029be:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <VectorFC+0x84>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <VectorFC+0x88>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	0d89      	lsrs	r1, r1, #22
 80029ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80029ce:	0588      	lsls	r0, r1, #22
 80029d0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[7].func)
 80029d2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80029d4:	b10b      	cbz	r3, 80029da <VectorFC+0x3a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80029d6:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80029d8:	4798      	blx	r3
 80029da:	2230      	movs	r2, #48	; 0x30
 80029dc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80029e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	dd14      	ble.n	8002a12 <VectorFC+0x72>
 80029e8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80029ec:	b989      	cbnz	r1, 8002a12 <VectorFC+0x72>
  oip->dbg.isr_cnt--;
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80029f4:	f381 8811 	msr	BASEPRI, r1
 80029f8:	f382 8811 	msr	BASEPRI, r2
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <VectorFC+0x8c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002a04:	d108      	bne.n	8002a18 <VectorFC+0x78>
 8002a06:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002a0a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002a0c:	4808      	ldr	r0, [pc, #32]	; (8002a30 <VectorFC+0x90>)
 8002a0e:	f7fe f8df 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002a12:	4808      	ldr	r0, [pc, #32]	; (8002a34 <VectorFC+0x94>)
 8002a14:	f7fe f8dc 	bl	8000bd0 <chSysHalt>
 8002a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a1c:	f7ff b980 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002a20:	200009f0 	.word	0x200009f0
 8002a24:	40026000 	.word	0x40026000
 8002a28:	20000cf8 	.word	0x20000cf8
 8002a2c:	e000ed00 	.word	0xe000ed00
 8002a30:	08004d50 	.word	0x08004d50
 8002a34:	08004d58 	.word	0x08004d58
	...

08002a40 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002a40:	b510      	push	{r4, lr}
 8002a42:	2330      	movs	r3, #48	; 0x30
 8002a44:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002a48:	4c1c      	ldr	r4, [pc, #112]	; (8002abc <Vector120+0x7c>)
 8002a4a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db2a      	blt.n	8002aa8 <Vector120+0x68>
 8002a52:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002a56:	bb3a      	cbnz	r2, 8002aa8 <Vector120+0x68>
  oip->dbg.isr_cnt++;
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002a5e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <Vector120+0x80>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 8002a64:	4817      	ldr	r0, [pc, #92]	; (8002ac4 <Vector120+0x84>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002a66:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8002a68:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002a6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002a6e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8002a70:	b10a      	cbz	r2, 8002a76 <Vector120+0x36>
    dma.streams[8].func(dma.streams[8].param, flags);
 8002a72:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002a74:	4790      	blx	r2
 8002a76:	2230      	movs	r2, #48	; 0x30
 8002a78:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002a7c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	dd14      	ble.n	8002aae <Vector120+0x6e>
 8002a84:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002a88:	b989      	cbnz	r1, 8002aae <Vector120+0x6e>
  oip->dbg.isr_cnt--;
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002a90:	f381 8811 	msr	BASEPRI, r1
 8002a94:	f382 8811 	msr	BASEPRI, r2
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <Vector120+0x88>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002aa0:	d108      	bne.n	8002ab4 <Vector120+0x74>
 8002aa2:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002aa6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002aa8:	4808      	ldr	r0, [pc, #32]	; (8002acc <Vector120+0x8c>)
 8002aaa:	f7fe f891 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002aae:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <Vector120+0x90>)
 8002ab0:	f7fe f88e 	bl	8000bd0 <chSysHalt>
 8002ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ab8:	f7ff b932 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002abc:	200009f0 	.word	0x200009f0
 8002ac0:	40026400 	.word	0x40026400
 8002ac4:	20000cf8 	.word	0x20000cf8
 8002ac8:	e000ed00 	.word	0xe000ed00
 8002acc:	08004d50 	.word	0x08004d50
 8002ad0:	08004d58 	.word	0x08004d58
	...

08002ae0 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	2330      	movs	r3, #48	; 0x30
 8002ae4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002ae8:	4c1d      	ldr	r4, [pc, #116]	; (8002b60 <Vector124+0x80>)
 8002aea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db2c      	blt.n	8002b4c <Vector124+0x6c>
 8002af2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002af6:	bb4a      	cbnz	r2, 8002b4c <Vector124+0x6c>
  oip->dbg.isr_cnt++;
 8002af8:	3301      	adds	r3, #1
 8002afa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002afe:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <Vector124+0x84>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 8002b04:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <Vector124+0x88>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	0989      	lsrs	r1, r1, #6
 8002b0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8002b0e:	0188      	lsls	r0, r1, #6
 8002b10:	6098      	str	r0, [r3, #8]
  if (dma.streams[9].func)
 8002b12:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002b14:	b10b      	cbz	r3, 8002b1a <Vector124+0x3a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8002b16:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8002b18:	4798      	blx	r3
 8002b1a:	2230      	movs	r2, #48	; 0x30
 8002b1c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002b20:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	dd14      	ble.n	8002b52 <Vector124+0x72>
 8002b28:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002b2c:	b989      	cbnz	r1, 8002b52 <Vector124+0x72>
  oip->dbg.isr_cnt--;
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002b34:	f381 8811 	msr	BASEPRI, r1
 8002b38:	f382 8811 	msr	BASEPRI, r2
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <Vector124+0x8c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002b44:	d108      	bne.n	8002b58 <Vector124+0x78>
 8002b46:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002b4a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002b4c:	4808      	ldr	r0, [pc, #32]	; (8002b70 <Vector124+0x90>)
 8002b4e:	f7fe f83f 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002b52:	4808      	ldr	r0, [pc, #32]	; (8002b74 <Vector124+0x94>)
 8002b54:	f7fe f83c 	bl	8000bd0 <chSysHalt>
 8002b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b5c:	f7ff b8e0 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002b60:	200009f0 	.word	0x200009f0
 8002b64:	40026400 	.word	0x40026400
 8002b68:	20000cf8 	.word	0x20000cf8
 8002b6c:	e000ed00 	.word	0xe000ed00
 8002b70:	08004d50 	.word	0x08004d50
 8002b74:	08004d58 	.word	0x08004d58
	...

08002b80 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002b80:	b510      	push	{r4, lr}
 8002b82:	2330      	movs	r3, #48	; 0x30
 8002b84:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002b88:	4c1d      	ldr	r4, [pc, #116]	; (8002c00 <Vector128+0x80>)
 8002b8a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db2c      	blt.n	8002bec <Vector128+0x6c>
 8002b92:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002b96:	bb4a      	cbnz	r2, 8002bec <Vector128+0x6c>
  oip->dbg.isr_cnt++;
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002b9e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <Vector128+0x84>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <Vector128+0x88>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	0c09      	lsrs	r1, r1, #16
 8002baa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8002bae:	0408      	lsls	r0, r1, #16
 8002bb0:	6098      	str	r0, [r3, #8]
  if (dma.streams[10].func)
 8002bb2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002bb4:	b10b      	cbz	r3, 8002bba <Vector128+0x3a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8002bb6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8002bb8:	4798      	blx	r3
 8002bba:	2230      	movs	r2, #48	; 0x30
 8002bbc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002bc0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	dd14      	ble.n	8002bf2 <Vector128+0x72>
 8002bc8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002bcc:	b989      	cbnz	r1, 8002bf2 <Vector128+0x72>
  oip->dbg.isr_cnt--;
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002bd4:	f381 8811 	msr	BASEPRI, r1
 8002bd8:	f382 8811 	msr	BASEPRI, r2
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <Vector128+0x8c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002be4:	d108      	bne.n	8002bf8 <Vector128+0x78>
 8002be6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002bea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002bec:	4808      	ldr	r0, [pc, #32]	; (8002c10 <Vector128+0x90>)
 8002bee:	f7fd ffef 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002bf2:	4808      	ldr	r0, [pc, #32]	; (8002c14 <Vector128+0x94>)
 8002bf4:	f7fd ffec 	bl	8000bd0 <chSysHalt>
 8002bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bfc:	f7ff b890 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002c00:	200009f0 	.word	0x200009f0
 8002c04:	40026400 	.word	0x40026400
 8002c08:	20000cf8 	.word	0x20000cf8
 8002c0c:	e000ed00 	.word	0xe000ed00
 8002c10:	08004d50 	.word	0x08004d50
 8002c14:	08004d58 	.word	0x08004d58
	...

08002c20 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002c20:	b510      	push	{r4, lr}
 8002c22:	2330      	movs	r3, #48	; 0x30
 8002c24:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002c28:	4c1d      	ldr	r4, [pc, #116]	; (8002ca0 <Vector12C+0x80>)
 8002c2a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db2c      	blt.n	8002c8c <Vector12C+0x6c>
 8002c32:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002c36:	bb4a      	cbnz	r2, 8002c8c <Vector12C+0x6c>
  oip->dbg.isr_cnt++;
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002c3e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <Vector12C+0x84>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <Vector12C+0x88>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	0d89      	lsrs	r1, r1, #22
 8002c4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8002c4e:	0588      	lsls	r0, r1, #22
 8002c50:	6098      	str	r0, [r3, #8]
  if (dma.streams[11].func)
 8002c52:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002c54:	b10b      	cbz	r3, 8002c5a <Vector12C+0x3a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8002c56:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002c58:	4798      	blx	r3
 8002c5a:	2230      	movs	r2, #48	; 0x30
 8002c5c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002c60:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	dd14      	ble.n	8002c92 <Vector12C+0x72>
 8002c68:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002c6c:	b989      	cbnz	r1, 8002c92 <Vector12C+0x72>
  oip->dbg.isr_cnt--;
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002c74:	f381 8811 	msr	BASEPRI, r1
 8002c78:	f382 8811 	msr	BASEPRI, r2
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <Vector12C+0x8c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002c84:	d108      	bne.n	8002c98 <Vector12C+0x78>
 8002c86:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002c8a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002c8c:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <Vector12C+0x90>)
 8002c8e:	f7fd ff9f 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002c92:	4808      	ldr	r0, [pc, #32]	; (8002cb4 <Vector12C+0x94>)
 8002c94:	f7fd ff9c 	bl	8000bd0 <chSysHalt>
 8002c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c9c:	f7ff b840 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002ca0:	200009f0 	.word	0x200009f0
 8002ca4:	40026400 	.word	0x40026400
 8002ca8:	20000cf8 	.word	0x20000cf8
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	08004d50 	.word	0x08004d50
 8002cb4:	08004d58 	.word	0x08004d58
	...

08002cc0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	2330      	movs	r3, #48	; 0x30
 8002cc4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002cc8:	4c1c      	ldr	r4, [pc, #112]	; (8002d3c <Vector130+0x7c>)
 8002cca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db2a      	blt.n	8002d28 <Vector130+0x68>
 8002cd2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002cd6:	bb3a      	cbnz	r2, 8002d28 <Vector130+0x68>
  oip->dbg.isr_cnt++;
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002cde:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <Vector130+0x80>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 8002ce4:	4817      	ldr	r0, [pc, #92]	; (8002d44 <Vector130+0x84>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ce6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8002ce8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002cea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002cee:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8002cf0:	b10a      	cbz	r2, 8002cf6 <Vector130+0x36>
    dma.streams[12].func(dma.streams[12].param, flags);
 8002cf2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002cf4:	4790      	blx	r2
 8002cf6:	2230      	movs	r2, #48	; 0x30
 8002cf8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002cfc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dd14      	ble.n	8002d2e <Vector130+0x6e>
 8002d04:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002d08:	b989      	cbnz	r1, 8002d2e <Vector130+0x6e>
  oip->dbg.isr_cnt--;
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002d10:	f381 8811 	msr	BASEPRI, r1
 8002d14:	f382 8811 	msr	BASEPRI, r2
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <Vector130+0x88>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002d20:	d108      	bne.n	8002d34 <Vector130+0x74>
 8002d22:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002d26:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002d28:	4808      	ldr	r0, [pc, #32]	; (8002d4c <Vector130+0x8c>)
 8002d2a:	f7fd ff51 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002d2e:	4808      	ldr	r0, [pc, #32]	; (8002d50 <Vector130+0x90>)
 8002d30:	f7fd ff4e 	bl	8000bd0 <chSysHalt>
 8002d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d38:	f7fe bff2 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002d3c:	200009f0 	.word	0x200009f0
 8002d40:	40026400 	.word	0x40026400
 8002d44:	20000cf8 	.word	0x20000cf8
 8002d48:	e000ed00 	.word	0xe000ed00
 8002d4c:	08004d50 	.word	0x08004d50
 8002d50:	08004d58 	.word	0x08004d58
	...

08002d60 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002d60:	b510      	push	{r4, lr}
 8002d62:	2330      	movs	r3, #48	; 0x30
 8002d64:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002d68:	4c1d      	ldr	r4, [pc, #116]	; (8002de0 <Vector150+0x80>)
 8002d6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db2c      	blt.n	8002dcc <Vector150+0x6c>
 8002d72:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002d76:	bb4a      	cbnz	r2, 8002dcc <Vector150+0x6c>
  oip->dbg.isr_cnt++;
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002d7e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <Vector150+0x84>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <Vector150+0x88>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	0989      	lsrs	r1, r1, #6
 8002d8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8002d8e:	0188      	lsls	r0, r1, #6
 8002d90:	60d8      	str	r0, [r3, #12]
  if (dma.streams[13].func)
 8002d92:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8002d94:	b10b      	cbz	r3, 8002d9a <Vector150+0x3a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8002d96:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8002d98:	4798      	blx	r3
 8002d9a:	2230      	movs	r2, #48	; 0x30
 8002d9c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002da0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	dd14      	ble.n	8002dd2 <Vector150+0x72>
 8002da8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002dac:	b989      	cbnz	r1, 8002dd2 <Vector150+0x72>
  oip->dbg.isr_cnt--;
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002db4:	f381 8811 	msr	BASEPRI, r1
 8002db8:	f382 8811 	msr	BASEPRI, r2
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <Vector150+0x8c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002dc4:	d108      	bne.n	8002dd8 <Vector150+0x78>
 8002dc6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002dca:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002dcc:	4808      	ldr	r0, [pc, #32]	; (8002df0 <Vector150+0x90>)
 8002dce:	f7fd feff 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002dd2:	4808      	ldr	r0, [pc, #32]	; (8002df4 <Vector150+0x94>)
 8002dd4:	f7fd fefc 	bl	8000bd0 <chSysHalt>
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ddc:	f7fe bfa0 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002de0:	200009f0 	.word	0x200009f0
 8002de4:	40026400 	.word	0x40026400
 8002de8:	20000cf8 	.word	0x20000cf8
 8002dec:	e000ed00 	.word	0xe000ed00
 8002df0:	08004d50 	.word	0x08004d50
 8002df4:	08004d58 	.word	0x08004d58
	...

08002e00 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002e00:	b510      	push	{r4, lr}
 8002e02:	2330      	movs	r3, #48	; 0x30
 8002e04:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002e08:	4c1d      	ldr	r4, [pc, #116]	; (8002e80 <Vector154+0x80>)
 8002e0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db2c      	blt.n	8002e6c <Vector154+0x6c>
 8002e12:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002e16:	bb4a      	cbnz	r2, 8002e6c <Vector154+0x6c>
  oip->dbg.isr_cnt++;
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002e1e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <Vector154+0x84>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <Vector154+0x88>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	0c09      	lsrs	r1, r1, #16
 8002e2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8002e2e:	0408      	lsls	r0, r1, #16
 8002e30:	60d8      	str	r0, [r3, #12]
  if (dma.streams[14].func)
 8002e32:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002e34:	b10b      	cbz	r3, 8002e3a <Vector154+0x3a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8002e36:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8002e38:	4798      	blx	r3
 8002e3a:	2230      	movs	r2, #48	; 0x30
 8002e3c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002e40:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	dd14      	ble.n	8002e72 <Vector154+0x72>
 8002e48:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002e4c:	b989      	cbnz	r1, 8002e72 <Vector154+0x72>
  oip->dbg.isr_cnt--;
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002e54:	f381 8811 	msr	BASEPRI, r1
 8002e58:	f382 8811 	msr	BASEPRI, r2
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <Vector154+0x8c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002e64:	d108      	bne.n	8002e78 <Vector154+0x78>
 8002e66:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002e6a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002e6c:	4808      	ldr	r0, [pc, #32]	; (8002e90 <Vector154+0x90>)
 8002e6e:	f7fd feaf 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002e72:	4808      	ldr	r0, [pc, #32]	; (8002e94 <Vector154+0x94>)
 8002e74:	f7fd feac 	bl	8000bd0 <chSysHalt>
 8002e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7c:	f7fe bf50 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002e80:	200009f0 	.word	0x200009f0
 8002e84:	40026400 	.word	0x40026400
 8002e88:	20000cf8 	.word	0x20000cf8
 8002e8c:	e000ed00 	.word	0xe000ed00
 8002e90:	08004d50 	.word	0x08004d50
 8002e94:	08004d58 	.word	0x08004d58
	...

08002ea0 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	2330      	movs	r3, #48	; 0x30
 8002ea4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002ea8:	4c1e      	ldr	r4, [pc, #120]	; (8002f24 <Vector158+0x84>)
 8002eaa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db2d      	blt.n	8002f0e <Vector158+0x6e>
 8002eb2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002eb6:	bb52      	cbnz	r2, 8002f0e <Vector158+0x6e>
  oip->dbg.isr_cnt++;
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002ebe:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <Vector158+0x88>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <Vector158+0x8c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	0d89      	lsrs	r1, r1, #22
 8002eca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8002ece:	0588      	lsls	r0, r1, #22
 8002ed0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[15].func)
 8002ed2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8002ed4:	b113      	cbz	r3, 8002edc <Vector158+0x3c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8002ed6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8002eda:	4798      	blx	r3
 8002edc:	2230      	movs	r2, #48	; 0x30
 8002ede:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002ee2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	dd14      	ble.n	8002f14 <Vector158+0x74>
 8002eea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002eee:	b989      	cbnz	r1, 8002f14 <Vector158+0x74>
  oip->dbg.isr_cnt--;
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002ef6:	f381 8811 	msr	BASEPRI, r1
 8002efa:	f382 8811 	msr	BASEPRI, r2
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <Vector158+0x90>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002f06:	d108      	bne.n	8002f1a <Vector158+0x7a>
 8002f08:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002f0c:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002f0e:	4809      	ldr	r0, [pc, #36]	; (8002f34 <Vector158+0x94>)
 8002f10:	f7fd fe5e 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002f14:	4808      	ldr	r0, [pc, #32]	; (8002f38 <Vector158+0x98>)
 8002f16:	f7fd fe5b 	bl	8000bd0 <chSysHalt>
 8002f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f1e:	f7fe beff 	b.w	8001d20 <__port_irq_epilogue.part.0>
 8002f22:	bf00      	nop
 8002f24:	200009f0 	.word	0x200009f0
 8002f28:	40026400 	.word	0x40026400
 8002f2c:	20000cf8 	.word	0x20000cf8
 8002f30:	e000ed00 	.word	0xe000ed00
 8002f34:	08004d50 	.word	0x08004d50
 8002f38:	08004d58 	.word	0x08004d58
 8002f3c:	00000000 	.word	0x00000000

08002f40 <VectorC4>:
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	2130      	movs	r1, #48	; 0x30
 8002f44:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002f48:	4c7d      	ldr	r4, [pc, #500]	; (8003140 <VectorC4+0x200>)
 8002f4a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f2c0 80e5 	blt.w	800311e <VectorC4+0x1de>
 8002f54:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	f040 80e0 	bne.w	800311e <VectorC4+0x1de>
  oip->dbg.isr_cnt++;
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002f64:	f382 8811 	msr	BASEPRI, r2
  I2C_TypeDef *dp = i2cp->i2c;
 8002f68:	4a76      	ldr	r2, [pc, #472]	; (8003144 <VectorC4+0x204>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002f6a:	4877      	ldr	r0, [pc, #476]	; (8003148 <VectorC4+0x208>)
  I2C_TypeDef *dp = i2cp->i2c;
 8002f6c:	6b55      	ldr	r5, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8002f6e:	69ab      	ldr	r3, [r5, #24]
  uint32_t event = dp->SR1;
 8002f70:	696e      	ldr	r6, [r5, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002f72:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002f76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002f7a:	4283      	cmp	r3, r0
 8002f7c:	d836      	bhi.n	8002fec <VectorC4+0xac>
 8002f7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f82:	d90f      	bls.n	8002fa4 <VectorC4+0x64>
 8002f84:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d80d      	bhi.n	8002faa <VectorC4+0x6a>
 8002f8e:	e8df f003 	tbb	[pc, r3]
 8002f92:	5942      	.short	0x5942
 8002f94:	0c0c0c0c 	.word	0x0c0c0c0c
 8002f98:	0c0c6f0c 	.word	0x0c0c6f0c
 8002f9c:	0c0c0c0c 	.word	0x0c0c0c0c
 8002fa0:	0c0c      	.short	0x0c0c
 8002fa2:	74          	.byte	0x74
 8002fa3:	00          	.byte	0x00
 8002fa4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8002fa8:	d035      	beq.n	8003016 <VectorC4+0xd6>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002faa:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 8002fae:	bf18      	it	ne
 8002fb0:	69ab      	ldrne	r3, [r5, #24]
 8002fb2:	2230      	movs	r2, #48	; 0x30
 8002fb4:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002fb8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f340 80b1 	ble.w	8003124 <VectorC4+0x1e4>
 8002fc2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002fc6:	2900      	cmp	r1, #0
 8002fc8:	f040 80ac 	bne.w	8003124 <VectorC4+0x1e4>
  oip->dbg.isr_cnt--;
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002fd2:	f381 8811 	msr	BASEPRI, r1
 8002fd6:	f382 8811 	msr	BASEPRI, r2
 8002fda:	4b5c      	ldr	r3, [pc, #368]	; (800314c <VectorC4+0x20c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002fe2:	f040 80a2 	bne.w	800312a <VectorC4+0x1ea>
 8002fe6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002fec:	4858      	ldr	r0, [pc, #352]	; (8003150 <VectorC4+0x210>)
 8002fee:	4283      	cmp	r3, r0
 8002ff0:	d01d      	beq.n	800302e <VectorC4+0xee>
 8002ff2:	3002      	adds	r0, #2
 8002ff4:	4283      	cmp	r3, r0
 8002ff6:	d1d8      	bne.n	8002faa <VectorC4+0x6a>
    (void)dp->DR; /* Clear BTF.*/
 8002ff8:	692b      	ldr	r3, [r5, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002ffa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d064      	beq.n	80030ce <VectorC4+0x18e>
      i2cp->addr |= 0x01;
 8003004:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003006:	682b      	ldr	r3, [r5, #0]
      i2cp->addr |= 0x01;
 8003008:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800300c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8003010:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003012:	602b      	str	r3, [r5, #0]
      return;
 8003014:	e7cd      	b.n	8002fb2 <VectorC4+0x72>
    if ((i2cp->addr >> 8) > 0) {
 8003016:	8c13      	ldrh	r3, [r2, #32]
 8003018:	0a1a      	lsrs	r2, r3, #8
 800301a:	d02c      	beq.n	8003076 <VectorC4+0x136>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800301c:	f002 0206 	and.w	r2, r2, #6
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	4313      	orrs	r3, r2
 8003026:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800302a:	612b      	str	r3, [r5, #16]
 800302c:	e7bd      	b.n	8002faa <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800302e:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003030:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003032:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8003036:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003038:	606b      	str	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6013      	str	r3, [r2, #0]
    break;
 8003042:	e7b2      	b.n	8002faa <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003044:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003046:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800304c:	680b      	ldr	r3, [r1, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800304e:	606a      	str	r2, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8003058:	686a      	ldr	r2, [r5, #4]
 800305a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800305e:	606a      	str	r2, [r5, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d8a1      	bhi.n	8002faa <VectorC4+0x6a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800306c:	602b      	str	r3, [r5, #0]
 800306e:	e79c      	b.n	8002faa <VectorC4+0x6a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8003070:	8c13      	ldrh	r3, [r2, #32]
 8003072:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003076:	612b      	str	r3, [r5, #16]
    break;
 8003078:	e797      	b.n	8002faa <VectorC4+0x6a>
  dmaStreamDisable(i2cp->dmatx);
 800307a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  dp->CR1 = I2C_CR1_SWRST;
 800307c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003080:	602b      	str	r3, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 8003082:	6801      	ldr	r1, [r0, #0]
  dp->CR1 = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	602b      	str	r3, [r5, #0]
  dp->CR2 = 0;
 8003088:	606b      	str	r3, [r5, #4]
  dp->SR1 = 0;
 800308a:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 800308c:	680b      	ldr	r3, [r1, #0]
 800308e:	f023 031f 	bic.w	r3, r3, #31
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	680b      	ldr	r3, [r1, #0]
 8003096:	07db      	lsls	r3, r3, #31
 8003098:	d4fc      	bmi.n	8003094 <VectorC4+0x154>
 800309a:	f890 c009 	ldrb.w	ip, [r0, #9]
  dmaStreamDisable(i2cp->dmarx);
 800309e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 80030a0:	6842      	ldr	r2, [r0, #4]
 80030a2:	233d      	movs	r3, #61	; 0x3d
 80030a4:	fa03 f30c 	lsl.w	r3, r3, ip
 80030a8:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 80030aa:	680a      	ldr	r2, [r1, #0]
 80030ac:	6813      	ldr	r3, [r2, #0]
 80030ae:	f023 031f 	bic.w	r3, r3, #31
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	07db      	lsls	r3, r3, #31
 80030b8:	d4fc      	bmi.n	80030b4 <VectorC4+0x174>
 80030ba:	684a      	ldr	r2, [r1, #4]
 80030bc:	7a49      	ldrb	r1, [r1, #9]
 80030be:	233d      	movs	r3, #61	; 0x3d
 80030c0:	408b      	lsls	r3, r1
 80030c2:	6013      	str	r3, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80030c4:	686b      	ldr	r3, [r5, #4]
 80030c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ca:	606b      	str	r3, [r5, #4]
    break;
 80030cc:	e76d      	b.n	8002faa <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80030ce:	686b      	ldr	r3, [r5, #4]
 80030d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d4:	606b      	str	r3, [r5, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80030e2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	dd23      	ble.n	8003132 <VectorC4+0x1f2>
 80030ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80030ee:	bb03      	cbnz	r3, 8003132 <VectorC4+0x1f2>
  if (*trp != NULL) {
 80030f0:	69d0      	ldr	r0, [r2, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 80030f2:	2101      	movs	r1, #1
 80030f4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 80030f8:	b158      	cbz	r0, 8003112 <VectorC4+0x1d2>
    *trp = NULL;
 80030fa:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 80030fc:	6283      	str	r3, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 80030fe:	f7fe f817 	bl	8001130 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003102:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003106:	2b00      	cmp	r3, #0
 8003108:	dd16      	ble.n	8003138 <VectorC4+0x1f8>
 800310a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800310e:	2b00      	cmp	r3, #0
 8003110:	dd12      	ble.n	8003138 <VectorC4+0x1f8>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	e745      	b.n	8002faa <VectorC4+0x6a>
    chSysHalt("SV#8");
 800311e:	480d      	ldr	r0, [pc, #52]	; (8003154 <VectorC4+0x214>)
 8003120:	f7fd fd56 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <VectorC4+0x218>)
 8003126:	f7fd fd53 	bl	8000bd0 <chSysHalt>
}
 800312a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800312e:	f7fe bdf7 	b.w	8001d20 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 8003132:	480a      	ldr	r0, [pc, #40]	; (800315c <VectorC4+0x21c>)
 8003134:	f7fd fd4c 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#7");
 8003138:	4809      	ldr	r0, [pc, #36]	; (8003160 <VectorC4+0x220>)
 800313a:	f7fd fd49 	bl	8000bd0 <chSysHalt>
 800313e:	bf00      	nop
 8003140:	200009f0 	.word	0x200009f0
 8003144:	2000087c 	.word	0x2000087c
 8003148:	00030011 	.word	0x00030011
 800314c:	e000ed00 	.word	0xe000ed00
 8003150:	00070082 	.word	0x00070082
 8003154:	08004d50 	.word	0x08004d50
 8003158:	08004d58 	.word	0x08004d58
 800315c:	08004d08 	.word	0x08004d08
 8003160:	08004d20 	.word	0x08004d20
	...

08003170 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 8003170:	495a      	ldr	r1, [pc, #360]	; (80032dc <VectorC8+0x16c>)
 8003172:	6b4a      	ldr	r2, [r1, #52]	; 0x34
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 8003176:	6955      	ldr	r5, [r2, #20]
 8003178:	2330      	movs	r3, #48	; 0x30
 800317a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 800317e:	4c58      	ldr	r4, [pc, #352]	; (80032e0 <VectorC8+0x170>)
 8003180:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003184:	2b00      	cmp	r3, #0
 8003186:	f2c0 8098 	blt.w	80032ba <VectorC8+0x14a>
 800318a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800318e:	2a00      	cmp	r2, #0
 8003190:	f040 8093 	bne.w	80032ba <VectorC8+0x14a>
  oip->dbg.isr_cnt++;
 8003194:	3301      	adds	r3, #1
 8003196:	b2a8      	uxth	r0, r5
 8003198:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800319c:	f382 8811 	msr	BASEPRI, r2
  dmaStreamDisable(i2cp->dmatx);
 80031a0:	e9d1 760c 	ldrd	r7, r6, [r1, #48]	; 0x30

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80031a4:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 80031a8:	683a      	ldr	r2, [r7, #0]
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80031aa:	43db      	mvns	r3, r3
 80031ac:	6173      	str	r3, [r6, #20]
  dmaStreamDisable(i2cp->dmatx);
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f023 031f 	bic.w	r3, r3, #31
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	07db      	lsls	r3, r3, #31
 80031ba:	d4fc      	bmi.n	80031b6 <VectorC8+0x46>
 80031bc:	f897 c009 	ldrb.w	ip, [r7, #9]
 80031c0:	687a      	ldr	r2, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 80031c2:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 80031c4:	233d      	movs	r3, #61	; 0x3d
 80031c6:	fa03 f30c 	lsl.w	r3, r3, ip
 80031ca:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	f023 031f 	bic.w	r3, r3, #31
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	07db      	lsls	r3, r3, #31
 80031da:	d4fc      	bmi.n	80031d6 <VectorC8+0x66>
 80031dc:	f897 c009 	ldrb.w	ip, [r7, #9]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	233d      	movs	r3, #61	; 0x3d
 80031e4:	fa03 f30c 	lsl.w	r3, r3, ip
 80031e8:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 80031ea:	f3c0 2300 	ubfx	r3, r0, #8, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80031ee:	0582      	lsls	r2, r0, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80031f0:	bf48      	it	mi
 80031f2:	f043 0302 	orrmi.w	r3, r3, #2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80031f6:	0547      	lsls	r7, r0, #21
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80031f8:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80031fa:	d50a      	bpl.n	8003212 <VectorC8+0xa2>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80031fc:	6872      	ldr	r2, [r6, #4]
 80031fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003202:	6072      	str	r2, [r6, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003204:	6832      	ldr	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003206:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	6032      	str	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003210:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8003212:	0502      	lsls	r2, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8003214:	bf44      	itt	mi
 8003216:	f043 0308 	orrmi.w	r3, r3, #8
 800321a:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800321c:	0447      	lsls	r7, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 800321e:	bf44      	itt	mi
 8003220:	f043 0320 	orrmi.w	r3, r3, #32
 8003224:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8003226:	04c6      	lsls	r6, r0, #19
 8003228:	d41c      	bmi.n	8003264 <VectorC8+0xf4>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800322a:	042a      	lsls	r2, r5, #16
 800322c:	d41f      	bmi.n	800326e <VectorC8+0xfe>
  if (i2cp->errors != I2C_NO_ERROR)
 800322e:	bb0b      	cbnz	r3, 8003274 <VectorC8+0x104>
 8003230:	2230      	movs	r2, #48	; 0x30
 8003232:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003236:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800323a:	2b00      	cmp	r3, #0
 800323c:	dd40      	ble.n	80032c0 <VectorC8+0x150>
 800323e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003242:	2900      	cmp	r1, #0
 8003244:	d13c      	bne.n	80032c0 <VectorC8+0x150>
  oip->dbg.isr_cnt--;
 8003246:	3b01      	subs	r3, #1
 8003248:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800324c:	f381 8811 	msr	BASEPRI, r1
 8003250:	f382 8811 	msr	BASEPRI, r2
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <VectorC8+0x174>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800325c:	d133      	bne.n	80032c6 <VectorC8+0x156>
 800325e:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->errors |= I2C_PEC_ERROR;
 8003264:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003268:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 800326a:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800326c:	d502      	bpl.n	8003274 <VectorC8+0x104>
    i2cp->errors |= I2C_SMB_ALERT;
 800326e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003272:	608b      	str	r3, [r1, #8]
 8003274:	2330      	movs	r3, #48	; 0x30
 8003276:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800327a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800327e:	2b00      	cmp	r3, #0
 8003280:	dd25      	ble.n	80032ce <VectorC8+0x15e>
 8003282:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003286:	bb13      	cbnz	r3, 80032ce <VectorC8+0x15e>
  if (*trp != NULL) {
 8003288:	69c8      	ldr	r0, [r1, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 800328a:	2201      	movs	r2, #1
 800328c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003290:	b168      	cbz	r0, 80032ae <VectorC8+0x13e>
    tp->u.rdymsg = msg;
 8003292:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 8003296:	61cb      	str	r3, [r1, #28]
    tp->u.rdymsg = msg;
 8003298:	6282      	str	r2, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 800329a:	f7fd ff49 	bl	8001130 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800329e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dd16      	ble.n	80032d4 <VectorC8+0x164>
 80032a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	dd12      	ble.n	80032d4 <VectorC8+0x164>
  oip->dbg.lock_cnt = (cnt_t)0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	e7ba      	b.n	8003230 <VectorC8+0xc0>
    chSysHalt("SV#8");
 80032ba:	480b      	ldr	r0, [pc, #44]	; (80032e8 <VectorC8+0x178>)
 80032bc:	f7fd fc88 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80032c0:	480a      	ldr	r0, [pc, #40]	; (80032ec <VectorC8+0x17c>)
 80032c2:	f7fd fc85 	bl	8000bd0 <chSysHalt>
}
 80032c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032ca:	f7fe bd29 	b.w	8001d20 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 80032ce:	4808      	ldr	r0, [pc, #32]	; (80032f0 <VectorC8+0x180>)
 80032d0:	f7fd fc7e 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#7");
 80032d4:	4807      	ldr	r0, [pc, #28]	; (80032f4 <VectorC8+0x184>)
 80032d6:	f7fd fc7b 	bl	8000bd0 <chSysHalt>
 80032da:	bf00      	nop
 80032dc:	2000087c 	.word	0x2000087c
 80032e0:	200009f0 	.word	0x200009f0
 80032e4:	e000ed00 	.word	0xe000ed00
 80032e8:	08004d50 	.word	0x08004d50
 80032ec:	08004d58 	.word	0x08004d58
 80032f0:	08004d08 	.word	0x08004d08
 80032f4:	08004d20 	.word	0x08004d20
	...

08003300 <chSchDoPreemption>:
  thread_t *otp = __instance_get_currthread(oip);
 8003300:	4a12      	ldr	r2, [pc, #72]	; (800334c <chSchDoPreemption+0x4c>)
  ch_priority_queue_t *p = pqp->next;
 8003302:	6810      	ldr	r0, [r2, #0]
 8003304:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 8003306:	6803      	ldr	r3, [r0, #0]
static void __sch_reschedule_ahead(void) {
 8003308:	b510      	push	{r4, lr}
  ntp->state = CH_STATE_CURRENT;
 800330a:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8003312:	2400      	movs	r4, #0
  pqp->next       = p->next;
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 800331a:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio > p->prio));
 800331c:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 800331e:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 8003320:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	42a2      	cmp	r2, r4
 8003326:	d8fb      	bhi.n	8003320 <chSchDoPreemption+0x20>
  p->prev       = pqp->prev;
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800332e:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8003330:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003332:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(ntp, otp);
 8003336:	6a0a      	ldr	r2, [r1, #32]
 8003338:	3b64      	subs	r3, #100	; 0x64
 800333a:	429a      	cmp	r2, r3
 800333c:	d803      	bhi.n	8003346 <chSchDoPreemption+0x46>
}
 800333e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSysSwitch(ntp, otp);
 8003342:	f7fc bfdf 	b.w	8000304 <__port_switch>
 8003346:	4802      	ldr	r0, [pc, #8]	; (8003350 <chSchDoPreemption+0x50>)
 8003348:	f7fd fc42 	bl	8000bd0 <chSysHalt>
 800334c:	200009f0 	.word	0x200009f0
 8003350:	08004d30 	.word	0x08004d30
	...

08003360 <myprintf>:
static mutex_t mutex_bsp2;


static uint32_t beep_ms = 200;

int myprintf(const char *fmt, ...) {
 8003360:	b40f      	push	{r0, r1, r2, r3}
 8003362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003366:	ed2d 8b06 	vpush	{d8-d10}
 800336a:	b091      	sub	sp, #68	; 0x44
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800336c:	2330      	movs	r3, #48	; 0x30
 800336e:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8003372:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003376:	f8df b258 	ldr.w	fp, [pc, #600]	; 80035d0 <myprintf+0x270>
 800337a:	e9db 3222 	ldrd	r3, r2, [fp, #136]	; 0x88
 800337e:	4313      	orrs	r3, r2
 8003380:	f040 8190 	bne.w	80036a4 <myprintf+0x344>

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8003384:	4a90      	ldr	r2, [pc, #576]	; (80035c8 <myprintf+0x268>)
  return __sch_get_currthread();
 8003386:	f8db 400c 	ldr.w	r4, [fp, #12]
 800338a:	6890      	ldr	r0, [r2, #8]
  oip->dbg.lock_cnt = (cnt_t)1;
 800338c:	2301      	movs	r3, #1
 800338e:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8003392:	2800      	cmp	r0, #0
 8003394:	f000 8288 	beq.w	80038a8 <myprintf+0x548>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8003398:	68a3      	ldr	r3, [r4, #8]
 800339a:	6882      	ldr	r2, [r0, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d20b      	bcs.n	80033b8 <myprintf+0x58>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 80033a0:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80033a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	f000 81cb 	beq.w	8003742 <myprintf+0x3e2>
 80033ac:	2b07      	cmp	r3, #7
 80033ae:	f000 81ad 	beq.w	800370c <myprintf+0x3ac>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 81be 	beq.w	8003734 <myprintf+0x3d4>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 80033b8:	4b83      	ldr	r3, [pc, #524]	; (80035c8 <myprintf+0x268>)
 80033ba:	e003      	b.n	80033c4 <myprintf+0x64>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 80033bc:	6899      	ldr	r1, [r3, #8]
 80033be:	68a2      	ldr	r2, [r4, #8]
 80033c0:	4291      	cmp	r1, r2
 80033c2:	d303      	bcc.n	80033cc <myprintf+0x6c>
    cp = cp->next;
 80033c4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 80033c6:	4a80      	ldr	r2, [pc, #512]	; (80035c8 <myprintf+0x268>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d1f7      	bne.n	80033bc <myprintf+0x5c>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 80033cc:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 80033ce:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 80033d0:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 80033d2:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 80033d4:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
      currtp->u.wtmtxp = mp;
 80033d6:	4b7c      	ldr	r3, [pc, #496]	; (80035c8 <myprintf+0x268>)
 80033d8:	62a3      	str	r3, [r4, #40]	; 0x28
      chSchGoSleepS(CH_STATE_WTMTX);
 80033da:	2006      	movs	r0, #6
 80033dc:	f7fe f828 	bl	8001430 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80033e0:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 825c 	bne.w	80038a2 <myprintf+0x542>
 80033ea:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f340 8257 	ble.w	80038a2 <myprintf+0x542>
  oip->dbg.lock_cnt = (cnt_t)0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 80033fa:	f383 8811 	msr	BASEPRI, r3
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80033fe:	4648      	mov	r0, r9
  va_list ap;
  int formatted_bytes;
  chMtxLock(&mutex_bsp2);
  va_start(ap, fmt);
 8003400:	aa21      	add	r2, sp, #132	; 0x84
 8003402:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003406:	9209      	str	r2, [sp, #36]	; 0x24
  formatted_bytes = chvprintf(bsp2, fmt, ap);
 8003408:	9203      	str	r2, [sp, #12]
    if (c == 0) {
 800340a:	2900      	cmp	r1, #0
 800340c:	f000 836a 	beq.w	8003ae4 <myprintf+0x784>
 8003410:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80035cc <myprintf+0x26c>
 8003414:	461f      	mov	r7, r3
 8003416:	e00c      	b.n	8003432 <myprintf+0xd2>
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8003418:	f8da 3000 	ldr.w	r3, [sl]
      n++;
      continue;
 800341c:	4681      	mov	r9, r0
      streamPut(chp, (uint8_t)c);
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	486a      	ldr	r0, [pc, #424]	; (80035cc <myprintf+0x26c>)
      n++;
 8003422:	3701      	adds	r7, #1
      streamPut(chp, (uint8_t)c);
 8003424:	4798      	blx	r3
    c = *fmt++;
 8003426:	4648      	mov	r0, r9
 8003428:	f810 1b01 	ldrb.w	r1, [r0], #1
    if (c == 0) {
 800342c:	2900      	cmp	r1, #0
 800342e:	f000 80e3 	beq.w	80035f8 <myprintf+0x298>
    if (c != '%') {
 8003432:	2925      	cmp	r1, #37	; 0x25
 8003434:	d1f0      	bne.n	8003418 <myprintf+0xb8>
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    if (*fmt == '-') {
 8003436:	f899 3001 	ldrb.w	r3, [r9, #1]
 800343a:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 800343c:	bf06      	itte	eq
 800343e:	f109 0002 	addeq.w	r0, r9, #2
      left_align = true;
 8003442:	2301      	moveq	r3, #1
    left_align = false;
 8003444:	2300      	movne	r3, #0
 8003446:	9302      	str	r3, [sp, #8]
    }

    /* Sign mode.*/
    do_sign = false;
    if (*fmt == '+') {
 8003448:	7803      	ldrb	r3, [r0, #0]
 800344a:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
    }

    /* Filler mode.*/
    filler = ' ';
    if (*fmt == '0') {
 800344c:	bf03      	ittte	eq
 800344e:	7843      	ldrbeq	r3, [r0, #1]
      do_sign = true;
 8003450:	2501      	moveq	r5, #1
      fmt++;
 8003452:	3001      	addeq	r0, #1
    do_sign = false;
 8003454:	2500      	movne	r5, #0
    if (*fmt == '0') {
 8003456:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8003458:	bf03      	ittte	eq
 800345a:	3001      	addeq	r0, #1
      filler = '0';
 800345c:	461e      	moveq	r6, r3
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 800345e:	7803      	ldrbeq	r3, [r0, #0]
    filler = ' ';
 8003460:	2620      	movne	r6, #32
    if ( *fmt == '*') {
 8003462:	2b2a      	cmp	r3, #42	; 0x2a
 8003464:	d149      	bne.n	80034fa <myprintf+0x19a>
      width = va_arg(ap, int);
      ++fmt;
      c = *fmt++;
 8003466:	7843      	ldrb	r3, [r0, #1]
      width = va_arg(ap, int);
 8003468:	9a03      	ldr	r2, [sp, #12]
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
 800346a:	2b2e      	cmp	r3, #46	; 0x2e
      width = va_arg(ap, int);
 800346c:	f852 4b04 	ldr.w	r4, [r2], #4
      c = *fmt++;
 8003470:	f100 0902 	add.w	r9, r0, #2
    if (c == '.') {
 8003474:	d057      	beq.n	8003526 <myprintf+0x1c6>
    precision = 0;
 8003476:	f04f 0800 	mov.w	r8, #0
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800347a:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800347e:	294c      	cmp	r1, #76	; 0x4c
 8003480:	d061      	beq.n	8003546 <myprintf+0x1e6>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
 8003482:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8003486:	2934      	cmp	r1, #52	; 0x34
 8003488:	f200 810f 	bhi.w	80036aa <myprintf+0x34a>
 800348c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003490:	010d0173 	.word	0x010d0173
 8003494:	010d010d 	.word	0x010d010d
 8003498:	0173010d 	.word	0x0173010d
 800349c:	010d010d 	.word	0x010d010d
 80034a0:	010d010d 	.word	0x010d010d
 80034a4:	01be010d 	.word	0x01be010d
 80034a8:	010d0185 	.word	0x010d0185
 80034ac:	010d010d 	.word	0x010d010d
 80034b0:	01c1010d 	.word	0x01c1010d
 80034b4:	010d010d 	.word	0x010d010d
 80034b8:	010d0185 	.word	0x010d0185
 80034bc:	010d010d 	.word	0x010d010d
 80034c0:	010d010d 	.word	0x010d010d
 80034c4:	010d010d 	.word	0x010d010d
 80034c8:	010d010d 	.word	0x010d010d
 80034cc:	01f9010d 	.word	0x01f9010d
 80034d0:	010d0173 	.word	0x010d0173
 80034d4:	010d01e5 	.word	0x010d01e5
 80034d8:	0173010d 	.word	0x0173010d
 80034dc:	010d010d 	.word	0x010d010d
 80034e0:	010d010d 	.word	0x010d010d
 80034e4:	01be010d 	.word	0x01be010d
 80034e8:	010d0185 	.word	0x010d0185
 80034ec:	01c4010d 	.word	0x01c4010d
 80034f0:	01c1010d 	.word	0x01c1010d
 80034f4:	010d010d 	.word	0x010d010d
 80034f8:	0185      	.short	0x0185
        c = *fmt++;
 80034fa:	f100 0901 	add.w	r9, r0, #1
        if (c == 0) {
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d07a      	beq.n	80035f8 <myprintf+0x298>
      width = 0;
 8003502:	2400      	movs	r4, #0
 8003504:	e007      	b.n	8003516 <myprintf+0x1b6>
        c = *fmt++;
 8003506:	f819 3b01 	ldrb.w	r3, [r9], #1
          width = width * 10 + c;
 800350a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800350e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
        if (c == 0) {
 8003512:	2b00      	cmp	r3, #0
 8003514:	d070      	beq.n	80035f8 <myprintf+0x298>
        if (c >= '0' && c <= '9') {
 8003516:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	2a09      	cmp	r2, #9
 800351e:	d9f2      	bls.n	8003506 <myprintf+0x1a6>
    if (c == '.') {
 8003520:	2b2e      	cmp	r3, #46	; 0x2e
 8003522:	9a03      	ldr	r2, [sp, #12]
 8003524:	d1a7      	bne.n	8003476 <myprintf+0x116>
      c = *fmt++;
 8003526:	f899 3000 	ldrb.w	r3, [r9]
      if (c == 0) {
 800352a:	2b00      	cmp	r3, #0
 800352c:	d064      	beq.n	80035f8 <myprintf+0x298>
      if (c == '*') {
 800352e:	2b2a      	cmp	r3, #42	; 0x2a
 8003530:	d150      	bne.n	80035d4 <myprintf+0x274>
        c = *fmt++;
 8003532:	f899 3001 	ldrb.w	r3, [r9, #1]
        precision = va_arg(ap, int);
 8003536:	f852 8b04 	ldr.w	r8, [r2], #4
    if (c == 'l' || c == 'L') {
 800353a:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800353e:	294c      	cmp	r1, #76	; 0x4c
        c = *fmt++;
 8003540:	f109 0902 	add.w	r9, r9, #2
    if (c == 'l' || c == 'L') {
 8003544:	d19d      	bne.n	8003482 <myprintf+0x122>
      c = *fmt++;
 8003546:	f819 3b01 	ldrb.w	r3, [r9], #1
      if (c == 0) {
 800354a:	2b00      	cmp	r3, #0
 800354c:	d054      	beq.n	80035f8 <myprintf+0x298>
    switch (c) {
 800354e:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8003552:	2934      	cmp	r1, #52	; 0x34
 8003554:	f200 80a9 	bhi.w	80036aa <myprintf+0x34a>
 8003558:	e8df f011 	tbh	[pc, r1, lsl #1]
 800355c:	00a7010d 	.word	0x00a7010d
 8003560:	00a700a7 	.word	0x00a700a7
 8003564:	010d00a7 	.word	0x010d00a7
 8003568:	00a700a7 	.word	0x00a700a7
 800356c:	00a700a7 	.word	0x00a700a7
 8003570:	015800a7 	.word	0x015800a7
 8003574:	00a7011f 	.word	0x00a7011f
 8003578:	00a700a7 	.word	0x00a700a7
 800357c:	015b00a7 	.word	0x015b00a7
 8003580:	00a700a7 	.word	0x00a700a7
 8003584:	00a7011f 	.word	0x00a7011f
 8003588:	00a700a7 	.word	0x00a700a7
 800358c:	00a700a7 	.word	0x00a700a7
 8003590:	00a700a7 	.word	0x00a700a7
 8003594:	00a700a7 	.word	0x00a700a7
 8003598:	019300a7 	.word	0x019300a7
 800359c:	00a7010d 	.word	0x00a7010d
 80035a0:	00a7017f 	.word	0x00a7017f
 80035a4:	010d00a7 	.word	0x010d00a7
 80035a8:	00a700a7 	.word	0x00a700a7
 80035ac:	00a700a7 	.word	0x00a700a7
 80035b0:	015800a7 	.word	0x015800a7
 80035b4:	00a7011f 	.word	0x00a7011f
 80035b8:	015e00a7 	.word	0x015e00a7
 80035bc:	015b00a7 	.word	0x015b00a7
 80035c0:	00a700a7 	.word	0x00a700a7
 80035c4:	011f      	.short	0x011f
 80035c6:	bf00      	nop
 80035c8:	20000d7c 	.word	0x20000d7c
 80035cc:	20000934 	.word	0x20000934
 80035d0:	200009f0 	.word	0x200009f0
      c = *fmt++;
 80035d4:	f109 0901 	add.w	r9, r9, #1
    precision = 0;
 80035d8:	f04f 0800 	mov.w	r8, #0
        while (c >= '0' && c <= '9') {
 80035dc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80035e0:	b2c9      	uxtb	r1, r1
 80035e2:	2909      	cmp	r1, #9
 80035e4:	f63f af49 	bhi.w	800347a <myprintf+0x11a>
          c = *fmt++;
 80035e8:	f819 3b01 	ldrb.w	r3, [r9], #1
          precision = precision * 10 + c;
 80035ec:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80035f0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
          if (c == 0) {
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f1      	bne.n	80035dc <myprintf+0x27c>
 80035f8:	463e      	mov	r6, r7
 80035fa:	f8db 100c 	ldr.w	r1, [fp, #12]
 80035fe:	2330      	movs	r3, #48	; 0x30
 8003600:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003604:	e9db 3222 	ldrd	r3, r2, [fp, #136]	; 0x88
 8003608:	431a      	orrs	r2, r3
 800360a:	d14b      	bne.n	80036a4 <myprintf+0x344>
  return (bool)(qp->next != qp);
 800360c:	4da9      	ldr	r5, [pc, #676]	; (80038b4 <myprintf+0x554>)
 800360e:	6828      	ldr	r0, [r5, #0]
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8003610:	68eb      	ldr	r3, [r5, #12]
  oip->dbg.lock_cnt = (cnt_t)1;
 8003612:	2401      	movs	r4, #1

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003614:	42a8      	cmp	r0, r5
 8003616:	f8cb 408c 	str.w	r4, [fp, #140]	; 0x8c
    currtp->mtxlist = mp->next;
 800361a:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 800361c:	f000 8173 	beq.w	8003906 <myprintf+0x5a6>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8003620:	6c0c      	ldr	r4, [r1, #64]	; 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 8003622:	b14b      	cbz	r3, 8003638 <myprintf+0x2d8>
 8003624:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <myprintf+0x2d2>
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	4294      	cmp	r4, r2
 800362e:	bf38      	it	cc
 8003630:	4614      	movcc	r4, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 8003632:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f5      	bne.n	8003624 <myprintf+0x2c4>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8003638:	608c      	str	r4, [r1, #8]
  qp->next       = p->next;
 800363a:	6803      	ldr	r3, [r0, #0]
 800363c:	4a9d      	ldr	r2, [pc, #628]	; (80038b4 <myprintf+0x554>)
  qp->next->prev = qp;
 800363e:	605a      	str	r2, [r3, #4]
  qp->next       = p->next;
 8003640:	6013      	str	r3, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8003642:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      tp->mtxlist = mp;
 8003644:	63c2      	str	r2, [r0, #60]	; 0x3c
      mp->next = tp->mtxlist;
 8003646:	e9c2 0302 	strd	r0, r3, [r2, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800364a:	f7fd fd71 	bl	8001130 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800364e:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 8243 	bne.w	8003ade <myprintf+0x77e>
 8003658:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800365c:	2b00      	cmp	r3, #0
 800365e:	f340 823e 	ble.w	8003ade <myprintf+0x77e>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003662:	f8db 2000 	ldr.w	r2, [fp]
 8003666:	f8db 300c 	ldr.w	r3, [fp, #12]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d90b      	bls.n	800368a <myprintf+0x32a>
    __sch_reschedule_ahead();
 8003672:	f7ff fe45 	bl	8003300 <chSchDoPreemption>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003676:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 8111 	bne.w	80038a2 <myprintf+0x542>
 8003680:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8003684:	2b00      	cmp	r3, #0
 8003686:	f340 810c 	ble.w	80038a2 <myprintf+0x542>
  oip->dbg.lock_cnt = (cnt_t)0;
 800368a:	2300      	movs	r3, #0
 800368c:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8003690:	f383 8811 	msr	BASEPRI, r3
  va_end(ap);
  chMtxUnlock(&mutex_bsp2);

  return formatted_bytes;
}
 8003694:	4630      	mov	r0, r6
 8003696:	b011      	add	sp, #68	; 0x44
 8003698:	ecbd 8b06 	vpop	{d8-d10}
 800369c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	b004      	add	sp, #16
 80036a2:	4770      	bx	lr
    chSysHalt("SV#4");
 80036a4:	4884      	ldr	r0, [pc, #528]	; (80038b8 <myprintf+0x558>)
 80036a6:	f7fd fa93 	bl	8000bd0 <chSysHalt>
        l = va_arg(ap, unsigned int);
      }
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80036aa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
 80036ae:	9b02      	ldr	r3, [sp, #8]
      break;
 80036b0:	9203      	str	r2, [sp, #12]
 80036b2:	3c01      	subs	r4, #1
 80036b4:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
    if (left_align == false) {
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 80ef 	bne.w	800389c <myprintf+0x53c>
      width = -width;
    }
    if (width < 0) {
 80036be:	9b02      	ldr	r3, [sp, #8]
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2c00      	cmp	r4, #0
      width = -width;
 80036c4:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 80036c8:	f300 8120 	bgt.w	800390c <myprintf+0x5ac>
    if (left_align == false) {
 80036cc:	ad0a      	add	r5, sp, #40	; 0x28
 80036ce:	9b01      	ldr	r3, [sp, #4]
 80036d0:	1c5c      	adds	r4, r3, #1
 80036d2:	442c      	add	r4, r5
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 80036d4:	f8da 3000 	ldr.w	r3, [sl]
 80036d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4650      	mov	r0, sl
 80036e0:	4798      	blx	r3
    while (--i >= 0) {
 80036e2:	42a5      	cmp	r5, r4
 80036e4:	d1f6      	bne.n	80036d4 <myprintf+0x374>
      n++;
 80036e6:	9b01      	ldr	r3, [sp, #4]
 80036e8:	3701      	adds	r7, #1
 80036ea:	443b      	add	r3, r7
 80036ec:	461f      	mov	r7, r3
    }

    while (width) {
 80036ee:	f1b8 0f00 	cmp.w	r8, #0
 80036f2:	f43f ae98 	beq.w	8003426 <myprintf+0xc6>
 80036f6:	4644      	mov	r4, r8
      streamPut(chp, (uint8_t)filler);
 80036f8:	f8da 3000 	ldr.w	r3, [sl]
 80036fc:	4631      	mov	r1, r6
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4650      	mov	r0, sl
 8003702:	4798      	blx	r3
    while (width) {
 8003704:	3c01      	subs	r4, #1
 8003706:	d1f7      	bne.n	80036f8 <myprintf+0x398>
      n++;
 8003708:	4447      	add	r7, r8
 800370a:	e68c      	b.n	8003426 <myprintf+0xc6>
  p->prev->next = p->next;
 800370c:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8003710:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8003712:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8003714:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 8003716:	462b      	mov	r3, r5
 8003718:	e003      	b.n	8003722 <myprintf+0x3c2>
  } while ((cp != qp) &&
 800371a:	6899      	ldr	r1, [r3, #8]
 800371c:	6882      	ldr	r2, [r0, #8]
 800371e:	4291      	cmp	r1, r2
 8003720:	d302      	bcc.n	8003728 <myprintf+0x3c8>
    cp = cp->next;
 8003722:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8003724:	429d      	cmp	r5, r3
 8003726:	d1f8      	bne.n	800371a <myprintf+0x3ba>
  tp->prev       = cp->prev;
 8003728:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 800372a:	6003      	str	r3, [r0, #0]
  tp->prev       = cp->prev;
 800372c:	6042      	str	r2, [r0, #4]
  tp->prev->next = tp;
 800372e:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8003730:	6058      	str	r0, [r3, #4]
}
 8003732:	e641      	b.n	80033b8 <myprintf+0x58>
  p->prev->next = p->next;
 8003734:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003738:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800373a:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 800373c:	f7fd fcf8 	bl	8001130 <chSchReadyI.isra.0>
          break;
 8003740:	e63a      	b.n	80033b8 <myprintf+0x58>
  p->prev->next = p->next;
 8003742:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8003746:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8003748:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800374a:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 800374c:	462b      	mov	r3, r5
 800374e:	e003      	b.n	8003758 <myprintf+0x3f8>
  } while ((cp != qp) &&
 8003750:	6899      	ldr	r1, [r3, #8]
 8003752:	6882      	ldr	r2, [r0, #8]
 8003754:	4291      	cmp	r1, r2
 8003756:	d302      	bcc.n	800375e <myprintf+0x3fe>
    cp = cp->next;
 8003758:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 800375a:	429d      	cmp	r5, r3
 800375c:	d1f8      	bne.n	8003750 <myprintf+0x3f0>
  tp->prev       = cp->prev;
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	6042      	str	r2, [r0, #4]
  tp->next       = cp;
 8003762:	6003      	str	r3, [r0, #0]
  tp->prev->next = tp;
 8003764:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8003766:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8003768:	68a8      	ldr	r0, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	6882      	ldr	r2, [r0, #8]
 800376e:	4293      	cmp	r3, r2
 8003770:	f63f ae16 	bhi.w	80033a0 <myprintf+0x40>
 8003774:	e620      	b.n	80033b8 <myprintf+0x58>
        l = va_arg(ap, int);
 8003776:	4613      	mov	r3, r2
 8003778:	f853 1b04 	ldr.w	r1, [r3], #4
 800377c:	9303      	str	r3, [sp, #12]
      if (l < 0) {
 800377e:	2900      	cmp	r1, #0
 8003780:	f2c0 80c7 	blt.w	8003912 <myprintf+0x5b2>
        if (do_sign) {
 8003784:	2d00      	cmp	r5, #0
 8003786:	f000 81a0 	beq.w	8003aca <myprintf+0x76a>
          *p++ = '+';
 800378a:	232b      	movs	r3, #43	; 0x2b
 800378c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003790:	ab0a      	add	r3, sp, #40	; 0x28
 8003792:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	e0c3      	b.n	8003922 <myprintf+0x5c2>
    switch (c) {
 800379a:	f04f 0c10 	mov.w	ip, #16
        l = va_arg(ap, unsigned int);
 800379e:	4613      	mov	r3, r2
  q = p + MAX_FILLER;
 80037a0:	f10d 0e33 	add.w	lr, sp, #51	; 0x33
        l = va_arg(ap, unsigned int);
 80037a4:	f853 1b04 	ldr.w	r1, [r3], #4
 80037a8:	9303      	str	r3, [sp, #12]
  q = p + MAX_FILLER;
 80037aa:	4672      	mov	r2, lr
 80037ac:	e000      	b.n	80037b0 <myprintf+0x450>
 80037ae:	462a      	mov	r2, r5
    i = (int)(l % radix);
 80037b0:	4608      	mov	r0, r1
 80037b2:	fbb1 f1fc 	udiv	r1, r1, ip
 80037b6:	fb0c 0511 	mls	r5, ip, r1, r0
    i += '0';
 80037ba:	f105 0330 	add.w	r3, r5, #48	; 0x30
    if (i > '9') {
 80037be:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80037c0:	bfc8      	it	gt
 80037c2:	f105 0337 	addgt.w	r3, r5, #55	; 0x37
    *--q = i;
 80037c6:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80037c8:	4560      	cmp	r0, ip
    *--q = i;
 80037ca:	f802 3c01 	strb.w	r3, [r2, #-1]
 80037ce:	f102 35ff 	add.w	r5, r2, #4294967295
  } while ((ll /= radix) != 0);
 80037d2:	d2ec      	bcs.n	80037ae <myprintf+0x44e>
  i = (int)(p + MAX_FILLER - q);
 80037d4:	a90a      	add	r1, sp, #40	; 0x28
 80037d6:	ebae 0505 	sub.w	r5, lr, r5
 80037da:	9104      	str	r1, [sp, #16]
 80037dc:	e001      	b.n	80037e2 <myprintf+0x482>
    *p++ = *q++;
 80037de:	f812 3b01 	ldrb.w	r3, [r2], #1
 80037e2:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 80037e6:	4572      	cmp	r2, lr
 80037e8:	d1f9      	bne.n	80037de <myprintf+0x47e>
        i--;
 80037ea:	1e6b      	subs	r3, r5, #1
    if ((width -= i) < 0) {
 80037ec:	1b64      	subs	r4, r4, r5
    s = tmpbuf;
 80037ee:	9d04      	ldr	r5, [sp, #16]
        i--;
 80037f0:	9301      	str	r3, [sp, #4]
    if (left_align == false) {
 80037f2:	9b02      	ldr	r3, [sp, #8]
 80037f4:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
 80037f8:	b91b      	cbnz	r3, 8003802 <myprintf+0x4a2>
    if (width < 0) {
 80037fa:	2c00      	cmp	r4, #0
      width = -width;
 80037fc:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8003800:	dc5e      	bgt.n	80038c0 <myprintf+0x560>
    while (--i >= 0) {
 8003802:	9b01      	ldr	r3, [sp, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f6bf af62 	bge.w	80036ce <myprintf+0x36e>
 800380a:	e770      	b.n	80036ee <myprintf+0x38e>
    switch (c) {
 800380c:	f04f 0c08 	mov.w	ip, #8
 8003810:	e7c5      	b.n	800379e <myprintf+0x43e>
 8003812:	f04f 0c0a 	mov.w	ip, #10
 8003816:	e7c2      	b.n	800379e <myprintf+0x43e>
      if ((s = va_arg(ap, char *)) == 0) {
 8003818:	4613      	mov	r3, r2
 800381a:	f853 5b04 	ldr.w	r5, [r3], #4
 800381e:	9303      	str	r3, [sp, #12]
 8003820:	2d00      	cmp	r5, #0
 8003822:	f000 8156 	beq.w	8003ad2 <myprintf+0x772>
      for (p = s; *p && (--precision >= 0); p++)
 8003826:	782a      	ldrb	r2, [r5, #0]
      if (precision == 0) {
 8003828:	f1b8 0f00 	cmp.w	r8, #0
 800382c:	f040 813a 	bne.w	8003aa4 <myprintf+0x744>
      for (p = s; *p && (--precision >= 0); p++)
 8003830:	2a00      	cmp	r2, #0
 8003832:	f000 813c 	beq.w	8003aae <myprintf+0x74e>
 8003836:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 800383a:	462a      	mov	r2, r5
 800383c:	e003      	b.n	8003846 <myprintf+0x4e6>
 800383e:	1aab      	subs	r3, r5, r2
 8003840:	eb13 0f08 	cmn.w	r3, r8
 8003844:	d403      	bmi.n	800384e <myprintf+0x4ee>
 8003846:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f7      	bne.n	800383e <myprintf+0x4de>
    i = (int)(p - s);
 800384e:	1b52      	subs	r2, r2, r5
        i--;
 8003850:	1e53      	subs	r3, r2, #1
    if ((width -= i) < 0) {
 8003852:	1aa4      	subs	r4, r4, r2
        i--;
 8003854:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8003856:	2620      	movs	r6, #32
 8003858:	e7cb      	b.n	80037f2 <myprintf+0x492>
      f = (float) va_arg(ap, double);
 800385a:	3207      	adds	r2, #7
 800385c:	f022 0307 	bic.w	r3, r2, #7
 8003860:	e8f3 0102 	ldrd	r0, r1, [r3], #8
 8003864:	9303      	str	r3, [sp, #12]
 8003866:	f7fd f915 	bl	8000a94 <__aeabi_d2f>
 800386a:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 800386e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003876:	d479      	bmi.n	800396c <myprintf+0x60c>
        if (do_sign) {
 8003878:	2d00      	cmp	r5, #0
 800387a:	f000 8122 	beq.w	8003ac2 <myprintf+0x762>
          *p++ = '+';
 800387e:	232b      	movs	r3, #43	; 0x2b
 8003880:	e077      	b.n	8003972 <myprintf+0x612>
      *p++ = va_arg(ap, int);
 8003882:	f852 3b04 	ldr.w	r3, [r2], #4
 8003886:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    if (left_align == false) {
 800388a:	9b02      	ldr	r3, [sp, #8]
      *p++ = va_arg(ap, int);
 800388c:	9203      	str	r2, [sp, #12]
 800388e:	3c01      	subs	r4, #1
      filler = ' ';
 8003890:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8003892:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
    if (left_align == false) {
 8003896:	2b00      	cmp	r3, #0
 8003898:	f43f af11 	beq.w	80036be <myprintf+0x35e>
 800389c:	2300      	movs	r3, #0
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	e714      	b.n	80036cc <myprintf+0x36c>
    chSysHalt("SV#5");
 80038a2:	4806      	ldr	r0, [pc, #24]	; (80038bc <myprintf+0x55c>)
 80038a4:	f7fd f994 	bl	8000bd0 <chSysHalt>
    mp->next = currtp->mtxlist;
 80038a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    mp->owner = currtp;
 80038aa:	4a02      	ldr	r2, [pc, #8]	; (80038b4 <myprintf+0x554>)
    currtp->mtxlist = mp;
 80038ac:	63e2      	str	r2, [r4, #60]	; 0x3c
    mp->next = currtp->mtxlist;
 80038ae:	e9c2 4302 	strd	r4, r3, [r2, #8]
 80038b2:	e59f      	b.n	80033f4 <myprintf+0x94>
 80038b4:	20000d7c 	.word	0x20000d7c
 80038b8:	08004d18 	.word	0x08004d18
 80038bc:	08004d40 	.word	0x08004d40
      width = -width;
 80038c0:	4644      	mov	r4, r8
      if ((*s == '-' || *s == '+') && filler == '0') {
 80038c2:	7829      	ldrb	r1, [r5, #0]
 80038c4:	292d      	cmp	r1, #45	; 0x2d
 80038c6:	d011      	beq.n	80038ec <myprintf+0x58c>
 80038c8:	292b      	cmp	r1, #43	; 0x2b
 80038ca:	d00f      	beq.n	80038ec <myprintf+0x58c>
        streamPut(chp, (uint8_t)filler);
 80038cc:	f8da 3000 	ldr.w	r3, [sl]
 80038d0:	4631      	mov	r1, r6
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4650      	mov	r0, sl
 80038d6:	4798      	blx	r3
      } while (++width != 0);
 80038d8:	f118 0801 	adds.w	r8, r8, #1
 80038dc:	d1f6      	bne.n	80038cc <myprintf+0x56c>
    while (--i >= 0) {
 80038de:	9b01      	ldr	r3, [sp, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	eba7 0704 	sub.w	r7, r7, r4
 80038e6:	f6bf aef2 	bge.w	80036ce <myprintf+0x36e>
 80038ea:	e59c      	b.n	8003426 <myprintf+0xc6>
      if ((*s == '-' || *s == '+') && filler == '0') {
 80038ec:	2e30      	cmp	r6, #48	; 0x30
 80038ee:	d1ed      	bne.n	80038cc <myprintf+0x56c>
    while (--i >= 0) {
 80038f0:	9b01      	ldr	r3, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
 80038f2:	f8da 2000 	ldr.w	r2, [sl]
 80038f6:	4882      	ldr	r0, [pc, #520]	; (8003b00 <myprintf+0x7a0>)
 80038f8:	68d2      	ldr	r2, [r2, #12]
    while (--i >= 0) {
 80038fa:	3b01      	subs	r3, #1
        streamPut(chp, (uint8_t)*s++);
 80038fc:	3501      	adds	r5, #1
        n++;
 80038fe:	3701      	adds	r7, #1
    while (--i >= 0) {
 8003900:	9301      	str	r3, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
 8003902:	4790      	blx	r2
        i--;
 8003904:	e7e2      	b.n	80038cc <myprintf+0x56c>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8003906:	4b7f      	ldr	r3, [pc, #508]	; (8003b04 <myprintf+0x7a4>)
 8003908:	609a      	str	r2, [r3, #8]
void __dbg_check_unlock(void) {
 800390a:	e6be      	b.n	800368a <myprintf+0x32a>
      width = -width;
 800390c:	4644      	mov	r4, r8
    if (width < 0) {
 800390e:	ad0a      	add	r5, sp, #40	; 0x28
 8003910:	e7d7      	b.n	80038c2 <myprintf+0x562>
        *p++ = '-';
 8003912:	232d      	movs	r3, #45	; 0x2d
 8003914:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        l = -l;
 8003918:	ab0a      	add	r3, sp, #40	; 0x28
 800391a:	4249      	negs	r1, r1
        *p++ = '-';
 800391c:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 8003920:	9304      	str	r3, [sp, #16]
  q = p + MAX_FILLER;
 8003922:	f105 030b 	add.w	r3, r5, #11
    i = (int)(l % radix);
 8003926:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8003b0c <myprintf+0x7ac>
  q = p + MAX_FILLER;
 800392a:	4618      	mov	r0, r3
    i = (int)(l % radix);
 800392c:	fbae c201 	umull	ip, r2, lr, r1
 8003930:	08d2      	lsrs	r2, r2, #3
 8003932:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8003936:	4694      	mov	ip, r2
 8003938:	eba1 0248 	sub.w	r2, r1, r8, lsl #1
    i += '0';
 800393c:	3230      	adds	r2, #48	; 0x30
    i = (int)(l % radix);
 800393e:	4688      	mov	r8, r1
    *--q = i;
 8003940:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8003942:	f1b8 0f09 	cmp.w	r8, #9
    *--q = i;
 8003946:	f800 2d01 	strb.w	r2, [r0, #-1]!
    l /= radix;
 800394a:	4661      	mov	r1, ip
  } while ((ll /= radix) != 0);
 800394c:	dcee      	bgt.n	800392c <myprintf+0x5cc>
  i = (int)(p + MAX_FILLER - q);
 800394e:	1a1b      	subs	r3, r3, r0
 8003950:	442b      	add	r3, r5
 8003952:	e001      	b.n	8003958 <myprintf+0x5f8>
    *p++ = *q++;
 8003954:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003958:	f805 2b01 	strb.w	r2, [r5], #1
  while (--i);
 800395c:	42ab      	cmp	r3, r5
 800395e:	d1f9      	bne.n	8003954 <myprintf+0x5f4>
    i = (int)(p - s);
 8003960:	9d04      	ldr	r5, [sp, #16]
 8003962:	1b5b      	subs	r3, r3, r5
    if ((width -= i) < 0) {
 8003964:	1ae4      	subs	r4, r4, r3
        i--;
 8003966:	3b01      	subs	r3, #1
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	e742      	b.n	80037f2 <myprintf+0x492>
        f = -f;
 800396c:	eeb1 8a48 	vneg.f32	s16, s16
        *p++ = '-';
 8003970:	232d      	movs	r3, #45	; 0x2d
          *p++ = '+';
 8003972:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003976:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	ab0a      	add	r3, sp, #40	; 0x28
 800397e:	9304      	str	r3, [sp, #16]
      p = ftoa(p, f, precision);
 8003980:	ee18 0a10 	vmov	r0, s16
 8003984:	f7fd f806 	bl	8000994 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8003988:	f108 38ff 	add.w	r8, r8, #4294967295
 800398c:	f1b8 0f08 	cmp.w	r8, #8
      p = ftoa(p, f, precision);
 8003990:	ec41 0b19 	vmov	d9, r0, r1
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8003994:	d87c      	bhi.n	8003a90 <myprintf+0x730>
  precision = pow10[precision - 1];
 8003996:	4b5c      	ldr	r3, [pc, #368]	; (8003b08 <myprintf+0x7a8>)
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8003998:	4d5c      	ldr	r5, [pc, #368]	; (8003b0c <myprintf+0x7ac>)
  precision = pow10[precision - 1];
 800399a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800399e:	9307      	str	r3, [sp, #28]
  l = (long)((num - l) * precision);
 80039a0:	4618      	mov	r0, r3
 80039a2:	4698      	mov	r8, r3
 80039a4:	f7fc ffd4 	bl	8000950 <__aeabi_ui2d>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80039a8:	4643      	mov	r3, r8
 80039aa:	fba5 3503 	umull	r3, r5, r5, r3
  l = (long)((num - l) * precision);
 80039ae:	ec41 0b1a 	vmov	d10, r0, r1
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80039b2:	08ed      	lsrs	r5, r5, #3
  l = (long)num;
 80039b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  q = p + MAX_FILLER;
 80039b8:	9b01      	ldr	r3, [sp, #4]
    i = (int)(l % radix);
 80039ba:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003b0c <myprintf+0x7ac>
  l = (long)num;
 80039be:	edcd 7a05 	vstr	s15, [sp, #20]
  q = p + MAX_FILLER;
 80039c2:	f103 0e0b 	add.w	lr, r3, #11
  l = num;
 80039c6:	ee17 1a90 	vmov	r1, s15
  q = p + MAX_FILLER;
 80039ca:	4672      	mov	r2, lr
    i = (int)(l % radix);
 80039cc:	fbac 0301 	umull	r0, r3, ip, r1
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 80039d6:	4618      	mov	r0, r3
 80039d8:	eba1 0348 	sub.w	r3, r1, r8, lsl #1
    i += '0';
 80039dc:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 80039de:	4688      	mov	r8, r1
    *--q = i;
 80039e0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80039e2:	f1b8 0f09 	cmp.w	r8, #9
    *--q = i;
 80039e6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 80039ea:	4601      	mov	r1, r0
  } while ((ll /= radix) != 0);
 80039ec:	d8ee      	bhi.n	80039cc <myprintf+0x66c>
  i = (int)(p + MAX_FILLER - q);
 80039ee:	9901      	ldr	r1, [sp, #4]
 80039f0:	ebae 0e02 	sub.w	lr, lr, r2
 80039f4:	eb01 000e 	add.w	r0, r1, lr
 80039f8:	e001      	b.n	80039fe <myprintf+0x69e>
    *p++ = *q++;
 80039fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80039fe:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8003a02:	4281      	cmp	r1, r0
 8003a04:	d1f9      	bne.n	80039fa <myprintf+0x69a>
 8003a06:	9b01      	ldr	r3, [sp, #4]
  l = (long)((num - l) * precision);
 8003a08:	9805      	ldr	r0, [sp, #20]
 8003a0a:	f10e 3eff 	add.w	lr, lr, #4294967295
  *p++ = '.';
 8003a0e:	4473      	add	r3, lr
 8003a10:	460a      	mov	r2, r1
 8003a12:	9306      	str	r3, [sp, #24]
 8003a14:	232e      	movs	r3, #46	; 0x2e
 8003a16:	f802 3b0c 	strb.w	r3, [r2], #12
 8003a1a:	9201      	str	r2, [sp, #4]
  l = (long)((num - l) * precision);
 8003a1c:	f7fc ffa8 	bl	8000970 <__aeabi_i2d>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	ec51 0b19 	vmov	r0, r1, d9
 8003a28:	f7fc fe54 	bl	80006d4 <__aeabi_dsub>
 8003a2c:	ec53 2b1a 	vmov	r2, r3, d10
 8003a30:	f7fc fd22 	bl	8000478 <__aeabi_dmul>
 8003a34:	f7fd f806 	bl	8000a44 <__aeabi_d2iz>
    ll = num;
 8003a38:	9907      	ldr	r1, [sp, #28]
  *p++ = '.';
 8003a3a:	9b06      	ldr	r3, [sp, #24]
    i = (int)(l % radix);
 8003a3c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8003b0c <myprintf+0x7ac>
    ll = num;
 8003a40:	2909      	cmp	r1, #9
 8003a42:	bf98      	it	ls
 8003a44:	4605      	movls	r5, r0
  q = p + MAX_FILLER;
 8003a46:	9901      	ldr	r1, [sp, #4]
  *p++ = '.';
 8003a48:	3302      	adds	r3, #2
    i = (int)(l % radix);
 8003a4a:	fbae c200 	umull	ip, r2, lr, r0
 8003a4e:	08d2      	lsrs	r2, r2, #3
 8003a50:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8003a54:	4694      	mov	ip, r2
 8003a56:	eba0 0248 	sub.w	r2, r0, r8, lsl #1
    i += '0';
 8003a5a:	3230      	adds	r2, #48	; 0x30
    l /= radix;
 8003a5c:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 8003a5e:	46ac      	mov	ip, r5
    *--q = i;
 8003a60:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8003a62:	fbae 8505 	umull	r8, r5, lr, r5
 8003a66:	f1bc 0f09 	cmp.w	ip, #9
    *--q = i;
 8003a6a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8003a6e:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 8003a72:	d8ea      	bhi.n	8003a4a <myprintf+0x6ea>
  i = (int)(p + MAX_FILLER - q);
 8003a74:	9801      	ldr	r0, [sp, #4]
 8003a76:	9d06      	ldr	r5, [sp, #24]
 8003a78:	1a40      	subs	r0, r0, r1
 8003a7a:	3002      	adds	r0, #2
 8003a7c:	4405      	add	r5, r0
 8003a7e:	4628      	mov	r0, r5
 8003a80:	e001      	b.n	8003a86 <myprintf+0x726>
    *p++ = *q++;
 8003a82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003a86:	f803 2b01 	strb.w	r2, [r3], #1
  while (--i);
 8003a8a:	4283      	cmp	r3, r0
 8003a8c:	d1f9      	bne.n	8003a82 <myprintf+0x722>
 8003a8e:	e767      	b.n	8003960 <myprintf+0x600>
 8003a90:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8003af8 <myprintf+0x798>
 8003a94:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <myprintf+0x7b0>)
 8003a96:	4d1f      	ldr	r5, [pc, #124]	; (8003b14 <myprintf+0x7b4>)
 8003a98:	9307      	str	r3, [sp, #28]
 8003a9a:	eeb0 aa47 	vmov.f32	s20, s14
 8003a9e:	eef0 aa67 	vmov.f32	s21, s15
 8003aa2:	e787      	b.n	80039b4 <myprintf+0x654>
      for (p = s; *p && (--precision >= 0); p++)
 8003aa4:	b11a      	cbz	r2, 8003aae <myprintf+0x74e>
 8003aa6:	f1b8 0801 	subs.w	r8, r8, #1
 8003aaa:	f57f aec6 	bpl.w	800383a <myprintf+0x4da>
    if (left_align == false) {
 8003aae:	9b02      	ldr	r3, [sp, #8]
 8003ab0:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
 8003ab4:	b91b      	cbnz	r3, 8003abe <myprintf+0x75e>
    if (width < 0) {
 8003ab6:	2c00      	cmp	r4, #0
      width = -width;
 8003ab8:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8003abc:	dc14      	bgt.n	8003ae8 <myprintf+0x788>
    if (left_align == false) {
 8003abe:	2620      	movs	r6, #32
 8003ac0:	e615      	b.n	80036ee <myprintf+0x38e>
    p = tmpbuf;
 8003ac2:	ab0a      	add	r3, sp, #40	; 0x28
 8003ac4:	9304      	str	r3, [sp, #16]
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	e75a      	b.n	8003980 <myprintf+0x620>
 8003aca:	ab0a      	add	r3, sp, #40	; 0x28
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	461d      	mov	r5, r3
 8003ad0:	e727      	b.n	8003922 <myprintf+0x5c2>
        s = "(null)";
 8003ad2:	4d11      	ldr	r5, [pc, #68]	; (8003b18 <myprintf+0x7b8>)
      if (precision == 0) {
 8003ad4:	f1b8 0f00 	cmp.w	r8, #0
 8003ad8:	f43f aead 	beq.w	8003836 <myprintf+0x4d6>
 8003adc:	e7e3      	b.n	8003aa6 <myprintf+0x746>
    chSysHalt("SV#11");
 8003ade:	480f      	ldr	r0, [pc, #60]	; (8003b1c <myprintf+0x7bc>)
 8003ae0:	f7fd f876 	bl	8000bd0 <chSysHalt>
  int n = 0;
 8003ae4:	460e      	mov	r6, r1
 8003ae6:	e588      	b.n	80035fa <myprintf+0x29a>
    if (width < 0) {
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295
      width = -width;
 8003aec:	4644      	mov	r4, r8
    if (width < 0) {
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	2620      	movs	r6, #32
 8003af2:	e6e6      	b.n	80038c2 <myprintf+0x562>
 8003af4:	f3af 8000 	nop.w
 8003af8:	00000000 	.word	0x00000000
 8003afc:	41cdcd65 	.word	0x41cdcd65
 8003b00:	20000934 	.word	0x20000934
 8003b04:	20000d7c 	.word	0x20000d7c
 8003b08:	08004ffc 	.word	0x08004ffc
 8003b0c:	cccccccd 	.word	0xcccccccd
 8003b10:	3b9aca00 	.word	0x3b9aca00
 8003b14:	05f5e100 	.word	0x05f5e100
 8003b18:	08004d60 	.word	0x08004d60
 8003b1c:	08004d28 	.word	0x08004d28

08003b20 <ThdSerial>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8003b20:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <ThdSerial+0x7c>)
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <ThdSerial+0x80>)
 8003b24:	68db      	ldr	r3, [r3, #12]
   115200,
   0,
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD2, &my_config);
 8003b26:	491f      	ldr	r1, [pc, #124]	; (8003ba4 <ThdSerial+0x84>)
 8003b28:	481f      	ldr	r0, [pc, #124]	; (8003ba8 <ThdSerial+0x88>)
   // myprintf(bsp2, "%.3f %.3f %.3f\n\r", adc_get_temp_internal(), adc_get_temp_heater(), adc_get_current());



   // Getting data from Serial Driver with a timeout.
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8003b2a:	4d20      	ldr	r5, [pc, #128]	; (8003bac <ThdSerial+0x8c>)
 8003b2c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003bc4 <ThdSerial+0xa4>
static THD_FUNCTION(ThdSerial, arg) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	61da      	str	r2, [r3, #28]
  sdStart(&SD2, &my_config);
 8003b34:	f7fe fa1c 	bl	8001f70 <sdStart.isra.0>
  myprintf("ThdSerial\n");
 8003b38:	481d      	ldr	r0, [pc, #116]	; (8003bb0 <ThdSerial+0x90>)
        heater_disable();
      } else if(tkn == '1'){
        myprintf("Enable heater..\n");
        heater_setTempDegC(50.0);
      } else if(tkn == '2'){
        myprintf("Beep\n");
 8003b3a:	4f1e      	ldr	r7, [pc, #120]	; (8003bb4 <ThdSerial+0x94>)
  myprintf("ThdSerial\n");
 8003b3c:	f7ff fc10 	bl	8003360 <myprintf>
      sdPut(&SD2, tkn);
 8003b40:	f105 0624 	add.w	r6, r5, #36	; 0x24
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8003b44:	4628      	mov	r0, r5
 8003b46:	f242 7110 	movw	r1, #10000	; 0x2710
 8003b4a:	f7fd fdf1 	bl	8001730 <iqGetTimeout>
    if(tkn != MSG_TIMEOUT) {
 8003b4e:	1c43      	adds	r3, r0, #1
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8003b50:	4604      	mov	r4, r0
    if(tkn != MSG_TIMEOUT) {
 8003b52:	d0f7      	beq.n	8003b44 <ThdSerial+0x24>
      sdPut(&SD2, tkn);
 8003b54:	b2c1      	uxtb	r1, r0
 8003b56:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7fd fe50 	bl	8001800 <oqPutTimeout>
      if(tkn == '0'){
 8003b60:	2c30      	cmp	r4, #48	; 0x30
 8003b62:	d00a      	beq.n	8003b7a <ThdSerial+0x5a>
      } else if(tkn == '1'){
 8003b64:	2c31      	cmp	r4, #49	; 0x31
 8003b66:	d010      	beq.n	8003b8a <ThdSerial+0x6a>
      } else if(tkn == '2'){
 8003b68:	2c32      	cmp	r4, #50	; 0x32
 8003b6a:	d1eb      	bne.n	8003b44 <ThdSerial+0x24>
        myprintf("Beep\n");
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	f7ff fbf7 	bl	8003360 <myprintf>
        beep_ms = 10;
 8003b72:	230a      	movs	r3, #10
 8003b74:	f8c8 3000 	str.w	r3, [r8]
 8003b78:	e7e4      	b.n	8003b44 <ThdSerial+0x24>
        myprintf("  Disable heater\n");
 8003b7a:	480f      	ldr	r0, [pc, #60]	; (8003bb8 <ThdSerial+0x98>)
 8003b7c:	f7ff fbf0 	bl	8003360 <myprintf>
  //To ensure soft start and no current limit overshoot
  palSetPad(GPIOA, GPIOA_heater_enable);
}

void heater_disable(void){
  palClearPad(GPIOA, GPIOA_heater_enable);
 8003b80:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <ThdSerial+0x9c>)
 8003b82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b86:	835a      	strh	r2, [r3, #26]
}
 8003b88:	e7dc      	b.n	8003b44 <ThdSerial+0x24>
        myprintf("Enable heater..\n");
 8003b8a:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <ThdSerial+0xa0>)
 8003b8c:	f7ff fbe8 	bl	8003360 <myprintf>
void dacPutChannelX(DACDriver *dacp, dacchannel_t channel, dacsample_t sample) {

  osalDbgCheck(channel < (dacchannel_t)DAC_MAX_CHANNELS);
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");

  dac_lld_put_channel(dacp, channel, sample);
 8003b90:	f640 302b 	movw	r0, #2859	; 0xb2b
 8003b94:	f7fd f8cc 	bl	8000d30 <dac_lld_put_channel.constprop.0>
}
 8003b98:	e7d4      	b.n	8003b44 <ThdSerial+0x24>
 8003b9a:	bf00      	nop
 8003b9c:	200009f0 	.word	0x200009f0
 8003ba0:	08004d68 	.word	0x08004d68
 8003ba4:	08004fe4 	.word	0x08004fe4
 8003ba8:	20000934 	.word	0x20000934
 8003bac:	20000940 	.word	0x20000940
 8003bb0:	08004d78 	.word	0x08004d78
 8003bb4:	08004dac 	.word	0x08004dac
 8003bb8:	08004d84 	.word	0x08004d84
 8003bbc:	40020000 	.word	0x40020000
 8003bc0:	08004d98 	.word	0x08004d98
 8003bc4:	20000800 	.word	0x20000800
	...

08003bd0 <ThdBlinker>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThdBlinker, 128);
static THD_FUNCTION(ThdBlinker, arg) {
 8003bd0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003bd4:	4ca8      	ldr	r4, [pc, #672]	; (8003e78 <ThdBlinker+0x2a8>)
 8003bd6:	4aa9      	ldr	r2, [pc, #676]	; (8003e7c <ThdBlinker+0x2ac>)
 8003bd8:	68e3      	ldr	r3, [r4, #12]
  (void)arg;
  chRegSetThreadName("blinker");
  chThdSleepMilliseconds(100);
  myprintf("ThdBlinker\n");

  for(float i=150; i>30; i=i*0.9){
 8003bda:	4da9      	ldr	r5, [pc, #676]	; (8003e80 <ThdBlinker+0x2b0>)
 8003bdc:	61da      	str	r2, [r3, #28]
static THD_FUNCTION(ThdBlinker, arg) {
 8003bde:	b083      	sub	sp, #12
  chThdSleepMilliseconds(100);
 8003be0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be4:	f7fd ff1c 	bl	8001a20 <chThdSleep>
  myprintf("ThdBlinker\n");
 8003be8:	48a6      	ldr	r0, [pc, #664]	; (8003e84 <ThdBlinker+0x2b4>)
    palSetPad(GPIOB, GPIOB_LED1);
 8003bea:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003e9c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8003bee:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8003e8c <ThdBlinker+0x2bc>
  myprintf("ThdBlinker\n");
 8003bf2:	f7ff fbb5 	bl	8003360 <myprintf>
    palSetPad(GPIOB, GPIOB_LED1);
 8003bf6:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  myprintf("ThdBlinker\n");
 8003bfa:	2310      	movs	r3, #16
 8003bfc:	9301      	str	r3, [sp, #4]
    palSetPad(GPIOB, GPIOB_LED1);
 8003bfe:	4647      	mov	r7, r8
    chThdSleepMilliseconds(i);
 8003c00:	f240 36e7 	movw	r6, #999	; 0x3e7
    palSetPad(GPIOB, GPIOB_LED1);
 8003c04:	f8ab 7018 	strh.w	r7, [fp, #24]
    chThdSleepMilliseconds(i);
 8003c08:	4628      	mov	r0, r5
    palClearPad(GPIOC, GPIOC_LED2);
 8003c0a:	f8aa 701a 	strh.w	r7, [sl, #26]
    chThdSleepMilliseconds(i);
 8003c0e:	f000 fef7 	bl	8004a00 <__aeabi_f2ulz>
 8003c12:	0082      	lsls	r2, r0, #2
 8003c14:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8003c18:	1813      	adds	r3, r2, r0
 8003c1a:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 8003c1e:	eb41 020c 	adc.w	r2, r1, ip
 8003c22:	00d2      	lsls	r2, r2, #3
 8003c24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	1a1b      	subs	r3, r3, r0
 8003c2c:	eb62 0201 	sbc.w	r2, r2, r1
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1818      	adds	r0, r3, r0
 8003c3a:	eb41 0102 	adc.w	r1, r1, r2
 8003c3e:	0103      	lsls	r3, r0, #4
 8003c40:	0109      	lsls	r1, r1, #4
 8003c42:	ea41 7110 	orr.w	r1, r1, r0, lsr #28
 8003c46:	1998      	adds	r0, r3, r6
 8003c48:	f141 0100 	adc.w	r1, r1, #0
 8003c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c50:	2300      	movs	r3, #0
 8003c52:	f7fc ff6f 	bl	8000b34 <__aeabi_uldivmod>
 8003c56:	f04f 0930 	mov.w	r9, #48	; 0x30
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003c60:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f040 80f6 	bne.w	8003e56 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003c70:	2800      	cmp	r0, #0
 8003c72:	f000 80f3 	beq.w	8003e5c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003c76:	9000      	str	r0, [sp, #0]
 8003c78:	2008      	movs	r0, #8
 8003c7a:	f7fd fc09 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003c7e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003c82:	9900      	ldr	r1, [sp, #0]
 8003c84:	2301      	movs	r3, #1
 8003c86:	2a00      	cmp	r2, #0
 8003c88:	f040 80e2 	bne.w	8003e50 <ThdBlinker+0x280>
 8003c8c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003c90:	2800      	cmp	r0, #0
 8003c92:	f340 80dd 	ble.w	8003e50 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003c96:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003c9a:	f382 8811 	msr	BASEPRI, r2
    palClearPad(GPIOB, GPIOB_LED1);
 8003c9e:	f8ab 801a 	strh.w	r8, [fp, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 8003ca2:	f8aa 8018 	strh.w	r8, [sl, #24]
 8003ca6:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003caa:	e9d4 2022 	ldrd	r2, r0, [r4, #136]	; 0x88
 8003cae:	4302      	orrs	r2, r0
 8003cb0:	f040 80d1 	bne.w	8003e56 <ThdBlinker+0x286>
 8003cb4:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8003cb6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003cba:	f7fd fbe9 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003cbe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 80c4 	bne.w	8003e50 <ThdBlinker+0x280>
 8003cc8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	f340 80bf 	ble.w	8003e50 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003cd2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003cd6:	f383 8811 	msr	BASEPRI, r3
  for(float i=150; i>30; i=i*0.9){
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f7fc fe5a 	bl	8000994 <__aeabi_f2d>
 8003ce0:	a361      	add	r3, pc, #388	; (adr r3, 8003e68 <ThdBlinker+0x298>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fbc7 	bl	8000478 <__aeabi_dmul>
 8003cea:	f7fc fed3 	bl	8000a94 <__aeabi_d2f>
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	d185      	bne.n	8003c04 <ThdBlinker+0x34>
    chThdSleepMilliseconds(i);
  }
  for(float i=30; i<150; i=i*1.1){
    palSetPad(GPIOB, GPIOB_LED1);
 8003cf8:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 8003cfc:	2311      	movs	r3, #17
 8003cfe:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8003e9c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8003d02:	f8df b188 	ldr.w	fp, [pc, #392]	; 8003e8c <ThdBlinker+0x2bc>
  for(float i=30; i<150; i=i*1.1){
 8003d06:	4e60      	ldr	r6, [pc, #384]	; (8003e88 <ThdBlinker+0x2b8>)
 8003d08:	9300      	str	r3, [sp, #0]
    palSetPad(GPIOB, GPIOB_LED1);
 8003d0a:	46c8      	mov	r8, r9
    chThdSleepMilliseconds(i);
 8003d0c:	f242 7510 	movw	r5, #10000	; 0x2710
    palSetPad(GPIOB, GPIOB_LED1);
 8003d10:	f8aa 8018 	strh.w	r8, [sl, #24]
    chThdSleepMilliseconds(i);
 8003d14:	4630      	mov	r0, r6
    palClearPad(GPIOC, GPIOC_LED2);
 8003d16:	f8ab 801a 	strh.w	r8, [fp, #26]
    chThdSleepMilliseconds(i);
 8003d1a:	f000 fe71 	bl	8004a00 <__aeabi_f2ulz>
 8003d1e:	fba0 0305 	umull	r0, r3, r0, r5
 8003d22:	fb05 3101 	mla	r1, r5, r1, r3
 8003d26:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d2a:	18c0      	adds	r0, r0, r3
 8003d2c:	f141 0100 	adc.w	r1, r1, #0
 8003d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d34:	2300      	movs	r3, #0
 8003d36:	f7fc fefd 	bl	8000b34 <__aeabi_uldivmod>
 8003d3a:	2730      	movs	r7, #48	; 0x30
 8003d3c:	4601      	mov	r1, r0
 8003d3e:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d42:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f040 8085 	bne.w	8003e56 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003d52:	2800      	cmp	r0, #0
 8003d54:	f000 8082 	beq.w	8003e5c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003d58:	9001      	str	r0, [sp, #4]
 8003d5a:	2008      	movs	r0, #8
 8003d5c:	f7fd fb98 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d60:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d173      	bne.n	8003e50 <ThdBlinker+0x280>
 8003d68:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	dd6f      	ble.n	8003e50 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003d70:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003d74:	f383 8811 	msr	BASEPRI, r3
    palClearPad(GPIOB, GPIOB_LED1);
 8003d78:	f8aa 901a 	strh.w	r9, [sl, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 8003d7c:	f8ab 9018 	strh.w	r9, [fp, #24]
 8003d80:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d84:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d164      	bne.n	8003e56 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	9901      	ldr	r1, [sp, #4]
 8003d90:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003d94:	2008      	movs	r0, #8
 8003d96:	f7fd fb7b 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d9a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d156      	bne.n	8003e50 <ThdBlinker+0x280>
 8003da2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	dd52      	ble.n	8003e50 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003daa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003dae:	f383 8811 	msr	BASEPRI, r3
  for(float i=30; i<150; i=i*1.1){
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7fc fdee 	bl	8000994 <__aeabi_f2d>
 8003db8:	a32d      	add	r3, pc, #180	; (adr r3, 8003e70 <ThdBlinker+0x2a0>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fb5b 	bl	8000478 <__aeabi_dmul>
 8003dc2:	f7fc fe67 	bl	8000a94 <__aeabi_d2f>
 8003dc6:	9b00      	ldr	r3, [sp, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	4606      	mov	r6, r0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	d19f      	bne.n	8003d10 <ThdBlinker+0x140>
    chThdSleepMilliseconds(i);
  }

  while (true) {
    palSetPad(GPIOB, GPIOB_LED1);
 8003dd0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8003dd4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003e9c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8003dd8:	4e2c      	ldr	r6, [pc, #176]	; (8003e8c <ThdBlinker+0x2bc>)
    palSetPad(GPIOB, GPIOB_LED1);
 8003dda:	46a9      	mov	r9, r5
 8003ddc:	f8a8 9018 	strh.w	r9, [r8, #24]
    palClearPad(GPIOC, GPIOC_LED2);
 8003de0:	f8a6 901a 	strh.w	r9, [r6, #26]
 8003de4:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003de8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003dec:	4313      	orrs	r3, r2
 8003dee:	d132      	bne.n	8003e56 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f242 7110 	movw	r1, #10000	; 0x2710
 8003df6:	2008      	movs	r0, #8
 8003df8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003dfc:	f7fd fb48 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003e00:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003e04:	bb23      	cbnz	r3, 8003e50 <ThdBlinker+0x280>
 8003e06:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	dd20      	ble.n	8003e50 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003e0e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003e12:	f383 8811 	msr	BASEPRI, r3
    chThdSleepMilliseconds(1000);
    palClearPad(GPIOB, GPIOC_LED2);
 8003e16:	f8a8 501a 	strh.w	r5, [r8, #26]
    palSetPad(GPIOC, GPIOB_LED1);
 8003e1a:	8335      	strh	r5, [r6, #24]
 8003e1c:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003e20:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d116      	bne.n	8003e56 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e2e:	2008      	movs	r0, #8
 8003e30:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003e34:	f7fd fb2c 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003e38:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003e3c:	b943      	cbnz	r3, 8003e50 <ThdBlinker+0x280>
 8003e3e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003e42:	2a00      	cmp	r2, #0
 8003e44:	dd04      	ble.n	8003e50 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003e46:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003e4a:	f383 8811 	msr	BASEPRI, r3
}
 8003e4e:	e7c5      	b.n	8003ddc <ThdBlinker+0x20c>
    chSysHalt("SV#5");
 8003e50:	480f      	ldr	r0, [pc, #60]	; (8003e90 <ThdBlinker+0x2c0>)
 8003e52:	f7fc febd 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#4");
 8003e56:	480f      	ldr	r0, [pc, #60]	; (8003e94 <ThdBlinker+0x2c4>)
 8003e58:	f7fc feba 	bl	8000bd0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003e5c:	480e      	ldr	r0, [pc, #56]	; (8003e98 <ThdBlinker+0x2c8>)
 8003e5e:	f7fc feb7 	bl	8000bd0 <chSysHalt>
 8003e62:	bf00      	nop
 8003e64:	f3af 8000 	nop.w
 8003e68:	cccccccd 	.word	0xcccccccd
 8003e6c:	3feccccc 	.word	0x3feccccc
 8003e70:	9999999a 	.word	0x9999999a
 8003e74:	3ff19999 	.word	0x3ff19999
 8003e78:	200009f0 	.word	0x200009f0
 8003e7c:	08004db4 	.word	0x08004db4
 8003e80:	43160000 	.word	0x43160000
 8003e84:	08004dbc 	.word	0x08004dbc
 8003e88:	41f00000 	.word	0x41f00000
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	08004d40 	.word	0x08004d40
 8003e94:	08004d18 	.word	0x08004d18
 8003e98:	08004e54 	.word	0x08004e54
 8003e9c:	40020400 	.word	0x40020400

08003ea0 <ThdGNSS>:

/*
 * GNSS (UART1) receive and forward
 */
static THD_WORKING_AREA(waThdGNSS, 128);
static THD_FUNCTION(ThdGNSS, arg) {
 8003ea0:	b508      	push	{r3, lr}
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <ThdGNSS+0x28>)
 8003ea4:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <ThdGNSS+0x2c>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
  (void)arg;
  chRegSetThreadName("GNSS");
  myprintf("ThdGNSS\n");
 8003ea8:	4809      	ldr	r0, [pc, #36]	; (8003ed0 <ThdGNSS+0x30>)
 8003eaa:	61da      	str	r2, [r3, #28]
 8003eac:	f7ff fa58 	bl	8003360 <myprintf>
   9600,
   0,
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD1, &my_config);
 8003eb0:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <ThdGNSS+0x34>)
 8003eb2:	4809      	ldr	r0, [pc, #36]	; (8003ed8 <ThdGNSS+0x38>)


  while(true){
    /* Getting data from Serial Driver with a timeout. */
    msg_t tkn = sdGetTimeout(&SD1, TIME_MS2I(100));
 8003eb4:	4c09      	ldr	r4, [pc, #36]	; (8003edc <ThdGNSS+0x3c>)
  sdStart(&SD1, &my_config);
 8003eb6:	f7fe f85b 	bl	8001f70 <sdStart.isra.0>
    msg_t tkn = sdGetTimeout(&SD1, TIME_MS2I(100));
 8003eba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7fd fc36 	bl	8001730 <iqGetTimeout>
  while(true){
 8003ec4:	e7f9      	b.n	8003eba <ThdGNSS+0x1a>
 8003ec6:	bf00      	nop
 8003ec8:	200009f0 	.word	0x200009f0
 8003ecc:	08004dc8 	.word	0x08004dc8
 8003ed0:	08004dd0 	.word	0x08004dd0
 8003ed4:	08004ff0 	.word	0x08004ff0
 8003ed8:	200008b4 	.word	0x200008b4
 8003edc:	200008c0 	.word	0x200008c0

08003ee0 <ThdBeeper>:
/*
 * Piezo beeper
 */

static THD_WORKING_AREA(waThdBeeper, 128);
static THD_FUNCTION(ThdBeeper, arg) {
 8003ee0:	b580      	push	{r7, lr}
  (void)arg;
  myprintf("ThdBeeper\n");
 8003ee2:	483b      	ldr	r0, [pc, #236]	; (8003fd0 <ThdBeeper+0xf0>)
 8003ee4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8003fe8 <ThdBeeper+0x108>
 8003ee8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8003fec <ThdBeeper+0x10c>

void piezo_toggle(void){
  palTogglePad(GPIOC, GPIOC_PIEZO_A);
 8003eec:	4d39      	ldr	r5, [pc, #228]	; (8003fd4 <ThdBeeper+0xf4>)
 8003eee:	f7ff fa37 	bl	8003360 <myprintf>

  while(true){

    if(beep_ms){
 8003ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d046      	beq.n	8003f88 <ThdBeeper+0xa8>
      systime_t start = chVTGetSystemTimeX();
      systime_t end = chTimeAddX(start, TIME_MS2I(beep_ms));
 8003efa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003efe:	f240 30e7 	movw	r0, #999	; 0x3e7
 8003f02:	2100      	movs	r1, #0
 8003f04:	fbe3 0102 	umlal	r0, r1, r3, r2
 8003f08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f7fc fe11 	bl	8000b34 <__aeabi_uldivmod>
 8003f12:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8003f16:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003f1a:	b2bf      	uxth	r7, r7
 8003f1c:	d255      	bcs.n	8003fca <ThdBeeper+0xea>
 8003f1e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8003f22:	4c2d      	ldr	r4, [pc, #180]	; (8003fd8 <ThdBeeper+0xf8>)
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003f24:	1bdb      	subs	r3, r3, r7
  return systime + (systime_t)interval;
 8003f26:	b286      	uxth	r6, r0
      while (chTimeIsInRangeX(chVTGetSystemTimeX(), start, end)) {
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	42b3      	cmp	r3, r6
 8003f2c:	bf38      	it	cc
 8003f2e:	f04f 0a30 	movcc.w	sl, #48	; 0x30
 8003f32:	d225      	bcs.n	8003f80 <ThdBeeper+0xa0>
 8003f34:	696b      	ldr	r3, [r5, #20]
 8003f36:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8003f3a:	616b      	str	r3, [r5, #20]
  palTogglePad(GPIOC, GPIOC_PIEZO_B);
 8003f3c:	696b      	ldr	r3, [r5, #20]
 8003f3e:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 8003f42:	616b      	str	r3, [r5, #20]
 8003f44:	f38a 8811 	msr	BASEPRI, sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f48:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d136      	bne.n	8003fbe <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003f50:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003f52:	210a      	movs	r1, #10
 8003f54:	2008      	movs	r0, #8
 8003f56:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003f5a:	f7fd fa99 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f5e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003f62:	bb7b      	cbnz	r3, 8003fc4 <ThdBeeper+0xe4>
 8003f64:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	dd2b      	ble.n	8003fc4 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003f6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003f78:	1bdb      	subs	r3, r3, r7
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	429e      	cmp	r6, r3
 8003f7e:	d8d9      	bhi.n	8003f34 <ThdBeeper+0x54>
        piezo_toggle();
        chThdSleepMilliseconds(1);
      }
      beep_ms = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c9 3000 	str.w	r3, [r9]
 8003f86:	e000      	b.n	8003f8a <ThdBeeper+0xaa>
 8003f88:	4c13      	ldr	r4, [pc, #76]	; (8003fd8 <ThdBeeper+0xf8>)
 8003f8a:	2330      	movs	r3, #48	; 0x30
 8003f8c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f90:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003f94:	4313      	orrs	r3, r2
 8003f96:	d112      	bne.n	8003fbe <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	2164      	movs	r1, #100	; 0x64
 8003f9c:	2008      	movs	r0, #8
 8003f9e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003fa2:	f7fd fa75 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003fa6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003faa:	b95b      	cbnz	r3, 8003fc4 <ThdBeeper+0xe4>
 8003fac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	dd07      	ble.n	8003fc4 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003fb4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	e799      	b.n	8003ef2 <ThdBeeper+0x12>
    chSysHalt("SV#4");
 8003fbe:	4807      	ldr	r0, [pc, #28]	; (8003fdc <ThdBeeper+0xfc>)
 8003fc0:	f7fc fe06 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 8003fc4:	4806      	ldr	r0, [pc, #24]	; (8003fe0 <ThdBeeper+0x100>)
 8003fc6:	f7fc fe03 	bl	8000bd0 <chSysHalt>
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8003fca:	4806      	ldr	r0, [pc, #24]	; (8003fe4 <ThdBeeper+0x104>)
 8003fcc:	f7fc fe00 	bl	8000bd0 <chSysHalt>
 8003fd0:	08004ddc 	.word	0x08004ddc
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	200009f0 	.word	0x200009f0
 8003fdc:	08004d18 	.word	0x08004d18
 8003fe0:	08004d40 	.word	0x08004d40
 8003fe4:	08004e74 	.word	0x08004e74
 8003fe8:	20000800 	.word	0x20000800
 8003fec:	40014800 	.word	0x40014800

08003ff0 <ThdCntr>:
    chThdSleepMilliseconds(10);
  }
}

static THD_WORKING_AREA(waThdCntr, 128);
static THD_FUNCTION(ThdCntr, arg) {
 8003ff0:	b580      	push	{r7, lr}

//adapted from AN4776
//32bit counter, running at 100MHz
void TIM5_init(void){
  palSetPadMode(GPIOA, GPIOA_CNT_IN, PAL_MODE_ALTERNATE(2) | PAL_MODE_INPUT); //setting alternate function in board.h didn't work
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8003ff2:	4d3f      	ldr	r5, [pc, #252]	; (80040f0 <ThdCntr+0x100>)
  palClearPad(GPIOA, GPIOA_MCO_1);
}


void ThdCntrFunc(void) {
  myprintf("ThdCntr\n");
 8003ff4:	483f      	ldr	r0, [pc, #252]	; (80040f4 <ThdCntr+0x104>)

  TIM5->CR2 = 0; //defaults
 8003ff6:	4c40      	ldr	r4, [pc, #256]	; (80040f8 <ThdCntr+0x108>)
  palSetPad(GPIOA, GPIOA_CAL_EN);
 8003ff8:	4e40      	ldr	r6, [pc, #256]	; (80040fc <ThdCntr+0x10c>)
  myprintf("ThdCntr\n");
 8003ffa:	f7ff f9b1 	bl	8003360 <myprintf>
  palSetPadMode(GPIOA, GPIOA_CNT_IN, PAL_MODE_ALTERNATE(2) | PAL_MODE_INPUT); //setting alternate function in board.h didn't work
 8003ffe:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004002:	2001      	movs	r0, #1
 8004004:	f7fc fe2c 	bl	8000c60 <_pal_lld_setgroupmode.constprop.0>
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8004008:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  myprintf("calModeOff\n");
 800400a:	483d      	ldr	r0, [pc, #244]	; (8004100 <ThdCntr+0x110>)
  TIM5->CR2 = 0; //defaults
 800400c:	2300      	movs	r3, #0

  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max

  TIM5->PSC = 0; //prescaler 1

  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 800400e:	2701      	movs	r7, #1
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 8004010:	f04f 31ff 	mov.w	r1, #4294967295
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8004014:	f042 0208 	orr.w	r2, r2, #8
 8004018:	642a      	str	r2, [r5, #64]	; 0x40
  TIM5->CR2 = 0; //defaults
 800401a:	6063      	str	r3, [r4, #4]
  TIM5->SMCR = 0; // Reset the SMCR register
 800401c:	60a3      	str	r3, [r4, #8]
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 800401e:	62e1      	str	r1, [r4, #44]	; 0x2c
  TIM5->PSC = 0; //prescaler 1
 8004020:	62a3      	str	r3, [r4, #40]	; 0x28
  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8004022:	6167      	str	r7, [r4, #20]

  TIM5->CCER = 0; //all CC channels off
 8004024:	6223      	str	r3, [r4, #32]

  TIM5->CCMR1 = 0;
 8004026:	61a3      	str	r3, [r4, #24]
  TIM5->CCMR1 |= TIM_CCMR1_CC1S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 8004028:	69a2      	ldr	r2, [r4, #24]
 800402a:	433a      	orrs	r2, r7
 800402c:	61a2      	str	r2, [r4, #24]
                                   //CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).


  //(TIM5->CCER |= TIM_CCER_CC1P; //Circuit is sensitive to TIxFP1 falling edge (capture..)
  //CC1P = 0 -> //Circuit is sensitive to TIxFP1 rising edge (capture..
  TIM5->CCER |= TIM_CCER_CC1E; //CC1 enabled
 800402e:	6a22      	ldr	r2, [r4, #32]
 8004030:	433a      	orrs	r2, r7
 8004032:	6222      	str	r2, [r4, #32]

  TIM5->CR1 = 0;//upcounter, continuous
 8004034:	6023      	str	r3, [r4, #0]
  TIM5->CR1 |= TIM_CR1_CEN; //enable
 8004036:	6823      	ldr	r3, [r4, #0]

  TIM5->SR = ~TIM_SR_CC1IF; //Clear event flag
 8004038:	f06f 0202 	mvn.w	r2, #2
  TIM5->CR1 |= TIM_CR1_CEN; //enable
 800403c:	433b      	orrs	r3, r7
 800403e:	6023      	str	r3, [r4, #0]
  TIM5->SR = ~TIM_SR_CC1IF; //Clear event flag
 8004040:	6122      	str	r2, [r4, #16]
 8004042:	f7ff f98d 	bl	8003360 <myprintf>
  palClearPad(GPIOB, GPIOB_CAL_SOUR_SEL);
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <ThdCntr+0x114>)
  palSetPad(GPIOA, GPIOA_CAL_EN);
 8004048:	2340      	movs	r3, #64	; 0x40
 800404a:	8333      	strh	r3, [r6, #24]
  palClearPad(GPIOB, GPIOB_CAL_SOUR_SEL);
 800404c:	2010      	movs	r0, #16
  palClearPad(GPIOC, GPIOC_GPS_RESETn); //ensure timepulse output of GNSS module is high-z
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <ThdCntr+0x118>)
  palClearPad(GPIOB, GPIOB_CAL_SOUR_SEL);
 8004050:	8350      	strh	r0, [r2, #26]
  palClearPad(GPIOC, GPIOC_GPS_RESETn); //ensure timepulse output of GNSS module is high-z
 8004052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004056:	835a      	strh	r2, [r3, #26]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_MCO1EN); //disable output
 8004058:	68ab      	ldr	r3, [r5, #8]
 800405a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  palSetPadMode(GPIOA, GPIOA_MCO_1, PAL_MODE_OUTPUT_PUSHPULL);
 800405e:	4639      	mov	r1, r7
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_MCO1EN); //disable output
 8004060:	60ab      	str	r3, [r5, #8]
  palSetPadMode(GPIOA, GPIOA_MCO_1, PAL_MODE_OUTPUT_PUSHPULL);
 8004062:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004066:	f7fc fdfb 	bl	8000c60 <_pal_lld_setgroupmode.constprop.0>
  palClearPad(GPIOA, GPIOA_MCO_1);
 800406a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800406e:	8373      	strh	r3, [r6, #26]

  //R4 -----------------------------------------------------------
  //default: all 0

  //Programming sequence R4,R3,..,R0 (write to R0 transfers double buffered settings)
  adf_write_reg(ADF4156_reg[4]);
 8004070:	2004      	movs	r0, #4
 8004072:	f7fd fd05 	bl	8001a80 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 8004076:	2013      	movs	r0, #19
 8004078:	f7fd fd02 	bl	8001a80 <adf_write_reg>
  adf_write_reg(ADF4156_reg[2]);
 800407c:	f248 0012 	movw	r0, #32786	; 0x8012
 8004080:	f7fd fcfe 	bl	8001a80 <adf_write_reg>
  adf_write_reg(ADF4156_reg[1]);
 8004084:	2009      	movs	r0, #9
 8004086:	f7fd fcfb 	bl	8001a80 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 800408a:	4820      	ldr	r0, [pc, #128]	; (800410c <ThdCntr+0x11c>)
 800408c:	4d20      	ldr	r5, [pc, #128]	; (8004110 <ThdCntr+0x120>)
    while(!(TIM5->SR & TIM_SR_CC1IF));
    a = TIM5->CCR1; //flag CC1IF cleared by this read
    while(!(TIM5->SR & TIM_SR_CC1IF));
    b = TIM5->CCR1;

    myprintf("a: %10u, b: %10u, b-a: %10u\n", a, b, b-a);
 800408e:	4f21      	ldr	r7, [pc, #132]	; (8004114 <ThdCntr+0x124>)
 8004090:	f7fd fcf6 	bl	8001a80 <adf_write_reg>
 8004094:	2630      	movs	r6, #48	; 0x30
    while(!(TIM5->SR & TIM_SR_CC1IF));
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	079a      	lsls	r2, r3, #30
 800409a:	d5fc      	bpl.n	8004096 <ThdCntr+0xa6>
    a = TIM5->CCR1; //flag CC1IF cleared by this read
 800409c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    while(!(TIM5->SR & TIM_SR_CC1IF));
 800409e:	6922      	ldr	r2, [r4, #16]
 80040a0:	0793      	lsls	r3, r2, #30
 80040a2:	d5fc      	bpl.n	800409e <ThdCntr+0xae>
    b = TIM5->CCR1;
 80040a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    myprintf("a: %10u, b: %10u, b-a: %10u\n", a, b, b-a);
 80040a6:	4638      	mov	r0, r7
 80040a8:	1a53      	subs	r3, r2, r1
 80040aa:	f7ff f959 	bl	8003360 <myprintf>
 80040ae:	f386 8811 	msr	BASEPRI, r6
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80040b2:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 80040b6:	4313      	orrs	r3, r2
 80040b8:	d113      	bne.n	80040e2 <ThdCntr+0xf2>
  oip->dbg.lock_cnt = (cnt_t)1;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f241 3188 	movw	r1, #5000	; 0x1388
 80040c0:	2008      	movs	r0, #8
 80040c2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80040c6:	f7fd f9e3 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80040ca:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80040ce:	b95b      	cbnz	r3, 80040e8 <ThdCntr+0xf8>
 80040d0:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	dd07      	ble.n	80040e8 <ThdCntr+0xf8>
  oip->dbg.lock_cnt = (cnt_t)0;
 80040d8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	e7d9      	b.n	8004096 <ThdCntr+0xa6>
    chSysHalt("SV#4");
 80040e2:	480d      	ldr	r0, [pc, #52]	; (8004118 <ThdCntr+0x128>)
 80040e4:	f7fc fd74 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 80040e8:	480c      	ldr	r0, [pc, #48]	; (800411c <ThdCntr+0x12c>)
 80040ea:	f7fc fd71 	bl	8000bd0 <chSysHalt>
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08004de8 	.word	0x08004de8
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40020000 	.word	0x40020000
 8004100:	08004df4 	.word	0x08004df4
 8004104:	40020400 	.word	0x40020400
 8004108:	40020800 	.word	0x40020800
 800410c:	700c8000 	.word	0x700c8000
 8004110:	200009f0 	.word	0x200009f0
 8004114:	08004e00 	.word	0x08004e00
 8004118:	08004d18 	.word	0x08004d18
 800411c:	08004d40 	.word	0x08004d40

08004120 <chThdExit>:
void chThdExit(msg_t msg) {
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	2330      	movs	r3, #48	; 0x30
 8004124:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <chThdExit+0x60>)
 800412a:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 800412e:	430a      	orrs	r2, r1
 8004130:	d11a      	bne.n	8004168 <chThdExit+0x48>
  return __sch_get_currthread();
 8004132:	68dc      	ldr	r4, [r3, #12]
  return (bool)(lp->next != lp);
 8004134:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004136:	f104 052c 	add.w	r5, r4, #44	; 0x2c
  oip->dbg.lock_cnt = (cnt_t)1;
 800413a:	2101      	movs	r1, #1
 800413c:	4295      	cmp	r5, r2
 800413e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  currtp->u.exitcode = msg;
 8004142:	62a0      	str	r0, [r4, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004144:	d107      	bne.n	8004156 <chThdExit+0x36>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004146:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800414a:	b183      	cbz	r3, 800416e <chThdExit+0x4e>
}
 800414c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8004150:	200f      	movs	r0, #15
 8004152:	f7fd b96d 	b.w	8001430 <chSchGoSleepS>
  lp->next = p->next;
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	62e3      	str	r3, [r4, #44]	; 0x2c
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 800415a:	4610      	mov	r0, r2
 800415c:	f7fc ffe8 	bl	8001130 <chSchReadyI.isra.0>
  return (bool)(lp->next != lp);
 8004160:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004162:	42aa      	cmp	r2, r5
 8004164:	d0ef      	beq.n	8004146 <chThdExit+0x26>
 8004166:	e7f6      	b.n	8004156 <chThdExit+0x36>
    chSysHalt("SV#4");
 8004168:	4806      	ldr	r0, [pc, #24]	; (8004184 <chThdExit+0x64>)
 800416a:	f7fc fd31 	bl	8000bd0 <chSysHalt>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800416e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8004172:	079b      	lsls	r3, r3, #30
 8004174:	d1ea      	bne.n	800414c <chThdExit+0x2c>
  p->prev->next = p->next;
 8004176:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800417a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800417c:	605a      	str	r2, [r3, #4]
  return p;
 800417e:	e7e5      	b.n	800414c <chThdExit+0x2c>
 8004180:	200009f0 	.word	0x200009f0
 8004184:	08004d18 	.word	0x08004d18
	...

08004190 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004190:	f3ef 8309 	mrs	r3, PSP
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8004194:	4905      	ldr	r1, [pc, #20]	; (80041ac <SVC_Handler+0x1c>)
 8004196:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004198:	f022 0201 	bic.w	r2, r2, #1
    psp += sizeof (struct port_extctx);
 800419c:	3368      	adds	r3, #104	; 0x68
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800419e:	634a      	str	r2, [r1, #52]	; 0x34
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80041a0:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80041a4:	2300      	movs	r3, #0
 80041a6:	f383 8811 	msr	BASEPRI, r3
}
 80041aa:	4770      	bx	lr
 80041ac:	e000ef00 	.word	0xe000ef00

080041b0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80041b0:	4b60      	ldr	r3, [pc, #384]	; (8004334 <__early_init+0x184>)
  gpiop->OTYPER  = config->otyper;
 80041b2:	4961      	ldr	r1, [pc, #388]	; (8004338 <__early_init+0x188>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80041b4:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 80041b6:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 800437c <__early_init+0x1cc>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80041ba:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80041be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80041c2:	611a      	str	r2, [r3, #16]
 80041c4:	6918      	ldr	r0, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80041c6:	4c5d      	ldr	r4, [pc, #372]	; (800433c <__early_init+0x18c>)
  gpiop->PUPDR   = config->pupdr;
 80041c8:	4f5d      	ldr	r7, [pc, #372]	; (8004340 <__early_init+0x190>)
  gpiop->MODER   = config->moder;
 80041ca:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8004380 <__early_init+0x1d0>
  gpiop->PUPDR   = config->pupdr;
 80041ce:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8004384 <__early_init+0x1d4>
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80041d2:	4e5c      	ldr	r6, [pc, #368]	; (8004344 <__early_init+0x194>)
  gpiop->MODER   = config->moder;
 80041d4:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8004388 <__early_init+0x1d8>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80041d8:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 80041dc:	6118      	str	r0, [r3, #16]
 80041de:	6918      	ldr	r0, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80041e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041e2:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 80041e6:	6318      	str	r0, [r3, #48]	; 0x30
 80041e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80041ea:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 80041ee:	6518      	str	r0, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80041f0:	2200      	movs	r2, #0
  gpiop->OSPEEDR = config->ospeedr;
 80041f2:	4855      	ldr	r0, [pc, #340]	; (8004348 <__early_init+0x198>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80041f4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 80041f6:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80041f8:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80041fa:	4854      	ldr	r0, [pc, #336]	; (800434c <__early_init+0x19c>)
 80041fc:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 80041fe:	2002      	movs	r0, #2
 8004200:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004202:	f247 7002 	movw	r0, #30466	; 0x7702
 8004206:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004208:	f44f 60ee 	mov.w	r0, #1904	; 0x770
 800420c:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800420e:	f100 5024 	add.w	r0, r0, #687865856	; 0x29000000
 8004212:	f500 1023 	add.w	r0, r0, #2670592	; 0x28c000
 8004216:	f600 1034 	addw	r0, r0, #2356	; 0x934
 800421a:	6008      	str	r0, [r1, #0]
  gpiop->ODR     = config->odr;
 800421c:	f44f 5a81 	mov.w	sl, #4128	; 0x1020
  gpiop->OTYPER  = config->otyper;
 8004220:	484b      	ldr	r0, [pc, #300]	; (8004350 <__early_init+0x1a0>)
  gpiop->OSPEEDR = config->ospeedr;
 8004222:	494c      	ldr	r1, [pc, #304]	; (8004354 <__early_init+0x1a4>)
  gpiop->OTYPER  = config->otyper;
 8004224:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004226:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
 800422a:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800422c:	60e7      	str	r7, [r4, #12]
  gpiop->OTYPER  = config->otyper;
 800422e:	494a      	ldr	r1, [pc, #296]	; (8004358 <__early_init+0x1a8>)
  gpiop->ODR     = config->odr;
 8004230:	f8c4 a014 	str.w	sl, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8004234:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8004236:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004238:	f8c4 9000 	str.w	r9, [r4]
  gpiop->ODR     = config->odr;
 800423c:	f44f 6400 	mov.w	r4, #2048	; 0x800
  gpiop->OTYPER  = config->otyper;
 8004240:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004242:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8004244:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->ODR     = config->odr;
 8004248:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800424a:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 800424e:	6204      	str	r4, [r0, #32]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8004250:	4f42      	ldr	r7, [pc, #264]	; (800435c <__early_init+0x1ac>)
  gpiop->AFRH    = config->afrh;
 8004252:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004254:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 8004258:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800425a:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800425c:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8004260:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8004262:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8004264:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004266:	600a      	str	r2, [r1, #0]
  PWR->CR = STM32_VOS;
 8004268:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 800426c:	641f      	str	r7, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800426e:	6032      	str	r2, [r6, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	0794      	lsls	r4, r2, #30
 800427c:	d5fc      	bpl.n	8004278 <__early_init+0xc8>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800427e:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004280:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <__early_init+0x184>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004282:	f021 0103 	bic.w	r1, r1, #3
 8004286:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004288:	6893      	ldr	r3, [r2, #8]
 800428a:	f013 030c 	ands.w	r3, r3, #12
 800428e:	d1fb      	bne.n	8004288 <__early_init+0xd8>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004290:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8004292:	4928      	ldr	r1, [pc, #160]	; (8004334 <__early_init+0x184>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004294:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 8004298:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800429a:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 800429c:	6813      	ldr	r3, [r2, #0]
 800429e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80042a2:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80042a4:	680b      	ldr	r3, [r1, #0]
 80042a6:	0398      	lsls	r0, r3, #14
 80042a8:	d5fc      	bpl.n	80042a4 <__early_init+0xf4>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <__early_init+0x1b0>)
 80042ac:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80042ae:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80042b0:	4a24      	ldr	r2, [pc, #144]	; (8004344 <__early_init+0x194>)
  RCC->CR |= RCC_CR_PLLON;
 80042b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b6:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80042b8:	6853      	ldr	r3, [r2, #4]
 80042ba:	0459      	lsls	r1, r3, #17
 80042bc:	d5fc      	bpl.n	80042b8 <__early_init+0x108>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <__early_init+0x184>)
 80042c0:	6813      	ldr	r3, [r2, #0]
 80042c2:	019b      	lsls	r3, r3, #6
 80042c4:	d5fc      	bpl.n	80042c0 <__early_init+0x110>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <__early_init+0x1b4>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80042c8:	4c27      	ldr	r4, [pc, #156]	; (8004368 <__early_init+0x1b8>)
 80042ca:	6094      	str	r4, [r2, #8]
    RCC->DCKCFGR = dckcfgr |
 80042cc:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80042ce:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 80042d0:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80042d4:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b24      	ldr	r3, [pc, #144]	; (800436c <__early_init+0x1bc>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d01e      	beq.n	800431e <__early_init+0x16e>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <__early_init+0x1c0>)
 80042e2:	f240 7203 	movw	r2, #1795	; 0x703
 80042e6:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80042e8:	4a21      	ldr	r2, [pc, #132]	; (8004370 <__early_init+0x1c0>)
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d1fa      	bne.n	80042ea <__early_init+0x13a>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80042f4:	4a0f      	ldr	r2, [pc, #60]	; (8004334 <__early_init+0x184>)
 80042f6:	6893      	ldr	r3, [r2, #8]
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80042fe:	6893      	ldr	r3, [r2, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d1fa      	bne.n	80042fe <__early_init+0x14e>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8004308:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800430a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800430e:	6453      	str	r3, [r2, #68]	; 0x44
 8004310:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8004312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004316:	6653      	str	r3, [r2, #100]	; 0x64
 8004318:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 800431a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <__early_init+0x1c4>)
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <__early_init+0x1c8>)
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d1db      	bne.n	80042e0 <__early_init+0x130>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <__early_init+0x1c0>)
 800432a:	f240 1203 	movw	r2, #259	; 0x103
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e7da      	b.n	80042e8 <__early_init+0x138>
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
 8004338:	40020000 	.word	0x40020000
 800433c:	40020400 	.word	0x40020400
 8004340:	00aaa0a8 	.word	0x00aaa0a8
 8004344:	40007000 	.word	0x40007000
 8004348:	556b75a5 	.word	0x556b75a5
 800434c:	a8800a02 	.word	0xa8800a02
 8004350:	40020800 	.word	0x40020800
 8004354:	9a555555 	.word	0x9a555555
 8004358:	40021c00 	.word	0x40021c00
 800435c:	10000400 	.word	0x10000400
 8004360:	04401818 	.word	0x04401818
 8004364:	e0042000 	.word	0xe0042000
 8004368:	38881000 	.word	0x38881000
 800436c:	20006411 	.word	0x20006411
 8004370:	40023c00 	.word	0x40023c00
 8004374:	e000ed00 	.word	0xe000ed00
 8004378:	410fc241 	.word	0x410fc241
 800437c:	aaaaaaa0 	.word	0xaaaaaaa0
 8004380:	55000581 	.word	0x55000581
 8004384:	880aaa82 	.word	0x880aaa82
 8004388:	11500034 	.word	0x11500034
 800438c:	00000000 	.word	0x00000000

08004390 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <main+0x88>)
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	f062 0287 	orn	r2, r2, #135	; 0x87


/*
 * Application entry point.
 */
int main(void) {
 8004398:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	f002 0287 	and.w	r2, r2, #135	; 0x87
 80043a4:	611a      	str	r2, [r3, #16]
 80043a6:	691a      	ldr	r2, [r3, #16]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 80043ae:	621a      	str	r2, [r3, #32]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80043b6:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80043bc:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 80043be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c0:	6258      	str	r0, [r3, #36]	; 0x24
 80043c2:	2100      	movs	r1, #0
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	6259      	str	r1, [r3, #36]	; 0x24
 80043c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 80043cc:	4813      	ldr	r0, [pc, #76]	; (800441c <main+0x8c>)
  rccEnablePWRInterface(true);
 80043ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
 80043d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043da:	661a      	str	r2, [r3, #96]	; 0x60
 80043dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 80043de:	6802      	ldr	r2, [r0, #0]
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80043e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80043ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80043f0:	b089      	sub	sp, #36	; 0x24
 80043f2:	d003      	beq.n	80043fc <main+0x6c>
    RCC->BDCR = RCC_BDCR_BDRST;
 80043f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043f8:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80043fa:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80043fc:	4807      	ldr	r0, [pc, #28]	; (800441c <main+0x8c>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <main+0x90>)
 8004400:	6841      	ldr	r1, [r0, #4]
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <main+0x94>)
 8004404:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004408:	2400      	movs	r4, #0
 800440a:	6041      	str	r1, [r0, #4]
 800440c:	4906      	ldr	r1, [pc, #24]	; (8004428 <main+0x98>)
 800440e:	6014      	str	r4, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004410:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8004414:	e00c      	b.n	8004430 <main+0xa0>
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	40007000 	.word	0x40007000
 8004420:	20000cf8 	.word	0x20000cf8
 8004424:	08004ecc 	.word	0x08004ecc
 8004428:	40026010 	.word	0x40026010
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 800442c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8004430:	600c      	str	r4, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8004432:	330c      	adds	r3, #12
 8004434:	4298      	cmp	r0, r3
 8004436:	f102 0208 	add.w	r2, r2, #8
    dma.streams[i].func = NULL;
 800443a:	f842 4c04 	str.w	r4, [r2, #-4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800443e:	d1f5      	bne.n	800442c <main+0x9c>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004440:	4bc1      	ldr	r3, [pc, #772]	; (8004748 <main+0x3b8>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8004442:	49c2      	ldr	r1, [pc, #776]	; (800474c <main+0x3bc>)
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004444:	4ac2      	ldr	r2, [pc, #776]	; (8004750 <main+0x3c0>)
  rccResetADC();
 8004446:	4dc3      	ldr	r5, [pc, #780]	; (8004754 <main+0x3c4>)
  dacp->state = DAC_STOP;
 8004448:	4ec3      	ldr	r6, [pc, #780]	; (8004758 <main+0x3c8>)
  sdObjectInit(&SD1, NULL, notify1);
 800444a:	f8df a39c 	ldr.w	sl, [pc, #924]	; 80047e8 <main+0x458>
  sdObjectInit(&SD2, NULL, notify2);
 800444e:	f8df b39c 	ldr.w	fp, [pc, #924]	; 80047ec <main+0x45c>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state           = SPI_STOP;
 8004452:	f8df 839c 	ldr.w	r8, [pc, #924]	; 80047f0 <main+0x460>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8004456:	f04f 37ff 	mov.w	r7, #4294967295
 800445a:	609f      	str	r7, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 800445c:	60df      	str	r7, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 800445e:	608f      	str	r7, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8004460:	60cf      	str	r7, [r1, #12]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8004462:	49be      	ldr	r1, [pc, #760]	; (800475c <main+0x3cc>)
 8004464:	2370      	movs	r3, #112	; 0x70
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004466:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800446a:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
  adcp->config   = NULL;
  adcp->samples  = NULL;
 800446e:	e9c1 4401 	strd	r4, r4, [r1, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 8004472:	e9c1 4403 	strd	r4, r4, [r1, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8004476:	614c      	str	r4, [r1, #20]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004478:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800447c:	6010      	str	r0, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800447e:	f882 3336 	strb.w	r3, [r2, #822]	; 0x336
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004486:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 800448a:	2020      	movs	r0, #32
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800448c:	6053      	str	r3, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800448e:	23c0      	movs	r3, #192	; 0xc0
 8004490:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004494:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004498:	6050      	str	r0, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800449a:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800449e:	2340      	movs	r3, #64	; 0x40
  adcp->state    = ADC_STOP;
 80044a0:	f04f 0901 	mov.w	r9, #1
 80044a4:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 80044a8:	f101 0018 	add.w	r0, r1, #24
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044ac:	6053      	str	r3, [r2, #4]
 80044ae:	f881 9000 	strb.w	r9, [r1]
 80044b2:	f7fc fd25 	bl	8000f00 <chMtxObjectInit>
 80044b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  ADCD1.dmastp  = NULL;
 80044b8:	62cc      	str	r4, [r1, #44]	; 0x2c
  rccResetADC();
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	626b      	str	r3, [r5, #36]	; 0x24
 80044c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c6:	626b      	str	r3, [r5, #36]	; 0x24
 80044c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044ca:	2060      	movs	r0, #96	; 0x60
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  dacp->thread = NULL;
 80044d0:	e9c6 4404 	strd	r4, r4, [r6, #16]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80044d4:	f882 0312 	strb.w	r0, [r2, #786]	; 0x312
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80044d8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80044dc:	6013      	str	r3, [r2, #0]
  ADCD1.adc     = ADC1;
 80044de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044e2:	f5a3 3338 	sub.w	r3, r3, #188416	; 0x2e000
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80044e6:	4a9e      	ldr	r2, [pc, #632]	; (8004760 <main+0x3d0>)
 80044e8:	628b      	str	r3, [r1, #40]	; 0x28
 80044ea:	f106 0018 	add.w	r0, r6, #24
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80044ee:	4b9d      	ldr	r3, [pc, #628]	; (8004764 <main+0x3d4>)
 80044f0:	630b      	str	r3, [r1, #48]	; 0x30
  dacp->state = DAC_STOP;
 80044f2:	f886 9000 	strb.w	r9, [r6]
  DACD1.params  = &dac1_ch1_params;
 80044f6:	499c      	ldr	r1, [pc, #624]	; (8004768 <main+0x3d8>)
 80044f8:	f7fc fd02 	bl	8000f00 <chMtxObjectInit>
  GPTD6.tim = STM32_TIM6;
 80044fc:	4b9b      	ldr	r3, [pc, #620]	; (800476c <main+0x3dc>)
 80044fe:	62b1      	str	r1, [r6, #40]	; 0x28
 8004500:	f102 000c 	add.w	r0, r2, #12
 8004504:	499a      	ldr	r1, [pc, #616]	; (8004770 <main+0x3e0>)
 8004506:	f882 9000 	strb.w	r9, [r2]
  i2cp->config = NULL;
 800450a:	6054      	str	r4, [r2, #4]
 800450c:	60d9      	str	r1, [r3, #12]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800450e:	f883 9000 	strb.w	r9, [r3]
  sdObjectInit(&SD1, NULL, notify1);
 8004512:	4998      	ldr	r1, [pc, #608]	; (8004774 <main+0x3e4>)
  gptp->config = NULL;
 8004514:	605c      	str	r4, [r3, #4]
  DACD1.dma = NULL;
 8004516:	62f4      	str	r4, [r6, #44]	; 0x2c
 8004518:	f7fc fcf2 	bl	8000f00 <chMtxObjectInit>
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 800451c:	4b96      	ldr	r3, [pc, #600]	; (8004778 <main+0x3e8>)
 800451e:	6353      	str	r3, [r2, #52]	; 0x34
 8004520:	4650      	mov	r0, sl
  I2CD2.dmarx  = NULL;
  I2CD2.dmatx  = NULL;
 8004522:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
  I2CD2.thread = NULL;
 8004526:	61d4      	str	r4, [r2, #28]
 8004528:	f7fc fc22 	bl	8000d70 <sdObjectInit.constprop.0>
  SD1.clock = STM32_PCLK2;
 800452c:	4b93      	ldr	r3, [pc, #588]	; (800477c <main+0x3ec>)
 800452e:	4994      	ldr	r1, [pc, #592]	; (8004780 <main+0x3f0>)
  sdObjectInit(&SD2, NULL, notify2);
 8004530:	4658      	mov	r0, fp
  SD1.clock = STM32_PCLK2;
 8004532:	e9ca 131d 	strd	r1, r3, [sl, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
 8004536:	4993      	ldr	r1, [pc, #588]	; (8004784 <main+0x3f4>)
 8004538:	f7fc fc1a 	bl	8000d70 <sdObjectInit.constprop.0>
  SD2.clock = STM32_PCLK1;
 800453c:	4b92      	ldr	r3, [pc, #584]	; (8004788 <main+0x3f8>)
 800453e:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 80047f4 <main+0x464>
 8004542:	f888 9000 	strb.w	r9, [r8]
 8004546:	f108 000c 	add.w	r0, r8, #12
 800454a:	e9cb c31d 	strd	ip, r3, [fp, #116]	; 0x74
  spip->config          = NULL;
#if SPI_USE_SYNCHRONIZATION == TRUE
  spip->sync_transfer   = NULL;
 800454e:	e9c8 4401 	strd	r4, r4, [r8, #4]
 8004552:	f7fc fcd5 	bl	8000f00 <chMtxObjectInit>
  ST_ENABLE_CLOCK();
 8004556:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  ST_ENABLE_STOP();
 8004558:	498c      	ldr	r1, [pc, #560]	; (800478c <main+0x3fc>)
  ST_ENABLE_CLOCK();
 800455a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
 800455e:	e9c8 4408 	strd	r4, r4, [r8, #32]
 8004562:	646b      	str	r3, [r5, #68]	; 0x44
 8004564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800456a:	666b      	str	r3, [r5, #100]	; 0x64
 800456c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  ST_ENABLE_STOP();
 800456e:	68ca      	ldr	r2, [r1, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004570:	4b87      	ldr	r3, [pc, #540]	; (8004790 <main+0x400>)
  ST_ENABLE_STOP();
 8004572:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004576:	60ca      	str	r2, [r1, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004578:	f242 720e 	movw	r2, #9998	; 0x270e
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800457e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004584:	619c      	str	r4, [r3, #24]
  tmp->cumulative = (rttime_t)0;
 8004586:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
 8004588:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800458a:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800458c:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800458e:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8004592:	f8c3 9000 	str.w	r9, [r3]
 8004596:	2300      	movs	r3, #0
 8004598:	e9cd 2306 	strd	r2, r3, [sp, #24]
  SPID2.spi       = SPI2;
 800459c:	4b7d      	ldr	r3, [pc, #500]	; (8004794 <main+0x404>)
 800459e:	f8c8 301c 	str.w	r3, [r8, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 80045a2:	4b7d      	ldr	r3, [pc, #500]	; (8004798 <main+0x408>)
 80045a4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  tmp->worst      = (rtcnt_t)0;
 80045a8:	e9cd 7402 	strd	r7, r4, [sp, #8]
  tmp->n          = (ucnt_t)0;
 80045ac:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ch_system.state = ch_sys_initializing;
 80045b0:	4f7a      	ldr	r7, [pc, #488]	; (800479c <main+0x40c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 80045b2:	3330      	adds	r3, #48	; 0x30
}
 80045b4:	2504      	movs	r5, #4
 80045b6:	f887 9000 	strb.w	r9, [r7]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 80045ba:	60bc      	str	r4, [r7, #8]
 80045bc:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 80045c0:	a802      	add	r0, sp, #8
 80045c2:	f7fc fb1d 	bl	8000c00 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80045c6:	f7fc fb23 	bl	8000c10 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 80045ca:	3d01      	subs	r5, #1
 80045cc:	d1f8      	bne.n	80045c0 <main+0x230>
  tcp->offset = tm.best;
 80045ce:	9a02      	ldr	r2, [sp, #8]
  ch_memcore.basemem = __heap_base__;
 80045d0:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <main+0x410>)
 80045d2:	60ba      	str	r2, [r7, #8]
 80045d4:	4a73      	ldr	r2, [pc, #460]	; (80047a4 <main+0x414>)
 80045d6:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 80045d8:	4a73      	ldr	r2, [pc, #460]	; (80047a8 <main+0x418>)
 80045da:	605a      	str	r2, [r3, #4]
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80045dc:	4b73      	ldr	r3, [pc, #460]	; (80047ac <main+0x41c>)
 80045de:	4a74      	ldr	r2, [pc, #464]	; (80047b0 <main+0x420>)
 80045e0:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 80045e2:	f103 000c 	add.w	r0, r3, #12
  H_PAGES(&default_heap.header) = 0;
 80045e6:	e9c3 5501 	strd	r5, r5, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 80045ea:	f7fc fc89 	bl	8000f00 <chMtxObjectInit>
 * @init
 */
void __factory_init(void) {

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 80045ee:	4871      	ldr	r0, [pc, #452]	; (80047b4 <main+0x424>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 80045f0:	4c71      	ldr	r4, [pc, #452]	; (80047b8 <main+0x428>)
 80045f2:	f7fc fc85 	bl	8000f00 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 80045f6:	f100 0310 	add.w	r3, r0, #16
 80045fa:	6103      	str	r3, [r0, #16]
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 80045fc:	2214      	movs	r2, #20
 80045fe:	2304      	movs	r3, #4
 8004600:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8004604:	6343      	str	r3, [r0, #52]	; 0x34
 8004606:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800460a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800460c:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8004610:	6403      	str	r3, [r0, #64]	; 0x40
 8004612:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8004616:	6443      	str	r3, [r0, #68]	; 0x44
  mp->provider = provider;
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <main+0x42c>)
 800461a:	6203      	str	r3, [r0, #32]
 800461c:	6383      	str	r3, [r0, #56]	; 0x38

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800461e:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <main+0x430>)
 8004620:	63a3      	str	r3, [r4, #56]	; 0x38
 8004622:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8004626:	6243      	str	r3, [r0, #36]	; 0x24
 8004628:	f100 0328 	add.w	r3, r0, #40	; 0x28
 800462c:	6283      	str	r3, [r0, #40]	; 0x28
  mp->object_size = size;
 800462e:	231c      	movs	r3, #28
  mp->next = NULL;
 8004630:	6145      	str	r5, [r0, #20]
 8004632:	62c5      	str	r5, [r0, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 8004634:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 8004636:	6325      	str	r5, [r4, #48]	; 0x30
  mp->object_size = size;
 8004638:	6303      	str	r3, [r0, #48]	; 0x30
 800463a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800463e:	f38a 8811 	msr	BASEPRI, sl
  __ASM volatile ("cpsie i" : : : "memory");
 8004642:	b662      	cpsie	i
  pqp->prio = (tprio_t)0;
 8004644:	e9c4 4501 	strd	r4, r5, [r4, #4]
  tp->epending          = (eventmask_t)0;
 8004648:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800464c:	4b5d      	ldr	r3, [pc, #372]	; (80047c4 <main+0x434>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 800464e:	6365      	str	r5, [r4, #52]	; 0x34

  sdp->panic_msg = NULL;

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 8004650:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8004654:	68d9      	ldr	r1, [r3, #12]

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8004656:	83a5      	strh	r5, [r4, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004658:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 800465c:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 800465e:	4a5a      	ldr	r2, [pc, #360]	; (80047c8 <main+0x438>)
  tp->owner             = oip;
 8004660:	6564      	str	r4, [r4, #84]	; 0x54
 8004662:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8004664:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004666:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800466a:	4958      	ldr	r1, [pc, #352]	; (80047cc <main+0x43c>)
 800466c:	4848      	ldr	r0, [pc, #288]	; (8004790 <main+0x400>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800466e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004672:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004676:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004678:	f04f 0b20 	mov.w	fp, #32
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	600a      	str	r2, [r1, #0]
 8004682:	f883 b01f 	strb.w	fp, [r3, #31]
  dlhp->next  = dlhp;
 8004686:	f104 0110 	add.w	r1, r4, #16
 800468a:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
 800468e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004690:	9301      	str	r3, [sp, #4]
  dlhp->prev  = dlhp;
 8004692:	e9c4 1104 	strd	r1, r1, [r4, #16]
  tp->hdr.pqueue.prio   = prio;
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	6461      	str	r1, [r4, #68]	; 0x44
  tp->realprio          = prio;
 800469a:	67e1      	str	r1, [r4, #124]	; 0x7c
  p->prev       = qp->prev;
 800469c:	f104 0128 	add.w	r1, r4, #40	; 0x28
  tp->wabase = tdp->wbase;
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <main+0x440>)
 80046a2:	6521      	str	r1, [r4, #80]	; 0x50
  qp->next = qp;
 80046a4:	f104 016c 	add.w	r1, r4, #108	; 0x6c
  qp->prev = qp;
 80046a8:	e9c4 111b 	strd	r1, r1, [r4, #108]	; 0x6c
  p->prev->next = p;
 80046ac:	f104 004c 	add.w	r0, r4, #76	; 0x4c
  tp->name              = name;
 80046b0:	4948      	ldr	r1, [pc, #288]	; (80047d4 <main+0x444>)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 80046b2:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 80046b6:	62a0      	str	r0, [r4, #40]	; 0x28
  dlhp->delta = (sysinterval_t)-1;
 80046b8:	f04f 3cff 	mov.w	ip, #4294967295
  sdp->lock_cnt = (cnt_t)1;
 80046bc:	2201      	movs	r2, #1
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 80046be:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
  tp->name              = name;
 80046c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80046c4:	f8c4 c018 	str.w	ip, [r4, #24]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 80046c8:	4943      	ldr	r1, [pc, #268]	; (80047d8 <main+0x448>)
 80046ca:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  lp->next = lp;
 80046ce:	f104 0c68 	add.w	ip, r4, #104	; 0x68
 80046d2:	46a9      	mov	r9, r5
 80046d4:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  pqp->next = pqp;
 80046d8:	6024      	str	r4, [r4, #0]
 80046da:	e9c4 8908 	strd	r8, r9, [r4, #32]
 80046de:	65e1      	str	r1, [r4, #92]	; 0x5c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80046e0:	f1a0 0164 	sub.w	r1, r0, #100	; 0x64
 80046e4:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
 80046e8:	493c      	ldr	r1, [pc, #240]	; (80047dc <main+0x44c>)
 80046ea:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 80046ee:	493c      	ldr	r1, [pc, #240]	; (80047e0 <main+0x450>)
 80046f0:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
  tp->name              = name;
 80046f4:	493b      	ldr	r1, [pc, #236]	; (80047e4 <main+0x454>)
 80046f6:	f8c3 11d4 	str.w	r1, [r3, #468]	; 0x1d4
  p->next       = qp;
 80046fa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80046fe:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8004702:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  p->prev       = qp->prev;
 8004706:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  tp->refs              = (trefs_t)1;
 800470a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  tp->hdr.pqueue.prio   = prio;
 800470e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tp->realprio          = prio;
 8004712:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  tp->refs              = (trefs_t)1;
 8004716:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
  tp->state             = CH_STATE_WTSTART;
 800471a:	f04f 0202 	mov.w	r2, #2
  qp->next = qp;
 800471e:	f503 7ef4 	add.w	lr, r3, #488	; 0x1e8
  p->prev       = qp->prev;
 8004722:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
 8004726:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
  lp->next = lp;
 800472a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  p->prev->next = p;
 800472e:	f100 0210 	add.w	r2, r0, #16
  qp->prev = qp;
 8004732:	e9c3 ee7a 	strd	lr, lr, [r3, #488]	; 0x1e8
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8004736:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
  lp->next = lp;
 800473a:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
  tp->epending          = (eventmask_t)0;
 800473e:	e9c3 557c 	strd	r5, r5, [r3, #496]	; 0x1f0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8004742:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
 8004746:	e057      	b.n	80047f8 <main+0x468>
 8004748:	40026000 	.word	0x40026000
 800474c:	40026400 	.word	0x40026400
 8004750:	e000e100 	.word	0xe000e100
 8004754:	40023800 	.word	0x40023800
 8004758:	2000083c 	.word	0x2000083c
 800475c:	20000808 	.word	0x20000808
 8004760:	2000087c 	.word	0x2000087c
 8004764:	00022c16 	.word	0x00022c16
 8004768:	08004fc0 	.word	0x08004fc0
 800476c:	2000086c 	.word	0x2000086c
 8004770:	40001000 	.word	0x40001000
 8004774:	08000bb1 	.word	0x08000bb1
 8004778:	40005800 	.word	0x40005800
 800477c:	05f5e0f0 	.word	0x05f5e0f0
 8004780:	40011000 	.word	0x40011000
 8004784:	08000bc1 	.word	0x08000bc1
 8004788:	02faf078 	.word	0x02faf078
 800478c:	e0042000 	.word	0xe0042000
 8004790:	40014800 	.word	0x40014800
 8004794:	40003800 	.word	0x40003800
 8004798:	00010016 	.word	0x00010016
 800479c:	20000cd0 	.word	0x20000cd0
 80047a0:	20000cc8 	.word	0x20000cc8
 80047a4:	20002020 	.word	0x20002020
 80047a8:	20008000 	.word	0x20008000
 80047ac:	20000cdc 	.word	0x20000cdc
 80047b0:	08000fc1 	.word	0x08000fc1
 80047b4:	20000c80 	.word	0x20000c80
 80047b8:	200009f0 	.word	0x200009f0
 80047bc:	08001041 	.word	0x08001041
 80047c0:	08004f80 	.word	0x08004f80
 80047c4:	e000ed00 	.word	0xe000ed00
 80047c8:	05fa0300 	.word	0x05fa0300
 80047cc:	e0001000 	.word	0xe0001000
 80047d0:	20000a80 	.word	0x20000a80
 80047d4:	08004f94 	.word	0x08004f94
 80047d8:	20000400 	.word	0x20000400
 80047dc:	08000bf1 	.word	0x08000bf1
 80047e0:	0800031d 	.word	0x0800031d
 80047e4:	08004e20 	.word	0x08004e20
 80047e8:	200008b4 	.word	0x200008b4
 80047ec:	20000934 	.word	0x20000934
 80047f0:	200009b4 	.word	0x200009b4
 80047f4:	40004400 	.word	0x40004400
  tp->owner             = oip;
 80047f8:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  p->prev->next = p;
 80047fc:	64e2      	str	r2, [r4, #76]	; 0x4c
  qp->prev      = p;
 80047fe:	62e2      	str	r2, [r4, #44]	; 0x2c
  sdp->panic_msg = NULL;
 8004800:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tp->wabase = tdp->wbase;
 8004804:	f8c3 31d8 	str.w	r3, [r3, #472]	; 0x1d8
 8004808:	f8c4 c00c 	str.w	ip, [r4, #12]
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800480c:	f7fc fc90 	bl	8001130 <chSchReadyI.isra.0>
  ch_system.state = ch_sys_running;
 8004810:	f04f 0302 	mov.w	r3, #2
 8004814:	703b      	strb	r3, [r7, #0]
 8004816:	f7fd fafb 	bl	8001e10 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800481a:	f385 8811 	msr	BASEPRI, r5
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  chMtxObjectInit(&mutex_bsp2);
 800481e:	483e      	ldr	r0, [pc, #248]	; (8004918 <main+0x588>)
 8004820:	f7fc fb6e 	bl	8000f00 <chMtxObjectInit>
  palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 8004824:	2103      	movs	r1, #3
 8004826:	4658      	mov	r0, fp
 8004828:	f7fc fa1a 	bl	8000c60 <_pal_lld_setgroupmode.constprop.0>
 800482c:	f38a 8811 	msr	BASEPRI, sl
  __dbg_check_lock();
 8004830:	f7fd fb06 	bl	8001e40 <__dbg_check_lock>
  if (dacp->state == DAC_STOP) {
 8004834:	7833      	ldrb	r3, [r6, #0]
  dacp->config = config;
 8004836:	4a39      	ldr	r2, [pc, #228]	; (800491c <main+0x58c>)
 8004838:	6132      	str	r2, [r6, #16]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d054      	beq.n	80048e8 <main+0x558>
    dacp->state = DAC_READY;
 800483e:	2302      	movs	r3, #2
 8004840:	7033      	strb	r3, [r6, #0]
  __dbg_check_unlock();
 8004842:	f7fd fae5 	bl	8001e10 <__dbg_check_unlock>
 8004846:	2300      	movs	r3, #0
 8004848:	f383 8811 	msr	BASEPRI, r3
  dac_lld_put_channel(dacp, channel, sample);
 800484c:	f640 7031 	movw	r0, #3889	; 0xf31
 8004850:	f7fc fa6e 	bl	8000d30 <dac_lld_put_channel.constprop.0>
  chThdSleepMilliseconds(100); //wait for opamp input to settle
 8004854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004858:	f7fd f8e2 	bl	8001a20 <chThdSleep>
  palSetPad(GPIOA, GPIOA_heater_enable);
 800485c:	4b30      	ldr	r3, [pc, #192]	; (8004920 <main+0x590>)

  /*
   * Create threads
   */

  chThdCreateStatic(waThdBlinker, sizeof(waThdBlinker), NORMALPRIO, ThdBlinker, NULL);
 800485e:	4a31      	ldr	r2, [pc, #196]	; (8004924 <main+0x594>)
 8004860:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004864:	8318      	strh	r0, [r3, #24]
 8004866:	f44f 7110 	mov.w	r1, #576	; 0x240
 800486a:	482f      	ldr	r0, [pc, #188]	; (8004928 <main+0x598>)
 800486c:	f7fd fb00 	bl	8001e70 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdSerial, sizeof(waThdSerial), NORMALPRIO, ThdSerial, NULL);
 8004870:	4a2e      	ldr	r2, [pc, #184]	; (800492c <main+0x59c>)
 8004872:	482f      	ldr	r0, [pc, #188]	; (8004930 <main+0x5a0>)
 8004874:	f44f 6119 	mov.w	r1, #2448	; 0x990
 8004878:	f7fd fafa 	bl	8001e70 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdBeeper, sizeof(waThdBeeper), NORMALPRIO, ThdBeeper, NULL);
 800487c:	4a2d      	ldr	r2, [pc, #180]	; (8004934 <main+0x5a4>)
 800487e:	482e      	ldr	r0, [pc, #184]	; (8004938 <main+0x5a8>)
 8004880:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004884:	f7fd faf4 	bl	8001e70 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdGNSS, sizeof(waThdGNSS), NORMALPRIO, ThdGNSS, NULL);
 8004888:	4a2c      	ldr	r2, [pc, #176]	; (800493c <main+0x5ac>)
 800488a:	482d      	ldr	r0, [pc, #180]	; (8004940 <main+0x5b0>)
 800488c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004890:	f7fd faee 	bl	8001e70 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdCntr, sizeof(waThdCntr), NORMALPRIO, ThdCntr, NULL);
 8004894:	4a2b      	ldr	r2, [pc, #172]	; (8004944 <main+0x5b4>)
 8004896:	482c      	ldr	r0, [pc, #176]	; (8004948 <main+0x5b8>)
 8004898:	f44f 7110 	mov.w	r1, #576	; 0x240
 800489c:	f7fd fae8 	bl	8001e70 <chThdCreateStatic.constprop.0.isra.0>

  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  myprintf("Thdmain\n");
 80048a0:	482a      	ldr	r0, [pc, #168]	; (800494c <main+0x5bc>)
 80048a2:	f7fe fd5d 	bl	8003360 <myprintf>
 80048a6:	2530      	movs	r5, #48	; 0x30
  oip->dbg.lock_cnt = (cnt_t)1;
 80048a8:	2601      	movs	r6, #1
 80048aa:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80048ae:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80048b2:	4313      	orrs	r3, r2
 80048b4:	d112      	bne.n	80048dc <main+0x54c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80048b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80048ba:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 80048bc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80048c0:	f7fc fde6 	bl	8001490 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80048c4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80048c8:	b95b      	cbnz	r3, 80048e2 <main+0x552>
 80048ca:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	dd07      	ble.n	80048e2 <main+0x552>
  oip->dbg.lock_cnt = (cnt_t)0;
 80048d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80048d6:	f383 8811 	msr	BASEPRI, r3
}
 80048da:	e7e6      	b.n	80048aa <main+0x51a>
    chSysHalt("SV#4");
 80048dc:	481c      	ldr	r0, [pc, #112]	; (8004950 <main+0x5c0>)
 80048de:	f7fc f977 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 80048e2:	481c      	ldr	r0, [pc, #112]	; (8004954 <main+0x5c4>)
 80048e4:	f7fc f974 	bl	8000bd0 <chSysHalt>
      rccEnableDAC1(true);
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <main+0x5c8>)
 80048ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80048ec:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80048f0:	6411      	str	r1, [r2, #64]	; 0x40
 80048f2:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80048f4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80048f8:	6611      	str	r1, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 80048fa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
      rccEnableDAC1(true);
 80048fc:	6e12      	ldr	r2, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 80048fe:	6808      	ldr	r0, [r1, #0]
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8004900:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004904:	4093      	lsls	r3, r2
      cr = dacp->params->dac->CR;
 8004906:	6802      	ldr	r2, [r0, #0]
      cr &= dacp->params->regmask;
 8004908:	402a      	ands	r2, r5
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 800490a:	4313      	orrs	r3, r2
      dacp->params->dac->CR = cr;
 800490c:	6003      	str	r3, [r0, #0]
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 800490e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004912:	f7fc fa0d 	bl	8000d30 <dac_lld_put_channel.constprop.0>
 8004916:	e792      	b.n	800483e <main+0x4ae>
 8004918:	20000d7c 	.word	0x20000d7c
 800491c:	08004fdc 	.word	0x08004fdc
 8004920:	40020000 	.word	0x40020000
 8004924:	08003bd1 	.word	0x08003bd1
 8004928:	20000fd0 	.word	0x20000fd0
 800492c:	08003b21 	.word	0x08003b21
 8004930:	20001690 	.word	0x20001690
 8004934:	08003ee1 	.word	0x08003ee1
 8004938:	20000d90 	.word	0x20000d90
 800493c:	08003ea1 	.word	0x08003ea1
 8004940:	20001450 	.word	0x20001450
 8004944:	08003ff1 	.word	0x08003ff1
 8004948:	20001210 	.word	0x20001210
 800494c:	08004e28 	.word	0x08004e28
 8004950:	08004d18 	.word	0x08004d18
 8004954:	08004d40 	.word	0x08004d40
 8004958:	40023800 	.word	0x40023800

0800495c <memset>:
 800495c:	0783      	lsls	r3, r0, #30
 800495e:	b530      	push	{r4, r5, lr}
 8004960:	d048      	beq.n	80049f4 <memset+0x98>
 8004962:	1e54      	subs	r4, r2, #1
 8004964:	2a00      	cmp	r2, #0
 8004966:	d03f      	beq.n	80049e8 <memset+0x8c>
 8004968:	b2ca      	uxtb	r2, r1
 800496a:	4603      	mov	r3, r0
 800496c:	e001      	b.n	8004972 <memset+0x16>
 800496e:	3c01      	subs	r4, #1
 8004970:	d33a      	bcc.n	80049e8 <memset+0x8c>
 8004972:	f803 2b01 	strb.w	r2, [r3], #1
 8004976:	079d      	lsls	r5, r3, #30
 8004978:	d1f9      	bne.n	800496e <memset+0x12>
 800497a:	2c03      	cmp	r4, #3
 800497c:	d92d      	bls.n	80049da <memset+0x7e>
 800497e:	b2cd      	uxtb	r5, r1
 8004980:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004984:	2c0f      	cmp	r4, #15
 8004986:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800498a:	d936      	bls.n	80049fa <memset+0x9e>
 800498c:	f1a4 0210 	sub.w	r2, r4, #16
 8004990:	f022 0c0f 	bic.w	ip, r2, #15
 8004994:	f103 0e20 	add.w	lr, r3, #32
 8004998:	44e6      	add	lr, ip
 800499a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800499e:	f103 0210 	add.w	r2, r3, #16
 80049a2:	e942 5504 	strd	r5, r5, [r2, #-16]
 80049a6:	e942 5502 	strd	r5, r5, [r2, #-8]
 80049aa:	3210      	adds	r2, #16
 80049ac:	4572      	cmp	r2, lr
 80049ae:	d1f8      	bne.n	80049a2 <memset+0x46>
 80049b0:	f10c 0201 	add.w	r2, ip, #1
 80049b4:	f014 0f0c 	tst.w	r4, #12
 80049b8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80049bc:	f004 0c0f 	and.w	ip, r4, #15
 80049c0:	d013      	beq.n	80049ea <memset+0x8e>
 80049c2:	f1ac 0304 	sub.w	r3, ip, #4
 80049c6:	f023 0303 	bic.w	r3, r3, #3
 80049ca:	3304      	adds	r3, #4
 80049cc:	4413      	add	r3, r2
 80049ce:	f842 5b04 	str.w	r5, [r2], #4
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d1fb      	bne.n	80049ce <memset+0x72>
 80049d6:	f00c 0403 	and.w	r4, ip, #3
 80049da:	b12c      	cbz	r4, 80049e8 <memset+0x8c>
 80049dc:	b2c9      	uxtb	r1, r1
 80049de:	441c      	add	r4, r3
 80049e0:	f803 1b01 	strb.w	r1, [r3], #1
 80049e4:	429c      	cmp	r4, r3
 80049e6:	d1fb      	bne.n	80049e0 <memset+0x84>
 80049e8:	bd30      	pop	{r4, r5, pc}
 80049ea:	4664      	mov	r4, ip
 80049ec:	4613      	mov	r3, r2
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	d1f4      	bne.n	80049dc <memset+0x80>
 80049f2:	e7f9      	b.n	80049e8 <memset+0x8c>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4614      	mov	r4, r2
 80049f8:	e7bf      	b.n	800497a <memset+0x1e>
 80049fa:	461a      	mov	r2, r3
 80049fc:	46a4      	mov	ip, r4
 80049fe:	e7e0      	b.n	80049c2 <memset+0x66>

08004a00 <__aeabi_f2ulz>:
 8004a00:	b5d0      	push	{r4, r6, r7, lr}
 8004a02:	f7fb ffc7 	bl	8000994 <__aeabi_f2d>
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <__aeabi_f2ulz+0x38>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	460f      	mov	r7, r1
 8004a0e:	f7fb fd33 	bl	8000478 <__aeabi_dmul>
 8004a12:	f7fc f8a9 	bl	8000b68 <__aeabi_d2uiz>
 8004a16:	4604      	mov	r4, r0
 8004a18:	f7fb ff9a 	bl	8000950 <__aeabi_ui2d>
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <__aeabi_f2ulz+0x3c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f7fb fd2a 	bl	8000478 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb fe52 	bl	80006d4 <__aeabi_dsub>
 8004a30:	f7fc f89a 	bl	8000b68 <__aeabi_d2uiz>
 8004a34:	4621      	mov	r1, r4
 8004a36:	bdd0      	pop	{r4, r6, r7, pc}
 8004a38:	3df00000 	.word	0x3df00000
 8004a3c:	41f00000 	.word	0x41f00000

08004a40 <__udivmoddi4>:
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	9e08      	ldr	r6, [sp, #32]
 8004a46:	460d      	mov	r5, r1
 8004a48:	4604      	mov	r4, r0
 8004a4a:	460f      	mov	r7, r1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d14a      	bne.n	8004ae6 <__udivmoddi4+0xa6>
 8004a50:	428a      	cmp	r2, r1
 8004a52:	4694      	mov	ip, r2
 8004a54:	d965      	bls.n	8004b22 <__udivmoddi4+0xe2>
 8004a56:	fab2 f382 	clz	r3, r2
 8004a5a:	b143      	cbz	r3, 8004a6e <__udivmoddi4+0x2e>
 8004a5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8004a60:	f1c3 0220 	rsb	r2, r3, #32
 8004a64:	409f      	lsls	r7, r3
 8004a66:	fa20 f202 	lsr.w	r2, r0, r2
 8004a6a:	4317      	orrs	r7, r2
 8004a6c:	409c      	lsls	r4, r3
 8004a6e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004a72:	fa1f f58c 	uxth.w	r5, ip
 8004a76:	fbb7 f1fe 	udiv	r1, r7, lr
 8004a7a:	0c22      	lsrs	r2, r4, #16
 8004a7c:	fb0e 7711 	mls	r7, lr, r1, r7
 8004a80:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004a84:	fb01 f005 	mul.w	r0, r1, r5
 8004a88:	4290      	cmp	r0, r2
 8004a8a:	d90a      	bls.n	8004aa2 <__udivmoddi4+0x62>
 8004a8c:	eb1c 0202 	adds.w	r2, ip, r2
 8004a90:	f101 37ff 	add.w	r7, r1, #4294967295
 8004a94:	f080 811c 	bcs.w	8004cd0 <__udivmoddi4+0x290>
 8004a98:	4290      	cmp	r0, r2
 8004a9a:	f240 8119 	bls.w	8004cd0 <__udivmoddi4+0x290>
 8004a9e:	3902      	subs	r1, #2
 8004aa0:	4462      	add	r2, ip
 8004aa2:	1a12      	subs	r2, r2, r0
 8004aa4:	b2a4      	uxth	r4, r4
 8004aa6:	fbb2 f0fe 	udiv	r0, r2, lr
 8004aaa:	fb0e 2210 	mls	r2, lr, r0, r2
 8004aae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004ab2:	fb00 f505 	mul.w	r5, r0, r5
 8004ab6:	42a5      	cmp	r5, r4
 8004ab8:	d90a      	bls.n	8004ad0 <__udivmoddi4+0x90>
 8004aba:	eb1c 0404 	adds.w	r4, ip, r4
 8004abe:	f100 32ff 	add.w	r2, r0, #4294967295
 8004ac2:	f080 8107 	bcs.w	8004cd4 <__udivmoddi4+0x294>
 8004ac6:	42a5      	cmp	r5, r4
 8004ac8:	f240 8104 	bls.w	8004cd4 <__udivmoddi4+0x294>
 8004acc:	4464      	add	r4, ip
 8004ace:	3802      	subs	r0, #2
 8004ad0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004ad4:	1b64      	subs	r4, r4, r5
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	b11e      	cbz	r6, 8004ae2 <__udivmoddi4+0xa2>
 8004ada:	40dc      	lsrs	r4, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	e9c6 4300 	strd	r4, r3, [r6]
 8004ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae6:	428b      	cmp	r3, r1
 8004ae8:	d908      	bls.n	8004afc <__udivmoddi4+0xbc>
 8004aea:	2e00      	cmp	r6, #0
 8004aec:	f000 80ed 	beq.w	8004cca <__udivmoddi4+0x28a>
 8004af0:	2100      	movs	r1, #0
 8004af2:	e9c6 0500 	strd	r0, r5, [r6]
 8004af6:	4608      	mov	r0, r1
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	fab3 f183 	clz	r1, r3
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d149      	bne.n	8004b98 <__udivmoddi4+0x158>
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	d302      	bcc.n	8004b0e <__udivmoddi4+0xce>
 8004b08:	4282      	cmp	r2, r0
 8004b0a:	f200 80f8 	bhi.w	8004cfe <__udivmoddi4+0x2be>
 8004b0e:	1a84      	subs	r4, r0, r2
 8004b10:	eb65 0203 	sbc.w	r2, r5, r3
 8004b14:	2001      	movs	r0, #1
 8004b16:	4617      	mov	r7, r2
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	d0e2      	beq.n	8004ae2 <__udivmoddi4+0xa2>
 8004b1c:	e9c6 4700 	strd	r4, r7, [r6]
 8004b20:	e7df      	b.n	8004ae2 <__udivmoddi4+0xa2>
 8004b22:	b902      	cbnz	r2, 8004b26 <__udivmoddi4+0xe6>
 8004b24:	deff      	udf	#255	; 0xff
 8004b26:	fab2 f382 	clz	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8090 	bne.w	8004c50 <__udivmoddi4+0x210>
 8004b30:	1a8a      	subs	r2, r1, r2
 8004b32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004b36:	fa1f fe8c 	uxth.w	lr, ip
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fbb2 f5f7 	udiv	r5, r2, r7
 8004b40:	fb07 2015 	mls	r0, r7, r5, r2
 8004b44:	0c22      	lsrs	r2, r4, #16
 8004b46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004b4a:	fb0e f005 	mul.w	r0, lr, r5
 8004b4e:	4290      	cmp	r0, r2
 8004b50:	d908      	bls.n	8004b64 <__udivmoddi4+0x124>
 8004b52:	eb1c 0202 	adds.w	r2, ip, r2
 8004b56:	f105 38ff 	add.w	r8, r5, #4294967295
 8004b5a:	d202      	bcs.n	8004b62 <__udivmoddi4+0x122>
 8004b5c:	4290      	cmp	r0, r2
 8004b5e:	f200 80cb 	bhi.w	8004cf8 <__udivmoddi4+0x2b8>
 8004b62:	4645      	mov	r5, r8
 8004b64:	1a12      	subs	r2, r2, r0
 8004b66:	b2a4      	uxth	r4, r4
 8004b68:	fbb2 f0f7 	udiv	r0, r2, r7
 8004b6c:	fb07 2210 	mls	r2, r7, r0, r2
 8004b70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004b74:	fb0e fe00 	mul.w	lr, lr, r0
 8004b78:	45a6      	cmp	lr, r4
 8004b7a:	d908      	bls.n	8004b8e <__udivmoddi4+0x14e>
 8004b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8004b80:	f100 32ff 	add.w	r2, r0, #4294967295
 8004b84:	d202      	bcs.n	8004b8c <__udivmoddi4+0x14c>
 8004b86:	45a6      	cmp	lr, r4
 8004b88:	f200 80bb 	bhi.w	8004d02 <__udivmoddi4+0x2c2>
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	eba4 040e 	sub.w	r4, r4, lr
 8004b92:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004b96:	e79f      	b.n	8004ad8 <__udivmoddi4+0x98>
 8004b98:	f1c1 0720 	rsb	r7, r1, #32
 8004b9c:	408b      	lsls	r3, r1
 8004b9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8004ba2:	ea4c 0c03 	orr.w	ip, ip, r3
 8004ba6:	fa05 f401 	lsl.w	r4, r5, r1
 8004baa:	fa20 f307 	lsr.w	r3, r0, r7
 8004bae:	40fd      	lsrs	r5, r7
 8004bb0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004bb4:	4323      	orrs	r3, r4
 8004bb6:	fbb5 f8f9 	udiv	r8, r5, r9
 8004bba:	fa1f fe8c 	uxth.w	lr, ip
 8004bbe:	fb09 5518 	mls	r5, r9, r8, r5
 8004bc2:	0c1c      	lsrs	r4, r3, #16
 8004bc4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004bc8:	fb08 f50e 	mul.w	r5, r8, lr
 8004bcc:	42a5      	cmp	r5, r4
 8004bce:	fa02 f201 	lsl.w	r2, r2, r1
 8004bd2:	fa00 f001 	lsl.w	r0, r0, r1
 8004bd6:	d90b      	bls.n	8004bf0 <__udivmoddi4+0x1b0>
 8004bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8004bdc:	f108 3aff 	add.w	sl, r8, #4294967295
 8004be0:	f080 8088 	bcs.w	8004cf4 <__udivmoddi4+0x2b4>
 8004be4:	42a5      	cmp	r5, r4
 8004be6:	f240 8085 	bls.w	8004cf4 <__udivmoddi4+0x2b4>
 8004bea:	f1a8 0802 	sub.w	r8, r8, #2
 8004bee:	4464      	add	r4, ip
 8004bf0:	1b64      	subs	r4, r4, r5
 8004bf2:	b29d      	uxth	r5, r3
 8004bf4:	fbb4 f3f9 	udiv	r3, r4, r9
 8004bf8:	fb09 4413 	mls	r4, r9, r3, r4
 8004bfc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004c00:	fb03 fe0e 	mul.w	lr, r3, lr
 8004c04:	45a6      	cmp	lr, r4
 8004c06:	d908      	bls.n	8004c1a <__udivmoddi4+0x1da>
 8004c08:	eb1c 0404 	adds.w	r4, ip, r4
 8004c0c:	f103 35ff 	add.w	r5, r3, #4294967295
 8004c10:	d26c      	bcs.n	8004cec <__udivmoddi4+0x2ac>
 8004c12:	45a6      	cmp	lr, r4
 8004c14:	d96a      	bls.n	8004cec <__udivmoddi4+0x2ac>
 8004c16:	3b02      	subs	r3, #2
 8004c18:	4464      	add	r4, ip
 8004c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004c1e:	fba3 9502 	umull	r9, r5, r3, r2
 8004c22:	eba4 040e 	sub.w	r4, r4, lr
 8004c26:	42ac      	cmp	r4, r5
 8004c28:	46c8      	mov	r8, r9
 8004c2a:	46ae      	mov	lr, r5
 8004c2c:	d356      	bcc.n	8004cdc <__udivmoddi4+0x29c>
 8004c2e:	d053      	beq.n	8004cd8 <__udivmoddi4+0x298>
 8004c30:	b156      	cbz	r6, 8004c48 <__udivmoddi4+0x208>
 8004c32:	ebb0 0208 	subs.w	r2, r0, r8
 8004c36:	eb64 040e 	sbc.w	r4, r4, lr
 8004c3a:	fa04 f707 	lsl.w	r7, r4, r7
 8004c3e:	40ca      	lsrs	r2, r1
 8004c40:	40cc      	lsrs	r4, r1
 8004c42:	4317      	orrs	r7, r2
 8004c44:	e9c6 7400 	strd	r7, r4, [r6]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c50:	f1c3 0120 	rsb	r1, r3, #32
 8004c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8004c58:	fa20 f201 	lsr.w	r2, r0, r1
 8004c5c:	fa25 f101 	lsr.w	r1, r5, r1
 8004c60:	409d      	lsls	r5, r3
 8004c62:	432a      	orrs	r2, r5
 8004c64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004c68:	fa1f fe8c 	uxth.w	lr, ip
 8004c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8004c70:	fb07 1510 	mls	r5, r7, r0, r1
 8004c74:	0c11      	lsrs	r1, r2, #16
 8004c76:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004c7a:	fb00 f50e 	mul.w	r5, r0, lr
 8004c7e:	428d      	cmp	r5, r1
 8004c80:	fa04 f403 	lsl.w	r4, r4, r3
 8004c84:	d908      	bls.n	8004c98 <__udivmoddi4+0x258>
 8004c86:	eb1c 0101 	adds.w	r1, ip, r1
 8004c8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8004c8e:	d22f      	bcs.n	8004cf0 <__udivmoddi4+0x2b0>
 8004c90:	428d      	cmp	r5, r1
 8004c92:	d92d      	bls.n	8004cf0 <__udivmoddi4+0x2b0>
 8004c94:	3802      	subs	r0, #2
 8004c96:	4461      	add	r1, ip
 8004c98:	1b49      	subs	r1, r1, r5
 8004c9a:	b292      	uxth	r2, r2
 8004c9c:	fbb1 f5f7 	udiv	r5, r1, r7
 8004ca0:	fb07 1115 	mls	r1, r7, r5, r1
 8004ca4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ca8:	fb05 f10e 	mul.w	r1, r5, lr
 8004cac:	4291      	cmp	r1, r2
 8004cae:	d908      	bls.n	8004cc2 <__udivmoddi4+0x282>
 8004cb0:	eb1c 0202 	adds.w	r2, ip, r2
 8004cb4:	f105 38ff 	add.w	r8, r5, #4294967295
 8004cb8:	d216      	bcs.n	8004ce8 <__udivmoddi4+0x2a8>
 8004cba:	4291      	cmp	r1, r2
 8004cbc:	d914      	bls.n	8004ce8 <__udivmoddi4+0x2a8>
 8004cbe:	3d02      	subs	r5, #2
 8004cc0:	4462      	add	r2, ip
 8004cc2:	1a52      	subs	r2, r2, r1
 8004cc4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004cc8:	e738      	b.n	8004b3c <__udivmoddi4+0xfc>
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4630      	mov	r0, r6
 8004cce:	e708      	b.n	8004ae2 <__udivmoddi4+0xa2>
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	e6e6      	b.n	8004aa2 <__udivmoddi4+0x62>
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	e6fb      	b.n	8004ad0 <__udivmoddi4+0x90>
 8004cd8:	4548      	cmp	r0, r9
 8004cda:	d2a9      	bcs.n	8004c30 <__udivmoddi4+0x1f0>
 8004cdc:	ebb9 0802 	subs.w	r8, r9, r2
 8004ce0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	e7a3      	b.n	8004c30 <__udivmoddi4+0x1f0>
 8004ce8:	4645      	mov	r5, r8
 8004cea:	e7ea      	b.n	8004cc2 <__udivmoddi4+0x282>
 8004cec:	462b      	mov	r3, r5
 8004cee:	e794      	b.n	8004c1a <__udivmoddi4+0x1da>
 8004cf0:	4640      	mov	r0, r8
 8004cf2:	e7d1      	b.n	8004c98 <__udivmoddi4+0x258>
 8004cf4:	46d0      	mov	r8, sl
 8004cf6:	e77b      	b.n	8004bf0 <__udivmoddi4+0x1b0>
 8004cf8:	3d02      	subs	r5, #2
 8004cfa:	4462      	add	r2, ip
 8004cfc:	e732      	b.n	8004b64 <__udivmoddi4+0x124>
 8004cfe:	4608      	mov	r0, r1
 8004d00:	e70a      	b.n	8004b18 <__udivmoddi4+0xd8>
 8004d02:	4464      	add	r4, ip
 8004d04:	3802      	subs	r0, #2
 8004d06:	e742      	b.n	8004b8e <__udivmoddi4+0x14e>
