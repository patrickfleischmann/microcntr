
build/microcntr.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002fd 	.word	0x080002fd
 8000008:	080002ff 	.word	0x080002ff
 800000c:	080002ff 	.word	0x080002ff
 8000010:	080002ff 	.word	0x080002ff
 8000014:	080002ff 	.word	0x080002ff
 8000018:	080002ff 	.word	0x080002ff
 800001c:	080002ff 	.word	0x080002ff
 8000020:	080002ff 	.word	0x080002ff
 8000024:	080002ff 	.word	0x080002ff
 8000028:	080002ff 	.word	0x080002ff
 800002c:	08004031 	.word	0x08004031
 8000030:	080002ff 	.word	0x080002ff
 8000034:	080002ff 	.word	0x080002ff
 8000038:	080002ff 	.word	0x080002ff
 800003c:	080002ff 	.word	0x080002ff
 8000040:	080002ff 	.word	0x080002ff
 8000044:	080002ff 	.word	0x080002ff
 8000048:	080002ff 	.word	0x080002ff
 800004c:	080002ff 	.word	0x080002ff
 8000050:	080002ff 	.word	0x080002ff
 8000054:	080002ff 	.word	0x080002ff
 8000058:	080002ff 	.word	0x080002ff
 800005c:	080002ff 	.word	0x080002ff
 8000060:	080002ff 	.word	0x080002ff
 8000064:	080002ff 	.word	0x080002ff
 8000068:	080002ff 	.word	0x080002ff
 800006c:	08002311 	.word	0x08002311
 8000070:	080023b1 	.word	0x080023b1
 8000074:	08002451 	.word	0x08002451
 8000078:	080024f1 	.word	0x080024f1
 800007c:	08002591 	.word	0x08002591
 8000080:	08002631 	.word	0x08002631
 8000084:	080026d1 	.word	0x080026d1
 8000088:	080021b1 	.word	0x080021b1
 800008c:	080002ff 	.word	0x080002ff
 8000090:	080002ff 	.word	0x080002ff
 8000094:	080002ff 	.word	0x080002ff
 8000098:	080002ff 	.word	0x080002ff
 800009c:	080002ff 	.word	0x080002ff
 80000a0:	080002ff 	.word	0x080002ff
 80000a4:	080002ff 	.word	0x080002ff
 80000a8:	08001f11 	.word	0x08001f11
 80000ac:	080002ff 	.word	0x080002ff
 80000b0:	080002ff 	.word	0x080002ff
 80000b4:	080002ff 	.word	0x080002ff
 80000b8:	080002ff 	.word	0x080002ff
 80000bc:	080002ff 	.word	0x080002ff
 80000c0:	080002ff 	.word	0x080002ff
 80000c4:	08002d11 	.word	0x08002d11
 80000c8:	08002f41 	.word	0x08002f41
 80000cc:	080002ff 	.word	0x080002ff
 80000d0:	080002ff 	.word	0x080002ff
 80000d4:	08001e11 	.word	0x08001e11
 80000d8:	08001e91 	.word	0x08001e91
 80000dc:	080002ff 	.word	0x080002ff
 80000e0:	080002ff 	.word	0x080002ff
 80000e4:	080002ff 	.word	0x080002ff
 80000e8:	080002ff 	.word	0x080002ff
 80000ec:	080002ff 	.word	0x080002ff
 80000f0:	080002ff 	.word	0x080002ff
 80000f4:	080002ff 	.word	0x080002ff
 80000f8:	080002ff 	.word	0x080002ff
 80000fc:	08002771 	.word	0x08002771
 8000100:	080002ff 	.word	0x080002ff
 8000104:	080002ff 	.word	0x080002ff
 8000108:	080002ff 	.word	0x080002ff
 800010c:	080002ff 	.word	0x080002ff
 8000110:	080002ff 	.word	0x080002ff
 8000114:	080002ff 	.word	0x080002ff
 8000118:	080020f1 	.word	0x080020f1
 800011c:	080002ff 	.word	0x080002ff
 8000120:	08002811 	.word	0x08002811
 8000124:	080028b1 	.word	0x080028b1
 8000128:	08002951 	.word	0x08002951
 800012c:	080029f1 	.word	0x080029f1
 8000130:	08002a91 	.word	0x08002a91
 8000134:	080002ff 	.word	0x080002ff
 8000138:	080002ff 	.word	0x080002ff
 800013c:	080002ff 	.word	0x080002ff
 8000140:	080002ff 	.word	0x080002ff
 8000144:	080002ff 	.word	0x080002ff
 8000148:	080002ff 	.word	0x080002ff
 800014c:	080002ff 	.word	0x080002ff
 8000150:	08002b31 	.word	0x08002b31
 8000154:	08002bd1 	.word	0x08002bd1
 8000158:	08002c71 	.word	0x08002c71
 800015c:	080002ff 	.word	0x080002ff
 8000160:	080002ff 	.word	0x080002ff
 8000164:	080002ff 	.word	0x080002ff
 8000168:	080002ff 	.word	0x080002ff
 800016c:	080002ff 	.word	0x080002ff
 8000170:	080002ff 	.word	0x080002ff
 8000174:	080002ff 	.word	0x080002ff
 8000178:	080002ff 	.word	0x080002ff
 800017c:	080002ff 	.word	0x080002ff
 8000180:	080002ff 	.word	0x080002ff
 8000184:	080002ff 	.word	0x080002ff
 8000188:	080002ff 	.word	0x080002ff
 800018c:	080002ff 	.word	0x080002ff
 8000190:	080002ff 	.word	0x080002ff
 8000194:	080002ff 	.word	0x080002ff
 8000198:	080002ff 	.word	0x080002ff
 800019c:	080002ff 	.word	0x080002ff
 80001a0:	080002ff 	.word	0x080002ff
 80001a4:	080002ff 	.word	0x080002ff
 80001a8:	080002ff 	.word	0x080002ff
 80001ac:	080002ff 	.word	0x080002ff
 80001b0:	080002ff 	.word	0x080002ff
 80001b4:	080002ff 	.word	0x080002ff
 80001b8:	080002ff 	.word	0x080002ff
 80001bc:	080002ff 	.word	0x080002ff
 80001c0:	080002ff 	.word	0x080002ff
 80001c4:	080002ff 	.word	0x080002ff
 80001c8:	080002ff 	.word	0x080002ff
 80001cc:	080002ff 	.word	0x080002ff
 80001d0:	080002ff 	.word	0x080002ff
 80001d4:	080002ff 	.word	0x080002ff
 80001d8:	080002ff 	.word	0x080002ff
 80001dc:	080002ff 	.word	0x080002ff

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4837      	ldr	r0, [pc, #220]	; (80002c0 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4836      	ldr	r0, [pc, #216]	; (80002c4 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4836      	ldr	r0, [pc, #216]	; (80002c8 <endfiniloop+0xc>)
                ldr     r1, =SCB_VTOR
 80001f0:	4936      	ldr	r1, [pc, #216]	; (80002cc <endfiniloop+0x10>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001f4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001f8:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001fc:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000200:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000204:	6008      	str	r0, [r1, #0]
                dsb
 8000206:	f3bf 8f4f 	dsb	sy
                isb
 800020a:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800020e:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000212:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000216:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 800021a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021e:	6008      	str	r0, [r1, #0]
                dsb
 8000220:	f3bf 8f4f 	dsb	sy
                isb
 8000224:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000228:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800022c:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000230:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000234:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000238:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800023a:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800023c:	f380 8814 	msr	CONTROL, r0
                isb
 8000240:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000244:	f001 fc7c 	bl	8001b40 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000248:	f003 ff02 	bl	8004050 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800024c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000250:	491f      	ldr	r1, [pc, #124]	; (80002d0 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8000252:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <endfiniloop+0x4>)

08000254 <msloop>:
msloop:
                cmp     r1, r2
 8000254:	4291      	cmp	r1, r2
                itt     lo
 8000256:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000258:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800025c:	e7fa      	bcc.n	8000254 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800025e:	491d      	ldr	r1, [pc, #116]	; (80002d4 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <endfiniloop+0x8>)

08000262 <psloop>:
psloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800026a:	e7fa      	bcc.n	8000262 <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 800026c:	491a      	ldr	r1, [pc, #104]	; (80002d8 <endfiniloop+0x1c>)
                ldr     r2, =__data_base__
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <endfiniloop+0x20>)
                ldr     r3, =__data_end__
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <endfiniloop+0x24>)

08000272 <dloop>:
dloop:
                cmp     r2, r3
 8000272:	429a      	cmp	r2, r3
                ittt    lo
 8000274:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000276:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800027a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800027e:	e7f8      	bcc.n	8000272 <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 8000280:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000282:	4918      	ldr	r1, [pc, #96]	; (80002e4 <endfiniloop+0x28>)
                ldr     r2, =__bss_end__
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <endfiniloop+0x2c>)

08000286 <bloop>:
bloop:
                cmp     r1, r2
 8000286:	4291      	cmp	r1, r2
                itt     lo
 8000288:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800028a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800028e:	e7fa      	bcc.n	8000286 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000290:	f001 fc6e 	bl	8001b70 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000294:	f001 fc5c 	bl	8001b50 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000298:	4c14      	ldr	r4, [pc, #80]	; (80002ec <endfiniloop+0x30>)
                ldr     r5, =__init_array_end__
 800029a:	4d15      	ldr	r5, [pc, #84]	; (80002f0 <endfiniloop+0x34>)

0800029c <initloop>:
initloop:
                cmp     r4, r5
 800029c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800029e:	da03      	bge.n	80002a8 <endinitloop>
                ldr     r1, [r4], #4
 80002a0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002a4:	4788      	blx	r1
                b       initloop
 80002a6:	e7f9      	b.n	800029c <initloop>

080002a8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002a8:	f003 ffba 	bl	8004220 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002ac:	4c11      	ldr	r4, [pc, #68]	; (80002f4 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end__
 80002ae:	4d12      	ldr	r5, [pc, #72]	; (80002f8 <endfiniloop+0x3c>)

080002b0 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b2:	da03      	bge.n	80002bc <endfiniloop>
                ldr     r1, [r4], #4
 80002b4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b8:	4788      	blx	r1
                b       finiloop
 80002ba:	e7f9      	b.n	80002b0 <finiloop>

080002bc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002bc:	f001 bc50 	b.w	8001b60 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002c0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002c4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002c8:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 80002cc:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 80002d0:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d4:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002d8:	08004fe4 	.word	0x08004fe4
                ldr     r2, =__data_base__
 80002dc:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002e0:	20000804 	.word	0x20000804
                ldr     r1, =__bss_base__
 80002e4:	20000808 	.word	0x20000808
                ldr     r2, =__bss_end__
 80002e8:	20002020 	.word	0x20002020
                ldr     r4, =__init_array_base__
 80002ec:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002f8:	080001e0 	.word	0x080001e0

080002fc <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002fc:	e770      	b.n	80001e0 <_crt0_entry>

080002fe <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002fe:	f000 f800 	bl	8000302 <_unhandled_exception>

08000302 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000302:	e7fe      	b.n	8000302 <_unhandled_exception>

08000304 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
 8000308:	ed2d 8a10 	vpush	{s16-s31}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 800030c:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000310:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000312:	469d      	mov	sp, r3
#endif
#endif

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
 8000314:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800031c <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800031c:	f001 fc60 	bl	8001be0 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f003 fe48 	bl	8003fc0 <chThdExit>

08000330 <.zombies>:
.zombies:       b       .zombies
 8000330:	e7fe      	b.n	8000330 <.zombies>

08000332 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 8000332:	f001 fc6d 	bl	8001c10 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 8000336:	f002 fecb 	bl	80030d0 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800033a:	f001 fc51 	bl	8001be0 <__dbg_check_unlock>

0800033e <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033e:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000340:	e7fe      	b.n	8000340 <__port_exit_from_isr+0x2>
	...

08000344 <memcpy>:
 8000344:	4684      	mov	ip, r0
 8000346:	ea41 0300 	orr.w	r3, r1, r0
 800034a:	f013 0303 	ands.w	r3, r3, #3
 800034e:	d16d      	bne.n	800042c <memcpy+0xe8>
 8000350:	3a40      	subs	r2, #64	; 0x40
 8000352:	d341      	bcc.n	80003d8 <memcpy+0x94>
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a40      	subs	r2, #64	; 0x40
 80003d6:	d2bd      	bcs.n	8000354 <memcpy+0x10>
 80003d8:	3230      	adds	r2, #48	; 0x30
 80003da:	d311      	bcc.n	8000400 <memcpy+0xbc>
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	3a10      	subs	r2, #16
 80003fe:	d2ed      	bcs.n	80003dc <memcpy+0x98>
 8000400:	320c      	adds	r2, #12
 8000402:	d305      	bcc.n	8000410 <memcpy+0xcc>
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	3a04      	subs	r2, #4
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0xc0>
 8000410:	3204      	adds	r2, #4
 8000412:	d008      	beq.n	8000426 <memcpy+0xe2>
 8000414:	07d2      	lsls	r2, r2, #31
 8000416:	bf1c      	itt	ne
 8000418:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800041c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000420:	d301      	bcc.n	8000426 <memcpy+0xe2>
 8000422:	880b      	ldrh	r3, [r1, #0]
 8000424:	8003      	strh	r3, [r0, #0]
 8000426:	4660      	mov	r0, ip
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2a08      	cmp	r2, #8
 800042e:	d313      	bcc.n	8000458 <memcpy+0x114>
 8000430:	078b      	lsls	r3, r1, #30
 8000432:	d08d      	beq.n	8000350 <memcpy+0xc>
 8000434:	f010 0303 	ands.w	r3, r0, #3
 8000438:	d08a      	beq.n	8000350 <memcpy+0xc>
 800043a:	f1c3 0304 	rsb	r3, r3, #4
 800043e:	1ad2      	subs	r2, r2, r3
 8000440:	07db      	lsls	r3, r3, #31
 8000442:	bf1c      	itt	ne
 8000444:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000448:	f800 3b01 	strbne.w	r3, [r0], #1
 800044c:	d380      	bcc.n	8000350 <memcpy+0xc>
 800044e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000452:	f820 3b02 	strh.w	r3, [r0], #2
 8000456:	e77b      	b.n	8000350 <memcpy+0xc>
 8000458:	3a04      	subs	r2, #4
 800045a:	d3d9      	bcc.n	8000410 <memcpy+0xcc>
 800045c:	3a01      	subs	r2, #1
 800045e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000462:	f800 3b01 	strb.w	r3, [r0], #1
 8000466:	d2f9      	bcs.n	800045c <memcpy+0x118>
 8000468:	780b      	ldrb	r3, [r1, #0]
 800046a:	7003      	strb	r3, [r0, #0]
 800046c:	784b      	ldrb	r3, [r1, #1]
 800046e:	7043      	strb	r3, [r0, #1]
 8000470:	788b      	ldrb	r3, [r1, #2]
 8000472:	7083      	strb	r3, [r0, #2]
 8000474:	4660      	mov	r0, ip
 8000476:	4770      	bx	lr

08000478 <__aeabi_dmul>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800047e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000486:	bf1d      	ittte	ne
 8000488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800048c:	ea94 0f0c 	teqne	r4, ip
 8000490:	ea95 0f0c 	teqne	r5, ip
 8000494:	f000 f8de 	bleq	8000654 <__aeabi_dmul+0x1dc>
 8000498:	442c      	add	r4, r5
 800049a:	ea81 0603 	eor.w	r6, r1, r3
 800049e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004aa:	bf18      	it	ne
 80004ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004b8:	d038      	beq.n	800052c <__aeabi_dmul+0xb4>
 80004ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80004be:	f04f 0500 	mov.w	r5, #0
 80004c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004ce:	f04f 0600 	mov.w	r6, #0
 80004d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004d6:	f09c 0f00 	teq	ip, #0
 80004da:	bf18      	it	ne
 80004dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80004e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004ec:	d204      	bcs.n	80004f8 <__aeabi_dmul+0x80>
 80004ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80004f2:	416d      	adcs	r5, r5
 80004f4:	eb46 0606 	adc.w	r6, r6, r6
 80004f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80004fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800050c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000510:	bf88      	it	hi
 8000512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000516:	d81e      	bhi.n	8000556 <__aeabi_dmul+0xde>
 8000518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800051c:	bf08      	it	eq
 800051e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000522:	f150 0000 	adcs.w	r0, r0, #0
 8000526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000530:	ea46 0101 	orr.w	r1, r6, r1
 8000534:	ea40 0002 	orr.w	r0, r0, r2
 8000538:	ea81 0103 	eor.w	r1, r1, r3
 800053c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000540:	bfc2      	ittt	gt
 8000542:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800054a:	bd70      	popgt	{r4, r5, r6, pc}
 800054c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000550:	f04f 0e00 	mov.w	lr, #0
 8000554:	3c01      	subs	r4, #1
 8000556:	f300 80ab 	bgt.w	80006b0 <__aeabi_dmul+0x238>
 800055a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800055e:	bfde      	ittt	le
 8000560:	2000      	movle	r0, #0
 8000562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000566:	bd70      	pople	{r4, r5, r6, pc}
 8000568:	f1c4 0400 	rsb	r4, r4, #0
 800056c:	3c20      	subs	r4, #32
 800056e:	da35      	bge.n	80005dc <__aeabi_dmul+0x164>
 8000570:	340c      	adds	r4, #12
 8000572:	dc1b      	bgt.n	80005ac <__aeabi_dmul+0x134>
 8000574:	f104 0414 	add.w	r4, r4, #20
 8000578:	f1c4 0520 	rsb	r5, r4, #32
 800057c:	fa00 f305 	lsl.w	r3, r0, r5
 8000580:	fa20 f004 	lsr.w	r0, r0, r4
 8000584:	fa01 f205 	lsl.w	r2, r1, r5
 8000588:	ea40 0002 	orr.w	r0, r0, r2
 800058c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000598:	fa21 f604 	lsr.w	r6, r1, r4
 800059c:	eb42 0106 	adc.w	r1, r2, r6
 80005a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f1c4 040c 	rsb	r4, r4, #12
 80005b0:	f1c4 0520 	rsb	r5, r4, #32
 80005b4:	fa00 f304 	lsl.w	r3, r0, r4
 80005b8:	fa20 f005 	lsr.w	r0, r0, r5
 80005bc:	fa01 f204 	lsl.w	r2, r1, r4
 80005c0:	ea40 0002 	orr.w	r0, r0, r2
 80005c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005cc:	f141 0100 	adc.w	r1, r1, #0
 80005d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005d4:	bf08      	it	eq
 80005d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f205 	lsl.w	r2, r0, r5
 80005e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005e8:	fa20 f304 	lsr.w	r3, r0, r4
 80005ec:	fa01 f205 	lsl.w	r2, r1, r5
 80005f0:	ea43 0302 	orr.w	r3, r3, r2
 80005f4:	fa21 f004 	lsr.w	r0, r1, r4
 80005f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000600:	ea20 0002 	bic.w	r0, r0, r2
 8000604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800060c:	bf08      	it	eq
 800060e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f094 0f00 	teq	r4, #0
 8000618:	d10f      	bne.n	800063a <__aeabi_dmul+0x1c2>
 800061a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800061e:	0040      	lsls	r0, r0, #1
 8000620:	eb41 0101 	adc.w	r1, r1, r1
 8000624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000628:	bf08      	it	eq
 800062a:	3c01      	subeq	r4, #1
 800062c:	d0f7      	beq.n	800061e <__aeabi_dmul+0x1a6>
 800062e:	ea41 0106 	orr.w	r1, r1, r6
 8000632:	f095 0f00 	teq	r5, #0
 8000636:	bf18      	it	ne
 8000638:	4770      	bxne	lr
 800063a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	eb43 0303 	adc.w	r3, r3, r3
 8000644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000648:	bf08      	it	eq
 800064a:	3d01      	subeq	r5, #1
 800064c:	d0f7      	beq.n	800063e <__aeabi_dmul+0x1c6>
 800064e:	ea43 0306 	orr.w	r3, r3, r6
 8000652:	4770      	bx	lr
 8000654:	ea94 0f0c 	teq	r4, ip
 8000658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800065c:	bf18      	it	ne
 800065e:	ea95 0f0c 	teqne	r5, ip
 8000662:	d00c      	beq.n	800067e <__aeabi_dmul+0x206>
 8000664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000668:	bf18      	it	ne
 800066a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800066e:	d1d1      	bne.n	8000614 <__aeabi_dmul+0x19c>
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000682:	bf06      	itte	eq
 8000684:	4610      	moveq	r0, r2
 8000686:	4619      	moveq	r1, r3
 8000688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800068c:	d019      	beq.n	80006c2 <__aeabi_dmul+0x24a>
 800068e:	ea94 0f0c 	teq	r4, ip
 8000692:	d102      	bne.n	800069a <__aeabi_dmul+0x222>
 8000694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000698:	d113      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 800069a:	ea95 0f0c 	teq	r5, ip
 800069e:	d105      	bne.n	80006ac <__aeabi_dmul+0x234>
 80006a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006a4:	bf1c      	itt	ne
 80006a6:	4610      	movne	r0, r2
 80006a8:	4619      	movne	r1, r3
 80006aa:	d10a      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006ca:	bd70      	pop	{r4, r5, r6, pc}

080006cc <__aeabi_drsub>:
 80006cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e002      	b.n	80006d8 <__adddf3>
 80006d2:	bf00      	nop

080006d4 <__aeabi_dsub>:
 80006d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080006d8 <__adddf3>:
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006e2:	ea94 0f05 	teq	r4, r5
 80006e6:	bf08      	it	eq
 80006e8:	ea90 0f02 	teqeq	r0, r2
 80006ec:	bf1f      	itttt	ne
 80006ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006fe:	f000 80e2 	beq.w	80008c6 <__adddf3+0x1ee>
 8000702:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000706:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800070a:	bfb8      	it	lt
 800070c:	426d      	neglt	r5, r5
 800070e:	dd0c      	ble.n	800072a <__adddf3+0x52>
 8000710:	442c      	add	r4, r5
 8000712:	ea80 0202 	eor.w	r2, r0, r2
 8000716:	ea81 0303 	eor.w	r3, r1, r3
 800071a:	ea82 0000 	eor.w	r0, r2, r0
 800071e:	ea83 0101 	eor.w	r1, r3, r1
 8000722:	ea80 0202 	eor.w	r2, r0, r2
 8000726:	ea81 0303 	eor.w	r3, r1, r3
 800072a:	2d36      	cmp	r5, #54	; 0x36
 800072c:	bf88      	it	hi
 800072e:	bd30      	pophi	{r4, r5, pc}
 8000730:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000734:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000738:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800073c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000740:	d002      	beq.n	8000748 <__adddf3+0x70>
 8000742:	4240      	negs	r0, r0
 8000744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000748:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000754:	d002      	beq.n	800075c <__adddf3+0x84>
 8000756:	4252      	negs	r2, r2
 8000758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075c:	ea94 0f05 	teq	r4, r5
 8000760:	f000 80a7 	beq.w	80008b2 <__adddf3+0x1da>
 8000764:	f1a4 0401 	sub.w	r4, r4, #1
 8000768:	f1d5 0e20 	rsbs	lr, r5, #32
 800076c:	db0d      	blt.n	800078a <__adddf3+0xb2>
 800076e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000772:	fa22 f205 	lsr.w	r2, r2, r5
 8000776:	1880      	adds	r0, r0, r2
 8000778:	f141 0100 	adc.w	r1, r1, #0
 800077c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000780:	1880      	adds	r0, r0, r2
 8000782:	fa43 f305 	asr.w	r3, r3, r5
 8000786:	4159      	adcs	r1, r3
 8000788:	e00e      	b.n	80007a8 <__adddf3+0xd0>
 800078a:	f1a5 0520 	sub.w	r5, r5, #32
 800078e:	f10e 0e20 	add.w	lr, lr, #32
 8000792:	2a01      	cmp	r2, #1
 8000794:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000798:	bf28      	it	cs
 800079a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800079e:	fa43 f305 	asr.w	r3, r3, r5
 80007a2:	18c0      	adds	r0, r0, r3
 80007a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80007a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ac:	d507      	bpl.n	80007be <__adddf3+0xe6>
 80007ae:	f04f 0e00 	mov.w	lr, #0
 80007b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80007b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80007ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80007be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80007c2:	d31b      	bcc.n	80007fc <__adddf3+0x124>
 80007c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80007c8:	d30c      	bcc.n	80007e4 <__adddf3+0x10c>
 80007ca:	0849      	lsrs	r1, r1, #1
 80007cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80007d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007d4:	f104 0401 	add.w	r4, r4, #1
 80007d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80007e0:	f080 809a 	bcs.w	8000918 <__adddf3+0x240>
 80007e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007e8:	bf08      	it	eq
 80007ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007ee:	f150 0000 	adcs.w	r0, r0, #0
 80007f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007f6:	ea41 0105 	orr.w	r1, r1, r5
 80007fa:	bd30      	pop	{r4, r5, pc}
 80007fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000800:	4140      	adcs	r0, r0
 8000802:	eb41 0101 	adc.w	r1, r1, r1
 8000806:	3c01      	subs	r4, #1
 8000808:	bf28      	it	cs
 800080a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800080e:	d2e9      	bcs.n	80007e4 <__adddf3+0x10c>
 8000810:	f091 0f00 	teq	r1, #0
 8000814:	bf04      	itt	eq
 8000816:	4601      	moveq	r1, r0
 8000818:	2000      	moveq	r0, #0
 800081a:	fab1 f381 	clz	r3, r1
 800081e:	bf08      	it	eq
 8000820:	3320      	addeq	r3, #32
 8000822:	f1a3 030b 	sub.w	r3, r3, #11
 8000826:	f1b3 0220 	subs.w	r2, r3, #32
 800082a:	da0c      	bge.n	8000846 <__adddf3+0x16e>
 800082c:	320c      	adds	r2, #12
 800082e:	dd08      	ble.n	8000842 <__adddf3+0x16a>
 8000830:	f102 0c14 	add.w	ip, r2, #20
 8000834:	f1c2 020c 	rsb	r2, r2, #12
 8000838:	fa01 f00c 	lsl.w	r0, r1, ip
 800083c:	fa21 f102 	lsr.w	r1, r1, r2
 8000840:	e00c      	b.n	800085c <__adddf3+0x184>
 8000842:	f102 0214 	add.w	r2, r2, #20
 8000846:	bfd8      	it	le
 8000848:	f1c2 0c20 	rsble	ip, r2, #32
 800084c:	fa01 f102 	lsl.w	r1, r1, r2
 8000850:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000854:	bfdc      	itt	le
 8000856:	ea41 010c 	orrle.w	r1, r1, ip
 800085a:	4090      	lslle	r0, r2
 800085c:	1ae4      	subs	r4, r4, r3
 800085e:	bfa2      	ittt	ge
 8000860:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000864:	4329      	orrge	r1, r5
 8000866:	bd30      	popge	{r4, r5, pc}
 8000868:	ea6f 0404 	mvn.w	r4, r4
 800086c:	3c1f      	subs	r4, #31
 800086e:	da1c      	bge.n	80008aa <__adddf3+0x1d2>
 8000870:	340c      	adds	r4, #12
 8000872:	dc0e      	bgt.n	8000892 <__adddf3+0x1ba>
 8000874:	f104 0414 	add.w	r4, r4, #20
 8000878:	f1c4 0220 	rsb	r2, r4, #32
 800087c:	fa20 f004 	lsr.w	r0, r0, r4
 8000880:	fa01 f302 	lsl.w	r3, r1, r2
 8000884:	ea40 0003 	orr.w	r0, r0, r3
 8000888:	fa21 f304 	lsr.w	r3, r1, r4
 800088c:	ea45 0103 	orr.w	r1, r5, r3
 8000890:	bd30      	pop	{r4, r5, pc}
 8000892:	f1c4 040c 	rsb	r4, r4, #12
 8000896:	f1c4 0220 	rsb	r2, r4, #32
 800089a:	fa20 f002 	lsr.w	r0, r0, r2
 800089e:	fa01 f304 	lsl.w	r3, r1, r4
 80008a2:	ea40 0003 	orr.w	r0, r0, r3
 80008a6:	4629      	mov	r1, r5
 80008a8:	bd30      	pop	{r4, r5, pc}
 80008aa:	fa21 f004 	lsr.w	r0, r1, r4
 80008ae:	4629      	mov	r1, r5
 80008b0:	bd30      	pop	{r4, r5, pc}
 80008b2:	f094 0f00 	teq	r4, #0
 80008b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80008ba:	bf06      	itte	eq
 80008bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80008c0:	3401      	addeq	r4, #1
 80008c2:	3d01      	subne	r5, #1
 80008c4:	e74e      	b.n	8000764 <__adddf3+0x8c>
 80008c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008ca:	bf18      	it	ne
 80008cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008d0:	d029      	beq.n	8000926 <__adddf3+0x24e>
 80008d2:	ea94 0f05 	teq	r4, r5
 80008d6:	bf08      	it	eq
 80008d8:	ea90 0f02 	teqeq	r0, r2
 80008dc:	d005      	beq.n	80008ea <__adddf3+0x212>
 80008de:	ea54 0c00 	orrs.w	ip, r4, r0
 80008e2:	bf04      	itt	eq
 80008e4:	4619      	moveq	r1, r3
 80008e6:	4610      	moveq	r0, r2
 80008e8:	bd30      	pop	{r4, r5, pc}
 80008ea:	ea91 0f03 	teq	r1, r3
 80008ee:	bf1e      	ittt	ne
 80008f0:	2100      	movne	r1, #0
 80008f2:	2000      	movne	r0, #0
 80008f4:	bd30      	popne	{r4, r5, pc}
 80008f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008fa:	d105      	bne.n	8000908 <__adddf3+0x230>
 80008fc:	0040      	lsls	r0, r0, #1
 80008fe:	4149      	adcs	r1, r1
 8000900:	bf28      	it	cs
 8000902:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000906:	bd30      	pop	{r4, r5, pc}
 8000908:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800090c:	bf3c      	itt	cc
 800090e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000912:	bd30      	popcc	{r4, r5, pc}
 8000914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000918:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800091c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	bd30      	pop	{r4, r5, pc}
 8000926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800092a:	bf1a      	itte	ne
 800092c:	4619      	movne	r1, r3
 800092e:	4610      	movne	r0, r2
 8000930:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000934:	bf1c      	itt	ne
 8000936:	460b      	movne	r3, r1
 8000938:	4602      	movne	r2, r0
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	bf06      	itte	eq
 8000940:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000944:	ea91 0f03 	teqeq	r1, r3
 8000948:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	bf00      	nop

08000950 <__aeabi_ui2d>:
 8000950:	f090 0f00 	teq	r0, #0
 8000954:	bf04      	itt	eq
 8000956:	2100      	moveq	r1, #0
 8000958:	4770      	bxeq	lr
 800095a:	b530      	push	{r4, r5, lr}
 800095c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000960:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000964:	f04f 0500 	mov.w	r5, #0
 8000968:	f04f 0100 	mov.w	r1, #0
 800096c:	e750      	b.n	8000810 <__adddf3+0x138>
 800096e:	bf00      	nop

08000970 <__aeabi_i2d>:
 8000970:	f090 0f00 	teq	r0, #0
 8000974:	bf04      	itt	eq
 8000976:	2100      	moveq	r1, #0
 8000978:	4770      	bxeq	lr
 800097a:	b530      	push	{r4, r5, lr}
 800097c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000980:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000984:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000988:	bf48      	it	mi
 800098a:	4240      	negmi	r0, r0
 800098c:	f04f 0100 	mov.w	r1, #0
 8000990:	e73e      	b.n	8000810 <__adddf3+0x138>
 8000992:	bf00      	nop

08000994 <__aeabi_f2d>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800099a:	ea4f 0131 	mov.w	r1, r1, rrx
 800099e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80009a2:	bf1f      	itttt	ne
 80009a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80009a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80009b0:	4770      	bxne	lr
 80009b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80009b6:	bf08      	it	eq
 80009b8:	4770      	bxeq	lr
 80009ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80009be:	bf04      	itt	eq
 80009c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80009c4:	4770      	bxeq	lr
 80009c6:	b530      	push	{r4, r5, lr}
 80009c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80009cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009d4:	e71c      	b.n	8000810 <__adddf3+0x138>
 80009d6:	bf00      	nop

080009d8 <__aeabi_ul2d>:
 80009d8:	ea50 0201 	orrs.w	r2, r0, r1
 80009dc:	bf08      	it	eq
 80009de:	4770      	bxeq	lr
 80009e0:	b530      	push	{r4, r5, lr}
 80009e2:	f04f 0500 	mov.w	r5, #0
 80009e6:	e00a      	b.n	80009fe <__aeabi_l2d+0x16>

080009e8 <__aeabi_l2d>:
 80009e8:	ea50 0201 	orrs.w	r2, r0, r1
 80009ec:	bf08      	it	eq
 80009ee:	4770      	bxeq	lr
 80009f0:	b530      	push	{r4, r5, lr}
 80009f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009f6:	d502      	bpl.n	80009fe <__aeabi_l2d+0x16>
 80009f8:	4240      	negs	r0, r0
 80009fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a02:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a0a:	f43f aed8 	beq.w	80007be <__adddf3+0xe6>
 8000a0e:	f04f 0203 	mov.w	r2, #3
 8000a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a16:	bf18      	it	ne
 8000a18:	3203      	addne	r2, #3
 8000a1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a1e:	bf18      	it	ne
 8000a20:	3203      	addne	r2, #3
 8000a22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a32:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a36:	ea40 000e 	orr.w	r0, r0, lr
 8000a3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a3e:	4414      	add	r4, r2
 8000a40:	e6bd      	b.n	80007be <__adddf3+0xe6>
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_uldivmod>:
 8000b34:	b953      	cbnz	r3, 8000b4c <__aeabi_uldivmod+0x18>
 8000b36:	b94a      	cbnz	r2, 8000b4c <__aeabi_uldivmod+0x18>
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	2800      	cmpeq	r0, #0
 8000b3e:	bf1c      	itt	ne
 8000b40:	f04f 31ff 	movne.w	r1, #4294967295
 8000b44:	f04f 30ff 	movne.w	r0, #4294967295
 8000b48:	f000 b80c 	b.w	8000b64 <__aeabi_idiv0>
 8000b4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b54:	f003 feec 	bl	8004930 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_idiv0>:
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr
	...

08000bb0 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000bb0:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <notify1+0xc>)
 8000bb2:	68d3      	ldr	r3, [r2, #12]
 8000bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000bb8:	60d3      	str	r3, [r2, #12]
}
 8000bba:	4770      	bx	lr
 8000bbc:	40011000 	.word	0x40011000

08000bc0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000bc0:	4a02      	ldr	r2, [pc, #8]	; (8000bcc <notify2+0xc>)
 8000bc2:	68d3      	ldr	r3, [r2, #12]
 8000bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000bc8:	60d3      	str	r3, [r2, #12]
}
 8000bca:	4770      	bx	lr
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <chSysHalt>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8000bd2:	4903      	ldr	r1, [pc, #12]	; (8000be0 <chSysHalt+0x10>)
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <chSysHalt+0x14>)
  currcore->dbg.panic_msg = reason;
 8000bd6:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 8000bda:	2203      	movs	r2, #3
 8000bdc:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 8000bde:	e7fe      	b.n	8000bde <chSysHalt+0xe>
 8000be0:	200009f0 	.word	0x200009f0
 8000be4:	20000cd0 	.word	0x20000cd0
	...

08000bf0 <__idle_thread>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8000bf0:	e7fe      	b.n	8000bf0 <__idle_thread>
 8000bf2:	bf00      	nop
	...

08000c00 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <chTMStartMeasurementX+0x8>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000c04:	6083      	str	r3, [r0, #8]
}
 8000c06:	4770      	bx	lr
 8000c08:	e0001000 	.word	0xe0001000
 8000c0c:	00000000 	.word	0x00000000

08000c10 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <chTMStopMeasurementX+0x3c>)
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8000c14:	6881      	ldr	r1, [r0, #8]
 8000c16:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000c18:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000c1a:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c1c:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	6941      	ldr	r1, [r0, #20]
 8000c26:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000c28:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8000c2a:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c2c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000c30:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000c32:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000c34:	bf88      	it	hi
 8000c36:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000c38:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 8000c3a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 8000c3c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c40:	6141      	str	r1, [r0, #20]
}
 8000c42:	f85d 4b04 	ldr.w	r4, [sp], #4
    tmp->best = tmp->last;
 8000c46:	bf38      	it	cc
 8000c48:	6003      	strcc	r3, [r0, #0]
}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000cd0 	.word	0x20000cd0
 8000c50:	e0001000 	.word	0xe0001000
	...

08000c60 <dac_lld_put_channel.constprop.0>:
 */
void dac_lld_put_channel(DACDriver *dacp,
                         dacchannel_t channel,
                         dacsample_t sample) {

  switch (dacp->config->datamode) {
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <dac_lld_put_channel.constprop.0+0x3c>)
 8000c62:	6913      	ldr	r3, [r2, #16]
 8000c64:	789b      	ldrb	r3, [r3, #2]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d003      	beq.n	8000c72 <dac_lld_put_channel.constprop.0+0x12>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d008      	beq.n	8000c80 <dac_lld_put_channel.constprop.0+0x20>
 8000c6e:	b173      	cbz	r3, 8000c8e <dac_lld_put_channel.constprop.0+0x2e>
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
    break;
  }
}
 8000c70:	4770      	bx	lr
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 8000c72:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c74:	e9d2 3200 	ldrd	r3, r2, [r2]
 8000c78:	330c      	adds	r3, #12
 8000c7a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c7e:	4770      	bx	lr
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8000c80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c82:	e9d2 3200 	ldrd	r3, r2, [r2]
 8000c86:	3310      	adds	r3, #16
 8000c88:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
 8000c8c:	4770      	bx	lr
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8000c8e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c90:	e9d2 3200 	ldrd	r3, r2, [r2]
 8000c94:	3308      	adds	r3, #8
 8000c96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c9a:	4770      	bx	lr
 8000c9c:	2000083c 	.word	0x2000083c

08000ca0 <sdObjectInit.constprop.0>:
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <sdObjectInit.constprop.0+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000ca4:	b410      	push	{r4}
  sdp->vmt = &vmt;
 8000ca6:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000caa:	f100 040c 	add.w	r4, r0, #12
 8000cae:	f100 0254 	add.w	r2, r0, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8000cb2:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_counter = 0;
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	6141      	str	r1, [r0, #20]
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
  qp->prev = qp;
 8000cb8:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_wrptr   = bp;
 8000cbc:	e9c0 2208 	strd	r2, r2, [r0, #32]
  oqp->q_counter = size;
 8000cc0:	2410      	movs	r4, #16
  sdp->state = SD_STOP;
 8000cc2:	f04f 0c01 	mov.w	ip, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000cc6:	6043      	str	r3, [r0, #4]
  iqp->q_notify  = infy;
 8000cc8:	6281      	str	r1, [r0, #40]	; 0x28
  iqp->q_top     = bp + size;
 8000cca:	f100 0364 	add.w	r3, r0, #100	; 0x64
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000cce:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_buffer  = bp;
 8000cd2:	6182      	str	r2, [r0, #24]
  oqp->q_top     = bp + size;
 8000cd4:	f100 0274 	add.w	r2, r0, #116	; 0x74
  oqp->q_counter = size;
 8000cd8:	6384      	str	r4, [r0, #56]	; 0x38
  qp->next = qp;
 8000cda:	e9c0 010b 	strd	r0, r1, [r0, #44]	; 0x2c
  oqp->q_wrptr   = bp;
 8000cde:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
}
 8000ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
  sdp->state = SD_STOP;
 8000ce6:	f880 c008 	strb.w	ip, [r0, #8]
  iqp->q_top     = bp + size;
 8000cea:	61c3      	str	r3, [r0, #28]
  qp->prev = qp;
 8000cec:	6341      	str	r1, [r0, #52]	; 0x34
  oqp->q_buffer  = bp;
 8000cee:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_top     = bp + size;
 8000cf0:	6402      	str	r2, [r0, #64]	; 0x40
  oqp->q_link    = link;
 8000cf2:	6500      	str	r0, [r0, #80]	; 0x50
}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	08004fb4 	.word	0x08004fb4
 8000cfc:	00000000 	.word	0x00000000

08000d00 <_ctl>:
  osalDbgCheck(sdp != NULL);
 8000d00:	b120      	cbz	r0, 8000d0c <_ctl+0xc>
  switch (operation) {
 8000d02:	2901      	cmp	r1, #1
 8000d04:	d106      	bne.n	8000d14 <_ctl+0x14>
    osalDbgCheck(arg == NULL);
 8000d06:	b90a      	cbnz	r2, 8000d0c <_ctl+0xc>
  return HAL_RET_SUCCESS;
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4770      	bx	lr
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8000d0c:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <_ctl+0x1c>)
 8000d10:	f7ff ff5e 	bl	8000bd0 <chSysHalt>
    return HAL_RET_UNKNOWN_CTL;
 8000d14:	f06f 0013 	mvn.w	r0, #19
}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	08004dcc 	.word	0x08004dcc

08000d20 <vt_set_alarm>:
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;

  if (delay < currdelta) {
 8000d20:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 8000d24:	bf28      	it	cs
 8000d26:	f44f 417f 	movcs.w	r1, #65280	; 0xff00
 8000d2a:	2902      	cmp	r1, #2
 8000d2c:	bf38      	it	cc
 8000d2e:	2102      	movcc	r1, #2
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8000d30:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <vt_set_alarm+0x5c>)

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8000d34:	1843      	adds	r3, r0, r1
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	6353      	str	r3, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000d3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d3c:	b29b      	uxth	r3, r3
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000d3e:	1a18      	subs	r0, r3, r0
 8000d40:	b280      	uxth	r0, r0
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(now, newnow);
    if (likely(nowdelta < delay)) {
 8000d42:	4281      	cmp	r1, r0
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8000d44:	bf98      	it	ls
 8000d46:	2003      	movls	r0, #3
    if (likely(nowdelta < delay)) {
 8000d48:	d901      	bls.n	8000d4e <vt_set_alarm+0x2e>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8000d4a:	bd08      	pop	{r3, pc}
 8000d4c:	460b      	mov	r3, r1
  return systime + (systime_t)interval;
 8000d4e:	1819      	adds	r1, r3, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000d50:	b289      	uxth	r1, r1
 8000d52:	6351      	str	r1, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000d54:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000d56:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	b29b      	uxth	r3, r3
    if (likely(nowdelta < delay)) {
 8000d5c:	4283      	cmp	r3, r0
 8000d5e:	d205      	bcs.n	8000d6c <vt_set_alarm+0x4c>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <vt_set_alarm+0x60>)
 8000d62:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000d6a:	bd08      	pop	{r3, pc}
    currdelta += (sysinterval_t)1;
 8000d6c:	3001      	adds	r0, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8000d6e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000d72:	d1eb      	bne.n	8000d4c <vt_set_alarm+0x2c>
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <vt_set_alarm+0x64>)
 8000d76:	f7ff ff2b 	bl	8000bd0 <chSysHalt>
 8000d7a:	bf00      	nop
 8000d7c:	40014800 	.word	0x40014800
 8000d80:	200009f0 	.word	0x200009f0
 8000d84:	08004da4 	.word	0x08004da4
	...

08000d90 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8000d90:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d92:	2330      	movs	r3, #48	; 0x30
 8000d94:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8000d98:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <__sch_wakeup+0x94>)
 8000d9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dd3c      	ble.n	8000e1c <__sch_wakeup+0x8c>
 8000da2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d138      	bne.n	8000e1c <__sch_wakeup+0x8c>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8000db0:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8000db4:	2b0c      	cmp	r3, #12
 8000db6:	d810      	bhi.n	8000dda <__sch_wakeup+0x4a>
 8000db8:	e8df f003 	tbb	[pc, r3]
 8000dbc:	260f0f2a 	.word	0x260f0f2a
 8000dc0:	0b0f070b 	.word	0x0b0f070b
 8000dc4:	0f0f0f0f 	.word	0x0f0f0f0f
 8000dc8:	0b          	.byte	0x0b
 8000dc9:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8000dca:	6a88      	ldr	r0, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000dcc:	6883      	ldr	r3, [r0, #8]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	6083      	str	r3, [r0, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8000dd2:	e9d1 3000 	ldrd	r3, r0, [r1]
 8000dd6:	6003      	str	r3, [r0, #0]
  p->next->prev = p->prev;
 8000dd8:	6058      	str	r0, [r3, #4]
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8000dda:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 8000dde:	2000      	movs	r0, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000de0:	628c      	str	r4, [r1, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000de2:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8000de4:	688c      	ldr	r4, [r1, #8]
  tp->state = CH_STATE_READY;
 8000de6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    pqp = pqp->next;
 8000dea:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000dec:	6898      	ldr	r0, [r3, #8]
 8000dee:	42a0      	cmp	r0, r4
 8000df0:	d2fb      	bcs.n	8000dea <__sch_wakeup+0x5a>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8000df2:	685c      	ldr	r4, [r3, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8000df4:	2000      	movs	r0, #0
 8000df6:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 8000dfa:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8000dfc:	6059      	str	r1, [r3, #4]
 8000dfe:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000e02:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 8000e06:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8000e08:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	6018      	str	r0, [r3, #0]
    break;
 8000e0e:	e7e4      	b.n	8000dda <__sch_wakeup+0x4a>
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e16:	f383 8811 	msr	BASEPRI, r3
}
 8000e1a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#6");
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <__sch_wakeup+0x98>)
 8000e1e:	f7ff fed7 	bl	8000bd0 <chSysHalt>
 8000e22:	bf00      	nop
 8000e24:	200009f0 	.word	0x200009f0
 8000e28:	08004bf8 	.word	0x08004bf8
 8000e2c:	00000000 	.word	0x00000000

08000e30 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8000e30:	2300      	movs	r3, #0
  qp->prev = qp;
 8000e32:	e9c0 0000 	strd	r0, r0, [r0]
 8000e36:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @api
 */
void chDbgCheckClassI(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <chEvtBroadcastFlagsI+0x98>)
 8000e44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	db3e      	blt.n	8000eca <chEvtBroadcastFlagsI+0x8a>
 8000e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dd3a      	ble.n	8000eca <chEvtBroadcastFlagsI+0x8a>
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000e54:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000e56:	4298      	cmp	r0, r3
 8000e58:	d019      	beq.n	8000e8e <chEvtBroadcastFlagsI+0x4e>
    tp->u.rdymsg = MSG_OK;
 8000e5a:	2500      	movs	r5, #0
  /*lint -restore*/
    elp->flags |= flags;
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000e62:	b111      	cbz	r1, 8000e6a <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000e64:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000e66:	4211      	tst	r1, r2
 8000e68:	d00e      	beq.n	8000e88 <chEvtBroadcastFlagsI+0x48>
      chEvtSignalI(elp->listener, elp->events);
 8000e6a:	685a      	ldr	r2, [r3, #4]
  chDbgCheck(tp != NULL);
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d02f      	beq.n	8000ed0 <chEvtBroadcastFlagsI+0x90>
  tp->epending |= events;
 8000e70:	689c      	ldr	r4, [r3, #8]
 8000e72:	6b96      	ldr	r6, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e74:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 8000e78:	4334      	orrs	r4, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e7a:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8000e7e:	6394      	str	r4, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000e80:	d01c      	beq.n	8000ebc <chEvtBroadcastFlagsI+0x7c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000e82:	f1bc 0f0b 	cmp.w	ip, #11
 8000e86:	d003      	beq.n	8000e90 <chEvtBroadcastFlagsI+0x50>
    }
    elp = elp->next;
 8000e88:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d1e6      	bne.n	8000e5c <chEvtBroadcastFlagsI+0x1c>
  }
}
 8000e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000e90:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8000e92:	ea36 0404 	bics.w	r4, r6, r4
 8000e96:	d1f7      	bne.n	8000e88 <chEvtBroadcastFlagsI+0x48>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000e98:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000e9a:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8000e9c:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8000e9e:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 8000ea2:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000ea4:	68a6      	ldr	r6, [r4, #8]
 8000ea6:	42be      	cmp	r6, r7
 8000ea8:	d2fb      	bcs.n	8000ea2 <chEvtBroadcastFlagsI+0x62>
    elp = elp->next;
 8000eaa:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8000eac:	6866      	ldr	r6, [r4, #4]
  p->next       = pqp;
 8000eae:	6014      	str	r4, [r2, #0]
  while (elp != (event_listener_t *)esp) {
 8000eb0:	4298      	cmp	r0, r3
  p->prev       = pqp->prev;
 8000eb2:	6056      	str	r6, [r2, #4]
  p->prev->next = p;
 8000eb4:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 8000eb6:	6062      	str	r2, [r4, #4]
 8000eb8:	d1d0      	bne.n	8000e5c <chEvtBroadcastFlagsI+0x1c>
 8000eba:	e7e8      	b.n	8000e8e <chEvtBroadcastFlagsI+0x4e>
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ebc:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8000ebe:	4234      	tst	r4, r6
 8000ec0:	d1ea      	bne.n	8000e98 <chEvtBroadcastFlagsI+0x58>
    elp = elp->next;
 8000ec2:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d1c9      	bne.n	8000e5c <chEvtBroadcastFlagsI+0x1c>
 8000ec8:	e7e1      	b.n	8000e8e <chEvtBroadcastFlagsI+0x4e>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <chEvtBroadcastFlagsI+0x9c>)
 8000ecc:	f7ff fe80 	bl	8000bd0 <chSysHalt>
  chDbgCheck(tp != NULL);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <chEvtBroadcastFlagsI+0xa0>)
 8000ed2:	f7ff fe7d 	bl	8000bd0 <chSysHalt>
 8000ed6:	bf00      	nop
 8000ed8:	200009f0 	.word	0x200009f0
 8000edc:	08004c00 	.word	0x08004c00
 8000ee0:	08004dbc 	.word	0x08004dbc
	...

08000ef0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	2330      	movs	r3, #48	; 0x30
 8000ef4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <chCoreAllocFromTop+0x64>)
 8000efa:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8000efe:	ea54 0c05 	orrs.w	ip, r4, r5
 8000f02:	d121      	bne.n	8000f48 <chCoreAllocFromTop+0x58>
  oip->dbg.lock_cnt = (cnt_t)1;
 8000f04:	2401      	movs	r4, #1
 8000f06:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000f0a:	b301      	cbz	r1, 8000f4e <chCoreAllocFromTop+0x5e>
 8000f0c:	f101 3cff 	add.w	ip, r1, #4294967295
 8000f10:	ea1c 0c01 	ands.w	ip, ip, r1
 8000f14:	d11b      	bne.n	8000f4e <chCoreAllocFromTop+0x5e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f16:	4c10      	ldr	r4, [pc, #64]	; (8000f58 <chCoreAllocFromTop+0x68>)
 8000f18:	6865      	ldr	r5, [r4, #4]
 8000f1a:	4249      	negs	r1, r1
 8000f1c:	1a28      	subs	r0, r5, r0
 8000f1e:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f20:	6821      	ldr	r1, [r4, #0]
  prev = p - offset;
 8000f22:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f24:	428a      	cmp	r2, r1
 8000f26:	d308      	bcc.n	8000f3a <chCoreAllocFromTop+0x4a>
 8000f28:	4295      	cmp	r5, r2
 8000f2a:	d306      	bcc.n	8000f3a <chCoreAllocFromTop+0x4a>
  ch_memcore.topmem = prev;
 8000f2c:	6062      	str	r2, [r4, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000f34:	f382 8811 	msr	BASEPRI, r2
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000f38:	bd38      	pop	{r3, r4, r5, pc}
 8000f3a:	2200      	movs	r2, #0
    return NULL;
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000f42:	f382 8811 	msr	BASEPRI, r2
}
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <chCoreAllocFromTop+0x6c>)
 8000f4a:	f7ff fe41 	bl	8000bd0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <chCoreAllocFromTop+0x70>)
 8000f50:	f7ff fe3e 	bl	8000bd0 <chSysHalt>
 8000f54:	200009f0 	.word	0x200009f0
 8000f58:	20000cc8 	.word	0x20000cc8
 8000f5c:	08004c08 	.word	0x08004c08
 8000f60:	08004d74 	.word	0x08004d74
	...

08000f70 <chCoreAllocAlignedI>:
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <chCoreAllocAlignedI+0x44>)
 8000f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f76:	2a00      	cmp	r2, #0
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	db15      	blt.n	8000fa8 <chCoreAllocAlignedI+0x38>
 8000f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dd11      	ble.n	8000fa8 <chCoreAllocAlignedI+0x38>
 8000f84:	b199      	cbz	r1, 8000fae <chCoreAllocAlignedI+0x3e>
 8000f86:	1e4b      	subs	r3, r1, #1
 8000f88:	400b      	ands	r3, r1
 8000f8a:	d110      	bne.n	8000fae <chCoreAllocAlignedI+0x3e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <chCoreAllocAlignedI+0x48>)
 8000f8e:	6854      	ldr	r4, [r2, #4]
 8000f90:	4249      	negs	r1, r1
 8000f92:	1a20      	subs	r0, r4, r0
 8000f94:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000f96:	6811      	ldr	r1, [r2, #0]
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	d303      	bcc.n	8000fa4 <chCoreAllocAlignedI+0x34>
 8000f9c:	4284      	cmp	r4, r0
 8000f9e:	d301      	bcc.n	8000fa4 <chCoreAllocAlignedI+0x34>
  ch_memcore.topmem = prev;
 8000fa0:	6050      	str	r0, [r2, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000fa2:	bd10      	pop	{r4, pc}
    return NULL;
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <chCoreAllocAlignedI+0x4c>)
 8000faa:	f7ff fe11 	bl	8000bd0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <chCoreAllocAlignedI+0x50>)
 8000fb0:	f7ff fe0e 	bl	8000bd0 <chSysHalt>
 8000fb4:	200009f0 	.word	0x200009f0
 8000fb8:	20000cc8 	.word	0x20000cc8
 8000fbc:	08004c00 	.word	0x08004c00
 8000fc0:	08004d74 	.word	0x08004d74
	...

08000fd0 <vt_insert_first.constprop.0>:

/**
 * @brief   Inserts a timer as first element in a delta list.
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8000fd0:	b538      	push	{r3, r4, r5, lr}
                            sysinterval_t delay) {
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 8000fd2:	4c1e      	ldr	r4, [pc, #120]	; (800104c <vt_insert_first.constprop.0+0x7c>)
 8000fd4:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
 8000fd8:	83a1      	strh	r1, [r4, #28]
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {

  dlp->delta      = delta;
  dlp->prev       = dlhp;
 8000fda:	f104 0310 	add.w	r3, r4, #16
  dlp->delta      = delta;
 8000fde:	6082      	str	r2, [r0, #8]
 8000fe0:	bf28      	it	cs
 8000fe2:	f44f 427f 	movcs.w	r2, #65280	; 0xff00
  dlp->prev       = dlhp;
 8000fe6:	6043      	str	r3, [r0, #4]
 8000fe8:	2a02      	cmp	r2, #2
  dlp->next       = dlp->prev->next;
 8000fea:	6923      	ldr	r3, [r4, #16]
 8000fec:	6003      	str	r3, [r0, #0]
 8000fee:	bf38      	it	cc
 8000ff0:	2202      	movcc	r2, #2
  dlp->next->prev = dlp;
 8000ff2:	6058      	str	r0, [r3, #4]
  return systime + (systime_t)interval;
 8000ff4:	188d      	adds	r5, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <vt_insert_first.constprop.0+0x80>)
  dlhp->next      = dlp;
 8000ff8:	6120      	str	r0, [r4, #16]
 8000ffa:	b2ad      	uxth	r5, r5
  STM32_ST_TIM->SR     = 0;
 8000ffc:	2000      	movs	r0, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000ffe:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001000:	6118      	str	r0, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001002:	2002      	movs	r0, #2
 8001004:	60d8      	str	r0, [r3, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8001006:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001008:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 800100a:	eba0 0c01 	sub.w	ip, r0, r1
 800100e:	fa1f fc8c 	uxth.w	ip, ip
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8001012:	4594      	cmp	ip, r2
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8001014:	bf28      	it	cs
 8001016:	2503      	movcs	r5, #3
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8001018:	d206      	bcs.n	8001028 <vt_insert_first.constprop.0+0x58>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 800101a:	bd38      	pop	{r3, r4, r5, pc}
    currdelta += (sysinterval_t)1;
 800101c:	3501      	adds	r5, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 800101e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8001022:	4601      	mov	r1, r0
 8001024:	d00e      	beq.n	8001044 <vt_insert_first.constprop.0+0x74>
 8001026:	4610      	mov	r0, r2
  return systime + (systime_t)interval;
 8001028:	4429      	add	r1, r5
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800102a:	b289      	uxth	r1, r1
 800102c:	6359      	str	r1, [r3, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800102e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001030:	b292      	uxth	r2, r2
  return (sysinterval_t)((systime_t)(end - start));
 8001032:	1a11      	subs	r1, r2, r0
 8001034:	b289      	uxth	r1, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8001036:	42a9      	cmp	r1, r5
 8001038:	d2f0      	bcs.n	800101c <vt_insert_first.constprop.0+0x4c>
 800103a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001042:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <vt_insert_first.constprop.0+0x84>)
 8001046:	f7ff fdc3 	bl	8000bd0 <chSysHalt>
 800104a:	bf00      	nop
 800104c:	200009f0 	.word	0x200009f0
 8001050:	40014800 	.word	0x40014800
 8001054:	08004da4 	.word	0x08004da4
	...

08001060 <chSchReadyI.isra.0>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001060:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <chSchReadyI.isra.0+0x40>)
 8001064:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001068:	2a00      	cmp	r2, #0
 800106a:	db13      	blt.n	8001094 <chSchReadyI.isra.0+0x34>
 800106c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001070:	2b00      	cmp	r3, #0
 8001072:	dd0f      	ble.n	8001094 <chSchReadyI.isra.0+0x34>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8001074:	b188      	cbz	r0, 800109a <chSchReadyI.isra.0+0x3a>
  tp->state = CH_STATE_READY;
 8001076:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001078:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800107a:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 800107c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    pqp = pqp->next;
 8001080:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	428a      	cmp	r2, r1
 8001086:	d2fb      	bcs.n	8001080 <chSchReadyI.isra.0+0x20>
  p->prev       = pqp->prev;
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800108e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001090:	6058      	str	r0, [r3, #4]
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
}
 8001092:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <chSchReadyI.isra.0+0x44>)
 8001096:	f7ff fd9b 	bl	8000bd0 <chSysHalt>
  chDbgCheck(tp != NULL);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <chSchReadyI.isra.0+0x48>)
 800109c:	f7ff fd98 	bl	8000bd0 <chSysHalt>
 80010a0:	200009f0 	.word	0x200009f0
 80010a4:	08004c00 	.word	0x08004c00
 80010a8:	08004d5c 	.word	0x08004d5c
 80010ac:	00000000 	.word	0x00000000

080010b0 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 80010b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 80010b4:	6f46      	ldr	r6, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80010b6:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  uint16_t sr = u->SR;
 80010ba:	f8d6 8000 	ldr.w	r8, [r6]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 80010be:	f418 7f80 	tst.w	r8, #256	; 0x100
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 80010c2:	b083      	sub	sp, #12
 80010c4:	4604      	mov	r4, r0
  if (sr & USART_SR_LBD) {
 80010c6:	f040 8096 	bne.w	80011f6 <sd_lld_serve_interrupt+0x146>
 80010ca:	4f9f      	ldr	r7, [pc, #636]	; (8001348 <sd_lld_serve_interrupt+0x298>)
 80010cc:	2330      	movs	r3, #48	; 0x30
 80010ce:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80010d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f340 80b0 	ble.w	800123c <sd_lld_serve_interrupt+0x18c>
 80010dc:	f8d7 908c 	ldr.w	r9, [r7, #140]	; 0x8c
 80010e0:	f1b9 0f00 	cmp.w	r9, #0
 80010e4:	f040 80aa 	bne.w	800123c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80010e8:	2301      	movs	r3, #1
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80010ea:	f018 0f2f 	tst.w	r8, #47	; 0x2f
 80010ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint16_t sr = u->SR;
 80010f2:	fa1f f588 	uxth.w	r5, r8
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80010f6:	d019      	beq.n	800112c <sd_lld_serve_interrupt+0x7c>
  chnAddFlagsI(sdp, sts);
 80010f8:	f104 0804 	add.w	r8, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80010fc:	f104 0b0c 	add.w	fp, r4, #12
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8001100:	0729      	lsls	r1, r5, #28
 8001102:	d127      	bne.n	8001154 <sd_lld_serve_interrupt+0xa4>
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8001104:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8001106:	6872      	ldr	r2, [r6, #4]
 8001108:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 800110c:	d439      	bmi.n	8001182 <sd_lld_serve_interrupt+0xd2>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800110e:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001110:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8001114:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001116:	d1f3      	bne.n	8001100 <sd_lld_serve_interrupt+0x50>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800111c:	2b00      	cmp	r3, #0
 800111e:	f340 80ad 	ble.w	800127c <sd_lld_serve_interrupt+0x1cc>
 8001122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001126:	2b00      	cmp	r3, #0
 8001128:	f340 80a8 	ble.w	800127c <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001132:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001136:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800113a:	d002      	beq.n	8001142 <sd_lld_serve_interrupt+0x92>
 800113c:	062a      	lsls	r2, r5, #24
 800113e:	f100 80a0 	bmi.w	8001282 <sd_lld_serve_interrupt+0x1d2>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8001142:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001146:	d002      	beq.n	800114e <sd_lld_serve_interrupt+0x9e>
 8001148:	066b      	lsls	r3, r5, #25
 800114a:	f100 80d5 	bmi.w	80012f8 <sd_lld_serve_interrupt+0x248>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
    }
    osalSysUnlockFromISR();
  }
}
 800114e:	b003      	add	sp, #12
 8001150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sr & USART_SR_ORE)
 8001154:	f3c5 01c0 	ubfx	r1, r5, #3, #1
 8001158:	0209      	lsls	r1, r1, #8
  if (sr & USART_SR_PE)
 800115a:	07ea      	lsls	r2, r5, #31
    sts |= SD_PARITY_ERROR;
 800115c:	bf48      	it	mi
 800115e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001162:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 8001164:	bf48      	it	mi
 8001166:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800116a:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 800116c:	bf48      	it	mi
 800116e:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001172:	4640      	mov	r0, r8
 8001174:	f7ff fe64 	bl	8000e40 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8001178:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800117a:	6872      	ldr	r2, [r6, #4]
 800117c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 8001180:	d5c5      	bpl.n	800110e <sd_lld_serve_interrupt+0x5e>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001182:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001186:	2900      	cmp	r1, #0
 8001188:	db32      	blt.n	80011f0 <sd_lld_serve_interrupt+0x140>
 800118a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800118e:	2900      	cmp	r1, #0
 8001190:	dd2e      	ble.n	80011f0 <sd_lld_serve_interrupt+0x140>
  if (iqIsEmptyI(&sdp->iqueue))
 8001192:	6961      	ldr	r1, [r4, #20]
 8001194:	b1e1      	cbz	r1, 80011d0 <sd_lld_serve_interrupt+0x120>
  if (!iqIsFullI(iqp)) {
 8001196:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800119a:	4281      	cmp	r1, r0
 800119c:	d051      	beq.n	8001242 <sd_lld_serve_interrupt+0x192>
    b = (uint8_t)u->DR & sdp->rxmask;
 800119e:	4013      	ands	r3, r2
    iqp->q_counter++;
 80011a0:	6962      	ldr	r2, [r4, #20]
 80011a2:	3201      	adds	r2, #1
 80011a4:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 80011a6:	1c4a      	adds	r2, r1, #1
 80011a8:	6222      	str	r2, [r4, #32]
 80011aa:	700b      	strb	r3, [r1, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80011ac:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d301      	bcc.n	80011b8 <sd_lld_serve_interrupt+0x108>
      iqp->q_wrptr = iqp->q_buffer;
 80011b4:	69a3      	ldr	r3, [r4, #24]
 80011b6:	6223      	str	r3, [r4, #32]
  return (bool)(qp->next != qp);
 80011b8:	68e0      	ldr	r0, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 80011ba:	4583      	cmp	fp, r0
 80011bc:	d0a7      	beq.n	800110e <sd_lld_serve_interrupt+0x5e>
  qp->next       = p->next;
 80011be:	6803      	ldr	r3, [r0, #0]
 80011c0:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 80011c2:	f8c3 b004 	str.w	fp, [r3, #4]

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80011c6:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 80011ca:	f7ff ff49 	bl	8001060 <chSchReadyI.isra.0>
 80011ce:	e79e      	b.n	800110e <sd_lld_serve_interrupt+0x5e>
 80011d0:	2104      	movs	r1, #4
 80011d2:	4640      	mov	r0, r8
 80011d4:	e9cd 2300 	strd	r2, r3, [sp]
 80011d8:	f7ff fe32 	bl	8000e40 <chEvtBroadcastFlagsI>
 80011dc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80011e0:	2900      	cmp	r1, #0
 80011e2:	db05      	blt.n	80011f0 <sd_lld_serve_interrupt+0x140>
 80011e4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80011e8:	2900      	cmp	r1, #0
 80011ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80011ee:	dcd2      	bgt.n	8001196 <sd_lld_serve_interrupt+0xe6>
    chSysHalt("SV#10");
 80011f0:	4856      	ldr	r0, [pc, #344]	; (800134c <sd_lld_serve_interrupt+0x29c>)
 80011f2:	f7ff fced 	bl	8000bd0 <chSysHalt>
 80011f6:	2330      	movs	r3, #48	; 0x30
 80011f8:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80011fc:	4f52      	ldr	r7, [pc, #328]	; (8001348 <sd_lld_serve_interrupt+0x298>)
 80011fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001202:	2b00      	cmp	r3, #0
 8001204:	dd1a      	ble.n	800123c <sd_lld_serve_interrupt+0x18c>
 8001206:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
 800120a:	b9bd      	cbnz	r5, 800123c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 800120c:	2301      	movs	r3, #1
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001212:	3004      	adds	r0, #4
 8001214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001218:	f7ff fe12 	bl	8000e40 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800121c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    u->SR = ~USART_SR_LBD;
 8001220:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001224:	2b00      	cmp	r3, #0
 8001226:	6032      	str	r2, [r6, #0]
 8001228:	dd28      	ble.n	800127c <sd_lld_serve_interrupt+0x1cc>
 800122a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd24      	ble.n	800127c <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001232:	f8c7 508c 	str.w	r5, [r7, #140]	; 0x8c
 8001236:	f385 8811 	msr	BASEPRI, r5
}
 800123a:	e747      	b.n	80010cc <sd_lld_serve_interrupt+0x1c>
    chSysHalt("SV#6");
 800123c:	4844      	ldr	r0, [pc, #272]	; (8001350 <sd_lld_serve_interrupt+0x2a0>)
 800123e:	f7ff fcc7 	bl	8000bd0 <chSysHalt>
  if (!iqIsFullI(iqp)) {
 8001242:	6960      	ldr	r0, [r4, #20]
 8001244:	2800      	cmp	r0, #0
 8001246:	d0aa      	beq.n	800119e <sd_lld_serve_interrupt+0xee>
  chEvtBroadcastFlagsI(esp, flags);
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	4640      	mov	r0, r8
 800124e:	f7ff fdf7 	bl	8000e40 <chEvtBroadcastFlagsI>
}
 8001252:	e75c      	b.n	800110e <sd_lld_serve_interrupt+0x5e>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001256:	2b00      	cmp	r3, #0
 8001258:	d060      	beq.n	800131c <sd_lld_serve_interrupt+0x26c>
  chEvtBroadcastFlagsI(esp, flags);
 800125a:	2110      	movs	r1, #16
 800125c:	1d20      	adds	r0, r4, #4
 800125e:	f7ff fdef 	bl	8000e40 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001262:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001266:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800126a:	ea0a 0303 	and.w	r3, sl, r3
 800126e:	2a00      	cmp	r2, #0
 8001270:	60f3      	str	r3, [r6, #12]
 8001272:	dd03      	ble.n	800127c <sd_lld_serve_interrupt+0x1cc>
 8001274:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001278:	2b00      	cmp	r3, #0
 800127a:	dc4f      	bgt.n	800131c <sd_lld_serve_interrupt+0x26c>
    chSysHalt("SV#7");
 800127c:	4835      	ldr	r0, [pc, #212]	; (8001354 <sd_lld_serve_interrupt+0x2a4>)
 800127e:	f7ff fca7 	bl	8000bd0 <chSysHalt>
 8001282:	2330      	movs	r3, #48	; 0x30
 8001284:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800128c:	2b00      	cmp	r3, #0
 800128e:	ddd5      	ble.n	800123c <sd_lld_serve_interrupt+0x18c>
 8001290:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001294:	2a00      	cmp	r2, #0
 8001296:	d1d1      	bne.n	800123c <sd_lld_serve_interrupt+0x18c>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001298:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
  oip->dbg.lock_cnt = (cnt_t)1;
 800129c:	2001      	movs	r0, #1
 800129e:	4291      	cmp	r1, r2
 80012a0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    b = oqGetI(&sdp->oqueue);
 80012a4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80012a8:	d03e      	beq.n	8001328 <sd_lld_serve_interrupt+0x278>
    uint8_t b;

    oqp->q_counter++;
 80012aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80012ac:	3101      	adds	r1, #1
 80012ae:	63a1      	str	r1, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 80012b0:	1c51      	adds	r1, r2, #1
 80012b2:	64a1      	str	r1, [r4, #72]	; 0x48
 80012b4:	f892 8000 	ldrb.w	r8, [r2]
    if (oqp->q_rdptr >= oqp->q_top) {
 80012b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012ba:	4291      	cmp	r1, r2
 80012bc:	d301      	bcc.n	80012c2 <sd_lld_serve_interrupt+0x212>
      oqp->q_rdptr = oqp->q_buffer;
 80012be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80012c0:	64a2      	str	r2, [r4, #72]	; 0x48
  return (bool)(qp->next != qp);
 80012c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80012c4:	4584      	cmp	ip, r0
 80012c6:	d009      	beq.n	80012dc <sd_lld_serve_interrupt+0x22c>
  qp->next       = p->next;
 80012c8:	6803      	ldr	r3, [r0, #0]
 80012ca:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 80012cc:	f8c3 c004 	str.w	ip, [r3, #4]
  tp->u.rdymsg = msg;
 80012d0:	2300      	movs	r3, #0
 80012d2:	6283      	str	r3, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 80012d4:	f7ff fec4 	bl	8001060 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80012d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
      u->DR = b;
 80012dc:	f8c6 8004 	str.w	r8, [r6, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	ddcb      	ble.n	800127c <sd_lld_serve_interrupt+0x1cc>
 80012e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	ddc7      	ble.n	800127c <sd_lld_serve_interrupt+0x1cc>
  oip->dbg.lock_cnt = (cnt_t)0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012f2:	f383 8811 	msr	BASEPRI, r3
}
 80012f6:	e724      	b.n	8001142 <sd_lld_serve_interrupt+0x92>
 80012f8:	2330      	movs	r3, #48	; 0x30
 80012fa:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80012fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001302:	2b00      	cmp	r3, #0
 8001304:	dd9a      	ble.n	800123c <sd_lld_serve_interrupt+0x18c>
 8001306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800130a:	2b00      	cmp	r3, #0
 800130c:	d196      	bne.n	800123c <sd_lld_serve_interrupt+0x18c>
  oip->dbg.lock_cnt = (cnt_t)1;
 800130e:	2301      	movs	r3, #1
 8001310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (oqIsEmptyI(&sdp->oqueue)) {
 8001314:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8001318:	429a      	cmp	r2, r3
 800131a:	d09b      	beq.n	8001254 <sd_lld_serve_interrupt+0x1a4>
  oip->dbg.lock_cnt = (cnt_t)0;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001322:	f383 8811 	msr	BASEPRI, r3
}
 8001326:	e712      	b.n	800114e <sd_lld_serve_interrupt+0x9e>
  if (!oqIsEmptyI(oqp)) {
 8001328:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800132a:	2900      	cmp	r1, #0
 800132c:	d0bd      	beq.n	80012aa <sd_lld_serve_interrupt+0x1fa>
  chEvtBroadcastFlagsI(esp, flags);
 800132e:	2108      	movs	r1, #8
 8001330:	1d20      	adds	r0, r4, #4
 8001332:	f7ff fd85 	bl	8000e40 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8001336:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800133a:	ea0a 0303 	and.w	r3, sl, r3
 800133e:	60f3      	str	r3, [r6, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001344:	e7cc      	b.n	80012e0 <sd_lld_serve_interrupt+0x230>
 8001346:	bf00      	nop
 8001348:	200009f0 	.word	0x200009f0
 800134c:	08004c00 	.word	0x08004c00
 8001350:	08004bf8 	.word	0x08004bf8
 8001354:	08004c10 	.word	0x08004c10
	...

08001360 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001360:	b508      	push	{r3, lr}
 * @api
 */
void chDbgCheckClassS(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <chSchGoSleepS+0x4c>)
 8001364:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001368:	b9ea      	cbnz	r2, 80013a6 <chSchGoSleepS+0x46>
 800136a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800136e:	2a00      	cmp	r2, #0
 8001370:	dd19      	ble.n	80013a6 <chSchGoSleepS+0x46>
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 8001372:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001374:	681a      	ldr	r2, [r3, #0]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8001376:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800137a:	6810      	ldr	r0, [r2, #0]
 800137c:	6018      	str	r0, [r3, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 800137e:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8001382:	6043      	str	r3, [r0, #4]
 8001384:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8001388:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800138a:	f3ef 8309 	mrs	r3, PSP
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 800138e:	6a08      	ldr	r0, [r1, #32]
 8001390:	3b64      	subs	r3, #100	; 0x64
 8001392:	4298      	cmp	r0, r3
 8001394:	d804      	bhi.n	80013a0 <chSchGoSleepS+0x40>
}
 8001396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chSysSwitch(ntp, otp);
 800139a:	4610      	mov	r0, r2
 800139c:	f7fe bfb2 	b.w	8000304 <__port_switch>
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <chSchGoSleepS+0x50>)
 80013a2:	f7ff fc15 	bl	8000bd0 <chSysHalt>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <chSchGoSleepS+0x54>)
 80013a8:	f7ff fc12 	bl	8000bd0 <chSysHalt>
 80013ac:	200009f0 	.word	0x200009f0
 80013b0:	08004c20 	.word	0x08004c20
 80013b4:	08004c18 	.word	0x08004c18
	...

080013c0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80013c4:	4d45      	ldr	r5, [pc, #276]	; (80014dc <chSchGoSleepTimeoutS+0x11c>)
 80013c6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80013ca:	b088      	sub	sp, #32
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d15e      	bne.n	800148e <chSchGoSleepTimeoutS+0xce>
 80013d0:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	dd5a      	ble.n	800148e <chSchGoSleepTimeoutS+0xce>
  thread_t *tp = __instance_get_currthread(currcore);

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 80013d8:	1c4c      	adds	r4, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 80013da:	68ef      	ldr	r7, [r5, #12]
  if (TIME_INFINITE != timeout) {
 80013dc:	460a      	mov	r2, r1
 80013de:	d04d      	beq.n	800147c <chSchGoSleepTimeoutS+0xbc>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80013e0:	2900      	cmp	r1, #0
 80013e2:	d051      	beq.n	8001488 <chSchGoSleepTimeoutS+0xc8>

  /* Timer initialization.*/
  vtp->par     = par;
 80013e4:	e9cd 7306 	strd	r7, r3, [sp, #24]
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <chSchGoSleepTimeoutS+0x120>)
  return (bool)(dlhp == dlhp->next);
 80013ea:	46a8      	mov	r8, r5
 80013ec:	4606      	mov	r6, r0
 80013ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 80013f0:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <chSchGoSleepTimeoutS+0x124>)
 80013f2:	9305      	str	r3, [sp, #20]
 80013f4:	f858 3f10 	ldr.w	r3, [r8, #16]!
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80013f8:	4543      	cmp	r3, r8
 80013fa:	b280      	uxth	r0, r0
 80013fc:	d064      	beq.n	80014c8 <chSchGoSleepTimeoutS+0x108>
  return (sysinterval_t)((systime_t)(end - start));
 80013fe:	8bac      	ldrh	r4, [r5, #28]
    if (delta < vtlp->dlist.next->delta) {
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	1b04      	subs	r4, r0, r4
 8001404:	b2a4      	uxth	r4, r4
    if (delta < nowdelta) {
 8001406:	190c      	adds	r4, r1, r4
 8001408:	bf28      	it	cs
 800140a:	460c      	movcs	r4, r1
    if (delta < vtlp->dlist.next->delta) {
 800140c:	42a2      	cmp	r2, r4
 800140e:	d908      	bls.n	8001422 <chSchGoSleepTimeoutS+0x62>
 8001410:	9301      	str	r3, [sp, #4]
      vt_set_alarm(now, delay);
 8001412:	f7ff fc85 	bl	8000d20 <vt_set_alarm>
 8001416:	9b01      	ldr	r3, [sp, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
 800141a:	e002      	b.n	8001422 <chSchGoSleepTimeoutS+0x62>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 800141c:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 800141e:	1aa4      	subs	r4, r4, r2
  while (likely(dlp->delta < delta)) {
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	42a2      	cmp	r2, r4
 8001424:	d3fa      	bcc.n	800141c <chSchGoSleepTimeoutS+0x5c>
  dlp->delta      = delta;
 8001426:	9404      	str	r4, [sp, #16]

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8001428:	689a      	ldr	r2, [r3, #8]
  dlp->prev       = dlp->next->prev;
 800142a:	6859      	ldr	r1, [r3, #4]
  dlp->next       = dlhp;
 800142c:	9302      	str	r3, [sp, #8]
  dlp->delta -= delta;
 800142e:	1b12      	subs	r2, r2, r4
  dlp->prev->next = dlp;
 8001430:	ac02      	add	r4, sp, #8
  dlp->prev       = dlp->next->prev;
 8001432:	9103      	str	r1, [sp, #12]
  dlp->prev->next = dlp;
 8001434:	600c      	str	r4, [r1, #0]
  dlhp->prev      = dlp;
 8001436:	e9c3 4201 	strd	r4, r2, [r3, #4]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	61ab      	str	r3, [r5, #24]
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
 8001440:	4630      	mov	r0, r6
 8001442:	f7ff ff8d 	bl	8001360 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001446:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800144a:	2b00      	cmp	r3, #0
 800144c:	db22      	blt.n	8001494 <chSchGoSleepTimeoutS+0xd4>
 800144e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001452:	2b00      	cmp	r3, #0
 8001454:	dd1e      	ble.n	8001494 <chSchGoSleepTimeoutS+0xd4>
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8001456:	9b02      	ldr	r3, [sp, #8]
    if (chVTIsArmedI(&vt)) {
 8001458:	b163      	cbz	r3, 8001474 <chSchGoSleepTimeoutS+0xb4>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 800145a:	692a      	ldr	r2, [r5, #16]
 800145c:	42a2      	cmp	r2, r4
 800145e:	d01c      	beq.n	800149a <chSchGoSleepTimeoutS+0xda>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 8001460:	e9dd 1003 	ldrd	r1, r0, [sp, #12]

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	4402      	add	r2, r0
 800146a:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	61ab      	str	r3, [r5, #24]
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 8001474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001476:	b008      	add	sp, #32
 8001478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchGoSleepS(newstate);
 800147c:	f7ff ff70 	bl	8001360 <chSchGoSleepS>
}
 8001480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001482:	b008      	add	sp, #32
 8001484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001488:	4817      	ldr	r0, [pc, #92]	; (80014e8 <chSchGoSleepTimeoutS+0x128>)
 800148a:	f7ff fba1 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#11");
 800148e:	4817      	ldr	r0, [pc, #92]	; (80014ec <chSchGoSleepTimeoutS+0x12c>)
 8001490:	f7ff fb9e 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#10");
 8001494:	4816      	ldr	r0, [pc, #88]	; (80014f0 <chSchGoSleepTimeoutS+0x130>)
 8001496:	f7ff fb9b 	bl	8000bd0 <chSysHalt>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 800149a:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 800149c:	4543      	cmp	r3, r8
  dlhp->next       = dlp->next;
 800149e:	612b      	str	r3, [r5, #16]
  vtp->dlist.next = NULL;
 80014a0:	9202      	str	r2, [sp, #8]
  dlhp->next->prev = dlhp;
 80014a2:	f8c3 8004 	str.w	r8, [r3, #4]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80014a6:	d015      	beq.n	80014d4 <chSchGoSleepTimeoutS+0x114>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	9804      	ldr	r0, [sp, #16]
 80014ac:	8baa      	ldrh	r2, [r5, #28]
 80014ae:	4401      	add	r1, r0
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <chSchGoSleepTimeoutS+0x120>)
 80014b2:	6099      	str	r1, [r3, #8]
 80014b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80014b6:	b280      	uxth	r0, r0
 80014b8:	1a83      	subs	r3, r0, r2
 80014ba:	b29b      	uxth	r3, r3
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 80014bc:	4299      	cmp	r1, r3
 80014be:	d9d9      	bls.n	8001474 <chSchGoSleepTimeoutS+0xb4>

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 80014c0:	1ac9      	subs	r1, r1, r3
 80014c2:	f7ff fc2d 	bl	8000d20 <vt_set_alarm>
 80014c6:	e7d5      	b.n	8001474 <chSchGoSleepTimeoutS+0xb4>
      vt_insert_first(vtlp, vtp, now, delay);
 80014c8:	ac02      	add	r4, sp, #8
 80014ca:	4601      	mov	r1, r0
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fd7f 	bl	8000fd0 <vt_insert_first.constprop.0>
      return;
 80014d2:	e7b5      	b.n	8001440 <chSchGoSleepTimeoutS+0x80>
  STM32_ST_TIM->DIER = 0U;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <chSchGoSleepTimeoutS+0x120>)
 80014d6:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 80014d8:	e7cc      	b.n	8001474 <chSchGoSleepTimeoutS+0xb4>
 80014da:	bf00      	nop
 80014dc:	200009f0 	.word	0x200009f0
 80014e0:	40014800 	.word	0x40014800
 80014e4:	08000d91 	.word	0x08000d91
 80014e8:	08004db0 	.word	0x08004db0
 80014ec:	08004c18 	.word	0x08004c18
 80014f0:	08004c00 	.word	0x08004c00
	...

08001500 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001504:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 8001506:	f8d0 b01c 	ldr.w	fp, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 800150a:	9302      	str	r3, [sp, #8]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800150c:	2a00      	cmp	r2, #0
 800150e:	f000 8081 	beq.w	8001614 <oqWriteTimeout+0x114>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001512:	4691      	mov	r9, r2
 8001514:	4688      	mov	r8, r1
 8001516:	2230      	movs	r2, #48	; 0x30
 8001518:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800151c:	4e3f      	ldr	r6, [pc, #252]	; (800161c <oqWriteTimeout+0x11c>)
 800151e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8001522:	430b      	orrs	r3, r1
 8001524:	d170      	bne.n	8001608 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001526:	2301      	movs	r3, #1
 8001528:	4604      	mov	r4, r0
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001530:	46ca      	mov	sl, r9
  if (n > oqGetEmptyI(oqp)) {
 8001532:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001534:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8001538:	4553      	cmp	r3, sl
    n = oqGetEmptyI(oqp);
 800153a:	bf34      	ite	cc
 800153c:	68a5      	ldrcc	r5, [r4, #8]
 800153e:	4655      	movcs	r5, sl
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001540:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8001542:	42af      	cmp	r7, r5
 8001544:	d859      	bhi.n	80015fa <oqWriteTimeout+0xfa>
  else if (n > s1) {
 8001546:	d243      	bcs.n	80015d0 <oqWriteTimeout+0xd0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001548:	463a      	mov	r2, r7
 800154a:	4641      	mov	r1, r8
 800154c:	f7fe fefa 	bl	8000344 <memcpy>
    s2 = n - s1;
 8001550:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001552:	68e0      	ldr	r0, [r4, #12]
 8001554:	9203      	str	r2, [sp, #12]
 8001556:	eb08 0107 	add.w	r1, r8, r7
 800155a:	f7fe fef3 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800155e:	68e3      	ldr	r3, [r4, #12]
 8001560:	9a03      	ldr	r2, [sp, #12]
 8001562:	441a      	add	r2, r3
  oqp->q_counter -= n;
 8001564:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr += n;
 8001566:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8001568:	1b5b      	subs	r3, r3, r5
 800156a:	60a3      	str	r3, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 800156c:	b3b5      	cbz	r5, 80015dc <oqWriteTimeout+0xdc>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 800156e:	f1bb 0f00 	cmp.w	fp, #0
 8001572:	d001      	beq.n	8001578 <oqWriteTimeout+0x78>
        nfy(oqp);
 8001574:	4620      	mov	r0, r4
 8001576:	47d8      	blx	fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001578:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 800157c:	2b00      	cmp	r3, #0
 800157e:	d146      	bne.n	800160e <oqWriteTimeout+0x10e>
 8001580:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8001584:	2a00      	cmp	r2, #0
 8001586:	dd42      	ble.n	800160e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001588:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800158c:	f383 8811 	msr	BASEPRI, r3
 8001590:	9b01      	ldr	r3, [sp, #4]
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8001592:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8001596:	44a8      	add	r8, r5
 8001598:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800159c:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 80015a0:	4313      	orrs	r3, r2
 80015a2:	d131      	bne.n	8001608 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 80015aa:	f1ba 0f00 	cmp.w	sl, #0
 80015ae:	d1c0      	bne.n	8001532 <oqWriteTimeout+0x32>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80015b0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80015b4:	bb5a      	cbnz	r2, 800160e <oqWriteTimeout+0x10e>
 80015b6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80015ba:	2900      	cmp	r1, #0
 80015bc:	dd27      	ble.n	800160e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 80015be:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80015c2:	f382 8811 	msr	BASEPRI, r2
    }
  }

  osalSysUnlock();
  return max - n;
}
 80015c6:	eba9 000a 	sub.w	r0, r9, sl
 80015ca:	b005      	add	sp, #20
 80015cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80015d0:	462a      	mov	r2, r5
 80015d2:	4641      	mov	r1, r8
 80015d4:	f7fe feb6 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80015d8:	68e2      	ldr	r2, [r4, #12]
 80015da:	e7c3      	b.n	8001564 <oqWriteTimeout+0x64>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80015dc:	9902      	ldr	r1, [sp, #8]
  return __sch_get_currthread();
 80015de:	68f3      	ldr	r3, [r6, #12]
 80015e0:	2900      	cmp	r1, #0
 80015e2:	d0e5      	beq.n	80015b0 <oqWriteTimeout+0xb0>
  p->prev       = qp->prev;
 80015e4:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 80015e6:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 80015e8:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80015ea:	2004      	movs	r0, #4
  p->prev->next = p;
 80015ec:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80015ee:	6063      	str	r3, [r4, #4]
 80015f0:	f7ff fee6 	bl	80013c0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d09c      	beq.n	8001532 <oqWriteTimeout+0x32>
 80015f8:	e7da      	b.n	80015b0 <oqWriteTimeout+0xb0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80015fa:	462a      	mov	r2, r5
 80015fc:	4641      	mov	r1, r8
 80015fe:	f7fe fea1 	bl	8000344 <memcpy>
    oqp->q_wrptr += n;
 8001602:	6962      	ldr	r2, [r4, #20]
 8001604:	442a      	add	r2, r5
 8001606:	e7ad      	b.n	8001564 <oqWriteTimeout+0x64>
    chSysHalt("SV#4");
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <oqWriteTimeout+0x120>)
 800160a:	f7ff fae1 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <oqWriteTimeout+0x124>)
 8001610:	f7ff fade 	bl	8000bd0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <oqWriteTimeout+0x128>)
 8001616:	f7ff fadb 	bl	8000bd0 <chSysHalt>
 800161a:	bf00      	nop
 800161c:	200009f0 	.word	0x200009f0
 8001620:	08004c08 	.word	0x08004c08
 8001624:	08004c30 	.word	0x08004c30
 8001628:	08004d4c 	.word	0x08004d4c
 800162c:	00000000 	.word	0x00000000

08001630 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	3030      	adds	r0, #48	; 0x30
 8001636:	f7ff bf63 	b.w	8001500 <oqWriteTimeout>
 800163a:	bf00      	nop
 800163c:	0000      	movs	r0, r0
	...

08001640 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001640:	3030      	adds	r0, #48	; 0x30
 8001642:	f7ff bf5d 	b.w	8001500 <oqWriteTimeout>
 8001646:	bf00      	nop
	...

08001650 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	2330      	movs	r3, #48	; 0x30
 8001654:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001658:	4e26      	ldr	r6, [pc, #152]	; (80016f4 <iqGetTimeout+0xa4>)
 800165a:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 800165e:	4313      	orrs	r3, r2
 8001660:	d144      	bne.n	80016ec <iqGetTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001662:	2301      	movs	r3, #1
 8001664:	4604      	mov	r4, r0
 8001666:	460d      	mov	r5, r1
 8001668:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
}
 800166c:	e00a      	b.n	8001684 <iqGetTimeout+0x34>
  p->prev       = qp->prev;
 800166e:	6862      	ldr	r2, [r4, #4]
 8001670:	4629      	mov	r1, r5
 8001672:	e9c3 4200 	strd	r4, r2, [r3]
 8001676:	2004      	movs	r0, #4
  p->prev->next = p;
 8001678:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800167a:	6063      	str	r3, [r4, #4]
 800167c:	f7ff fea0 	bl	80013c0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8001680:	2800      	cmp	r0, #0
 8001682:	db06      	blt.n	8001692 <iqGetTimeout+0x42>
  while (iqIsEmptyI(iqp)) {
 8001684:	68a3      	ldr	r3, [r4, #8]
 8001686:	b983      	cbnz	r3, 80016aa <iqGetTimeout+0x5a>
 8001688:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800168a:	2d00      	cmp	r5, #0
 800168c:	d1ef      	bne.n	800166e <iqGetTimeout+0x1e>
    return MSG_TIMEOUT;
 800168e:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001692:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8001696:	bb33      	cbnz	r3, 80016e6 <iqGetTimeout+0x96>
 8001698:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 800169c:	2a00      	cmp	r2, #0
 800169e:	dd22      	ble.n	80016e6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80016a0:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80016a4:	f383 8811 	msr	BASEPRI, r3
}
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 80016aa:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80016ac:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 80016ae:	3b01      	subs	r3, #1
 80016b0:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80016b2:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 80016b4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80016b6:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 80016b8:	bf28      	it	cs
 80016ba:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 80016bc:	61a2      	str	r2, [r4, #24]
 80016be:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80016c0:	bf28      	it	cs
 80016c2:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80016c4:	69e3      	ldr	r3, [r4, #28]
 80016c6:	b10b      	cbz	r3, 80016cc <iqGetTimeout+0x7c>
    iqp->q_notify(iqp);
 80016c8:	4620      	mov	r0, r4
 80016ca:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80016cc:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80016d0:	b94b      	cbnz	r3, 80016e6 <iqGetTimeout+0x96>
 80016d2:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 80016d6:	2a00      	cmp	r2, #0
 80016d8:	dd05      	ble.n	80016e6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80016da:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80016de:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80016e2:	4628      	mov	r0, r5
}
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <iqGetTimeout+0xa8>)
 80016e8:	f7ff fa72 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#4");
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <iqGetTimeout+0xac>)
 80016ee:	f7ff fa6f 	bl	8000bd0 <chSysHalt>
 80016f2:	bf00      	nop
 80016f4:	200009f0 	.word	0x200009f0
 80016f8:	08004c30 	.word	0x08004c30
 80016fc:	08004c08 	.word	0x08004c08

08001700 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	300c      	adds	r0, #12
 8001706:	f7ff bfa3 	b.w	8001650 <iqGetTimeout>
 800170a:	bf00      	nop
 800170c:	0000      	movs	r0, r0
	...

08001710 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001710:	300c      	adds	r0, #12
 8001712:	f7ff bf9d 	b.w	8001650 <iqGetTimeout>
 8001716:	bf00      	nop
	...

08001720 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8001720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qnotify_t nfy = iqp->q_notify;
 8001724:	f8d0 a01c 	ldr.w	sl, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8001728:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 800172a:	2a00      	cmp	r2, #0
 800172c:	f000 8089 	beq.w	8001842 <iqReadTimeout+0x122>
 8001730:	4690      	mov	r8, r2
 8001732:	460f      	mov	r7, r1
 8001734:	4699      	mov	r9, r3
 8001736:	2230      	movs	r2, #48	; 0x30
 8001738:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800173c:	4e42      	ldr	r6, [pc, #264]	; (8001848 <iqReadTimeout+0x128>)
 800173e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8001742:	430b      	orrs	r3, r1
 8001744:	d177      	bne.n	8001836 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001746:	2301      	movs	r3, #1
 8001748:	46c3      	mov	fp, r8
 800174a:	f8cd 800c 	str.w	r8, [sp, #12]
 800174e:	4604      	mov	r4, r0
 8001750:	9201      	str	r2, [sp, #4]
 8001752:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001756:	46b8      	mov	r8, r7
  if (n > iqGetFullI(iqp)) {
 8001758:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800175a:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 800175c:	455a      	cmp	r2, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800175e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8001760:	bf34      	ite	cc
 8001762:	68a5      	ldrcc	r5, [r4, #8]
 8001764:	465d      	movcs	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001766:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8001768:	42aa      	cmp	r2, r5
 800176a:	d85d      	bhi.n	8001828 <iqReadTimeout+0x108>
  else if (n > s1) {
 800176c:	d246      	bcs.n	80017fc <iqReadTimeout+0xdc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800176e:	4640      	mov	r0, r8
    s2 = n - s1;
 8001770:	1aaf      	subs	r7, r5, r2
 8001772:	9202      	str	r2, [sp, #8]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001774:	f7fe fde6 	bl	8000344 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001778:	9a02      	ldr	r2, [sp, #8]
 800177a:	68e1      	ldr	r1, [r4, #12]
 800177c:	eb08 0002 	add.w	r0, r8, r2
 8001780:	463a      	mov	r2, r7
 8001782:	f7fe fddf 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8001786:	68e2      	ldr	r2, [r4, #12]
 8001788:	443a      	add	r2, r7
    iqp->q_rdptr += n;
 800178a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800178c:	68a2      	ldr	r2, [r4, #8]
 800178e:	1b52      	subs	r2, r2, r5
 8001790:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8001792:	2d00      	cmp	r5, #0
 8001794:	d038      	beq.n	8001808 <iqReadTimeout+0xe8>
      if (nfy != NULL) {
 8001796:	f1ba 0f00 	cmp.w	sl, #0
 800179a:	d001      	beq.n	80017a0 <iqReadTimeout+0x80>
        nfy(iqp);
 800179c:	4620      	mov	r0, r4
 800179e:	47d0      	blx	sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80017a0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80017a4:	2a00      	cmp	r2, #0
 80017a6:	d149      	bne.n	800183c <iqReadTimeout+0x11c>
 80017a8:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80017ac:	2900      	cmp	r1, #0
 80017ae:	dd45      	ble.n	800183c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80017b0:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80017b4:	f382 8811 	msr	BASEPRI, r2
 80017b8:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 80017ba:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80017be:	44a8      	add	r8, r5
 80017c0:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80017c4:	e9d6 2122 	ldrd	r2, r1, [r6, #136]	; 0x88
 80017c8:	430a      	orrs	r2, r1
 80017ca:	d134      	bne.n	8001836 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 80017d2:	f1bb 0f00 	cmp.w	fp, #0
 80017d6:	d1bf      	bne.n	8001758 <iqReadTimeout+0x38>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80017d8:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80017dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80017e0:	bb62      	cbnz	r2, 800183c <iqReadTimeout+0x11c>
 80017e2:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80017e6:	2900      	cmp	r1, #0
 80017e8:	dd28      	ble.n	800183c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80017ea:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80017ee:	f382 8811 	msr	BASEPRI, r2
}
 80017f2:	eba8 000b 	sub.w	r0, r8, fp
 80017f6:	b005      	add	sp, #20
 80017f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80017fc:	462a      	mov	r2, r5
 80017fe:	4640      	mov	r0, r8
 8001800:	f7fe fda0 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8001804:	68e2      	ldr	r2, [r4, #12]
 8001806:	e7c0      	b.n	800178a <iqReadTimeout+0x6a>
 8001808:	68f2      	ldr	r2, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800180a:	f1b9 0f00 	cmp.w	r9, #0
 800180e:	d0e3      	beq.n	80017d8 <iqReadTimeout+0xb8>
  p->prev       = qp->prev;
 8001810:	6861      	ldr	r1, [r4, #4]
 8001812:	6051      	str	r1, [r2, #4]
  p->next       = qp;
 8001814:	6014      	str	r4, [r2, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001816:	2004      	movs	r0, #4
  p->prev->next = p;
 8001818:	600a      	str	r2, [r1, #0]
  qp->prev      = p;
 800181a:	6062      	str	r2, [r4, #4]
 800181c:	4649      	mov	r1, r9
 800181e:	f7ff fdcf 	bl	80013c0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8001822:	2800      	cmp	r0, #0
 8001824:	d098      	beq.n	8001758 <iqReadTimeout+0x38>
 8001826:	e7d7      	b.n	80017d8 <iqReadTimeout+0xb8>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001828:	462a      	mov	r2, r5
 800182a:	4640      	mov	r0, r8
 800182c:	f7fe fd8a 	bl	8000344 <memcpy>
    iqp->q_rdptr += n;
 8001830:	69a2      	ldr	r2, [r4, #24]
 8001832:	442a      	add	r2, r5
 8001834:	e7a9      	b.n	800178a <iqReadTimeout+0x6a>
    chSysHalt("SV#4");
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <iqReadTimeout+0x12c>)
 8001838:	f7ff f9ca 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <iqReadTimeout+0x130>)
 800183e:	f7ff f9c7 	bl	8000bd0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8001842:	4804      	ldr	r0, [pc, #16]	; (8001854 <iqReadTimeout+0x134>)
 8001844:	f7ff f9c4 	bl	8000bd0 <chSysHalt>
 8001848:	200009f0 	.word	0x200009f0
 800184c:	08004c08 	.word	0x08004c08
 8001850:	08004c30 	.word	0x08004c30
 8001854:	08004d94 	.word	0x08004d94
	...

08001860 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	300c      	adds	r0, #12
 8001866:	f7ff bf5b 	b.w	8001720 <iqReadTimeout>
 800186a:	bf00      	nop
 800186c:	0000      	movs	r0, r0
	...

08001870 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001870:	300c      	adds	r0, #12
 8001872:	f7ff bf55 	b.w	8001720 <iqReadTimeout>
 8001876:	bf00      	nop
	...

08001880 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	4615      	mov	r5, r2
 8001884:	2330      	movs	r3, #48	; 0x30
 8001886:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800188a:	4f26      	ldr	r7, [pc, #152]	; (8001924 <oqPutTimeout+0xa4>)
 800188c:	e9d7 3222 	ldrd	r3, r2, [r7, #136]	; 0x88
 8001890:	4313      	orrs	r3, r2
 8001892:	d143      	bne.n	800191c <oqPutTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001894:	2301      	movs	r3, #1
 8001896:	4604      	mov	r4, r0
 8001898:	460e      	mov	r6, r1
 800189a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
}
 800189e:	e00a      	b.n	80018b6 <oqPutTimeout+0x36>
  p->prev       = qp->prev;
 80018a0:	6860      	ldr	r0, [r4, #4]
 80018a2:	4629      	mov	r1, r5
 80018a4:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 80018a8:	6003      	str	r3, [r0, #0]
 80018aa:	2004      	movs	r0, #4
  qp->prev      = p;
 80018ac:	6063      	str	r3, [r4, #4]
 80018ae:	f7ff fd87 	bl	80013c0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80018b2:	2800      	cmp	r0, #0
 80018b4:	db06      	blt.n	80018c4 <oqPutTimeout+0x44>
  while (oqIsFullI(oqp)) {
 80018b6:	68a3      	ldr	r3, [r4, #8]
 80018b8:	b983      	cbnz	r3, 80018dc <oqPutTimeout+0x5c>
 80018ba:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80018bc:	2d00      	cmp	r5, #0
 80018be:	d1ef      	bne.n	80018a0 <oqPutTimeout+0x20>
    return MSG_TIMEOUT;
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80018c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c8:	bb2b      	cbnz	r3, 8001916 <oqPutTimeout+0x96>
 80018ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	dd21      	ble.n	8001916 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80018d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80018d6:	f383 8811 	msr	BASEPRI, r3
}
 80018da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  oqp->q_counter--;
 80018dc:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80018de:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80018e4:	1c53      	adds	r3, r2, #1
 80018e6:	6163      	str	r3, [r4, #20]
 80018e8:	7016      	strb	r6, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80018ea:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80018ee:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80018f0:	bf24      	itt	cs
 80018f2:	68e3      	ldrcs	r3, [r4, #12]
 80018f4:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 80018f6:	69e3      	ldr	r3, [r4, #28]
 80018f8:	b10b      	cbz	r3, 80018fe <oqPutTimeout+0x7e>
    oqp->q_notify(oqp);
 80018fa:	4620      	mov	r0, r4
 80018fc:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80018fe:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001902:	b940      	cbnz	r0, 8001916 <oqPutTimeout+0x96>
 8001904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd04      	ble.n	8001916 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 800190c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001910:	f380 8811 	msr	BASEPRI, r0
}
 8001914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <oqPutTimeout+0xa8>)
 8001918:	f7ff f95a 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#4");
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <oqPutTimeout+0xac>)
 800191e:	f7ff f957 	bl	8000bd0 <chSysHalt>
 8001922:	bf00      	nop
 8001924:	200009f0 	.word	0x200009f0
 8001928:	08004c30 	.word	0x08004c30
 800192c:	08004c08 	.word	0x08004c08

08001930 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	3030      	adds	r0, #48	; 0x30
 8001936:	f7ff bfa3 	b.w	8001880 <oqPutTimeout>
 800193a:	bf00      	nop
 800193c:	0000      	movs	r0, r0
	...

08001940 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001940:	3030      	adds	r0, #48	; 0x30
 8001942:	f7ff bf9d 	b.w	8001880 <oqPutTimeout>
 8001946:	bf00      	nop
	...

08001950 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001950:	b510      	push	{r4, lr}
 8001952:	2330      	movs	r3, #48	; 0x30
 8001954:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001958:	4c10      	ldr	r4, [pc, #64]	; (800199c <chThdSleep+0x4c>)
 800195a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800195e:	4313      	orrs	r3, r2
 8001960:	d113      	bne.n	800198a <chThdSleep+0x3a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001962:	2301      	movs	r3, #1
 8001964:	4601      	mov	r1, r0
 8001966:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 800196a:	b1a0      	cbz	r0, 8001996 <chThdSleep+0x46>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800196c:	2008      	movs	r0, #8
 800196e:	f7ff fd27 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001972:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001976:	b95b      	cbnz	r3, 8001990 <chThdSleep+0x40>
 8001978:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800197c:	2a00      	cmp	r2, #0
 800197e:	dd07      	ble.n	8001990 <chThdSleep+0x40>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001980:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001984:	f383 8811 	msr	BASEPRI, r3
}
 8001988:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <chThdSleep+0x50>)
 800198c:	f7ff f920 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <chThdSleep+0x54>)
 8001992:	f7ff f91d 	bl	8000bd0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <chThdSleep+0x58>)
 8001998:	f7ff f91a 	bl	8000bd0 <chSysHalt>
 800199c:	200009f0 	.word	0x200009f0
 80019a0:	08004c08 	.word	0x08004c08
 80019a4:	08004c30 	.word	0x08004c30
 80019a8:	08004d68 	.word	0x08004d68
 80019ac:	00000000 	.word	0x00000000

080019b0 <adf_write_reg>:
 *
 * @api
 */
//void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {

void adf_write_reg(uint32_t data){
 80019b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spiSend(&SPID2, 1, &temp);
  }
  spiUnselect(&SPID2);            // Slave Select deassertion.
  */

  palClearPad(GPIOB, GPIOB_ADF_DATA);
 80019b4:	4c4c      	ldr	r4, [pc, #304]	; (8001ae8 <adf_write_reg+0x138>)
 80019b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 80019ba:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  //myprintf("Bitbang adf_write_reg: 0x%08X\n", data);
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  palClearPad(GPIOB, GPIOB_ADF_DATA);
 80019c2:	8362      	strh	r2, [r4, #26]
void adf_write_reg(uint32_t data){
 80019c4:	4681      	mov	r9, r0
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 80019c6:	8365      	strh	r5, [r4, #26]
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 80019c8:	2718      	movs	r7, #24
 80019ca:	8363      	strh	r3, [r4, #26]
   for(int i=3; i>=0; --i){
     uint8_t temp = data >> (i * 8);
 80019cc:	fa29 f807 	lsr.w	r8, r9, r7
     //myprintf("adf_write_ byte: 0x%X\n",temp);

     //MSB first
     if(temp&0x80)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80019d0:	f018 0f80 	tst.w	r8, #128	; 0x80
 80019d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d8:	bf14      	ite	ne
 80019da:	8323      	strhne	r3, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 80019dc:	8363      	strheq	r3, [r4, #26]
     chThdSleepMilliseconds(1);
 80019de:	200a      	movs	r0, #10
 80019e0:	f7ff ffb6 	bl	8001950 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
     chThdSleepMilliseconds(1);
 80019e4:	200a      	movs	r0, #10
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 80019e6:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 80019e8:	f7ff ffb2 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80019ec:	f018 0f40 	tst.w	r8, #64	; 0x40
 80019f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 80019f4:	8365      	strh	r5, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 80019f6:	f04f 000a 	mov.w	r0, #10
     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80019fa:	bf14      	ite	ne
 80019fc:	8323      	strhne	r3, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 80019fe:	8363      	strheq	r3, [r4, #26]
     chThdSleepMilliseconds(1);
 8001a00:	f7ff ffa6 	bl	8001950 <chThdSleep>
     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a04:	fa5f f688 	uxtb.w	r6, r8
     palSetPad(GPIOB, GPIOB_ADF_CLK);
     chThdSleepMilliseconds(1);
 8001a08:	200a      	movs	r0, #10
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001a0a:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001a0c:	f7ff ffa0 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a10:	06b1      	lsls	r1, r6, #26
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001a12:	8365      	strh	r5, [r4, #26]
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a14:	f44f 4800 	mov.w	r8, #32768	; 0x8000
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001a18:	f04f 000a 	mov.w	r0, #10
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a1c:	d557      	bpl.n	8001ace <adf_write_reg+0x11e>
 8001a1e:	f8a4 8018 	strh.w	r8, [r4, #24]
     chThdSleepMilliseconds(1);
 8001a22:	f7ff ff95 	bl	8001950 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001a26:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001a28:	200a      	movs	r0, #10
 8001a2a:	f7ff ff91 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001a2e:	8365      	strh	r5, [r4, #26]

     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a30:	f8a4 8018 	strh.w	r8, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001a34:	200a      	movs	r0, #10
 8001a36:	f7ff ff8b 	bl	8001950 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
     chThdSleepMilliseconds(1);
 8001a3a:	200a      	movs	r0, #10
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001a3c:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001a3e:	f7ff ff87 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a46:	0732      	lsls	r2, r6, #28
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001a48:	8365      	strh	r5, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001a4a:	f04f 000a 	mov.w	r0, #10
     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a4e:	bf4c      	ite	mi
 8001a50:	8323      	strhmi	r3, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001a52:	8363      	strhpl	r3, [r4, #26]
     chThdSleepMilliseconds(1);
 8001a54:	f7ff ff7c 	bl	8001950 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
     chThdSleepMilliseconds(1);
 8001a58:	200a      	movs	r0, #10
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001a5a:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001a5c:	f7ff ff78 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a60:	0770      	lsls	r0, r6, #29
 8001a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001a66:	8365      	strh	r5, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001a68:	f04f 000a 	mov.w	r0, #10
     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a6c:	bf4c      	ite	mi
 8001a6e:	8323      	strhmi	r3, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001a70:	8363      	strhpl	r3, [r4, #26]
     chThdSleepMilliseconds(1);
 8001a72:	f7ff ff6d 	bl	8001950 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
     chThdSleepMilliseconds(1);
 8001a76:	200a      	movs	r0, #10
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001a78:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001a7a:	f7ff ff69 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a82:	07b1      	lsls	r1, r6, #30
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001a84:	8365      	strh	r5, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001a86:	f04f 000a 	mov.w	r0, #10
     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a8a:	bf4c      	ite	mi
 8001a8c:	8323      	strhmi	r3, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001a8e:	8363      	strhpl	r3, [r4, #26]
     chThdSleepMilliseconds(1);
 8001a90:	f7ff ff5e 	bl	8001950 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
     chThdSleepMilliseconds(1);
 8001a94:	200a      	movs	r0, #10
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001a96:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001a98:	f7ff ff5a 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001a9c:	07f2      	lsls	r2, r6, #31
 8001a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001aa2:	8365      	strh	r5, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8001aa4:	f04f 000a 	mov.w	r0, #10
     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8001aa8:	bf4c      	ite	mi
 8001aaa:	8323      	strhmi	r3, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001aac:	8363      	strhpl	r3, [r4, #26]
     chThdSleepMilliseconds(1);
 8001aae:	f7ff ff4f 	bl	8001950 <chThdSleep>
   for(int i=3; i>=0; --i){
 8001ab2:	3f08      	subs	r7, #8
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001ab4:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f7ff ff4a 	bl	8001950 <chThdSleep>
   for(int i=3; i>=0; --i){
 8001abc:	f117 0f08 	cmn.w	r7, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001ac0:	8365      	strh	r5, [r4, #26]
   for(int i=3; i>=0; --i){
 8001ac2:	d183      	bne.n	80019cc <adf_write_reg+0x1c>
   }
   palSetPad(GPIOB, GPIOB_ADF_LE);             // Slave Select deassertion.
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	8323      	strh	r3, [r4, #24]
}
 8001aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001ace:	f8a4 801a 	strh.w	r8, [r4, #26]
     chThdSleepMilliseconds(1);
 8001ad2:	f7ff ff3d 	bl	8001950 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8001ad6:	8325      	strh	r5, [r4, #24]
     chThdSleepMilliseconds(1);
 8001ad8:	200a      	movs	r0, #10
 8001ada:	f7ff ff39 	bl	8001950 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8001ade:	8365      	strh	r5, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8001ae0:	f8a4 801a 	strh.w	r8, [r4, #26]
 8001ae4:	e7a6      	b.n	8001a34 <adf_write_reg+0x84>
 8001ae6:	bf00      	nop
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	00000000 	.word	0x00000000

08001af0 <__port_irq_epilogue.part.0>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8001af0:	b410      	push	{r4}
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8001af2:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001af6:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8001afa:	3b68      	subs	r3, #104	; 0x68

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8001afc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 8001b00:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <__port_irq_epilogue.part.0+0x38>)
    ectxp->xpsr = 0x01000000U;
 8001b02:	61d9      	str	r1, [r3, #28]
    ectxp->fpscr = FPU->FPDSCR;
 8001b04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b06:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001b08:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__port_irq_epilogue.part.0+0x3c>)

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <__port_irq_epilogue.part.0+0x40>)
 8001b10:	6808      	ldr	r0, [r1, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001b12:	68c9      	ldr	r1, [r1, #12]
    if (chSchIsPreemptionRequired()) {
 8001b14:	6884      	ldr	r4, [r0, #8]
 8001b16:	6888      	ldr	r0, [r1, #8]
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001b18:	4906      	ldr	r1, [pc, #24]	; (8001b34 <__port_irq_epilogue.part.0+0x44>)
 8001b1a:	4284      	cmp	r4, r0
 8001b1c:	bf88      	it	hi
 8001b1e:	460a      	movhi	r2, r1
 8001b20:	619a      	str	r2, [r3, #24]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ef00 	.word	0xe000ef00
 8001b2c:	200009f0 	.word	0x200009f0
 8001b30:	0800033e 	.word	0x0800033e
 8001b34:	08000333 	.word	0x08000333
	...

08001b40 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
	...

08001b50 <__late_init>:
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
	...

08001b60 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001b60:	e7fe      	b.n	8001b60 <__default_exit>
 8001b62:	bf00      	nop
	...

08001b70 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	4d15      	ldr	r5, [pc, #84]	; (8001bc8 <__init_ram_areas+0x58>)
 8001b74:	4f15      	ldr	r7, [pc, #84]	; (8001bcc <__init_ram_areas+0x5c>)
 8001b76:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <__init_ram_areas+0x60>)
 8001b78:	4816      	ldr	r0, [pc, #88]	; (8001bd4 <__init_ram_areas+0x64>)
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <__init_ram_areas+0x68>)
 8001b7c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001b80:	4281      	cmp	r1, r0
 8001b82:	d90d      	bls.n	8001ba0 <__init_ram_areas+0x30>
 8001b84:	3a04      	subs	r2, #4
 8001b86:	4603      	mov	r3, r0
      *p = *tp;
 8001b88:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8001b8c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8001b90:	4299      	cmp	r1, r3
 8001b92:	d8f9      	bhi.n	8001b88 <__init_ram_areas+0x18>
      p++;
 8001b94:	1e4b      	subs	r3, r1, #1
 8001b96:	1a1b      	subs	r3, r3, r0
 8001b98:	f023 0303 	bic.w	r3, r3, #3
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001ba0:	4287      	cmp	r7, r0
 8001ba2:	d907      	bls.n	8001bb4 <__init_ram_areas+0x44>
      *p = 0;
 8001ba4:	1e7a      	subs	r2, r7, #1
 8001ba6:	1a12      	subs	r2, r2, r0
 8001ba8:	f022 0203 	bic.w	r2, r2, #3
 8001bac:	3204      	adds	r2, #4
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f002 fe4c 	bl	800484c <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001bb4:	42a5      	cmp	r5, r4
 8001bb6:	d005      	beq.n	8001bc4 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8001bb8:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 8001bbc:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8001bc0:	3510      	adds	r5, #16
 8001bc2:	e7dd      	b.n	8001b80 <__init_ram_areas+0x10>
#endif
}
 8001bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08004f34 	.word	0x08004f34
 8001bcc:	20002020 	.word	0x20002020
 8001bd0:	20002020 	.word	0x20002020
 8001bd4:	20002020 	.word	0x20002020
 8001bd8:	08004fe8 	.word	0x08004fe8
 8001bdc:	00000000 	.word	0x00000000

08001be0 <__dbg_check_unlock>:
void __dbg_check_unlock(void) {
 8001be0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <__dbg_check_unlock+0x20>)
 8001be4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001be8:	b932      	cbnz	r2, 8001bf8 <__dbg_check_unlock+0x18>
 8001bea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001bee:	2900      	cmp	r1, #0
 8001bf0:	dd02      	ble.n	8001bf8 <__dbg_check_unlock+0x18>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001bf6:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <__dbg_check_unlock+0x24>)
 8001bfa:	f7fe ffe9 	bl	8000bd0 <chSysHalt>
 8001bfe:	bf00      	nop
 8001c00:	200009f0 	.word	0x200009f0
 8001c04:	08004c30 	.word	0x08004c30
	...

08001c10 <__dbg_check_lock>:
void __dbg_check_lock(void) {
 8001c10:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <__dbg_check_lock+0x1c>)
 8001c14:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	d103      	bne.n	8001c24 <__dbg_check_lock+0x14>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001c22:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <__dbg_check_lock+0x20>)
 8001c26:	f7fe ffd3 	bl	8000bd0 <chSysHalt>
 8001c2a:	bf00      	nop
 8001c2c:	200009f0 	.word	0x200009f0
 8001c30:	08004c08 	.word	0x08004c08
	...

08001c40 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	4606      	mov	r6, r0
 8001c44:	460d      	mov	r5, r1
 8001c46:	4614      	mov	r4, r2
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001c48:	2330      	movs	r3, #48	; 0x30
 8001c4a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 8001c4e:	f7ff ffdf 	bl	8001c10 <__dbg_check_lock>
  tp = threadref(((uint8_t *)wsp + size -
 8001c52:	f1a5 0c48 	sub.w	ip, r5, #72	; 0x48
 8001c56:	eb06 030c 	add.w	r3, r6, ip
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001c5a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	2100      	movs	r1, #0
  tp->refs              = (trefs_t)1;
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001c68:	e943 4109 	strd	r4, r1, [r3, #-36]	; 0x24
  tp->epending          = (eventmask_t)0;
 8001c6c:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
  tp->name              = name;
 8001c70:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <chThdCreateStatic.constprop.0.isra.0+0xe8>)
 8001c72:	61da      	str	r2, [r3, #28]
  tp->state             = CH_STATE_WTSTART;
 8001c74:	2102      	movs	r1, #2
  tp->owner             = oip;
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <chThdCreateStatic.constprop.0.isra.0+0xec>)
  tp->state             = CH_STATE_WTSTART;
 8001c78:	8499      	strh	r1, [r3, #36]	; 0x24
  tp->hdr.pqueue.prio   = prio;
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	6099      	str	r1, [r3, #8]
  p->prev       = qp->prev;
 8001c7e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001c80:	4f2b      	ldr	r7, [pc, #172]	; (8001d30 <chThdCreateStatic.constprop.0.isra.0+0xf0>)
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001c82:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  tp->realprio          = prio;
 8001c86:	6419      	str	r1, [r3, #64]	; 0x40
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001c88:	f843 7c04 	str.w	r7, [r3, #-4]
  REG_INSERT(oip, tp);
 8001c8c:	f103 0010 	add.w	r0, r3, #16
  ch_queue_init(&tp->msgqueue);
 8001c90:	f103 0130 	add.w	r1, r3, #48	; 0x30
  p->next       = qp;
 8001c94:	f102 0728 	add.w	r7, r2, #40	; 0x28
  tp->wabase = (stkalign_t *)wsp;
 8001c98:	621e      	str	r6, [r3, #32]
  tp->owner             = oip;
 8001c9a:	619a      	str	r2, [r3, #24]
  p->prev       = qp->prev;
 8001c9c:	615c      	str	r4, [r3, #20]
  p->next       = qp;
 8001c9e:	611f      	str	r7, [r3, #16]
  p->prev->next = p;
 8001ca0:	6020      	str	r0, [r4, #0]
  qp->prev = qp;
 8001ca2:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
  ch_list_init(&tp->waiting);
 8001ca6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  qp->prev      = p;
 8001caa:	62d0      	str	r0, [r2, #44]	; 0x2c
  lp->next = lp;
 8001cac:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001cae:	bb45      	cbnz	r5, 8001d02 <chThdCreateStatic.constprop.0.isra.0+0xc2>
 8001cb0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001cb4:	2900      	cmp	r1, #0
 8001cb6:	dd24      	ble.n	8001d02 <chThdCreateStatic.constprop.0.isra.0+0xc2>
  thread_t *otp = __instance_get_currthread(oip);
 8001cb8:	68d1      	ldr	r1, [r2, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8001cba:	6898      	ldr	r0, [r3, #8]
 8001cbc:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 8001cbe:	629d      	str	r5, [r3, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8001cc0:	42a0      	cmp	r0, r4
 8001cc2:	d924      	bls.n	8001d0e <chThdCreateStatic.constprop.0.isra.0+0xce>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8001cc4:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 8001cc6:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
    pqp = pqp->next;
 8001cca:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio > p->prio));
 8001ccc:	6885      	ldr	r5, [r0, #8]
 8001cce:	42ac      	cmp	r4, r5
 8001cd0:	d3fb      	bcc.n	8001cca <chThdCreateStatic.constprop.0.isra.0+0x8a>
  p->prev       = pqp->prev;
 8001cd2:	6844      	ldr	r4, [r0, #4]
 8001cd4:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 8001cd8:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 8001cda:	2401      	movs	r4, #1
  pqp->prev     = p;
 8001cdc:	6041      	str	r1, [r0, #4]
 8001cde:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8001ce2:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001ce4:	f3ef 8209 	mrs	r2, PSP
    chSysSwitch(ntp, otp);
 8001ce8:	6a08      	ldr	r0, [r1, #32]
 8001cea:	3a64      	subs	r2, #100	; 0x64
 8001cec:	4290      	cmp	r0, r2
 8001cee:	d80b      	bhi.n	8001d08 <chThdCreateStatic.constprop.0.isra.0+0xc8>
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fb07 	bl	8000304 <__port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  __dbg_check_unlock();
 8001cf6:	f7ff ff73 	bl	8001be0 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f383 8811 	msr	BASEPRI, r3
}
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#11");
 8001d02:	480c      	ldr	r0, [pc, #48]	; (8001d34 <chThdCreateStatic.constprop.0.isra.0+0xf4>)
 8001d04:	f7fe ff64 	bl	8000bd0 <chSysHalt>
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <chThdCreateStatic.constprop.0.isra.0+0xf8>)
 8001d0a:	f7fe ff61 	bl	8000bd0 <chSysHalt>
  tp->state = CH_STATE_READY;
 8001d0e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
    pqp = pqp->next;
 8001d12:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001d14:	6891      	ldr	r1, [r2, #8]
 8001d16:	4288      	cmp	r0, r1
 8001d18:	d9fb      	bls.n	8001d12 <chThdCreateStatic.constprop.0.isra.0+0xd2>
  p->prev       = pqp->prev;
 8001d1a:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8001d1c:	f846 200c 	str.w	r2, [r6, ip]
  p->prev       = pqp->prev;
 8001d20:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8001d22:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001d24:	6053      	str	r3, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001d26:	e7e6      	b.n	8001cf6 <chThdCreateStatic.constprop.0.isra.0+0xb6>
 8001d28:	08004c38 	.word	0x08004c38
 8001d2c:	200009f0 	.word	0x200009f0
 8001d30:	0800031d 	.word	0x0800031d
 8001d34:	08004c18 	.word	0x08004c18
 8001d38:	08004c20 	.word	0x08004c20
 8001d3c:	00000000 	.word	0x00000000

08001d40 <sdStart.isra.0>:
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	4604      	mov	r4, r0
 8001d44:	460d      	mov	r5, r1
 8001d46:	2330      	movs	r3, #48	; 0x30
 8001d48:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8001d4c:	f7ff ff60 	bl	8001c10 <__dbg_check_lock>
  if (sdp->state == SD_STOP) {
 8001d50:	7a23      	ldrb	r3, [r4, #8]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d035      	beq.n	8001dc2 <sdStart.isra.0+0x82>
  USART_TypeDef *u = sdp->usart;
 8001d56:	e9d4 321d 	ldrd	r3, r2, [r4, #116]	; 0x74
  if (config->cr1 & USART_CR1_OVER8)
 8001d5a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8001d5e:	6829      	ldr	r1, [r5, #0]
  if (config->cr1 & USART_CR1_OVER8)
 8001d60:	2800      	cmp	r0, #0
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8001d62:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8001d66:	fbb2 f2f1 	udiv	r2, r2, r1
  if (config->cr1 & USART_CR1_OVER8)
 8001d6a:	88a9      	ldrh	r1, [r5, #4]
 8001d6c:	da05      	bge.n	8001d7a <sdStart.isra.0+0x3a>
    brr = ((brr & ~7) * 2) | (brr & 7);
 8001d6e:	f022 0007 	bic.w	r0, r2, #7
 8001d72:	f002 0207 	and.w	r2, r2, #7
 8001d76:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  u->BRR = brr;
 8001d7a:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001d7c:	88e8      	ldrh	r0, [r5, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001d7e:	892a      	ldrh	r2, [r5, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001d80:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001d84:	f042 0201 	orr.w	r2, r2, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001d88:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001d8a:	615a      	str	r2, [r3, #20]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001d8c:	f441 5204 	orr.w	r2, r1, #8448	; 0x2100
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8001d90:	f401 51a0 	and.w	r1, r1, #5120	; 0x1400
    sdp->rxmask = 0xFF;
 8001d94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001d98:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->SR = 0;
 8001d9c:	f04f 0500 	mov.w	r5, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001da0:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 8001da2:	bf08      	it	eq
 8001da4:	217f      	moveq	r1, #127	; 0x7f
  u->SR = 0;
 8001da6:	601d      	str	r5, [r3, #0]
    sdp->rxmask = 0xFF;
 8001da8:	bf18      	it	ne
 8001daa:	21ff      	movne	r1, #255	; 0xff
    sdp->state = SD_READY;
 8001dac:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 8001dae:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
 8001db6:	7222      	strb	r2, [r4, #8]
  __dbg_check_unlock();
 8001db8:	f7ff ff12 	bl	8001be0 <__dbg_check_unlock>
 8001dbc:	f385 8811 	msr	BASEPRI, r5
}
 8001dc0:	bd38      	pop	{r3, r4, r5, pc}
    if (&SD1 == sdp) {
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <sdStart.isra.0+0xbc>)
 8001dc4:	429c      	cmp	r4, r3
 8001dc6:	d00d      	beq.n	8001de4 <sdStart.isra.0+0xa4>
    if (&SD2 == sdp) {
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <sdStart.isra.0+0xc0>)
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	d1c3      	bne.n	8001d56 <sdStart.isra.0+0x16>
      rccEnableUSART2(true);
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <sdStart.isra.0+0xc4>)
 8001dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dda:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dde:	661a      	str	r2, [r3, #96]	; 0x60
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	e7b8      	b.n	8001d56 <sdStart.isra.0+0x16>
      rccEnableUSART1(true);
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <sdStart.isra.0+0xc4>)
 8001de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001de8:	f042 0210 	orr.w	r2, r2, #16
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
 8001dee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001df0:	f042 0210 	orr.w	r2, r2, #16
 8001df4:	665a      	str	r2, [r3, #100]	; 0x64
 8001df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001df8:	e7ad      	b.n	8001d56 <sdStart.isra.0+0x16>
 8001dfa:	bf00      	nop
 8001dfc:	200008b4 	.word	0x200008b4
 8001e00:	20000934 	.word	0x20000934
 8001e04:	40023800 	.word	0x40023800
	...

08001e10 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	2530      	movs	r5, #48	; 0x30
 8001e14:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001e18:	4c18      	ldr	r4, [pc, #96]	; (8001e7c <VectorD4+0x6c>)
 8001e1a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db22      	blt.n	8001e68 <VectorD4+0x58>
 8001e22:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001e26:	b9fa      	cbnz	r2, 8001e68 <VectorD4+0x58>
  oip->dbg.isr_cnt++;
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8001e2e:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
 8001e32:	4813      	ldr	r0, [pc, #76]	; (8001e80 <VectorD4+0x70>)
 8001e34:	f7ff f93c 	bl	80010b0 <sd_lld_serve_interrupt>
 8001e38:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001e3c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd14      	ble.n	8001e6e <VectorD4+0x5e>
 8001e44:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001e48:	b98a      	cbnz	r2, 8001e6e <VectorD4+0x5e>
  oip->dbg.isr_cnt--;
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8001e50:	f382 8811 	msr	BASEPRI, r2
 8001e54:	f385 8811 	msr	BASEPRI, r5
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <VectorD4+0x74>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001e60:	d108      	bne.n	8001e74 <VectorD4+0x64>
 8001e62:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8001e66:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8001e68:	4807      	ldr	r0, [pc, #28]	; (8001e88 <VectorD4+0x78>)
 8001e6a:	f7fe feb1 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <VectorD4+0x7c>)
 8001e70:	f7fe feae 	bl	8000bd0 <chSysHalt>
 8001e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e78:	f7ff be3a 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8001e7c:	200009f0 	.word	0x200009f0
 8001e80:	200008b4 	.word	0x200008b4
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	08004c40 	.word	0x08004c40
 8001e8c:	08004c48 	.word	0x08004c48

08001e90 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	2530      	movs	r5, #48	; 0x30
 8001e94:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001e98:	4c18      	ldr	r4, [pc, #96]	; (8001efc <VectorD8+0x6c>)
 8001e9a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db22      	blt.n	8001ee8 <VectorD8+0x58>
 8001ea2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001ea6:	b9fa      	cbnz	r2, 8001ee8 <VectorD8+0x58>
  oip->dbg.isr_cnt++;
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8001eae:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 8001eb2:	4813      	ldr	r0, [pc, #76]	; (8001f00 <VectorD8+0x70>)
 8001eb4:	f7ff f8fc 	bl	80010b0 <sd_lld_serve_interrupt>
 8001eb8:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001ebc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd14      	ble.n	8001eee <VectorD8+0x5e>
 8001ec4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001ec8:	b98a      	cbnz	r2, 8001eee <VectorD8+0x5e>
  oip->dbg.isr_cnt--;
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8001ed0:	f382 8811 	msr	BASEPRI, r2
 8001ed4:	f385 8811 	msr	BASEPRI, r5
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <VectorD8+0x74>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001ee0:	d108      	bne.n	8001ef4 <VectorD8+0x64>
 8001ee2:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8001ee8:	4807      	ldr	r0, [pc, #28]	; (8001f08 <VectorD8+0x78>)
 8001eea:	f7fe fe71 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <VectorD8+0x7c>)
 8001ef0:	f7fe fe6e 	bl	8000bd0 <chSysHalt>
 8001ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ef8:	f7ff bdfa 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8001efc:	200009f0 	.word	0x200009f0
 8001f00:	20000934 	.word	0x20000934
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	08004c40 	.word	0x08004c40
 8001f0c:	08004c48 	.word	0x08004c48

08001f10 <VectorA8>:
/**
 * @brief   TIM1-TRG-COM, TIM11 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_TRGCO_TIM11_HANDLER) {
 8001f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f14:	2130      	movs	r1, #48	; 0x30
 8001f16:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001f1a:	4c6c      	ldr	r4, [pc, #432]	; (80020cc <VectorA8+0x1bc>)
 8001f1c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f2c0 80a0 	blt.w	8002066 <VectorA8+0x156>
 8001f26:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	f040 809b 	bne.w	8002066 <VectorA8+0x156>
  oip->dbg.isr_cnt++;
 8001f30:	3301      	adds	r3, #1
 8001f32:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8001f36:	f382 8811 	msr	BASEPRI, r2
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001f3a:	4d65      	ldr	r5, [pc, #404]	; (80020d0 <VectorA8+0x1c0>)
 8001f3c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001f3e:	68ea      	ldr	r2, [r5, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001f44:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001f46:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001f48:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8001f4a:	d41b      	bmi.n	8001f84 <VectorA8+0x74>
 8001f4c:	2230      	movs	r2, #48	; 0x30
 8001f4e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001f52:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f340 8082 	ble.w	8002060 <VectorA8+0x150>
 8001f5c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001f60:	2900      	cmp	r1, #0
 8001f62:	d17d      	bne.n	8002060 <VectorA8+0x150>
  oip->dbg.isr_cnt--;
 8001f64:	3b01      	subs	r3, #1
 8001f66:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8001f6a:	f381 8811 	msr	BASEPRI, r1
 8001f6e:	f382 8811 	msr	BASEPRI, r2
 8001f72:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <VectorA8+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001f7a:	d17a      	bne.n	8002072 <VectorA8+0x162>
 8001f7c:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8001f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f84:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001f88:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dd6d      	ble.n	800206c <VectorA8+0x15c>
 8001f90:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
 8001f94:	f1ba 0f00 	cmp.w	sl, #0
 8001f98:	d168      	bne.n	800206c <VectorA8+0x15c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001fa0:	f104 0b10 	add.w	fp, r4, #16
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8001fa4:	46d0      	mov	r8, sl
 8001fa6:	f04f 0930 	mov.w	r9, #48	; 0x30
  return (systime_t)STM32_ST_TIM->CNT;
 8001faa:	6a68      	ldr	r0, [r5, #36]	; 0x24
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8001fac:	6926      	ldr	r6, [r4, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8001fae:	8ba3      	ldrh	r3, [r4, #28]
    if (nowdelta < vtp->dlist.delta) {
 8001fb0:	68b1      	ldr	r1, [r6, #8]
 8001fb2:	b280      	uxth	r0, r0
 8001fb4:	1ac2      	subs	r2, r0, r3
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	428a      	cmp	r2, r1
 8001fba:	d361      	bcc.n	8002080 <VectorA8+0x170>
  return systime + (systime_t)interval;
 8001fbc:	440b      	add	r3, r1
 8001fbe:	b29f      	uxth	r7, r3
  dlp->prev->next = dlp->next;
 8001fc0:	e9d6 3200 	ldrd	r3, r2, [r6]
    vtlp->lasttime = lasttime;
 8001fc4:	83a7      	strh	r7, [r4, #28]
 8001fc6:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8001fc8:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 8001fca:	f8c6 a000 	str.w	sl, [r6]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8001fce:	6923      	ldr	r3, [r4, #16]
 8001fd0:	455b      	cmp	r3, fp
  STM32_ST_TIM->DIER = 0U;
 8001fd2:	bf08      	it	eq
 8001fd4:	f8c5 a00c 	streq.w	sl, [r5, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001fd8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	dd4c      	ble.n	800207a <VectorA8+0x16a>
 8001fe0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	dd48      	ble.n	800207a <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001fe8:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8001fec:	f388 8811 	msr	BASEPRI, r8
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 8001ff0:	e9d6 3103 	ldrd	r3, r1, [r6, #12]
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	4798      	blx	r3
 8001ff8:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001ffc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002000:	2b00      	cmp	r3, #0
 8002002:	dd33      	ble.n	800206c <VectorA8+0x15c>
 8002004:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002008:	bb80      	cbnz	r0, 800206c <VectorA8+0x15c>

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 800200a:	6972      	ldr	r2, [r6, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 800200c:	2301      	movs	r3, #1
 800200e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002012:	2a00      	cmp	r2, #0
 8002014:	d0c9      	beq.n	8001faa <VectorA8+0x9a>
  return (systime_t)STM32_ST_TIM->CNT;
 8002016:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002018:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 800201a:	1bcf      	subs	r7, r1, r7
 800201c:	b2bf      	uxth	r7, r7
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 800201e:	42ba      	cmp	r2, r7
 8002020:	d343      	bcc.n	80020aa <VectorA8+0x19a>
  return (bool)(dlhp == dlhp->next);
 8002022:	f8d4 c010 	ldr.w	ip, [r4, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002026:	45dc      	cmp	ip, fp
 8002028:	d049      	beq.n	80020be <VectorA8+0x1ae>
  while (likely(dlp->delta < delta)) {
 800202a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	d906      	bls.n	8002040 <VectorA8+0x130>
    dlp = dlp->next;
 8002032:	f8dc c000 	ldr.w	ip, [ip]
    delta -= dlp->delta;
 8002036:	1ad2      	subs	r2, r2, r3
  while (likely(dlp->delta < delta)) {
 8002038:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800203c:	4293      	cmp	r3, r2
 800203e:	d3f8      	bcc.n	8002032 <VectorA8+0x122>
  dlp->delta      = delta;
 8002040:	60b2      	str	r2, [r6, #8]
  dlp->delta -= delta;
 8002042:	f8dc 3008 	ldr.w	r3, [ip, #8]
  dlp->next       = dlhp;
 8002046:	f8c6 c000 	str.w	ip, [r6]
  dlp->delta -= delta;
 800204a:	1a9b      	subs	r3, r3, r2
  dlp->prev       = dlp->next->prev;
 800204c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8002050:	6072      	str	r2, [r6, #4]
  dlp->prev->next = dlp;
 8002052:	6016      	str	r6, [r2, #0]
  dlp->delta -= delta;
 8002054:	e9cc 6301 	strd	r6, r3, [ip, #4]
  dlhp->delta = (sysinterval_t)-1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
 800205c:	61a3      	str	r3, [r4, #24]
}
 800205e:	e7a2      	b.n	8001fa6 <VectorA8+0x96>
    chSysHalt("SV#9");
 8002060:	481d      	ldr	r0, [pc, #116]	; (80020d8 <VectorA8+0x1c8>)
 8002062:	f7fe fdb5 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#8");
 8002066:	481d      	ldr	r0, [pc, #116]	; (80020dc <VectorA8+0x1cc>)
 8002068:	f7fe fdb2 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#6");
 800206c:	481c      	ldr	r0, [pc, #112]	; (80020e0 <VectorA8+0x1d0>)
 800206e:	f7fe fdaf 	bl	8000bd0 <chSysHalt>
 8002072:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002076:	f7ff bd3b 	b.w	8001af0 <__port_irq_epilogue.part.0>
    chSysHalt("SV#7");
 800207a:	481a      	ldr	r0, [pc, #104]	; (80020e4 <VectorA8+0x1d4>)
 800207c:	f7fe fda8 	bl	8000bd0 <chSysHalt>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8002080:	455e      	cmp	r6, fp
 8002082:	d004      	beq.n	800208e <VectorA8+0x17e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8002084:	1a89      	subs	r1, r1, r2
  vtlp->lasttime += nowdelta;
 8002086:	83a0      	strh	r0, [r4, #28]
  vtp->dlist.delta -= nowdelta;
 8002088:	60b1      	str	r1, [r6, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 800208a:	f7fe fe49 	bl	8000d20 <vt_set_alarm>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800208e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002092:	2b00      	cmp	r3, #0
 8002094:	ddf1      	ble.n	800207a <VectorA8+0x16a>
 8002096:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800209a:	2b00      	cmp	r3, #0
 800209c:	dded      	ble.n	800207a <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80020a4:	f383 8811 	msr	BASEPRI, r3
}
 80020a8:	e750      	b.n	8001f4c <VectorA8+0x3c>
 80020aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 80020ac:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80020b0:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80020b4:	45dc      	cmp	ip, fp
 80020b6:	6363      	str	r3, [r4, #52]	; 0x34
 80020b8:	d006      	beq.n	80020c8 <VectorA8+0x1b8>
 80020ba:	463a      	mov	r2, r7
 80020bc:	e7b5      	b.n	800202a <VectorA8+0x11a>
        delay = vtp->reload - nowdelta;
 80020be:	1bd2      	subs	r2, r2, r7
        vt_insert_first(vtlp, vtp, now, delay);
 80020c0:	4630      	mov	r0, r6
 80020c2:	f7fe ff85 	bl	8000fd0 <vt_insert_first.constprop.0>
        return;
 80020c6:	e7e2      	b.n	800208e <VectorA8+0x17e>
        delay = (sysinterval_t)0;
 80020c8:	4602      	mov	r2, r0
 80020ca:	e7f9      	b.n	80020c0 <VectorA8+0x1b0>
 80020cc:	200009f0 	.word	0x200009f0
 80020d0:	40014800 	.word	0x40014800
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	08004c48 	.word	0x08004c48
 80020dc:	08004c40 	.word	0x08004c40
 80020e0:	08004bf8 	.word	0x08004bf8
 80020e4:	08004c10 	.word	0x08004c10
	...

080020f0 <Vector118>:
/**
 * @brief   TIM6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM6_HANDLER) {
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	2330      	movs	r3, #48	; 0x30
 80020f4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80020f8:	4c26      	ldr	r4, [pc, #152]	; (8002194 <Vector118+0xa4>)
 80020fa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db3d      	blt.n	800217e <Vector118+0x8e>
 8002102:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002106:	2800      	cmp	r0, #0
 8002108:	d139      	bne.n	800217e <Vector118+0x8e>
  oip->dbg.isr_cnt++;
 800210a:	3301      	adds	r3, #1
 800210c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002110:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8002114:	4d20      	ldr	r5, [pc, #128]	; (8002198 <Vector118+0xa8>)
 8002116:	68ea      	ldr	r2, [r5, #12]
 8002118:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800211a:	68d1      	ldr	r1, [r2, #12]
 800211c:	400b      	ands	r3, r1
 800211e:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 8002120:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8002122:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8002124:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8002126:	d418      	bmi.n	800215a <Vector118+0x6a>
 8002128:	2230      	movs	r2, #48	; 0x30
 800212a:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800212e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002132:	2b00      	cmp	r3, #0
 8002134:	dd26      	ble.n	8002184 <Vector118+0x94>
 8002136:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800213a:	bb19      	cbnz	r1, 8002184 <Vector118+0x94>
  oip->dbg.isr_cnt--;
 800213c:	3b01      	subs	r3, #1
 800213e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002142:	f381 8811 	msr	BASEPRI, r1
 8002146:	f382 8811 	msr	BASEPRI, r2
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <Vector118+0xac>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002152:	d11a      	bne.n	800218a <Vector118+0x9a>
 8002154:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002158:	bd38      	pop	{r3, r4, r5, pc}
    _gpt_isr_invoke_cb(gptp);
 800215a:	782b      	ldrb	r3, [r5, #0]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <Vector118+0x80>
 8002160:	2302      	movs	r3, #2
 8002162:	702b      	strb	r3, [r5, #0]
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 8002164:	6010      	str	r0, [r2, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8002166:	6110      	str	r0, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8002168:	68d3      	ldr	r3, [r2, #12]
 800216a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216e:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 8002170:	686b      	ldr	r3, [r5, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0d7      	beq.n	8002128 <Vector118+0x38>
 8002178:	4807      	ldr	r0, [pc, #28]	; (8002198 <Vector118+0xa8>)
 800217a:	4798      	blx	r3
 800217c:	e7d4      	b.n	8002128 <Vector118+0x38>
    chSysHalt("SV#8");
 800217e:	4808      	ldr	r0, [pc, #32]	; (80021a0 <Vector118+0xb0>)
 8002180:	f7fe fd26 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002184:	4807      	ldr	r0, [pc, #28]	; (80021a4 <Vector118+0xb4>)
 8002186:	f7fe fd23 	bl	8000bd0 <chSysHalt>
 800218a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800218e:	f7ff bcaf 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002192:	bf00      	nop
 8002194:	200009f0 	.word	0x200009f0
 8002198:	2000086c 	.word	0x2000086c
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	08004c40 	.word	0x08004c40
 80021a4:	08004c48 	.word	0x08004c48
	...

080021b0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	2330      	movs	r3, #48	; 0x30
 80021b4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80021b8:	4c4b      	ldr	r4, [pc, #300]	; (80022e8 <Vector88+0x138>)
 80021ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f2c0 8081 	blt.w	80022c6 <Vector88+0x116>
 80021c4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80021c8:	2a00      	cmp	r2, #0
 80021ca:	d17c      	bne.n	80022c6 <Vector88+0x116>
  oip->dbg.isr_cnt++;
 80021cc:	3301      	adds	r3, #1
 80021ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80021d2:	f382 8811 	msr	BASEPRI, r2
  if (adcp->grpp != NULL) {
 80021d6:	4d45      	ldr	r5, [pc, #276]	; (80022ec <Vector88+0x13c>)
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 80021d8:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <Vector88+0x140>)
  if (adcp->grpp != NULL) {
 80021da:	6928      	ldr	r0, [r5, #16]
  sr = ADC1->SR;
 80021dc:	6819      	ldr	r1, [r3, #0]
  ADC1->SR = 0;
 80021de:	601a      	str	r2, [r3, #0]
  if (adcp->grpp != NULL) {
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d04a      	beq.n	800227a <Vector88+0xca>
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 80021e4:	068a      	lsls	r2, r1, #26
 80021e6:	d461      	bmi.n	80022ac <Vector88+0xfc>
    if (sr & ADC_SR_AWD) {
 80021e8:	07cb      	lsls	r3, r1, #31
 80021ea:	d546      	bpl.n	800227a <Vector88+0xca>
 80021ec:	2104      	movs	r1, #4
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 80021ee:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	f023 031f 	bic.w	r3, r3, #31
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f013 0301 	ands.w	r3, r3, #1
 8002200:	d1fb      	bne.n	80021fa <Vector88+0x4a>
 8002202:	f897 c009 	ldrb.w	ip, [r7, #9]
      _adc_isr_error_code(adcp, emask);
 8002206:	6886      	ldr	r6, [r0, #8]
  adcp->adc->CR1 = 0;
 8002208:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800220a:	687f      	ldr	r7, [r7, #4]
 800220c:	203d      	movs	r0, #61	; 0x3d
 800220e:	fa00 f00c 	lsl.w	r0, r0, ip
 8002212:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8002214:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8002216:	6893      	ldr	r3, [r2, #8]
 8002218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800221c:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800221e:	2301      	movs	r3, #1
 8002220:	6093      	str	r3, [r2, #8]
      _adc_isr_error_code(adcp, emask);
 8002222:	2e00      	cmp	r6, #0
 8002224:	d055      	beq.n	80022d2 <Vector88+0x122>
 8002226:	2305      	movs	r3, #5
 8002228:	702b      	strb	r3, [r5, #0]
 800222a:	4830      	ldr	r0, [pc, #192]	; (80022ec <Vector88+0x13c>)
 800222c:	47b0      	blx	r6
 800222e:	782b      	ldrb	r3, [r5, #0]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d04e      	beq.n	80022d2 <Vector88+0x122>
 8002234:	2330      	movs	r3, #48	; 0x30
 8002236:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800223a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800223e:	2b00      	cmp	r3, #0
 8002240:	dd4f      	ble.n	80022e2 <Vector88+0x132>
 8002242:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d14b      	bne.n	80022e2 <Vector88+0x132>
  if (*trp != NULL) {
 800224a:	6968      	ldr	r0, [r5, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 800224c:	2201      	movs	r2, #1
 800224e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8002252:	b168      	cbz	r0, 8002270 <Vector88+0xc0>
    tp->u.rdymsg = msg;
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	6282      	str	r2, [r0, #40]	; 0x28
    *trp = NULL;
 800225a:	616b      	str	r3, [r5, #20]
    (void) chSchReadyI(tp);
 800225c:	f7fe ff00 	bl	8001060 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002260:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002264:	2b00      	cmp	r3, #0
 8002266:	dd39      	ble.n	80022dc <Vector88+0x12c>
 8002268:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800226c:	2b00      	cmp	r3, #0
 800226e:	dd35      	ble.n	80022dc <Vector88+0x12c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	2230      	movs	r2, #48	; 0x30
 800227c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002280:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002284:	2b00      	cmp	r3, #0
 8002286:	dd21      	ble.n	80022cc <Vector88+0x11c>
 8002288:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800228c:	b9f1      	cbnz	r1, 80022cc <Vector88+0x11c>
  oip->dbg.isr_cnt--;
 800228e:	3b01      	subs	r3, #1
 8002290:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002294:	f381 8811 	msr	BASEPRI, r1
 8002298:	f382 8811 	msr	BASEPRI, r2
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <Vector88+0x144>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80022a4:	d10b      	bne.n	80022be <Vector88+0x10e>
 80022a6:	f383 8811 	msr	BASEPRI, r3
}
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 80022ac:	782b      	ldrb	r3, [r5, #0]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d19a      	bne.n	80021e8 <Vector88+0x38>
      emask |= ADC_ERR_OVERFLOW;
 80022b2:	f011 0f01 	tst.w	r1, #1
 80022b6:	bf14      	ite	ne
 80022b8:	2106      	movne	r1, #6
 80022ba:	2102      	moveq	r1, #2
 80022bc:	e797      	b.n	80021ee <Vector88+0x3e>
}
 80022be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022c2:	f7ff bc15 	b.w	8001af0 <__port_irq_epilogue.part.0>
    chSysHalt("SV#8");
 80022c6:	480c      	ldr	r0, [pc, #48]	; (80022f8 <Vector88+0x148>)
 80022c8:	f7fe fc82 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <Vector88+0x14c>)
 80022ce:	f7fe fc7f 	bl	8000bd0 <chSysHalt>
      _adc_isr_error_code(adcp, emask);
 80022d2:	2202      	movs	r2, #2
 80022d4:	2300      	movs	r3, #0
 80022d6:	702a      	strb	r2, [r5, #0]
 80022d8:	612b      	str	r3, [r5, #16]
 80022da:	e7ab      	b.n	8002234 <Vector88+0x84>
    chSysHalt("SV#7");
 80022dc:	4808      	ldr	r0, [pc, #32]	; (8002300 <Vector88+0x150>)
 80022de:	f7fe fc77 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#6");
 80022e2:	4808      	ldr	r0, [pc, #32]	; (8002304 <Vector88+0x154>)
 80022e4:	f7fe fc74 	bl	8000bd0 <chSysHalt>
 80022e8:	200009f0 	.word	0x200009f0
 80022ec:	20000808 	.word	0x20000808
 80022f0:	40012000 	.word	0x40012000
 80022f4:	e000ed00 	.word	0xe000ed00
 80022f8:	08004c40 	.word	0x08004c40
 80022fc:	08004c48 	.word	0x08004c48
 8002300:	08004c10 	.word	0x08004c10
 8002304:	08004bf8 	.word	0x08004bf8
	...

08002310 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002310:	b510      	push	{r4, lr}
 8002312:	2330      	movs	r3, #48	; 0x30
 8002314:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002318:	4c1c      	ldr	r4, [pc, #112]	; (800238c <Vector6C+0x7c>)
 800231a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800231e:	2b00      	cmp	r3, #0
 8002320:	db2a      	blt.n	8002378 <Vector6C+0x68>
 8002322:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002326:	bb3a      	cbnz	r2, 8002378 <Vector6C+0x68>
  oip->dbg.isr_cnt++;
 8002328:	3301      	adds	r3, #1
 800232a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800232e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <Vector6C+0x80>)
  DMA1->LIFCR = flags << 0U;
  if (dma.streams[0].func)
 8002334:	4817      	ldr	r0, [pc, #92]	; (8002394 <Vector6C+0x84>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002336:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8002338:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800233a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800233e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8002340:	b10a      	cbz	r2, 8002346 <Vector6C+0x36>
    dma.streams[0].func(dma.streams[0].param, flags);
 8002342:	6880      	ldr	r0, [r0, #8]
 8002344:	4790      	blx	r2
 8002346:	2230      	movs	r2, #48	; 0x30
 8002348:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800234c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002350:	2b00      	cmp	r3, #0
 8002352:	dd14      	ble.n	800237e <Vector6C+0x6e>
 8002354:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002358:	b989      	cbnz	r1, 800237e <Vector6C+0x6e>
  oip->dbg.isr_cnt--;
 800235a:	3b01      	subs	r3, #1
 800235c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002360:	f381 8811 	msr	BASEPRI, r1
 8002364:	f382 8811 	msr	BASEPRI, r2
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <Vector6C+0x88>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002370:	d108      	bne.n	8002384 <Vector6C+0x74>
 8002372:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002376:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002378:	4808      	ldr	r0, [pc, #32]	; (800239c <Vector6C+0x8c>)
 800237a:	f7fe fc29 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 800237e:	4808      	ldr	r0, [pc, #32]	; (80023a0 <Vector6C+0x90>)
 8002380:	f7fe fc26 	bl	8000bd0 <chSysHalt>
 8002384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002388:	f7ff bbb2 	b.w	8001af0 <__port_irq_epilogue.part.0>
 800238c:	200009f0 	.word	0x200009f0
 8002390:	40026000 	.word	0x40026000
 8002394:	20000cf8 	.word	0x20000cf8
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	08004c40 	.word	0x08004c40
 80023a0:	08004c48 	.word	0x08004c48
	...

080023b0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80023b0:	b510      	push	{r4, lr}
 80023b2:	2330      	movs	r3, #48	; 0x30
 80023b4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80023b8:	4c1d      	ldr	r4, [pc, #116]	; (8002430 <Vector70+0x80>)
 80023ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db2c      	blt.n	800241c <Vector70+0x6c>
 80023c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80023c6:	bb4a      	cbnz	r2, 800241c <Vector70+0x6c>
  oip->dbg.isr_cnt++;
 80023c8:	3301      	adds	r3, #1
 80023ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80023ce:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023d2:	4b18      	ldr	r3, [pc, #96]	; (8002434 <Vector70+0x84>)
  DMA1->LIFCR = flags << 6U;
  if (dma.streams[1].func)
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <Vector70+0x88>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	0989      	lsrs	r1, r1, #6
 80023da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 80023de:	0188      	lsls	r0, r1, #6
 80023e0:	6098      	str	r0, [r3, #8]
  if (dma.streams[1].func)
 80023e2:	68d3      	ldr	r3, [r2, #12]
 80023e4:	b10b      	cbz	r3, 80023ea <Vector70+0x3a>
    dma.streams[1].func(dma.streams[1].param, flags);
 80023e6:	6910      	ldr	r0, [r2, #16]
 80023e8:	4798      	blx	r3
 80023ea:	2230      	movs	r2, #48	; 0x30
 80023ec:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80023f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	dd14      	ble.n	8002422 <Vector70+0x72>
 80023f8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80023fc:	b989      	cbnz	r1, 8002422 <Vector70+0x72>
  oip->dbg.isr_cnt--;
 80023fe:	3b01      	subs	r3, #1
 8002400:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002404:	f381 8811 	msr	BASEPRI, r1
 8002408:	f382 8811 	msr	BASEPRI, r2
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <Vector70+0x8c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002414:	d108      	bne.n	8002428 <Vector70+0x78>
 8002416:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800241a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800241c:	4808      	ldr	r0, [pc, #32]	; (8002440 <Vector70+0x90>)
 800241e:	f7fe fbd7 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <Vector70+0x94>)
 8002424:	f7fe fbd4 	bl	8000bd0 <chSysHalt>
 8002428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800242c:	f7ff bb60 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002430:	200009f0 	.word	0x200009f0
 8002434:	40026000 	.word	0x40026000
 8002438:	20000cf8 	.word	0x20000cf8
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	08004c40 	.word	0x08004c40
 8002444:	08004c48 	.word	0x08004c48
	...

08002450 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002450:	b510      	push	{r4, lr}
 8002452:	2330      	movs	r3, #48	; 0x30
 8002454:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002458:	4c1d      	ldr	r4, [pc, #116]	; (80024d0 <Vector74+0x80>)
 800245a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800245e:	2b00      	cmp	r3, #0
 8002460:	db2c      	blt.n	80024bc <Vector74+0x6c>
 8002462:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002466:	bb4a      	cbnz	r2, 80024bc <Vector74+0x6c>
  oip->dbg.isr_cnt++;
 8002468:	3301      	adds	r3, #1
 800246a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800246e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <Vector74+0x84>)
  DMA1->LIFCR = flags << 16U;
  if (dma.streams[2].func)
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <Vector74+0x88>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	0c09      	lsrs	r1, r1, #16
 800247a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800247e:	0408      	lsls	r0, r1, #16
 8002480:	6098      	str	r0, [r3, #8]
  if (dma.streams[2].func)
 8002482:	6953      	ldr	r3, [r2, #20]
 8002484:	b10b      	cbz	r3, 800248a <Vector74+0x3a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002486:	6990      	ldr	r0, [r2, #24]
 8002488:	4798      	blx	r3
 800248a:	2230      	movs	r2, #48	; 0x30
 800248c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002490:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002494:	2b00      	cmp	r3, #0
 8002496:	dd14      	ble.n	80024c2 <Vector74+0x72>
 8002498:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800249c:	b989      	cbnz	r1, 80024c2 <Vector74+0x72>
  oip->dbg.isr_cnt--;
 800249e:	3b01      	subs	r3, #1
 80024a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80024a4:	f381 8811 	msr	BASEPRI, r1
 80024a8:	f382 8811 	msr	BASEPRI, r2
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <Vector74+0x8c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80024b4:	d108      	bne.n	80024c8 <Vector74+0x78>
 80024b6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80024ba:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80024bc:	4808      	ldr	r0, [pc, #32]	; (80024e0 <Vector74+0x90>)
 80024be:	f7fe fb87 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80024c2:	4808      	ldr	r0, [pc, #32]	; (80024e4 <Vector74+0x94>)
 80024c4:	f7fe fb84 	bl	8000bd0 <chSysHalt>
 80024c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024cc:	f7ff bb10 	b.w	8001af0 <__port_irq_epilogue.part.0>
 80024d0:	200009f0 	.word	0x200009f0
 80024d4:	40026000 	.word	0x40026000
 80024d8:	20000cf8 	.word	0x20000cf8
 80024dc:	e000ed00 	.word	0xe000ed00
 80024e0:	08004c40 	.word	0x08004c40
 80024e4:	08004c48 	.word	0x08004c48
	...

080024f0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80024f0:	b510      	push	{r4, lr}
 80024f2:	2330      	movs	r3, #48	; 0x30
 80024f4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80024f8:	4c1d      	ldr	r4, [pc, #116]	; (8002570 <Vector78+0x80>)
 80024fa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db2c      	blt.n	800255c <Vector78+0x6c>
 8002502:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002506:	bb4a      	cbnz	r2, 800255c <Vector78+0x6c>
  oip->dbg.isr_cnt++;
 8002508:	3301      	adds	r3, #1
 800250a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800250e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <Vector78+0x84>)
  DMA1->LIFCR = flags << 22U;
  if (dma.streams[3].func)
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <Vector78+0x88>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	0d89      	lsrs	r1, r1, #22
 800251a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 800251e:	0588      	lsls	r0, r1, #22
 8002520:	6098      	str	r0, [r3, #8]
  if (dma.streams[3].func)
 8002522:	69d3      	ldr	r3, [r2, #28]
 8002524:	b10b      	cbz	r3, 800252a <Vector78+0x3a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8002526:	6a10      	ldr	r0, [r2, #32]
 8002528:	4798      	blx	r3
 800252a:	2230      	movs	r2, #48	; 0x30
 800252c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002530:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002534:	2b00      	cmp	r3, #0
 8002536:	dd14      	ble.n	8002562 <Vector78+0x72>
 8002538:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800253c:	b989      	cbnz	r1, 8002562 <Vector78+0x72>
  oip->dbg.isr_cnt--;
 800253e:	3b01      	subs	r3, #1
 8002540:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002544:	f381 8811 	msr	BASEPRI, r1
 8002548:	f382 8811 	msr	BASEPRI, r2
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <Vector78+0x8c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002554:	d108      	bne.n	8002568 <Vector78+0x78>
 8002556:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800255a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800255c:	4808      	ldr	r0, [pc, #32]	; (8002580 <Vector78+0x90>)
 800255e:	f7fe fb37 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002562:	4808      	ldr	r0, [pc, #32]	; (8002584 <Vector78+0x94>)
 8002564:	f7fe fb34 	bl	8000bd0 <chSysHalt>
 8002568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256c:	f7ff bac0 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002570:	200009f0 	.word	0x200009f0
 8002574:	40026000 	.word	0x40026000
 8002578:	20000cf8 	.word	0x20000cf8
 800257c:	e000ed00 	.word	0xe000ed00
 8002580:	08004c40 	.word	0x08004c40
 8002584:	08004c48 	.word	0x08004c48
	...

08002590 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002590:	b510      	push	{r4, lr}
 8002592:	2330      	movs	r3, #48	; 0x30
 8002594:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002598:	4c1c      	ldr	r4, [pc, #112]	; (800260c <Vector7C+0x7c>)
 800259a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db2a      	blt.n	80025f8 <Vector7C+0x68>
 80025a2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80025a6:	bb3a      	cbnz	r2, 80025f8 <Vector7C+0x68>
  oip->dbg.isr_cnt++;
 80025a8:	3301      	adds	r3, #1
 80025aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80025ae:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <Vector7C+0x80>)
  DMA1->HIFCR = flags << 0U;
  if (dma.streams[4].func)
 80025b4:	4817      	ldr	r0, [pc, #92]	; (8002614 <Vector7C+0x84>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025b6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80025b8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80025ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80025be:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80025c0:	b10a      	cbz	r2, 80025c6 <Vector7C+0x36>
    dma.streams[4].func(dma.streams[4].param, flags);
 80025c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80025c4:	4790      	blx	r2
 80025c6:	2230      	movs	r2, #48	; 0x30
 80025c8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80025cc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	dd14      	ble.n	80025fe <Vector7C+0x6e>
 80025d4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80025d8:	b989      	cbnz	r1, 80025fe <Vector7C+0x6e>
  oip->dbg.isr_cnt--;
 80025da:	3b01      	subs	r3, #1
 80025dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80025e0:	f381 8811 	msr	BASEPRI, r1
 80025e4:	f382 8811 	msr	BASEPRI, r2
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <Vector7C+0x88>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80025f0:	d108      	bne.n	8002604 <Vector7C+0x74>
 80025f2:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80025f6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80025f8:	4808      	ldr	r0, [pc, #32]	; (800261c <Vector7C+0x8c>)
 80025fa:	f7fe fae9 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80025fe:	4808      	ldr	r0, [pc, #32]	; (8002620 <Vector7C+0x90>)
 8002600:	f7fe fae6 	bl	8000bd0 <chSysHalt>
 8002604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002608:	f7ff ba72 	b.w	8001af0 <__port_irq_epilogue.part.0>
 800260c:	200009f0 	.word	0x200009f0
 8002610:	40026000 	.word	0x40026000
 8002614:	20000cf8 	.word	0x20000cf8
 8002618:	e000ed00 	.word	0xe000ed00
 800261c:	08004c40 	.word	0x08004c40
 8002620:	08004c48 	.word	0x08004c48
	...

08002630 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002630:	b510      	push	{r4, lr}
 8002632:	2330      	movs	r3, #48	; 0x30
 8002634:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002638:	4c1d      	ldr	r4, [pc, #116]	; (80026b0 <Vector80+0x80>)
 800263a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800263e:	2b00      	cmp	r3, #0
 8002640:	db2c      	blt.n	800269c <Vector80+0x6c>
 8002642:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002646:	bb4a      	cbnz	r2, 800269c <Vector80+0x6c>
  oip->dbg.isr_cnt++;
 8002648:	3301      	adds	r3, #1
 800264a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800264e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <Vector80+0x84>)
  DMA1->HIFCR = flags << 6U;
  if (dma.streams[5].func)
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <Vector80+0x88>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	0989      	lsrs	r1, r1, #6
 800265a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800265e:	0188      	lsls	r0, r1, #6
 8002660:	60d8      	str	r0, [r3, #12]
  if (dma.streams[5].func)
 8002662:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002664:	b10b      	cbz	r3, 800266a <Vector80+0x3a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8002666:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002668:	4798      	blx	r3
 800266a:	2230      	movs	r2, #48	; 0x30
 800266c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002670:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002674:	2b00      	cmp	r3, #0
 8002676:	dd14      	ble.n	80026a2 <Vector80+0x72>
 8002678:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800267c:	b989      	cbnz	r1, 80026a2 <Vector80+0x72>
  oip->dbg.isr_cnt--;
 800267e:	3b01      	subs	r3, #1
 8002680:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002684:	f381 8811 	msr	BASEPRI, r1
 8002688:	f382 8811 	msr	BASEPRI, r2
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <Vector80+0x8c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002694:	d108      	bne.n	80026a8 <Vector80+0x78>
 8002696:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800269a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800269c:	4808      	ldr	r0, [pc, #32]	; (80026c0 <Vector80+0x90>)
 800269e:	f7fe fa97 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80026a2:	4808      	ldr	r0, [pc, #32]	; (80026c4 <Vector80+0x94>)
 80026a4:	f7fe fa94 	bl	8000bd0 <chSysHalt>
 80026a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ac:	f7ff ba20 	b.w	8001af0 <__port_irq_epilogue.part.0>
 80026b0:	200009f0 	.word	0x200009f0
 80026b4:	40026000 	.word	0x40026000
 80026b8:	20000cf8 	.word	0x20000cf8
 80026bc:	e000ed00 	.word	0xe000ed00
 80026c0:	08004c40 	.word	0x08004c40
 80026c4:	08004c48 	.word	0x08004c48
	...

080026d0 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80026d0:	b510      	push	{r4, lr}
 80026d2:	2330      	movs	r3, #48	; 0x30
 80026d4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80026d8:	4c1d      	ldr	r4, [pc, #116]	; (8002750 <Vector84+0x80>)
 80026da:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db2c      	blt.n	800273c <Vector84+0x6c>
 80026e2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80026e6:	bb4a      	cbnz	r2, 800273c <Vector84+0x6c>
  oip->dbg.isr_cnt++;
 80026e8:	3301      	adds	r3, #1
 80026ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80026ee:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <Vector84+0x84>)
  DMA1->HIFCR = flags << 16U;
  if (dma.streams[6].func)
 80026f4:	4a18      	ldr	r2, [pc, #96]	; (8002758 <Vector84+0x88>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	0c09      	lsrs	r1, r1, #16
 80026fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 80026fe:	0408      	lsls	r0, r1, #16
 8002700:	60d8      	str	r0, [r3, #12]
  if (dma.streams[6].func)
 8002702:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002704:	b10b      	cbz	r3, 800270a <Vector84+0x3a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8002706:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8002708:	4798      	blx	r3
 800270a:	2230      	movs	r2, #48	; 0x30
 800270c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002710:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002714:	2b00      	cmp	r3, #0
 8002716:	dd14      	ble.n	8002742 <Vector84+0x72>
 8002718:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800271c:	b989      	cbnz	r1, 8002742 <Vector84+0x72>
  oip->dbg.isr_cnt--;
 800271e:	3b01      	subs	r3, #1
 8002720:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002724:	f381 8811 	msr	BASEPRI, r1
 8002728:	f382 8811 	msr	BASEPRI, r2
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <Vector84+0x8c>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002734:	d108      	bne.n	8002748 <Vector84+0x78>
 8002736:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800273a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800273c:	4808      	ldr	r0, [pc, #32]	; (8002760 <Vector84+0x90>)
 800273e:	f7fe fa47 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002742:	4808      	ldr	r0, [pc, #32]	; (8002764 <Vector84+0x94>)
 8002744:	f7fe fa44 	bl	8000bd0 <chSysHalt>
 8002748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800274c:	f7ff b9d0 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002750:	200009f0 	.word	0x200009f0
 8002754:	40026000 	.word	0x40026000
 8002758:	20000cf8 	.word	0x20000cf8
 800275c:	e000ed00 	.word	0xe000ed00
 8002760:	08004c40 	.word	0x08004c40
 8002764:	08004c48 	.word	0x08004c48
	...

08002770 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002770:	b510      	push	{r4, lr}
 8002772:	2330      	movs	r3, #48	; 0x30
 8002774:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002778:	4c1d      	ldr	r4, [pc, #116]	; (80027f0 <VectorFC+0x80>)
 800277a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800277e:	2b00      	cmp	r3, #0
 8002780:	db2c      	blt.n	80027dc <VectorFC+0x6c>
 8002782:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002786:	bb4a      	cbnz	r2, 80027dc <VectorFC+0x6c>
  oip->dbg.isr_cnt++;
 8002788:	3301      	adds	r3, #1
 800278a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800278e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <VectorFC+0x84>)
  DMA1->HIFCR = flags << 22U;
  if (dma.streams[7].func)
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <VectorFC+0x88>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	0d89      	lsrs	r1, r1, #22
 800279a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 800279e:	0588      	lsls	r0, r1, #22
 80027a0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[7].func)
 80027a2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80027a4:	b10b      	cbz	r3, 80027aa <VectorFC+0x3a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80027a6:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80027a8:	4798      	blx	r3
 80027aa:	2230      	movs	r2, #48	; 0x30
 80027ac:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80027b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dd14      	ble.n	80027e2 <VectorFC+0x72>
 80027b8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80027bc:	b989      	cbnz	r1, 80027e2 <VectorFC+0x72>
  oip->dbg.isr_cnt--;
 80027be:	3b01      	subs	r3, #1
 80027c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80027c4:	f381 8811 	msr	BASEPRI, r1
 80027c8:	f382 8811 	msr	BASEPRI, r2
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <VectorFC+0x8c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80027d4:	d108      	bne.n	80027e8 <VectorFC+0x78>
 80027d6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80027da:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80027dc:	4808      	ldr	r0, [pc, #32]	; (8002800 <VectorFC+0x90>)
 80027de:	f7fe f9f7 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <VectorFC+0x94>)
 80027e4:	f7fe f9f4 	bl	8000bd0 <chSysHalt>
 80027e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027ec:	f7ff b980 	b.w	8001af0 <__port_irq_epilogue.part.0>
 80027f0:	200009f0 	.word	0x200009f0
 80027f4:	40026000 	.word	0x40026000
 80027f8:	20000cf8 	.word	0x20000cf8
 80027fc:	e000ed00 	.word	0xe000ed00
 8002800:	08004c40 	.word	0x08004c40
 8002804:	08004c48 	.word	0x08004c48
	...

08002810 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002810:	b510      	push	{r4, lr}
 8002812:	2330      	movs	r3, #48	; 0x30
 8002814:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002818:	4c1c      	ldr	r4, [pc, #112]	; (800288c <Vector120+0x7c>)
 800281a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800281e:	2b00      	cmp	r3, #0
 8002820:	db2a      	blt.n	8002878 <Vector120+0x68>
 8002822:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002826:	bb3a      	cbnz	r2, 8002878 <Vector120+0x68>
  oip->dbg.isr_cnt++;
 8002828:	3301      	adds	r3, #1
 800282a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800282e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <Vector120+0x80>)
  DMA2->LIFCR = flags << 0U;
  if (dma.streams[8].func)
 8002834:	4817      	ldr	r0, [pc, #92]	; (8002894 <Vector120+0x84>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002836:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8002838:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800283a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800283e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8002840:	b10a      	cbz	r2, 8002846 <Vector120+0x36>
    dma.streams[8].func(dma.streams[8].param, flags);
 8002842:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8002844:	4790      	blx	r2
 8002846:	2230      	movs	r2, #48	; 0x30
 8002848:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800284c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002850:	2b00      	cmp	r3, #0
 8002852:	dd14      	ble.n	800287e <Vector120+0x6e>
 8002854:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002858:	b989      	cbnz	r1, 800287e <Vector120+0x6e>
  oip->dbg.isr_cnt--;
 800285a:	3b01      	subs	r3, #1
 800285c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002860:	f381 8811 	msr	BASEPRI, r1
 8002864:	f382 8811 	msr	BASEPRI, r2
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <Vector120+0x88>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002870:	d108      	bne.n	8002884 <Vector120+0x74>
 8002872:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002876:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002878:	4808      	ldr	r0, [pc, #32]	; (800289c <Vector120+0x8c>)
 800287a:	f7fe f9a9 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 800287e:	4808      	ldr	r0, [pc, #32]	; (80028a0 <Vector120+0x90>)
 8002880:	f7fe f9a6 	bl	8000bd0 <chSysHalt>
 8002884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002888:	f7ff b932 	b.w	8001af0 <__port_irq_epilogue.part.0>
 800288c:	200009f0 	.word	0x200009f0
 8002890:	40026400 	.word	0x40026400
 8002894:	20000cf8 	.word	0x20000cf8
 8002898:	e000ed00 	.word	0xe000ed00
 800289c:	08004c40 	.word	0x08004c40
 80028a0:	08004c48 	.word	0x08004c48
	...

080028b0 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80028b0:	b510      	push	{r4, lr}
 80028b2:	2330      	movs	r3, #48	; 0x30
 80028b4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80028b8:	4c1d      	ldr	r4, [pc, #116]	; (8002930 <Vector124+0x80>)
 80028ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db2c      	blt.n	800291c <Vector124+0x6c>
 80028c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80028c6:	bb4a      	cbnz	r2, 800291c <Vector124+0x6c>
  oip->dbg.isr_cnt++;
 80028c8:	3301      	adds	r3, #1
 80028ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80028ce:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <Vector124+0x84>)
  DMA2->LIFCR = flags << 6U;
  if (dma.streams[9].func)
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <Vector124+0x88>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80028d6:	6819      	ldr	r1, [r3, #0]
 80028d8:	0989      	lsrs	r1, r1, #6
 80028da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 80028de:	0188      	lsls	r0, r1, #6
 80028e0:	6098      	str	r0, [r3, #8]
  if (dma.streams[9].func)
 80028e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80028e4:	b10b      	cbz	r3, 80028ea <Vector124+0x3a>
    dma.streams[9].func(dma.streams[9].param, flags);
 80028e6:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80028e8:	4798      	blx	r3
 80028ea:	2230      	movs	r2, #48	; 0x30
 80028ec:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80028f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dd14      	ble.n	8002922 <Vector124+0x72>
 80028f8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80028fc:	b989      	cbnz	r1, 8002922 <Vector124+0x72>
  oip->dbg.isr_cnt--;
 80028fe:	3b01      	subs	r3, #1
 8002900:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002904:	f381 8811 	msr	BASEPRI, r1
 8002908:	f382 8811 	msr	BASEPRI, r2
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <Vector124+0x8c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002914:	d108      	bne.n	8002928 <Vector124+0x78>
 8002916:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 800291a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800291c:	4808      	ldr	r0, [pc, #32]	; (8002940 <Vector124+0x90>)
 800291e:	f7fe f957 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <Vector124+0x94>)
 8002924:	f7fe f954 	bl	8000bd0 <chSysHalt>
 8002928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292c:	f7ff b8e0 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002930:	200009f0 	.word	0x200009f0
 8002934:	40026400 	.word	0x40026400
 8002938:	20000cf8 	.word	0x20000cf8
 800293c:	e000ed00 	.word	0xe000ed00
 8002940:	08004c40 	.word	0x08004c40
 8002944:	08004c48 	.word	0x08004c48
	...

08002950 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002950:	b510      	push	{r4, lr}
 8002952:	2330      	movs	r3, #48	; 0x30
 8002954:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002958:	4c1d      	ldr	r4, [pc, #116]	; (80029d0 <Vector128+0x80>)
 800295a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800295e:	2b00      	cmp	r3, #0
 8002960:	db2c      	blt.n	80029bc <Vector128+0x6c>
 8002962:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002966:	bb4a      	cbnz	r2, 80029bc <Vector128+0x6c>
  oip->dbg.isr_cnt++;
 8002968:	3301      	adds	r3, #1
 800296a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800296e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <Vector128+0x84>)
  DMA2->LIFCR = flags << 16U;
  if (dma.streams[10].func)
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <Vector128+0x88>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	0c09      	lsrs	r1, r1, #16
 800297a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800297e:	0408      	lsls	r0, r1, #16
 8002980:	6098      	str	r0, [r3, #8]
  if (dma.streams[10].func)
 8002982:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002984:	b10b      	cbz	r3, 800298a <Vector128+0x3a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8002986:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8002988:	4798      	blx	r3
 800298a:	2230      	movs	r2, #48	; 0x30
 800298c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002990:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002994:	2b00      	cmp	r3, #0
 8002996:	dd14      	ble.n	80029c2 <Vector128+0x72>
 8002998:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800299c:	b989      	cbnz	r1, 80029c2 <Vector128+0x72>
  oip->dbg.isr_cnt--;
 800299e:	3b01      	subs	r3, #1
 80029a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80029a4:	f381 8811 	msr	BASEPRI, r1
 80029a8:	f382 8811 	msr	BASEPRI, r2
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <Vector128+0x8c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80029b4:	d108      	bne.n	80029c8 <Vector128+0x78>
 80029b6:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 80029ba:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80029bc:	4808      	ldr	r0, [pc, #32]	; (80029e0 <Vector128+0x90>)
 80029be:	f7fe f907 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 80029c2:	4808      	ldr	r0, [pc, #32]	; (80029e4 <Vector128+0x94>)
 80029c4:	f7fe f904 	bl	8000bd0 <chSysHalt>
 80029c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029cc:	f7ff b890 	b.w	8001af0 <__port_irq_epilogue.part.0>
 80029d0:	200009f0 	.word	0x200009f0
 80029d4:	40026400 	.word	0x40026400
 80029d8:	20000cf8 	.word	0x20000cf8
 80029dc:	e000ed00 	.word	0xe000ed00
 80029e0:	08004c40 	.word	0x08004c40
 80029e4:	08004c48 	.word	0x08004c48
	...

080029f0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80029f0:	b510      	push	{r4, lr}
 80029f2:	2330      	movs	r3, #48	; 0x30
 80029f4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80029f8:	4c1d      	ldr	r4, [pc, #116]	; (8002a70 <Vector12C+0x80>)
 80029fa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db2c      	blt.n	8002a5c <Vector12C+0x6c>
 8002a02:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002a06:	bb4a      	cbnz	r2, 8002a5c <Vector12C+0x6c>
  oip->dbg.isr_cnt++;
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002a0e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <Vector12C+0x84>)
  DMA2->LIFCR = flags << 22U;
  if (dma.streams[11].func)
 8002a14:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <Vector12C+0x88>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	0d89      	lsrs	r1, r1, #22
 8002a1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8002a1e:	0588      	lsls	r0, r1, #22
 8002a20:	6098      	str	r0, [r3, #8]
  if (dma.streams[11].func)
 8002a22:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8002a24:	b10b      	cbz	r3, 8002a2a <Vector12C+0x3a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8002a26:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002a28:	4798      	blx	r3
 8002a2a:	2230      	movs	r2, #48	; 0x30
 8002a2c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002a30:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	dd14      	ble.n	8002a62 <Vector12C+0x72>
 8002a38:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002a3c:	b989      	cbnz	r1, 8002a62 <Vector12C+0x72>
  oip->dbg.isr_cnt--;
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002a44:	f381 8811 	msr	BASEPRI, r1
 8002a48:	f382 8811 	msr	BASEPRI, r2
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <Vector12C+0x8c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002a54:	d108      	bne.n	8002a68 <Vector12C+0x78>
 8002a56:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002a5a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002a5c:	4808      	ldr	r0, [pc, #32]	; (8002a80 <Vector12C+0x90>)
 8002a5e:	f7fe f8b7 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002a62:	4808      	ldr	r0, [pc, #32]	; (8002a84 <Vector12C+0x94>)
 8002a64:	f7fe f8b4 	bl	8000bd0 <chSysHalt>
 8002a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a6c:	f7ff b840 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002a70:	200009f0 	.word	0x200009f0
 8002a74:	40026400 	.word	0x40026400
 8002a78:	20000cf8 	.word	0x20000cf8
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	08004c40 	.word	0x08004c40
 8002a84:	08004c48 	.word	0x08004c48
	...

08002a90 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002a90:	b510      	push	{r4, lr}
 8002a92:	2330      	movs	r3, #48	; 0x30
 8002a94:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002a98:	4c1c      	ldr	r4, [pc, #112]	; (8002b0c <Vector130+0x7c>)
 8002a9a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db2a      	blt.n	8002af8 <Vector130+0x68>
 8002aa2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002aa6:	bb3a      	cbnz	r2, 8002af8 <Vector130+0x68>
  oip->dbg.isr_cnt++;
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002aae:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <Vector130+0x80>)
  DMA2->HIFCR = flags << 0U;
  if (dma.streams[12].func)
 8002ab4:	4817      	ldr	r0, [pc, #92]	; (8002b14 <Vector130+0x84>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ab6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8002ab8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002aba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002abe:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8002ac0:	b10a      	cbz	r2, 8002ac6 <Vector130+0x36>
    dma.streams[12].func(dma.streams[12].param, flags);
 8002ac2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002ac4:	4790      	blx	r2
 8002ac6:	2230      	movs	r2, #48	; 0x30
 8002ac8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002acc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	dd14      	ble.n	8002afe <Vector130+0x6e>
 8002ad4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002ad8:	b989      	cbnz	r1, 8002afe <Vector130+0x6e>
  oip->dbg.isr_cnt--;
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002ae0:	f381 8811 	msr	BASEPRI, r1
 8002ae4:	f382 8811 	msr	BASEPRI, r2
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <Vector130+0x88>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002af0:	d108      	bne.n	8002b04 <Vector130+0x74>
 8002af2:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002af6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002af8:	4808      	ldr	r0, [pc, #32]	; (8002b1c <Vector130+0x8c>)
 8002afa:	f7fe f869 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002afe:	4808      	ldr	r0, [pc, #32]	; (8002b20 <Vector130+0x90>)
 8002b00:	f7fe f866 	bl	8000bd0 <chSysHalt>
 8002b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b08:	f7fe bff2 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002b0c:	200009f0 	.word	0x200009f0
 8002b10:	40026400 	.word	0x40026400
 8002b14:	20000cf8 	.word	0x20000cf8
 8002b18:	e000ed00 	.word	0xe000ed00
 8002b1c:	08004c40 	.word	0x08004c40
 8002b20:	08004c48 	.word	0x08004c48
	...

08002b30 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002b30:	b510      	push	{r4, lr}
 8002b32:	2330      	movs	r3, #48	; 0x30
 8002b34:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002b38:	4c1d      	ldr	r4, [pc, #116]	; (8002bb0 <Vector150+0x80>)
 8002b3a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db2c      	blt.n	8002b9c <Vector150+0x6c>
 8002b42:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002b46:	bb4a      	cbnz	r2, 8002b9c <Vector150+0x6c>
  oip->dbg.isr_cnt++;
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002b4e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <Vector150+0x84>)
  DMA2->HIFCR = flags << 6U;
  if (dma.streams[13].func)
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <Vector150+0x88>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	0989      	lsrs	r1, r1, #6
 8002b5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8002b5e:	0188      	lsls	r0, r1, #6
 8002b60:	60d8      	str	r0, [r3, #12]
  if (dma.streams[13].func)
 8002b62:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8002b64:	b10b      	cbz	r3, 8002b6a <Vector150+0x3a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8002b66:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8002b68:	4798      	blx	r3
 8002b6a:	2230      	movs	r2, #48	; 0x30
 8002b6c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002b70:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	dd14      	ble.n	8002ba2 <Vector150+0x72>
 8002b78:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002b7c:	b989      	cbnz	r1, 8002ba2 <Vector150+0x72>
  oip->dbg.isr_cnt--;
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002b84:	f381 8811 	msr	BASEPRI, r1
 8002b88:	f382 8811 	msr	BASEPRI, r2
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <Vector150+0x8c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002b94:	d108      	bne.n	8002ba8 <Vector150+0x78>
 8002b96:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002b9a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002b9c:	4808      	ldr	r0, [pc, #32]	; (8002bc0 <Vector150+0x90>)
 8002b9e:	f7fe f817 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002ba2:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <Vector150+0x94>)
 8002ba4:	f7fe f814 	bl	8000bd0 <chSysHalt>
 8002ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bac:	f7fe bfa0 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002bb0:	200009f0 	.word	0x200009f0
 8002bb4:	40026400 	.word	0x40026400
 8002bb8:	20000cf8 	.word	0x20000cf8
 8002bbc:	e000ed00 	.word	0xe000ed00
 8002bc0:	08004c40 	.word	0x08004c40
 8002bc4:	08004c48 	.word	0x08004c48
	...

08002bd0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	2330      	movs	r3, #48	; 0x30
 8002bd4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002bd8:	4c1d      	ldr	r4, [pc, #116]	; (8002c50 <Vector154+0x80>)
 8002bda:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db2c      	blt.n	8002c3c <Vector154+0x6c>
 8002be2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002be6:	bb4a      	cbnz	r2, 8002c3c <Vector154+0x6c>
  oip->dbg.isr_cnt++;
 8002be8:	3301      	adds	r3, #1
 8002bea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002bee:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <Vector154+0x84>)
  DMA2->HIFCR = flags << 16U;
  if (dma.streams[14].func)
 8002bf4:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <Vector154+0x88>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	0c09      	lsrs	r1, r1, #16
 8002bfa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 8002bfe:	0408      	lsls	r0, r1, #16
 8002c00:	60d8      	str	r0, [r3, #12]
  if (dma.streams[14].func)
 8002c02:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002c04:	b10b      	cbz	r3, 8002c0a <Vector154+0x3a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8002c06:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8002c08:	4798      	blx	r3
 8002c0a:	2230      	movs	r2, #48	; 0x30
 8002c0c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002c10:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	dd14      	ble.n	8002c42 <Vector154+0x72>
 8002c18:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002c1c:	b989      	cbnz	r1, 8002c42 <Vector154+0x72>
  oip->dbg.isr_cnt--;
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002c24:	f381 8811 	msr	BASEPRI, r1
 8002c28:	f382 8811 	msr	BASEPRI, r2
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <Vector154+0x8c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002c34:	d108      	bne.n	8002c48 <Vector154+0x78>
 8002c36:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002c3a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002c3c:	4808      	ldr	r0, [pc, #32]	; (8002c60 <Vector154+0x90>)
 8002c3e:	f7fd ffc7 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002c42:	4808      	ldr	r0, [pc, #32]	; (8002c64 <Vector154+0x94>)
 8002c44:	f7fd ffc4 	bl	8000bd0 <chSysHalt>
 8002c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4c:	f7fe bf50 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002c50:	200009f0 	.word	0x200009f0
 8002c54:	40026400 	.word	0x40026400
 8002c58:	20000cf8 	.word	0x20000cf8
 8002c5c:	e000ed00 	.word	0xe000ed00
 8002c60:	08004c40 	.word	0x08004c40
 8002c64:	08004c48 	.word	0x08004c48
	...

08002c70 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002c70:	b510      	push	{r4, lr}
 8002c72:	2330      	movs	r3, #48	; 0x30
 8002c74:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002c78:	4c1e      	ldr	r4, [pc, #120]	; (8002cf4 <Vector158+0x84>)
 8002c7a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	db2d      	blt.n	8002cde <Vector158+0x6e>
 8002c82:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002c86:	bb52      	cbnz	r2, 8002cde <Vector158+0x6e>
  oip->dbg.isr_cnt++;
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002c8e:	f382 8811 	msr	BASEPRI, r2
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <Vector158+0x88>)
  DMA2->HIFCR = flags << 22U;
  if (dma.streams[15].func)
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <Vector158+0x8c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	0d89      	lsrs	r1, r1, #22
 8002c9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 8002c9e:	0588      	lsls	r0, r1, #22
 8002ca0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[15].func)
 8002ca2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8002ca4:	b113      	cbz	r3, 8002cac <Vector158+0x3c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8002ca6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 8002caa:	4798      	blx	r3
 8002cac:	2230      	movs	r2, #48	; 0x30
 8002cae:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002cb2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	dd14      	ble.n	8002ce4 <Vector158+0x74>
 8002cba:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002cbe:	b989      	cbnz	r1, 8002ce4 <Vector158+0x74>
  oip->dbg.isr_cnt--;
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002cc6:	f381 8811 	msr	BASEPRI, r1
 8002cca:	f382 8811 	msr	BASEPRI, r2
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <Vector158+0x90>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002cd6:	d108      	bne.n	8002cea <Vector158+0x7a>
 8002cd8:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8002cdc:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002cde:	4809      	ldr	r0, [pc, #36]	; (8002d04 <Vector158+0x94>)
 8002ce0:	f7fd ff76 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002ce4:	4808      	ldr	r0, [pc, #32]	; (8002d08 <Vector158+0x98>)
 8002ce6:	f7fd ff73 	bl	8000bd0 <chSysHalt>
 8002cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cee:	f7fe beff 	b.w	8001af0 <__port_irq_epilogue.part.0>
 8002cf2:	bf00      	nop
 8002cf4:	200009f0 	.word	0x200009f0
 8002cf8:	40026400 	.word	0x40026400
 8002cfc:	20000cf8 	.word	0x20000cf8
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	08004c40 	.word	0x08004c40
 8002d08:	08004c48 	.word	0x08004c48
 8002d0c:	00000000 	.word	0x00000000

08002d10 <VectorC4>:
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	2130      	movs	r1, #48	; 0x30
 8002d14:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002d18:	4c7d      	ldr	r4, [pc, #500]	; (8002f10 <VectorC4+0x200>)
 8002d1a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f2c0 80e5 	blt.w	8002eee <VectorC4+0x1de>
 8002d24:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	f040 80e0 	bne.w	8002eee <VectorC4+0x1de>
  oip->dbg.isr_cnt++;
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002d34:	f382 8811 	msr	BASEPRI, r2
  I2C_TypeDef *dp = i2cp->i2c;
 8002d38:	4a76      	ldr	r2, [pc, #472]	; (8002f14 <VectorC4+0x204>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002d3a:	4877      	ldr	r0, [pc, #476]	; (8002f18 <VectorC4+0x208>)
  I2C_TypeDef *dp = i2cp->i2c;
 8002d3c:	6b55      	ldr	r5, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8002d3e:	69ab      	ldr	r3, [r5, #24]
  uint32_t event = dp->SR1;
 8002d40:	696e      	ldr	r6, [r5, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002d42:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8002d46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002d4a:	4283      	cmp	r3, r0
 8002d4c:	d836      	bhi.n	8002dbc <VectorC4+0xac>
 8002d4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d52:	d90f      	bls.n	8002d74 <VectorC4+0x64>
 8002d54:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d80d      	bhi.n	8002d7a <VectorC4+0x6a>
 8002d5e:	e8df f003 	tbb	[pc, r3]
 8002d62:	5942      	.short	0x5942
 8002d64:	0c0c0c0c 	.word	0x0c0c0c0c
 8002d68:	0c0c6f0c 	.word	0x0c0c6f0c
 8002d6c:	0c0c0c0c 	.word	0x0c0c0c0c
 8002d70:	0c0c      	.short	0x0c0c
 8002d72:	74          	.byte	0x74
 8002d73:	00          	.byte	0x00
 8002d74:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8002d78:	d035      	beq.n	8002de6 <VectorC4+0xd6>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8002d7a:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 8002d7e:	bf18      	it	ne
 8002d80:	69ab      	ldrne	r3, [r5, #24]
 8002d82:	2230      	movs	r2, #48	; 0x30
 8002d84:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002d88:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f340 80b1 	ble.w	8002ef4 <VectorC4+0x1e4>
 8002d92:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002d96:	2900      	cmp	r1, #0
 8002d98:	f040 80ac 	bne.w	8002ef4 <VectorC4+0x1e4>
  oip->dbg.isr_cnt--;
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002da2:	f381 8811 	msr	BASEPRI, r1
 8002da6:	f382 8811 	msr	BASEPRI, r2
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <VectorC4+0x20c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002db2:	f040 80a2 	bne.w	8002efa <VectorC4+0x1ea>
 8002db6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002dbc:	4858      	ldr	r0, [pc, #352]	; (8002f20 <VectorC4+0x210>)
 8002dbe:	4283      	cmp	r3, r0
 8002dc0:	d01d      	beq.n	8002dfe <VectorC4+0xee>
 8002dc2:	3002      	adds	r0, #2
 8002dc4:	4283      	cmp	r3, r0
 8002dc6:	d1d8      	bne.n	8002d7a <VectorC4+0x6a>
    (void)dp->DR; /* Clear BTF.*/
 8002dc8:	692b      	ldr	r3, [r5, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8002dca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d064      	beq.n	8002e9e <VectorC4+0x18e>
      i2cp->addr |= 0x01;
 8002dd4:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002dd6:	682b      	ldr	r3, [r5, #0]
      i2cp->addr |= 0x01;
 8002dd8:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002ddc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8002de0:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8002de2:	602b      	str	r3, [r5, #0]
      return;
 8002de4:	e7cd      	b.n	8002d82 <VectorC4+0x72>
    if ((i2cp->addr >> 8) > 0) {
 8002de6:	8c13      	ldrh	r3, [r2, #32]
 8002de8:	0a1a      	lsrs	r2, r3, #8
 8002dea:	d02c      	beq.n	8002e46 <VectorC4+0x136>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002dec:	f002 0206 	and.w	r2, r2, #6
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002dfa:	612b      	str	r3, [r5, #16]
 8002dfc:	e7bd      	b.n	8002d7a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002dfe:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002e00:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8002e06:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e08:	606b      	str	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]
    break;
 8002e12:	e7b2      	b.n	8002d7a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e14:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002e16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8002e1c:	680b      	ldr	r3, [r1, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e1e:	606a      	str	r2, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8002e28:	686a      	ldr	r2, [r5, #4]
 8002e2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e2e:	606a      	str	r2, [r5, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d8a1      	bhi.n	8002d7a <VectorC4+0x6a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8002e36:	682b      	ldr	r3, [r5, #0]
 8002e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e3c:	602b      	str	r3, [r5, #0]
 8002e3e:	e79c      	b.n	8002d7a <VectorC4+0x6a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8002e40:	8c13      	ldrh	r3, [r2, #32]
 8002e42:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8002e46:	612b      	str	r3, [r5, #16]
    break;
 8002e48:	e797      	b.n	8002d7a <VectorC4+0x6a>
  dmaStreamDisable(i2cp->dmatx);
 8002e4a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  dp->CR1 = I2C_CR1_SWRST;
 8002e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e50:	602b      	str	r3, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 8002e52:	6801      	ldr	r1, [r0, #0]
  dp->CR1 = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	602b      	str	r3, [r5, #0]
  dp->CR2 = 0;
 8002e58:	606b      	str	r3, [r5, #4]
  dp->SR1 = 0;
 8002e5a:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002e5c:	680b      	ldr	r3, [r1, #0]
 8002e5e:	f023 031f 	bic.w	r3, r3, #31
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	680b      	ldr	r3, [r1, #0]
 8002e66:	07db      	lsls	r3, r3, #31
 8002e68:	d4fc      	bmi.n	8002e64 <VectorC4+0x154>
 8002e6a:	f890 c009 	ldrb.w	ip, [r0, #9]
  dmaStreamDisable(i2cp->dmarx);
 8002e6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002e70:	6842      	ldr	r2, [r0, #4]
 8002e72:	233d      	movs	r3, #61	; 0x3d
 8002e74:	fa03 f30c 	lsl.w	r3, r3, ip
 8002e78:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002e7a:	680a      	ldr	r2, [r1, #0]
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	f023 031f 	bic.w	r3, r3, #31
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	6813      	ldr	r3, [r2, #0]
 8002e86:	07db      	lsls	r3, r3, #31
 8002e88:	d4fc      	bmi.n	8002e84 <VectorC4+0x174>
 8002e8a:	684a      	ldr	r2, [r1, #4]
 8002e8c:	7a49      	ldrb	r1, [r1, #9]
 8002e8e:	233d      	movs	r3, #61	; 0x3d
 8002e90:	408b      	lsls	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e94:	686b      	ldr	r3, [r5, #4]
 8002e96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e9a:	606b      	str	r3, [r5, #4]
    break;
 8002e9c:	e76d      	b.n	8002d7a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002e9e:	686b      	ldr	r3, [r5, #4]
 8002ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea4:	606b      	str	r3, [r5, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002ea6:	682b      	ldr	r3, [r5, #0]
 8002ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eac:	602b      	str	r3, [r5, #0]
 8002eae:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002eb2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	dd23      	ble.n	8002f02 <VectorC4+0x1f2>
 8002eba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002ebe:	bb03      	cbnz	r3, 8002f02 <VectorC4+0x1f2>
  if (*trp != NULL) {
 8002ec0:	69d0      	ldr	r0, [r2, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8002ec8:	b158      	cbz	r0, 8002ee2 <VectorC4+0x1d2>
    *trp = NULL;
 8002eca:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8002ecc:	6283      	str	r3, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 8002ece:	f7fe f8c7 	bl	8001060 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002ed2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	dd16      	ble.n	8002f08 <VectorC4+0x1f8>
 8002eda:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	dd12      	ble.n	8002f08 <VectorC4+0x1f8>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	e745      	b.n	8002d7a <VectorC4+0x6a>
    chSysHalt("SV#8");
 8002eee:	480d      	ldr	r0, [pc, #52]	; (8002f24 <VectorC4+0x214>)
 8002ef0:	f7fd fe6e 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <VectorC4+0x218>)
 8002ef6:	f7fd fe6b 	bl	8000bd0 <chSysHalt>
}
 8002efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002efe:	f7fe bdf7 	b.w	8001af0 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 8002f02:	480a      	ldr	r0, [pc, #40]	; (8002f2c <VectorC4+0x21c>)
 8002f04:	f7fd fe64 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#7");
 8002f08:	4809      	ldr	r0, [pc, #36]	; (8002f30 <VectorC4+0x220>)
 8002f0a:	f7fd fe61 	bl	8000bd0 <chSysHalt>
 8002f0e:	bf00      	nop
 8002f10:	200009f0 	.word	0x200009f0
 8002f14:	2000087c 	.word	0x2000087c
 8002f18:	00030011 	.word	0x00030011
 8002f1c:	e000ed00 	.word	0xe000ed00
 8002f20:	00070082 	.word	0x00070082
 8002f24:	08004c40 	.word	0x08004c40
 8002f28:	08004c48 	.word	0x08004c48
 8002f2c:	08004bf8 	.word	0x08004bf8
 8002f30:	08004c10 	.word	0x08004c10
	...

08002f40 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 8002f40:	495a      	ldr	r1, [pc, #360]	; (80030ac <VectorC8+0x16c>)
 8002f42:	6b4a      	ldr	r2, [r1, #52]	; 0x34
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 8002f46:	6955      	ldr	r5, [r2, #20]
 8002f48:	2330      	movs	r3, #48	; 0x30
 8002f4a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002f4e:	4c58      	ldr	r4, [pc, #352]	; (80030b0 <VectorC8+0x170>)
 8002f50:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f2c0 8098 	blt.w	800308a <VectorC8+0x14a>
 8002f5a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	f040 8093 	bne.w	800308a <VectorC8+0x14a>
  oip->dbg.isr_cnt++;
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2a8      	uxth	r0, r5
 8002f68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002f6c:	f382 8811 	msr	BASEPRI, r2
  dmaStreamDisable(i2cp->dmatx);
 8002f70:	e9d1 760c 	ldrd	r7, r6, [r1, #48]	; 0x30

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002f74:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 8002f78:	683a      	ldr	r2, [r7, #0]
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	6173      	str	r3, [r6, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	f023 031f 	bic.w	r3, r3, #31
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	07db      	lsls	r3, r3, #31
 8002f8a:	d4fc      	bmi.n	8002f86 <VectorC8+0x46>
 8002f8c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8002f90:	687a      	ldr	r2, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8002f92:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002f94:	233d      	movs	r3, #61	; 0x3d
 8002f96:	fa03 f30c 	lsl.w	r3, r3, ip
 8002f9a:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	f023 031f 	bic.w	r3, r3, #31
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	07db      	lsls	r3, r3, #31
 8002faa:	d4fc      	bmi.n	8002fa6 <VectorC8+0x66>
 8002fac:	f897 c009 	ldrb.w	ip, [r7, #9]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	233d      	movs	r3, #61	; 0x3d
 8002fb4:	fa03 f30c 	lsl.w	r3, r3, ip
 8002fb8:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8002fba:	f3c0 2300 	ubfx	r3, r0, #8, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8002fbe:	0582      	lsls	r2, r0, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8002fc0:	bf48      	it	mi
 8002fc2:	f043 0302 	orrmi.w	r3, r3, #2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002fc6:	0547      	lsls	r7, r0, #21
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8002fc8:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002fca:	d50a      	bpl.n	8002fe2 <VectorC8+0xa2>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002fcc:	6872      	ldr	r2, [r6, #4]
 8002fce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fd2:	6072      	str	r2, [r6, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002fd4:	6832      	ldr	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	6032      	str	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002fe0:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8002fe2:	0502      	lsls	r2, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8002fe4:	bf44      	itt	mi
 8002fe6:	f043 0308 	orrmi.w	r3, r3, #8
 8002fea:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002fec:	0447      	lsls	r7, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 8002fee:	bf44      	itt	mi
 8002ff0:	f043 0320 	orrmi.w	r3, r3, #32
 8002ff4:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8002ff6:	04c6      	lsls	r6, r0, #19
 8002ff8:	d41c      	bmi.n	8003034 <VectorC8+0xf4>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002ffa:	042a      	lsls	r2, r5, #16
 8002ffc:	d41f      	bmi.n	800303e <VectorC8+0xfe>
  if (i2cp->errors != I2C_NO_ERROR)
 8002ffe:	bb0b      	cbnz	r3, 8003044 <VectorC8+0x104>
 8003000:	2230      	movs	r2, #48	; 0x30
 8003002:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003006:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800300a:	2b00      	cmp	r3, #0
 800300c:	dd40      	ble.n	8003090 <VectorC8+0x150>
 800300e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003012:	2900      	cmp	r1, #0
 8003014:	d13c      	bne.n	8003090 <VectorC8+0x150>
  oip->dbg.isr_cnt--;
 8003016:	3b01      	subs	r3, #1
 8003018:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800301c:	f381 8811 	msr	BASEPRI, r1
 8003020:	f382 8811 	msr	BASEPRI, r2
 8003024:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <VectorC8+0x174>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800302c:	d133      	bne.n	8003096 <VectorC8+0x156>
 800302e:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->errors |= I2C_PEC_ERROR;
 8003034:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003038:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 800303a:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800303c:	d502      	bpl.n	8003044 <VectorC8+0x104>
    i2cp->errors |= I2C_SMB_ALERT;
 800303e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003042:	608b      	str	r3, [r1, #8]
 8003044:	2330      	movs	r3, #48	; 0x30
 8003046:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800304a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800304e:	2b00      	cmp	r3, #0
 8003050:	dd25      	ble.n	800309e <VectorC8+0x15e>
 8003052:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003056:	bb13      	cbnz	r3, 800309e <VectorC8+0x15e>
  if (*trp != NULL) {
 8003058:	69c8      	ldr	r0, [r1, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 800305a:	2201      	movs	r2, #1
 800305c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003060:	b168      	cbz	r0, 800307e <VectorC8+0x13e>
    tp->u.rdymsg = msg;
 8003062:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 8003066:	61cb      	str	r3, [r1, #28]
    tp->u.rdymsg = msg;
 8003068:	6282      	str	r2, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 800306a:	f7fd fff9 	bl	8001060 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800306e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003072:	2b00      	cmp	r3, #0
 8003074:	dd16      	ble.n	80030a4 <VectorC8+0x164>
 8003076:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800307a:	2b00      	cmp	r3, #0
 800307c:	dd12      	ble.n	80030a4 <VectorC8+0x164>
  oip->dbg.lock_cnt = (cnt_t)0;
 800307e:	2300      	movs	r3, #0
 8003080:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	e7ba      	b.n	8003000 <VectorC8+0xc0>
    chSysHalt("SV#8");
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <VectorC8+0x178>)
 800308c:	f7fd fda0 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#9");
 8003090:	480a      	ldr	r0, [pc, #40]	; (80030bc <VectorC8+0x17c>)
 8003092:	f7fd fd9d 	bl	8000bd0 <chSysHalt>
}
 8003096:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800309a:	f7fe bd29 	b.w	8001af0 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 800309e:	4808      	ldr	r0, [pc, #32]	; (80030c0 <VectorC8+0x180>)
 80030a0:	f7fd fd96 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#7");
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <VectorC8+0x184>)
 80030a6:	f7fd fd93 	bl	8000bd0 <chSysHalt>
 80030aa:	bf00      	nop
 80030ac:	2000087c 	.word	0x2000087c
 80030b0:	200009f0 	.word	0x200009f0
 80030b4:	e000ed00 	.word	0xe000ed00
 80030b8:	08004c40 	.word	0x08004c40
 80030bc:	08004c48 	.word	0x08004c48
 80030c0:	08004bf8 	.word	0x08004bf8
 80030c4:	08004c10 	.word	0x08004c10
	...

080030d0 <chSchDoPreemption>:
  thread_t *otp = __instance_get_currthread(oip);
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <chSchDoPreemption+0x4c>)
  ch_priority_queue_t *p = pqp->next;
 80030d2:	6810      	ldr	r0, [r2, #0]
 80030d4:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 80030d6:	6803      	ldr	r3, [r0, #0]
static void __sch_reschedule_ahead(void) {
 80030d8:	b510      	push	{r4, lr}
  ntp->state = CH_STATE_CURRENT;
 80030da:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80030e2:	2400      	movs	r4, #0
  pqp->next       = p->next;
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80030ea:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio > p->prio));
 80030ec:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 80030ee:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 80030f0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	42a2      	cmp	r2, r4
 80030f6:	d8fb      	bhi.n	80030f0 <chSchDoPreemption+0x20>
  p->prev       = pqp->prev;
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 80030fe:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8003100:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003102:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(ntp, otp);
 8003106:	6a0a      	ldr	r2, [r1, #32]
 8003108:	3b64      	subs	r3, #100	; 0x64
 800310a:	429a      	cmp	r2, r3
 800310c:	d803      	bhi.n	8003116 <chSchDoPreemption+0x46>
}
 800310e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSysSwitch(ntp, otp);
 8003112:	f7fd b8f7 	b.w	8000304 <__port_switch>
 8003116:	4802      	ldr	r0, [pc, #8]	; (8003120 <chSchDoPreemption+0x50>)
 8003118:	f7fd fd5a 	bl	8000bd0 <chSysHalt>
 800311c:	200009f0 	.word	0x200009f0
 8003120:	08004c20 	.word	0x08004c20
	...

08003130 <myprintf>:
static mutex_t mutex_bsp2;


static uint32_t beep_ms = 200;

int myprintf(const char *fmt, ...) {
 8003130:	b40f      	push	{r0, r1, r2, r3}
 8003132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003136:	ed2d 8b06 	vpush	{d8-d10}
 800313a:	b091      	sub	sp, #68	; 0x44
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800313c:	2330      	movs	r3, #48	; 0x30
 800313e:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8003142:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003146:	f8df b258 	ldr.w	fp, [pc, #600]	; 80033a0 <myprintf+0x270>
 800314a:	e9db 3222 	ldrd	r3, r2, [fp, #136]	; 0x88
 800314e:	4313      	orrs	r3, r2
 8003150:	f040 8190 	bne.w	8003474 <myprintf+0x344>

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8003154:	4a90      	ldr	r2, [pc, #576]	; (8003398 <myprintf+0x268>)
  return __sch_get_currthread();
 8003156:	f8db 400c 	ldr.w	r4, [fp, #12]
 800315a:	6890      	ldr	r0, [r2, #8]
  oip->dbg.lock_cnt = (cnt_t)1;
 800315c:	2301      	movs	r3, #1
 800315e:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8003162:	2800      	cmp	r0, #0
 8003164:	f000 8288 	beq.w	8003678 <myprintf+0x548>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8003168:	68a3      	ldr	r3, [r4, #8]
 800316a:	6882      	ldr	r2, [r0, #8]
 800316c:	429a      	cmp	r2, r3
 800316e:	d20b      	bcs.n	8003188 <myprintf+0x58>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8003170:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8003172:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003176:	2b06      	cmp	r3, #6
 8003178:	f000 81cb 	beq.w	8003512 <myprintf+0x3e2>
 800317c:	2b07      	cmp	r3, #7
 800317e:	f000 81ad 	beq.w	80034dc <myprintf+0x3ac>
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 81be 	beq.w	8003504 <myprintf+0x3d4>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 8003188:	4b83      	ldr	r3, [pc, #524]	; (8003398 <myprintf+0x268>)
 800318a:	e003      	b.n	8003194 <myprintf+0x64>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	68a2      	ldr	r2, [r4, #8]
 8003190:	4291      	cmp	r1, r2
 8003192:	d303      	bcc.n	800319c <myprintf+0x6c>
    cp = cp->next;
 8003194:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8003196:	4a80      	ldr	r2, [pc, #512]	; (8003398 <myprintf+0x268>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d1f7      	bne.n	800318c <myprintf+0x5c>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 800319c:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 800319e:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 80031a0:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 80031a2:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 80031a4:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
      currtp->u.wtmtxp = mp;
 80031a6:	4b7c      	ldr	r3, [pc, #496]	; (8003398 <myprintf+0x268>)
 80031a8:	62a3      	str	r3, [r4, #40]	; 0x28
      chSchGoSleepS(CH_STATE_WTMTX);
 80031aa:	2006      	movs	r0, #6
 80031ac:	f7fe f8d8 	bl	8001360 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80031b0:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 825c 	bne.w	8003672 <myprintf+0x542>
 80031ba:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f340 8257 	ble.w	8003672 <myprintf+0x542>
  oip->dbg.lock_cnt = (cnt_t)0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 80031ca:	f383 8811 	msr	BASEPRI, r3
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80031ce:	4648      	mov	r0, r9
  va_list ap;
  int formatted_bytes;
  chMtxLock(&mutex_bsp2);
  va_start(ap, fmt);
 80031d0:	aa21      	add	r2, sp, #132	; 0x84
 80031d2:	f810 1b01 	ldrb.w	r1, [r0], #1
 80031d6:	9209      	str	r2, [sp, #36]	; 0x24
  formatted_bytes = chvprintf(bsp2, fmt, ap);
 80031d8:	9203      	str	r2, [sp, #12]
    if (c == 0) {
 80031da:	2900      	cmp	r1, #0
 80031dc:	f000 836a 	beq.w	80038b4 <myprintf+0x784>
 80031e0:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800339c <myprintf+0x26c>
 80031e4:	461f      	mov	r7, r3
 80031e6:	e00c      	b.n	8003202 <myprintf+0xd2>
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 80031e8:	f8da 3000 	ldr.w	r3, [sl]
      n++;
      continue;
 80031ec:	4681      	mov	r9, r0
      streamPut(chp, (uint8_t)c);
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	486a      	ldr	r0, [pc, #424]	; (800339c <myprintf+0x26c>)
      n++;
 80031f2:	3701      	adds	r7, #1
      streamPut(chp, (uint8_t)c);
 80031f4:	4798      	blx	r3
    c = *fmt++;
 80031f6:	4648      	mov	r0, r9
 80031f8:	f810 1b01 	ldrb.w	r1, [r0], #1
    if (c == 0) {
 80031fc:	2900      	cmp	r1, #0
 80031fe:	f000 80e3 	beq.w	80033c8 <myprintf+0x298>
    if (c != '%') {
 8003202:	2925      	cmp	r1, #37	; 0x25
 8003204:	d1f0      	bne.n	80031e8 <myprintf+0xb8>
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    if (*fmt == '-') {
 8003206:	f899 3001 	ldrb.w	r3, [r9, #1]
 800320a:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 800320c:	bf06      	itte	eq
 800320e:	f109 0002 	addeq.w	r0, r9, #2
      left_align = true;
 8003212:	2301      	moveq	r3, #1
    left_align = false;
 8003214:	2300      	movne	r3, #0
 8003216:	9302      	str	r3, [sp, #8]
    }

    /* Sign mode.*/
    do_sign = false;
    if (*fmt == '+') {
 8003218:	7803      	ldrb	r3, [r0, #0]
 800321a:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
    }

    /* Filler mode.*/
    filler = ' ';
    if (*fmt == '0') {
 800321c:	bf03      	ittte	eq
 800321e:	7843      	ldrbeq	r3, [r0, #1]
      do_sign = true;
 8003220:	2501      	moveq	r5, #1
      fmt++;
 8003222:	3001      	addeq	r0, #1
    do_sign = false;
 8003224:	2500      	movne	r5, #0
    if (*fmt == '0') {
 8003226:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8003228:	bf03      	ittte	eq
 800322a:	3001      	addeq	r0, #1
      filler = '0';
 800322c:	461e      	moveq	r6, r3
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 800322e:	7803      	ldrbeq	r3, [r0, #0]
    filler = ' ';
 8003230:	2620      	movne	r6, #32
    if ( *fmt == '*') {
 8003232:	2b2a      	cmp	r3, #42	; 0x2a
 8003234:	d149      	bne.n	80032ca <myprintf+0x19a>
      width = va_arg(ap, int);
      ++fmt;
      c = *fmt++;
 8003236:	7843      	ldrb	r3, [r0, #1]
      width = va_arg(ap, int);
 8003238:	9a03      	ldr	r2, [sp, #12]
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
 800323a:	2b2e      	cmp	r3, #46	; 0x2e
      width = va_arg(ap, int);
 800323c:	f852 4b04 	ldr.w	r4, [r2], #4
      c = *fmt++;
 8003240:	f100 0902 	add.w	r9, r0, #2
    if (c == '.') {
 8003244:	d057      	beq.n	80032f6 <myprintf+0x1c6>
    precision = 0;
 8003246:	f04f 0800 	mov.w	r8, #0
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800324a:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800324e:	294c      	cmp	r1, #76	; 0x4c
 8003250:	d061      	beq.n	8003316 <myprintf+0x1e6>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
 8003252:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8003256:	2934      	cmp	r1, #52	; 0x34
 8003258:	f200 810f 	bhi.w	800347a <myprintf+0x34a>
 800325c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003260:	010d0173 	.word	0x010d0173
 8003264:	010d010d 	.word	0x010d010d
 8003268:	0173010d 	.word	0x0173010d
 800326c:	010d010d 	.word	0x010d010d
 8003270:	010d010d 	.word	0x010d010d
 8003274:	01be010d 	.word	0x01be010d
 8003278:	010d0185 	.word	0x010d0185
 800327c:	010d010d 	.word	0x010d010d
 8003280:	01c1010d 	.word	0x01c1010d
 8003284:	010d010d 	.word	0x010d010d
 8003288:	010d0185 	.word	0x010d0185
 800328c:	010d010d 	.word	0x010d010d
 8003290:	010d010d 	.word	0x010d010d
 8003294:	010d010d 	.word	0x010d010d
 8003298:	010d010d 	.word	0x010d010d
 800329c:	01f9010d 	.word	0x01f9010d
 80032a0:	010d0173 	.word	0x010d0173
 80032a4:	010d01e5 	.word	0x010d01e5
 80032a8:	0173010d 	.word	0x0173010d
 80032ac:	010d010d 	.word	0x010d010d
 80032b0:	010d010d 	.word	0x010d010d
 80032b4:	01be010d 	.word	0x01be010d
 80032b8:	010d0185 	.word	0x010d0185
 80032bc:	01c4010d 	.word	0x01c4010d
 80032c0:	01c1010d 	.word	0x01c1010d
 80032c4:	010d010d 	.word	0x010d010d
 80032c8:	0185      	.short	0x0185
        c = *fmt++;
 80032ca:	f100 0901 	add.w	r9, r0, #1
        if (c == 0) {
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d07a      	beq.n	80033c8 <myprintf+0x298>
      width = 0;
 80032d2:	2400      	movs	r4, #0
 80032d4:	e007      	b.n	80032e6 <myprintf+0x1b6>
        c = *fmt++;
 80032d6:	f819 3b01 	ldrb.w	r3, [r9], #1
          width = width * 10 + c;
 80032da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80032de:	eb02 0444 	add.w	r4, r2, r4, lsl #1
        if (c == 0) {
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d070      	beq.n	80033c8 <myprintf+0x298>
        if (c >= '0' && c <= '9') {
 80032e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	2a09      	cmp	r2, #9
 80032ee:	d9f2      	bls.n	80032d6 <myprintf+0x1a6>
    if (c == '.') {
 80032f0:	2b2e      	cmp	r3, #46	; 0x2e
 80032f2:	9a03      	ldr	r2, [sp, #12]
 80032f4:	d1a7      	bne.n	8003246 <myprintf+0x116>
      c = *fmt++;
 80032f6:	f899 3000 	ldrb.w	r3, [r9]
      if (c == 0) {
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d064      	beq.n	80033c8 <myprintf+0x298>
      if (c == '*') {
 80032fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003300:	d150      	bne.n	80033a4 <myprintf+0x274>
        c = *fmt++;
 8003302:	f899 3001 	ldrb.w	r3, [r9, #1]
        precision = va_arg(ap, int);
 8003306:	f852 8b04 	ldr.w	r8, [r2], #4
    if (c == 'l' || c == 'L') {
 800330a:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800330e:	294c      	cmp	r1, #76	; 0x4c
        c = *fmt++;
 8003310:	f109 0902 	add.w	r9, r9, #2
    if (c == 'l' || c == 'L') {
 8003314:	d19d      	bne.n	8003252 <myprintf+0x122>
      c = *fmt++;
 8003316:	f819 3b01 	ldrb.w	r3, [r9], #1
      if (c == 0) {
 800331a:	2b00      	cmp	r3, #0
 800331c:	d054      	beq.n	80033c8 <myprintf+0x298>
    switch (c) {
 800331e:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8003322:	2934      	cmp	r1, #52	; 0x34
 8003324:	f200 80a9 	bhi.w	800347a <myprintf+0x34a>
 8003328:	e8df f011 	tbh	[pc, r1, lsl #1]
 800332c:	00a7010d 	.word	0x00a7010d
 8003330:	00a700a7 	.word	0x00a700a7
 8003334:	010d00a7 	.word	0x010d00a7
 8003338:	00a700a7 	.word	0x00a700a7
 800333c:	00a700a7 	.word	0x00a700a7
 8003340:	015800a7 	.word	0x015800a7
 8003344:	00a7011f 	.word	0x00a7011f
 8003348:	00a700a7 	.word	0x00a700a7
 800334c:	015b00a7 	.word	0x015b00a7
 8003350:	00a700a7 	.word	0x00a700a7
 8003354:	00a7011f 	.word	0x00a7011f
 8003358:	00a700a7 	.word	0x00a700a7
 800335c:	00a700a7 	.word	0x00a700a7
 8003360:	00a700a7 	.word	0x00a700a7
 8003364:	00a700a7 	.word	0x00a700a7
 8003368:	019300a7 	.word	0x019300a7
 800336c:	00a7010d 	.word	0x00a7010d
 8003370:	00a7017f 	.word	0x00a7017f
 8003374:	010d00a7 	.word	0x010d00a7
 8003378:	00a700a7 	.word	0x00a700a7
 800337c:	00a700a7 	.word	0x00a700a7
 8003380:	015800a7 	.word	0x015800a7
 8003384:	00a7011f 	.word	0x00a7011f
 8003388:	015e00a7 	.word	0x015e00a7
 800338c:	015b00a7 	.word	0x015b00a7
 8003390:	00a700a7 	.word	0x00a700a7
 8003394:	011f      	.short	0x011f
 8003396:	bf00      	nop
 8003398:	20000d7c 	.word	0x20000d7c
 800339c:	20000934 	.word	0x20000934
 80033a0:	200009f0 	.word	0x200009f0
      c = *fmt++;
 80033a4:	f109 0901 	add.w	r9, r9, #1
    precision = 0;
 80033a8:	f04f 0800 	mov.w	r8, #0
        while (c >= '0' && c <= '9') {
 80033ac:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80033b0:	b2c9      	uxtb	r1, r1
 80033b2:	2909      	cmp	r1, #9
 80033b4:	f63f af49 	bhi.w	800324a <myprintf+0x11a>
          c = *fmt++;
 80033b8:	f819 3b01 	ldrb.w	r3, [r9], #1
          precision = precision * 10 + c;
 80033bc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80033c0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
          if (c == 0) {
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f1      	bne.n	80033ac <myprintf+0x27c>
 80033c8:	463e      	mov	r6, r7
 80033ca:	f8db 100c 	ldr.w	r1, [fp, #12]
 80033ce:	2330      	movs	r3, #48	; 0x30
 80033d0:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80033d4:	e9db 3222 	ldrd	r3, r2, [fp, #136]	; 0x88
 80033d8:	431a      	orrs	r2, r3
 80033da:	d14b      	bne.n	8003474 <myprintf+0x344>
  return (bool)(qp->next != qp);
 80033dc:	4da9      	ldr	r5, [pc, #676]	; (8003684 <myprintf+0x554>)
 80033de:	6828      	ldr	r0, [r5, #0]
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 80033e0:	68eb      	ldr	r3, [r5, #12]
  oip->dbg.lock_cnt = (cnt_t)1;
 80033e2:	2401      	movs	r4, #1

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80033e4:	42a8      	cmp	r0, r5
 80033e6:	f8cb 408c 	str.w	r4, [fp, #140]	; 0x8c
    currtp->mtxlist = mp->next;
 80033ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 80033ec:	f000 8173 	beq.w	80036d6 <myprintf+0x5a6>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 80033f0:	6c0c      	ldr	r4, [r1, #64]	; 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 80033f2:	b14b      	cbz	r3, 8003408 <myprintf+0x2d8>
 80033f4:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <myprintf+0x2d2>
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	4294      	cmp	r4, r2
 80033fe:	bf38      	it	cc
 8003400:	4614      	movcc	r4, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 8003402:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f5      	bne.n	80033f4 <myprintf+0x2c4>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8003408:	608c      	str	r4, [r1, #8]
  qp->next       = p->next;
 800340a:	6803      	ldr	r3, [r0, #0]
 800340c:	4a9d      	ldr	r2, [pc, #628]	; (8003684 <myprintf+0x554>)
  qp->next->prev = qp;
 800340e:	605a      	str	r2, [r3, #4]
  qp->next       = p->next;
 8003410:	6013      	str	r3, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8003412:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      tp->mtxlist = mp;
 8003414:	63c2      	str	r2, [r0, #60]	; 0x3c
      mp->next = tp->mtxlist;
 8003416:	e9c2 0302 	strd	r0, r3, [r2, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800341a:	f7fd fe21 	bl	8001060 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800341e:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8243 	bne.w	80038ae <myprintf+0x77e>
 8003428:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800342c:	2b00      	cmp	r3, #0
 800342e:	f340 823e 	ble.w	80038ae <myprintf+0x77e>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8003432:	f8db 2000 	ldr.w	r2, [fp]
 8003436:	f8db 300c 	ldr.w	r3, [fp, #12]
 800343a:	6892      	ldr	r2, [r2, #8]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	429a      	cmp	r2, r3
 8003440:	d90b      	bls.n	800345a <myprintf+0x32a>
    __sch_reschedule_ahead();
 8003442:	f7ff fe45 	bl	80030d0 <chSchDoPreemption>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003446:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 8111 	bne.w	8003672 <myprintf+0x542>
 8003450:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8003454:	2b00      	cmp	r3, #0
 8003456:	f340 810c 	ble.w	8003672 <myprintf+0x542>
  oip->dbg.lock_cnt = (cnt_t)0;
 800345a:	2300      	movs	r3, #0
 800345c:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8003460:	f383 8811 	msr	BASEPRI, r3
  va_end(ap);
  chMtxUnlock(&mutex_bsp2);

  return formatted_bytes;
}
 8003464:	4630      	mov	r0, r6
 8003466:	b011      	add	sp, #68	; 0x44
 8003468:	ecbd 8b06 	vpop	{d8-d10}
 800346c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	b004      	add	sp, #16
 8003472:	4770      	bx	lr
    chSysHalt("SV#4");
 8003474:	4884      	ldr	r0, [pc, #528]	; (8003688 <myprintf+0x558>)
 8003476:	f7fd fbab 	bl	8000bd0 <chSysHalt>
        l = va_arg(ap, unsigned int);
      }
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 800347a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
 800347e:	9b02      	ldr	r3, [sp, #8]
      break;
 8003480:	9203      	str	r2, [sp, #12]
 8003482:	3c01      	subs	r4, #1
 8003484:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
    if (left_align == false) {
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 80ef 	bne.w	800366c <myprintf+0x53c>
      width = -width;
    }
    if (width < 0) {
 800348e:	9b02      	ldr	r3, [sp, #8]
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2c00      	cmp	r4, #0
      width = -width;
 8003494:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8003498:	f300 8120 	bgt.w	80036dc <myprintf+0x5ac>
    if (left_align == false) {
 800349c:	ad0a      	add	r5, sp, #40	; 0x28
 800349e:	9b01      	ldr	r3, [sp, #4]
 80034a0:	1c5c      	adds	r4, r3, #1
 80034a2:	442c      	add	r4, r5
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 80034a4:	f8da 3000 	ldr.w	r3, [sl]
 80034a8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4650      	mov	r0, sl
 80034b0:	4798      	blx	r3
    while (--i >= 0) {
 80034b2:	42a5      	cmp	r5, r4
 80034b4:	d1f6      	bne.n	80034a4 <myprintf+0x374>
      n++;
 80034b6:	9b01      	ldr	r3, [sp, #4]
 80034b8:	3701      	adds	r7, #1
 80034ba:	443b      	add	r3, r7
 80034bc:	461f      	mov	r7, r3
    }

    while (width) {
 80034be:	f1b8 0f00 	cmp.w	r8, #0
 80034c2:	f43f ae98 	beq.w	80031f6 <myprintf+0xc6>
 80034c6:	4644      	mov	r4, r8
      streamPut(chp, (uint8_t)filler);
 80034c8:	f8da 3000 	ldr.w	r3, [sl]
 80034cc:	4631      	mov	r1, r6
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4650      	mov	r0, sl
 80034d2:	4798      	blx	r3
    while (width) {
 80034d4:	3c01      	subs	r4, #1
 80034d6:	d1f7      	bne.n	80034c8 <myprintf+0x398>
      n++;
 80034d8:	4447      	add	r7, r8
 80034da:	e68c      	b.n	80031f6 <myprintf+0xc6>
  p->prev->next = p->next;
 80034dc:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 80034e0:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80034e2:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80034e4:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 80034e6:	462b      	mov	r3, r5
 80034e8:	e003      	b.n	80034f2 <myprintf+0x3c2>
  } while ((cp != qp) &&
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	6882      	ldr	r2, [r0, #8]
 80034ee:	4291      	cmp	r1, r2
 80034f0:	d302      	bcc.n	80034f8 <myprintf+0x3c8>
    cp = cp->next;
 80034f2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 80034f4:	429d      	cmp	r5, r3
 80034f6:	d1f8      	bne.n	80034ea <myprintf+0x3ba>
  tp->prev       = cp->prev;
 80034f8:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 80034fa:	6003      	str	r3, [r0, #0]
  tp->prev       = cp->prev;
 80034fc:	6042      	str	r2, [r0, #4]
  tp->prev->next = tp;
 80034fe:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8003500:	6058      	str	r0, [r3, #4]
}
 8003502:	e641      	b.n	8003188 <myprintf+0x58>
  p->prev->next = p->next;
 8003504:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003508:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800350a:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 800350c:	f7fd fda8 	bl	8001060 <chSchReadyI.isra.0>
          break;
 8003510:	e63a      	b.n	8003188 <myprintf+0x58>
  p->prev->next = p->next;
 8003512:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8003516:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8003518:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800351a:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 800351c:	462b      	mov	r3, r5
 800351e:	e003      	b.n	8003528 <myprintf+0x3f8>
  } while ((cp != qp) &&
 8003520:	6899      	ldr	r1, [r3, #8]
 8003522:	6882      	ldr	r2, [r0, #8]
 8003524:	4291      	cmp	r1, r2
 8003526:	d302      	bcc.n	800352e <myprintf+0x3fe>
    cp = cp->next;
 8003528:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 800352a:	429d      	cmp	r5, r3
 800352c:	d1f8      	bne.n	8003520 <myprintf+0x3f0>
  tp->prev       = cp->prev;
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	6042      	str	r2, [r0, #4]
  tp->next       = cp;
 8003532:	6003      	str	r3, [r0, #0]
  tp->prev->next = tp;
 8003534:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8003536:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8003538:	68a8      	ldr	r0, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 800353a:	68a3      	ldr	r3, [r4, #8]
 800353c:	6882      	ldr	r2, [r0, #8]
 800353e:	4293      	cmp	r3, r2
 8003540:	f63f ae16 	bhi.w	8003170 <myprintf+0x40>
 8003544:	e620      	b.n	8003188 <myprintf+0x58>
        l = va_arg(ap, int);
 8003546:	4613      	mov	r3, r2
 8003548:	f853 1b04 	ldr.w	r1, [r3], #4
 800354c:	9303      	str	r3, [sp, #12]
      if (l < 0) {
 800354e:	2900      	cmp	r1, #0
 8003550:	f2c0 80c7 	blt.w	80036e2 <myprintf+0x5b2>
        if (do_sign) {
 8003554:	2d00      	cmp	r5, #0
 8003556:	f000 81a0 	beq.w	800389a <myprintf+0x76a>
          *p++ = '+';
 800355a:	232b      	movs	r3, #43	; 0x2b
 800355c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003560:	ab0a      	add	r3, sp, #40	; 0x28
 8003562:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 8003566:	9304      	str	r3, [sp, #16]
 8003568:	e0c3      	b.n	80036f2 <myprintf+0x5c2>
    switch (c) {
 800356a:	f04f 0c10 	mov.w	ip, #16
        l = va_arg(ap, unsigned int);
 800356e:	4613      	mov	r3, r2
  q = p + MAX_FILLER;
 8003570:	f10d 0e33 	add.w	lr, sp, #51	; 0x33
        l = va_arg(ap, unsigned int);
 8003574:	f853 1b04 	ldr.w	r1, [r3], #4
 8003578:	9303      	str	r3, [sp, #12]
  q = p + MAX_FILLER;
 800357a:	4672      	mov	r2, lr
 800357c:	e000      	b.n	8003580 <myprintf+0x450>
 800357e:	462a      	mov	r2, r5
    i = (int)(l % radix);
 8003580:	4608      	mov	r0, r1
 8003582:	fbb1 f1fc 	udiv	r1, r1, ip
 8003586:	fb0c 0511 	mls	r5, ip, r1, r0
    i += '0';
 800358a:	f105 0330 	add.w	r3, r5, #48	; 0x30
    if (i > '9') {
 800358e:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8003590:	bfc8      	it	gt
 8003592:	f105 0337 	addgt.w	r3, r5, #55	; 0x37
    *--q = i;
 8003596:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8003598:	4560      	cmp	r0, ip
    *--q = i;
 800359a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800359e:	f102 35ff 	add.w	r5, r2, #4294967295
  } while ((ll /= radix) != 0);
 80035a2:	d2ec      	bcs.n	800357e <myprintf+0x44e>
  i = (int)(p + MAX_FILLER - q);
 80035a4:	a90a      	add	r1, sp, #40	; 0x28
 80035a6:	ebae 0505 	sub.w	r5, lr, r5
 80035aa:	9104      	str	r1, [sp, #16]
 80035ac:	e001      	b.n	80035b2 <myprintf+0x482>
    *p++ = *q++;
 80035ae:	f812 3b01 	ldrb.w	r3, [r2], #1
 80035b2:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 80035b6:	4572      	cmp	r2, lr
 80035b8:	d1f9      	bne.n	80035ae <myprintf+0x47e>
        i--;
 80035ba:	1e6b      	subs	r3, r5, #1
    if ((width -= i) < 0) {
 80035bc:	1b64      	subs	r4, r4, r5
    s = tmpbuf;
 80035be:	9d04      	ldr	r5, [sp, #16]
        i--;
 80035c0:	9301      	str	r3, [sp, #4]
    if (left_align == false) {
 80035c2:	9b02      	ldr	r3, [sp, #8]
 80035c4:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
 80035c8:	b91b      	cbnz	r3, 80035d2 <myprintf+0x4a2>
    if (width < 0) {
 80035ca:	2c00      	cmp	r4, #0
      width = -width;
 80035cc:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 80035d0:	dc5e      	bgt.n	8003690 <myprintf+0x560>
    while (--i >= 0) {
 80035d2:	9b01      	ldr	r3, [sp, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f6bf af62 	bge.w	800349e <myprintf+0x36e>
 80035da:	e770      	b.n	80034be <myprintf+0x38e>
    switch (c) {
 80035dc:	f04f 0c08 	mov.w	ip, #8
 80035e0:	e7c5      	b.n	800356e <myprintf+0x43e>
 80035e2:	f04f 0c0a 	mov.w	ip, #10
 80035e6:	e7c2      	b.n	800356e <myprintf+0x43e>
      if ((s = va_arg(ap, char *)) == 0) {
 80035e8:	4613      	mov	r3, r2
 80035ea:	f853 5b04 	ldr.w	r5, [r3], #4
 80035ee:	9303      	str	r3, [sp, #12]
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	f000 8156 	beq.w	80038a2 <myprintf+0x772>
      for (p = s; *p && (--precision >= 0); p++)
 80035f6:	782a      	ldrb	r2, [r5, #0]
      if (precision == 0) {
 80035f8:	f1b8 0f00 	cmp.w	r8, #0
 80035fc:	f040 813a 	bne.w	8003874 <myprintf+0x744>
      for (p = s; *p && (--precision >= 0); p++)
 8003600:	2a00      	cmp	r2, #0
 8003602:	f000 813c 	beq.w	800387e <myprintf+0x74e>
 8003606:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 800360a:	462a      	mov	r2, r5
 800360c:	e003      	b.n	8003616 <myprintf+0x4e6>
 800360e:	1aab      	subs	r3, r5, r2
 8003610:	eb13 0f08 	cmn.w	r3, r8
 8003614:	d403      	bmi.n	800361e <myprintf+0x4ee>
 8003616:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f7      	bne.n	800360e <myprintf+0x4de>
    i = (int)(p - s);
 800361e:	1b52      	subs	r2, r2, r5
        i--;
 8003620:	1e53      	subs	r3, r2, #1
    if ((width -= i) < 0) {
 8003622:	1aa4      	subs	r4, r4, r2
        i--;
 8003624:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8003626:	2620      	movs	r6, #32
 8003628:	e7cb      	b.n	80035c2 <myprintf+0x492>
      f = (float) va_arg(ap, double);
 800362a:	3207      	adds	r2, #7
 800362c:	f022 0307 	bic.w	r3, r2, #7
 8003630:	e8f3 0102 	ldrd	r0, r1, [r3], #8
 8003634:	9303      	str	r3, [sp, #12]
 8003636:	f7fd fa2d 	bl	8000a94 <__aeabi_d2f>
 800363a:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 800363e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003646:	d479      	bmi.n	800373c <myprintf+0x60c>
        if (do_sign) {
 8003648:	2d00      	cmp	r5, #0
 800364a:	f000 8122 	beq.w	8003892 <myprintf+0x762>
          *p++ = '+';
 800364e:	232b      	movs	r3, #43	; 0x2b
 8003650:	e077      	b.n	8003742 <myprintf+0x612>
      *p++ = va_arg(ap, int);
 8003652:	f852 3b04 	ldr.w	r3, [r2], #4
 8003656:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    if (left_align == false) {
 800365a:	9b02      	ldr	r3, [sp, #8]
      *p++ = va_arg(ap, int);
 800365c:	9203      	str	r2, [sp, #12]
 800365e:	3c01      	subs	r4, #1
      filler = ' ';
 8003660:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8003662:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
    if (left_align == false) {
 8003666:	2b00      	cmp	r3, #0
 8003668:	f43f af11 	beq.w	800348e <myprintf+0x35e>
 800366c:	2300      	movs	r3, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	e714      	b.n	800349c <myprintf+0x36c>
    chSysHalt("SV#5");
 8003672:	4806      	ldr	r0, [pc, #24]	; (800368c <myprintf+0x55c>)
 8003674:	f7fd faac 	bl	8000bd0 <chSysHalt>
    mp->next = currtp->mtxlist;
 8003678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    mp->owner = currtp;
 800367a:	4a02      	ldr	r2, [pc, #8]	; (8003684 <myprintf+0x554>)
    currtp->mtxlist = mp;
 800367c:	63e2      	str	r2, [r4, #60]	; 0x3c
    mp->next = currtp->mtxlist;
 800367e:	e9c2 4302 	strd	r4, r3, [r2, #8]
 8003682:	e59f      	b.n	80031c4 <myprintf+0x94>
 8003684:	20000d7c 	.word	0x20000d7c
 8003688:	08004c08 	.word	0x08004c08
 800368c:	08004c30 	.word	0x08004c30
      width = -width;
 8003690:	4644      	mov	r4, r8
      if ((*s == '-' || *s == '+') && filler == '0') {
 8003692:	7829      	ldrb	r1, [r5, #0]
 8003694:	292d      	cmp	r1, #45	; 0x2d
 8003696:	d011      	beq.n	80036bc <myprintf+0x58c>
 8003698:	292b      	cmp	r1, #43	; 0x2b
 800369a:	d00f      	beq.n	80036bc <myprintf+0x58c>
        streamPut(chp, (uint8_t)filler);
 800369c:	f8da 3000 	ldr.w	r3, [sl]
 80036a0:	4631      	mov	r1, r6
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4650      	mov	r0, sl
 80036a6:	4798      	blx	r3
      } while (++width != 0);
 80036a8:	f118 0801 	adds.w	r8, r8, #1
 80036ac:	d1f6      	bne.n	800369c <myprintf+0x56c>
    while (--i >= 0) {
 80036ae:	9b01      	ldr	r3, [sp, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	eba7 0704 	sub.w	r7, r7, r4
 80036b6:	f6bf aef2 	bge.w	800349e <myprintf+0x36e>
 80036ba:	e59c      	b.n	80031f6 <myprintf+0xc6>
      if ((*s == '-' || *s == '+') && filler == '0') {
 80036bc:	2e30      	cmp	r6, #48	; 0x30
 80036be:	d1ed      	bne.n	800369c <myprintf+0x56c>
    while (--i >= 0) {
 80036c0:	9b01      	ldr	r3, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
 80036c2:	f8da 2000 	ldr.w	r2, [sl]
 80036c6:	4882      	ldr	r0, [pc, #520]	; (80038d0 <myprintf+0x7a0>)
 80036c8:	68d2      	ldr	r2, [r2, #12]
    while (--i >= 0) {
 80036ca:	3b01      	subs	r3, #1
        streamPut(chp, (uint8_t)*s++);
 80036cc:	3501      	adds	r5, #1
        n++;
 80036ce:	3701      	adds	r7, #1
    while (--i >= 0) {
 80036d0:	9301      	str	r3, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
 80036d2:	4790      	blx	r2
        i--;
 80036d4:	e7e2      	b.n	800369c <myprintf+0x56c>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 80036d6:	4b7f      	ldr	r3, [pc, #508]	; (80038d4 <myprintf+0x7a4>)
 80036d8:	609a      	str	r2, [r3, #8]
void __dbg_check_unlock(void) {
 80036da:	e6be      	b.n	800345a <myprintf+0x32a>
      width = -width;
 80036dc:	4644      	mov	r4, r8
    if (width < 0) {
 80036de:	ad0a      	add	r5, sp, #40	; 0x28
 80036e0:	e7d7      	b.n	8003692 <myprintf+0x562>
        *p++ = '-';
 80036e2:	232d      	movs	r3, #45	; 0x2d
 80036e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        l = -l;
 80036e8:	ab0a      	add	r3, sp, #40	; 0x28
 80036ea:	4249      	negs	r1, r1
        *p++ = '-';
 80036ec:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 80036f0:	9304      	str	r3, [sp, #16]
  q = p + MAX_FILLER;
 80036f2:	f105 030b 	add.w	r3, r5, #11
    i = (int)(l % radix);
 80036f6:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 80038dc <myprintf+0x7ac>
  q = p + MAX_FILLER;
 80036fa:	4618      	mov	r0, r3
    i = (int)(l % radix);
 80036fc:	fbae c201 	umull	ip, r2, lr, r1
 8003700:	08d2      	lsrs	r2, r2, #3
 8003702:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8003706:	4694      	mov	ip, r2
 8003708:	eba1 0248 	sub.w	r2, r1, r8, lsl #1
    i += '0';
 800370c:	3230      	adds	r2, #48	; 0x30
    i = (int)(l % radix);
 800370e:	4688      	mov	r8, r1
    *--q = i;
 8003710:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8003712:	f1b8 0f09 	cmp.w	r8, #9
    *--q = i;
 8003716:	f800 2d01 	strb.w	r2, [r0, #-1]!
    l /= radix;
 800371a:	4661      	mov	r1, ip
  } while ((ll /= radix) != 0);
 800371c:	dcee      	bgt.n	80036fc <myprintf+0x5cc>
  i = (int)(p + MAX_FILLER - q);
 800371e:	1a1b      	subs	r3, r3, r0
 8003720:	442b      	add	r3, r5
 8003722:	e001      	b.n	8003728 <myprintf+0x5f8>
    *p++ = *q++;
 8003724:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003728:	f805 2b01 	strb.w	r2, [r5], #1
  while (--i);
 800372c:	42ab      	cmp	r3, r5
 800372e:	d1f9      	bne.n	8003724 <myprintf+0x5f4>
    i = (int)(p - s);
 8003730:	9d04      	ldr	r5, [sp, #16]
 8003732:	1b5b      	subs	r3, r3, r5
    if ((width -= i) < 0) {
 8003734:	1ae4      	subs	r4, r4, r3
        i--;
 8003736:	3b01      	subs	r3, #1
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	e742      	b.n	80035c2 <myprintf+0x492>
        f = -f;
 800373c:	eeb1 8a48 	vneg.f32	s16, s16
        *p++ = '-';
 8003740:	232d      	movs	r3, #45	; 0x2d
          *p++ = '+';
 8003742:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003746:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	ab0a      	add	r3, sp, #40	; 0x28
 800374e:	9304      	str	r3, [sp, #16]
      p = ftoa(p, f, precision);
 8003750:	ee18 0a10 	vmov	r0, s16
 8003754:	f7fd f91e 	bl	8000994 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8003758:	f108 38ff 	add.w	r8, r8, #4294967295
 800375c:	f1b8 0f08 	cmp.w	r8, #8
      p = ftoa(p, f, precision);
 8003760:	ec41 0b19 	vmov	d9, r0, r1
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8003764:	d87c      	bhi.n	8003860 <myprintf+0x730>
  precision = pow10[precision - 1];
 8003766:	4b5c      	ldr	r3, [pc, #368]	; (80038d8 <myprintf+0x7a8>)
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8003768:	4d5c      	ldr	r5, [pc, #368]	; (80038dc <myprintf+0x7ac>)
  precision = pow10[precision - 1];
 800376a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800376e:	9307      	str	r3, [sp, #28]
  l = (long)((num - l) * precision);
 8003770:	4618      	mov	r0, r3
 8003772:	4698      	mov	r8, r3
 8003774:	f7fd f8ec 	bl	8000950 <__aeabi_ui2d>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8003778:	4643      	mov	r3, r8
 800377a:	fba5 3503 	umull	r3, r5, r5, r3
  l = (long)((num - l) * precision);
 800377e:	ec41 0b1a 	vmov	d10, r0, r1
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8003782:	08ed      	lsrs	r5, r5, #3
  l = (long)num;
 8003784:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  q = p + MAX_FILLER;
 8003788:	9b01      	ldr	r3, [sp, #4]
    i = (int)(l % radix);
 800378a:	f8df c150 	ldr.w	ip, [pc, #336]	; 80038dc <myprintf+0x7ac>
  l = (long)num;
 800378e:	edcd 7a05 	vstr	s15, [sp, #20]
  q = p + MAX_FILLER;
 8003792:	f103 0e0b 	add.w	lr, r3, #11
  l = num;
 8003796:	ee17 1a90 	vmov	r1, s15
  q = p + MAX_FILLER;
 800379a:	4672      	mov	r2, lr
    i = (int)(l % radix);
 800379c:	fbac 0301 	umull	r0, r3, ip, r1
 80037a0:	08db      	lsrs	r3, r3, #3
 80037a2:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 80037a6:	4618      	mov	r0, r3
 80037a8:	eba1 0348 	sub.w	r3, r1, r8, lsl #1
    i += '0';
 80037ac:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 80037ae:	4688      	mov	r8, r1
    *--q = i;
 80037b0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80037b2:	f1b8 0f09 	cmp.w	r8, #9
    *--q = i;
 80037b6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 80037ba:	4601      	mov	r1, r0
  } while ((ll /= radix) != 0);
 80037bc:	d8ee      	bhi.n	800379c <myprintf+0x66c>
  i = (int)(p + MAX_FILLER - q);
 80037be:	9901      	ldr	r1, [sp, #4]
 80037c0:	ebae 0e02 	sub.w	lr, lr, r2
 80037c4:	eb01 000e 	add.w	r0, r1, lr
 80037c8:	e001      	b.n	80037ce <myprintf+0x69e>
    *p++ = *q++;
 80037ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80037ce:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 80037d2:	4281      	cmp	r1, r0
 80037d4:	d1f9      	bne.n	80037ca <myprintf+0x69a>
 80037d6:	9b01      	ldr	r3, [sp, #4]
  l = (long)((num - l) * precision);
 80037d8:	9805      	ldr	r0, [sp, #20]
 80037da:	f10e 3eff 	add.w	lr, lr, #4294967295
  *p++ = '.';
 80037de:	4473      	add	r3, lr
 80037e0:	460a      	mov	r2, r1
 80037e2:	9306      	str	r3, [sp, #24]
 80037e4:	232e      	movs	r3, #46	; 0x2e
 80037e6:	f802 3b0c 	strb.w	r3, [r2], #12
 80037ea:	9201      	str	r2, [sp, #4]
  l = (long)((num - l) * precision);
 80037ec:	f7fd f8c0 	bl	8000970 <__aeabi_i2d>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	ec51 0b19 	vmov	r0, r1, d9
 80037f8:	f7fc ff6c 	bl	80006d4 <__aeabi_dsub>
 80037fc:	ec53 2b1a 	vmov	r2, r3, d10
 8003800:	f7fc fe3a 	bl	8000478 <__aeabi_dmul>
 8003804:	f7fd f91e 	bl	8000a44 <__aeabi_d2iz>
    ll = num;
 8003808:	9907      	ldr	r1, [sp, #28]
  *p++ = '.';
 800380a:	9b06      	ldr	r3, [sp, #24]
    i = (int)(l % radix);
 800380c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 80038dc <myprintf+0x7ac>
    ll = num;
 8003810:	2909      	cmp	r1, #9
 8003812:	bf98      	it	ls
 8003814:	4605      	movls	r5, r0
  q = p + MAX_FILLER;
 8003816:	9901      	ldr	r1, [sp, #4]
  *p++ = '.';
 8003818:	3302      	adds	r3, #2
    i = (int)(l % radix);
 800381a:	fbae c200 	umull	ip, r2, lr, r0
 800381e:	08d2      	lsrs	r2, r2, #3
 8003820:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8003824:	4694      	mov	ip, r2
 8003826:	eba0 0248 	sub.w	r2, r0, r8, lsl #1
    i += '0';
 800382a:	3230      	adds	r2, #48	; 0x30
    l /= radix;
 800382c:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 800382e:	46ac      	mov	ip, r5
    *--q = i;
 8003830:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8003832:	fbae 8505 	umull	r8, r5, lr, r5
 8003836:	f1bc 0f09 	cmp.w	ip, #9
    *--q = i;
 800383a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  } while ((ll /= radix) != 0);
 800383e:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 8003842:	d8ea      	bhi.n	800381a <myprintf+0x6ea>
  i = (int)(p + MAX_FILLER - q);
 8003844:	9801      	ldr	r0, [sp, #4]
 8003846:	9d06      	ldr	r5, [sp, #24]
 8003848:	1a40      	subs	r0, r0, r1
 800384a:	3002      	adds	r0, #2
 800384c:	4405      	add	r5, r0
 800384e:	4628      	mov	r0, r5
 8003850:	e001      	b.n	8003856 <myprintf+0x726>
    *p++ = *q++;
 8003852:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003856:	f803 2b01 	strb.w	r2, [r3], #1
  while (--i);
 800385a:	4283      	cmp	r3, r0
 800385c:	d1f9      	bne.n	8003852 <myprintf+0x722>
 800385e:	e767      	b.n	8003730 <myprintf+0x600>
 8003860:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80038c8 <myprintf+0x798>
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <myprintf+0x7b0>)
 8003866:	4d1f      	ldr	r5, [pc, #124]	; (80038e4 <myprintf+0x7b4>)
 8003868:	9307      	str	r3, [sp, #28]
 800386a:	eeb0 aa47 	vmov.f32	s20, s14
 800386e:	eef0 aa67 	vmov.f32	s21, s15
 8003872:	e787      	b.n	8003784 <myprintf+0x654>
      for (p = s; *p && (--precision >= 0); p++)
 8003874:	b11a      	cbz	r2, 800387e <myprintf+0x74e>
 8003876:	f1b8 0801 	subs.w	r8, r8, #1
 800387a:	f57f aec6 	bpl.w	800360a <myprintf+0x4da>
    if (left_align == false) {
 800387e:	9b02      	ldr	r3, [sp, #8]
 8003880:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
 8003884:	b91b      	cbnz	r3, 800388e <myprintf+0x75e>
    if (width < 0) {
 8003886:	2c00      	cmp	r4, #0
      width = -width;
 8003888:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 800388c:	dc14      	bgt.n	80038b8 <myprintf+0x788>
    if (left_align == false) {
 800388e:	2620      	movs	r6, #32
 8003890:	e615      	b.n	80034be <myprintf+0x38e>
    p = tmpbuf;
 8003892:	ab0a      	add	r3, sp, #40	; 0x28
 8003894:	9304      	str	r3, [sp, #16]
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	e75a      	b.n	8003750 <myprintf+0x620>
 800389a:	ab0a      	add	r3, sp, #40	; 0x28
 800389c:	9304      	str	r3, [sp, #16]
 800389e:	461d      	mov	r5, r3
 80038a0:	e727      	b.n	80036f2 <myprintf+0x5c2>
        s = "(null)";
 80038a2:	4d11      	ldr	r5, [pc, #68]	; (80038e8 <myprintf+0x7b8>)
      if (precision == 0) {
 80038a4:	f1b8 0f00 	cmp.w	r8, #0
 80038a8:	f43f aead 	beq.w	8003606 <myprintf+0x4d6>
 80038ac:	e7e3      	b.n	8003876 <myprintf+0x746>
    chSysHalt("SV#11");
 80038ae:	480f      	ldr	r0, [pc, #60]	; (80038ec <myprintf+0x7bc>)
 80038b0:	f7fd f98e 	bl	8000bd0 <chSysHalt>
  int n = 0;
 80038b4:	460e      	mov	r6, r1
 80038b6:	e588      	b.n	80033ca <myprintf+0x29a>
    if (width < 0) {
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295
      width = -width;
 80038bc:	4644      	mov	r4, r8
    if (width < 0) {
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	2620      	movs	r6, #32
 80038c2:	e6e6      	b.n	8003692 <myprintf+0x562>
 80038c4:	f3af 8000 	nop.w
 80038c8:	00000000 	.word	0x00000000
 80038cc:	41cdcd65 	.word	0x41cdcd65
 80038d0:	20000934 	.word	0x20000934
 80038d4:	20000d7c 	.word	0x20000d7c
 80038d8:	08004f10 	.word	0x08004f10
 80038dc:	cccccccd 	.word	0xcccccccd
 80038e0:	3b9aca00 	.word	0x3b9aca00
 80038e4:	05f5e100 	.word	0x05f5e100
 80038e8:	08004c50 	.word	0x08004c50
 80038ec:	08004c18 	.word	0x08004c18

080038f0 <ThdSerial>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <ThdSerial+0x7c>)
 80038f2:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <ThdSerial+0x80>)
 80038f4:	68db      	ldr	r3, [r3, #12]
   115200,
   0,
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD2, &my_config);
 80038f6:	491f      	ldr	r1, [pc, #124]	; (8003974 <ThdSerial+0x84>)
 80038f8:	481f      	ldr	r0, [pc, #124]	; (8003978 <ThdSerial+0x88>)
   // myprintf(bsp2, "%.3f %.3f %.3f\n\r", adc_get_temp_internal(), adc_get_temp_heater(), adc_get_current());



   // Getting data from Serial Driver with a timeout.
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 80038fa:	4d20      	ldr	r5, [pc, #128]	; (800397c <ThdSerial+0x8c>)
 80038fc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003994 <ThdSerial+0xa4>
static THD_FUNCTION(ThdSerial, arg) {
 8003900:	b580      	push	{r7, lr}
 8003902:	61da      	str	r2, [r3, #28]
  sdStart(&SD2, &my_config);
 8003904:	f7fe fa1c 	bl	8001d40 <sdStart.isra.0>
  myprintf("ThdSerial\n");
 8003908:	481d      	ldr	r0, [pc, #116]	; (8003980 <ThdSerial+0x90>)
        heater_disable();
      } else if(tkn == '1'){
        myprintf("Enable heater..\n");
        heater_setTempDegC(50.0);
      } else if(tkn == '2'){
        myprintf("Beep\n");
 800390a:	4f1e      	ldr	r7, [pc, #120]	; (8003984 <ThdSerial+0x94>)
  myprintf("ThdSerial\n");
 800390c:	f7ff fc10 	bl	8003130 <myprintf>
      sdPut(&SD2, tkn);
 8003910:	f105 0624 	add.w	r6, r5, #36	; 0x24
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8003914:	4628      	mov	r0, r5
 8003916:	f242 7110 	movw	r1, #10000	; 0x2710
 800391a:	f7fd fe99 	bl	8001650 <iqGetTimeout>
    if(tkn != MSG_TIMEOUT) {
 800391e:	1c43      	adds	r3, r0, #1
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8003920:	4604      	mov	r4, r0
    if(tkn != MSG_TIMEOUT) {
 8003922:	d0f7      	beq.n	8003914 <ThdSerial+0x24>
      sdPut(&SD2, tkn);
 8003924:	b2c1      	uxtb	r1, r0
 8003926:	f04f 32ff 	mov.w	r2, #4294967295
 800392a:	4630      	mov	r0, r6
 800392c:	f7fd ffa8 	bl	8001880 <oqPutTimeout>
      if(tkn == '0'){
 8003930:	2c30      	cmp	r4, #48	; 0x30
 8003932:	d00a      	beq.n	800394a <ThdSerial+0x5a>
      } else if(tkn == '1'){
 8003934:	2c31      	cmp	r4, #49	; 0x31
 8003936:	d010      	beq.n	800395a <ThdSerial+0x6a>
      } else if(tkn == '2'){
 8003938:	2c32      	cmp	r4, #50	; 0x32
 800393a:	d1eb      	bne.n	8003914 <ThdSerial+0x24>
        myprintf("Beep\n");
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff fbf7 	bl	8003130 <myprintf>
        beep_ms = 10;
 8003942:	230a      	movs	r3, #10
 8003944:	f8c8 3000 	str.w	r3, [r8]
 8003948:	e7e4      	b.n	8003914 <ThdSerial+0x24>
        myprintf("  Disable heater\n");
 800394a:	480f      	ldr	r0, [pc, #60]	; (8003988 <ThdSerial+0x98>)
 800394c:	f7ff fbf0 	bl	8003130 <myprintf>
  //To ensure soft start and no current limit overshoot
  palSetPad(GPIOA, GPIOA_heater_enable);
}

void heater_disable(void){
  palClearPad(GPIOA, GPIOA_heater_enable);
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <ThdSerial+0x9c>)
 8003952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003956:	835a      	strh	r2, [r3, #26]
}
 8003958:	e7dc      	b.n	8003914 <ThdSerial+0x24>
        myprintf("Enable heater..\n");
 800395a:	480d      	ldr	r0, [pc, #52]	; (8003990 <ThdSerial+0xa0>)
 800395c:	f7ff fbe8 	bl	8003130 <myprintf>
void dacPutChannelX(DACDriver *dacp, dacchannel_t channel, dacsample_t sample) {

  osalDbgCheck(channel < (dacchannel_t)DAC_MAX_CHANNELS);
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");

  dac_lld_put_channel(dacp, channel, sample);
 8003960:	f640 302b 	movw	r0, #2859	; 0xb2b
 8003964:	f7fd f97c 	bl	8000c60 <dac_lld_put_channel.constprop.0>
}
 8003968:	e7d4      	b.n	8003914 <ThdSerial+0x24>
 800396a:	bf00      	nop
 800396c:	200009f0 	.word	0x200009f0
 8003970:	08004c58 	.word	0x08004c58
 8003974:	08004ef8 	.word	0x08004ef8
 8003978:	20000934 	.word	0x20000934
 800397c:	20000940 	.word	0x20000940
 8003980:	08004c68 	.word	0x08004c68
 8003984:	08004c9c 	.word	0x08004c9c
 8003988:	08004c74 	.word	0x08004c74
 800398c:	40020000 	.word	0x40020000
 8003990:	08004c88 	.word	0x08004c88
 8003994:	20000800 	.word	0x20000800
	...

080039a0 <ThdBlinker>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThdBlinker, 128);
static THD_FUNCTION(ThdBlinker, arg) {
 80039a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80039a4:	4ca8      	ldr	r4, [pc, #672]	; (8003c48 <ThdBlinker+0x2a8>)
 80039a6:	4aa9      	ldr	r2, [pc, #676]	; (8003c4c <ThdBlinker+0x2ac>)
 80039a8:	68e3      	ldr	r3, [r4, #12]
  (void)arg;
  chRegSetThreadName("blinker");
  chThdSleepMilliseconds(100);
  myprintf("ThdBlinker\n");

  for(float i=150; i>30; i=i*0.9){
 80039aa:	4da9      	ldr	r5, [pc, #676]	; (8003c50 <ThdBlinker+0x2b0>)
 80039ac:	61da      	str	r2, [r3, #28]
static THD_FUNCTION(ThdBlinker, arg) {
 80039ae:	b083      	sub	sp, #12
  chThdSleepMilliseconds(100);
 80039b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039b4:	f7fd ffcc 	bl	8001950 <chThdSleep>
  myprintf("ThdBlinker\n");
 80039b8:	48a6      	ldr	r0, [pc, #664]	; (8003c54 <ThdBlinker+0x2b4>)
    palSetPad(GPIOB, GPIOB_LED1);
 80039ba:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003c6c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 80039be:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8003c5c <ThdBlinker+0x2bc>
  myprintf("ThdBlinker\n");
 80039c2:	f7ff fbb5 	bl	8003130 <myprintf>
    palSetPad(GPIOB, GPIOB_LED1);
 80039c6:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  myprintf("ThdBlinker\n");
 80039ca:	2310      	movs	r3, #16
 80039cc:	9301      	str	r3, [sp, #4]
    palSetPad(GPIOB, GPIOB_LED1);
 80039ce:	4647      	mov	r7, r8
    chThdSleepMilliseconds(i);
 80039d0:	f240 36e7 	movw	r6, #999	; 0x3e7
    palSetPad(GPIOB, GPIOB_LED1);
 80039d4:	f8ab 7018 	strh.w	r7, [fp, #24]
    chThdSleepMilliseconds(i);
 80039d8:	4628      	mov	r0, r5
    palClearPad(GPIOC, GPIOC_LED2);
 80039da:	f8aa 701a 	strh.w	r7, [sl, #26]
    chThdSleepMilliseconds(i);
 80039de:	f000 ff87 	bl	80048f0 <__aeabi_f2ulz>
 80039e2:	0082      	lsls	r2, r0, #2
 80039e4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 80039e8:	1813      	adds	r3, r2, r0
 80039ea:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 80039ee:	eb41 020c 	adc.w	r2, r1, ip
 80039f2:	00d2      	lsls	r2, r2, #3
 80039f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	1a1b      	subs	r3, r3, r0
 80039fc:	eb62 0201 	sbc.w	r2, r2, r1
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1818      	adds	r0, r3, r0
 8003a0a:	eb41 0102 	adc.w	r1, r1, r2
 8003a0e:	0103      	lsls	r3, r0, #4
 8003a10:	0109      	lsls	r1, r1, #4
 8003a12:	ea41 7110 	orr.w	r1, r1, r0, lsr #28
 8003a16:	1998      	adds	r0, r3, r6
 8003a18:	f141 0100 	adc.w	r1, r1, #0
 8003a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a20:	2300      	movs	r3, #0
 8003a22:	f7fd f887 	bl	8000b34 <__aeabi_uldivmod>
 8003a26:	f04f 0930 	mov.w	r9, #48	; 0x30
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003a30:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f040 80f6 	bne.w	8003c26 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003a40:	2800      	cmp	r0, #0
 8003a42:	f000 80f3 	beq.w	8003c2c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003a46:	9000      	str	r0, [sp, #0]
 8003a48:	2008      	movs	r0, #8
 8003a4a:	f7fd fcb9 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003a4e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8003a52:	9900      	ldr	r1, [sp, #0]
 8003a54:	2301      	movs	r3, #1
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	f040 80e2 	bne.w	8003c20 <ThdBlinker+0x280>
 8003a5c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003a60:	2800      	cmp	r0, #0
 8003a62:	f340 80dd 	ble.w	8003c20 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003a66:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003a6a:	f382 8811 	msr	BASEPRI, r2
    palClearPad(GPIOB, GPIOB_LED1);
 8003a6e:	f8ab 801a 	strh.w	r8, [fp, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 8003a72:	f8aa 8018 	strh.w	r8, [sl, #24]
 8003a76:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003a7a:	e9d4 2022 	ldrd	r2, r0, [r4, #136]	; 0x88
 8003a7e:	4302      	orrs	r2, r0
 8003a80:	f040 80d1 	bne.w	8003c26 <ThdBlinker+0x286>
 8003a84:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8003a86:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003a8a:	f7fd fc99 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003a8e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 80c4 	bne.w	8003c20 <ThdBlinker+0x280>
 8003a98:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003a9c:	2a00      	cmp	r2, #0
 8003a9e:	f340 80bf 	ble.w	8003c20 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003aa2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003aa6:	f383 8811 	msr	BASEPRI, r3
  for(float i=150; i>30; i=i*0.9){
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7fc ff72 	bl	8000994 <__aeabi_f2d>
 8003ab0:	a361      	add	r3, pc, #388	; (adr r3, 8003c38 <ThdBlinker+0x298>)
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f7fc fcdf 	bl	8000478 <__aeabi_dmul>
 8003aba:	f7fc ffeb 	bl	8000a94 <__aeabi_d2f>
 8003abe:	9b01      	ldr	r3, [sp, #4]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	d185      	bne.n	80039d4 <ThdBlinker+0x34>
    chThdSleepMilliseconds(i);
  }
  for(float i=30; i<150; i=i*1.1){
    palSetPad(GPIOB, GPIOB_LED1);
 8003ac8:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 8003acc:	2311      	movs	r3, #17
 8003ace:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8003c6c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8003ad2:	f8df b188 	ldr.w	fp, [pc, #392]	; 8003c5c <ThdBlinker+0x2bc>
  for(float i=30; i<150; i=i*1.1){
 8003ad6:	4e60      	ldr	r6, [pc, #384]	; (8003c58 <ThdBlinker+0x2b8>)
 8003ad8:	9300      	str	r3, [sp, #0]
    palSetPad(GPIOB, GPIOB_LED1);
 8003ada:	46c8      	mov	r8, r9
    chThdSleepMilliseconds(i);
 8003adc:	f242 7510 	movw	r5, #10000	; 0x2710
    palSetPad(GPIOB, GPIOB_LED1);
 8003ae0:	f8aa 8018 	strh.w	r8, [sl, #24]
    chThdSleepMilliseconds(i);
 8003ae4:	4630      	mov	r0, r6
    palClearPad(GPIOC, GPIOC_LED2);
 8003ae6:	f8ab 801a 	strh.w	r8, [fp, #26]
    chThdSleepMilliseconds(i);
 8003aea:	f000 ff01 	bl	80048f0 <__aeabi_f2ulz>
 8003aee:	fba0 0305 	umull	r0, r3, r0, r5
 8003af2:	fb05 3101 	mla	r1, r5, r1, r3
 8003af6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003afa:	18c0      	adds	r0, r0, r3
 8003afc:	f141 0100 	adc.w	r1, r1, #0
 8003b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b04:	2300      	movs	r3, #0
 8003b06:	f7fd f815 	bl	8000b34 <__aeabi_uldivmod>
 8003b0a:	2730      	movs	r7, #48	; 0x30
 8003b0c:	4601      	mov	r1, r0
 8003b0e:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003b12:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f040 8085 	bne.w	8003c26 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003b22:	2800      	cmp	r0, #0
 8003b24:	f000 8082 	beq.w	8003c2c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003b28:	9001      	str	r0, [sp, #4]
 8003b2a:	2008      	movs	r0, #8
 8003b2c:	f7fd fc48 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003b30:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d173      	bne.n	8003c20 <ThdBlinker+0x280>
 8003b38:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	dd6f      	ble.n	8003c20 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003b40:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003b44:	f383 8811 	msr	BASEPRI, r3
    palClearPad(GPIOB, GPIOB_LED1);
 8003b48:	f8aa 901a 	strh.w	r9, [sl, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 8003b4c:	f8ab 9018 	strh.w	r9, [fp, #24]
 8003b50:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003b54:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	d164      	bne.n	8003c26 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	9901      	ldr	r1, [sp, #4]
 8003b60:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003b64:	2008      	movs	r0, #8
 8003b66:	f7fd fc2b 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003b6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d156      	bne.n	8003c20 <ThdBlinker+0x280>
 8003b72:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	dd52      	ble.n	8003c20 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003b7a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003b7e:	f383 8811 	msr	BASEPRI, r3
  for(float i=30; i<150; i=i*1.1){
 8003b82:	4630      	mov	r0, r6
 8003b84:	f7fc ff06 	bl	8000994 <__aeabi_f2d>
 8003b88:	a32d      	add	r3, pc, #180	; (adr r3, 8003c40 <ThdBlinker+0x2a0>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f7fc fc73 	bl	8000478 <__aeabi_dmul>
 8003b92:	f7fc ff7f 	bl	8000a94 <__aeabi_d2f>
 8003b96:	9b00      	ldr	r3, [sp, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	d19f      	bne.n	8003ae0 <ThdBlinker+0x140>
    chThdSleepMilliseconds(i);
  }

  while (true) {
    palSetPad(GPIOB, GPIOB_LED1);
 8003ba0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8003ba4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003c6c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8003ba8:	4e2c      	ldr	r6, [pc, #176]	; (8003c5c <ThdBlinker+0x2bc>)
    palSetPad(GPIOB, GPIOB_LED1);
 8003baa:	46a9      	mov	r9, r5
 8003bac:	f8a8 9018 	strh.w	r9, [r8, #24]
    palClearPad(GPIOC, GPIOC_LED2);
 8003bb0:	f8a6 901a 	strh.w	r9, [r6, #26]
 8003bb4:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003bb8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d132      	bne.n	8003c26 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f242 7110 	movw	r1, #10000	; 0x2710
 8003bc6:	2008      	movs	r0, #8
 8003bc8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003bcc:	f7fd fbf8 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003bd0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003bd4:	bb23      	cbnz	r3, 8003c20 <ThdBlinker+0x280>
 8003bd6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003bda:	2a00      	cmp	r2, #0
 8003bdc:	dd20      	ble.n	8003c20 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003bde:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003be2:	f383 8811 	msr	BASEPRI, r3
    chThdSleepMilliseconds(1000);
    palClearPad(GPIOB, GPIOC_LED2);
 8003be6:	f8a8 501a 	strh.w	r5, [r8, #26]
    palSetPad(GPIOC, GPIOB_LED1);
 8003bea:	8335      	strh	r5, [r6, #24]
 8003bec:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003bf0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d116      	bne.n	8003c26 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f242 7110 	movw	r1, #10000	; 0x2710
 8003bfe:	2008      	movs	r0, #8
 8003c00:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003c04:	f7fd fbdc 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003c08:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c0c:	b943      	cbnz	r3, 8003c20 <ThdBlinker+0x280>
 8003c0e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	dd04      	ble.n	8003c20 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003c16:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003c1a:	f383 8811 	msr	BASEPRI, r3
}
 8003c1e:	e7c5      	b.n	8003bac <ThdBlinker+0x20c>
    chSysHalt("SV#5");
 8003c20:	480f      	ldr	r0, [pc, #60]	; (8003c60 <ThdBlinker+0x2c0>)
 8003c22:	f7fc ffd5 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#4");
 8003c26:	480f      	ldr	r0, [pc, #60]	; (8003c64 <ThdBlinker+0x2c4>)
 8003c28:	f7fc ffd2 	bl	8000bd0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003c2c:	480e      	ldr	r0, [pc, #56]	; (8003c68 <ThdBlinker+0x2c8>)
 8003c2e:	f7fc ffcf 	bl	8000bd0 <chSysHalt>
 8003c32:	bf00      	nop
 8003c34:	f3af 8000 	nop.w
 8003c38:	cccccccd 	.word	0xcccccccd
 8003c3c:	3feccccc 	.word	0x3feccccc
 8003c40:	9999999a 	.word	0x9999999a
 8003c44:	3ff19999 	.word	0x3ff19999
 8003c48:	200009f0 	.word	0x200009f0
 8003c4c:	08004ca4 	.word	0x08004ca4
 8003c50:	43160000 	.word	0x43160000
 8003c54:	08004cac 	.word	0x08004cac
 8003c58:	41f00000 	.word	0x41f00000
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	08004c30 	.word	0x08004c30
 8003c64:	08004c08 	.word	0x08004c08
 8003c68:	08004d68 	.word	0x08004d68
 8003c6c:	40020400 	.word	0x40020400

08003c70 <ThdGNSS>:

/*
 * GNSS (UART1) receive and forward
 */
static THD_WORKING_AREA(waThdGNSS, 128);
static THD_FUNCTION(ThdGNSS, arg) {
 8003c70:	b508      	push	{r3, lr}
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <ThdGNSS+0x28>)
 8003c74:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <ThdGNSS+0x2c>)
 8003c76:	68db      	ldr	r3, [r3, #12]
  (void)arg;
  chRegSetThreadName("GNSS");
  myprintf("ThdGNSS\n");
 8003c78:	4809      	ldr	r0, [pc, #36]	; (8003ca0 <ThdGNSS+0x30>)
 8003c7a:	61da      	str	r2, [r3, #28]
 8003c7c:	f7ff fa58 	bl	8003130 <myprintf>
   9600,
   0,
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD1, &my_config);
 8003c80:	4908      	ldr	r1, [pc, #32]	; (8003ca4 <ThdGNSS+0x34>)
 8003c82:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <ThdGNSS+0x38>)


  while(true){
    /* Getting data from Serial Driver with a timeout. */
    msg_t tkn = sdGetTimeout(&SD1, TIME_MS2I(100));
 8003c84:	4c09      	ldr	r4, [pc, #36]	; (8003cac <ThdGNSS+0x3c>)
  sdStart(&SD1, &my_config);
 8003c86:	f7fe f85b 	bl	8001d40 <sdStart.isra.0>
    msg_t tkn = sdGetTimeout(&SD1, TIME_MS2I(100));
 8003c8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f7fd fcde 	bl	8001650 <iqGetTimeout>
  while(true){
 8003c94:	e7f9      	b.n	8003c8a <ThdGNSS+0x1a>
 8003c96:	bf00      	nop
 8003c98:	200009f0 	.word	0x200009f0
 8003c9c:	08004cb8 	.word	0x08004cb8
 8003ca0:	08004cc0 	.word	0x08004cc0
 8003ca4:	08004f04 	.word	0x08004f04
 8003ca8:	200008b4 	.word	0x200008b4
 8003cac:	200008c0 	.word	0x200008c0

08003cb0 <ThdBeeper>:
/*
 * Piezo beeper
 */

static THD_WORKING_AREA(waThdBeeper, 128);
static THD_FUNCTION(ThdBeeper, arg) {
 8003cb0:	b580      	push	{r7, lr}
  (void)arg;
  myprintf("ThdBeeper\n");
 8003cb2:	483b      	ldr	r0, [pc, #236]	; (8003da0 <ThdBeeper+0xf0>)
 8003cb4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8003db8 <ThdBeeper+0x108>
 8003cb8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8003dbc <ThdBeeper+0x10c>

void piezo_toggle(void){
  palTogglePad(GPIOC, GPIOC_PIEZO_A);
 8003cbc:	4d39      	ldr	r5, [pc, #228]	; (8003da4 <ThdBeeper+0xf4>)
 8003cbe:	f7ff fa37 	bl	8003130 <myprintf>

  while(true){

    if(beep_ms){
 8003cc2:	f8d9 3000 	ldr.w	r3, [r9]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d046      	beq.n	8003d58 <ThdBeeper+0xa8>
      systime_t start = chVTGetSystemTimeX();
      systime_t end = chTimeAddX(start, TIME_MS2I(beep_ms));
 8003cca:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cce:	f240 30e7 	movw	r0, #999	; 0x3e7
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	fbe3 0102 	umlal	r0, r1, r3, r2
 8003cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f7fc ff29 	bl	8000b34 <__aeabi_uldivmod>
 8003ce2:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8003ce6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003cea:	b2bf      	uxth	r7, r7
 8003cec:	d255      	bcs.n	8003d9a <ThdBeeper+0xea>
 8003cee:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8003cf2:	4c2d      	ldr	r4, [pc, #180]	; (8003da8 <ThdBeeper+0xf8>)
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003cf4:	1bdb      	subs	r3, r3, r7
  return systime + (systime_t)interval;
 8003cf6:	b286      	uxth	r6, r0
      while (chTimeIsInRangeX(chVTGetSystemTimeX(), start, end)) {
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	42b3      	cmp	r3, r6
 8003cfc:	bf38      	it	cc
 8003cfe:	f04f 0a30 	movcc.w	sl, #48	; 0x30
 8003d02:	d225      	bcs.n	8003d50 <ThdBeeper+0xa0>
 8003d04:	696b      	ldr	r3, [r5, #20]
 8003d06:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8003d0a:	616b      	str	r3, [r5, #20]
  palTogglePad(GPIOC, GPIOC_PIEZO_B);
 8003d0c:	696b      	ldr	r3, [r5, #20]
 8003d0e:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 8003d12:	616b      	str	r3, [r5, #20]
 8003d14:	f38a 8811 	msr	BASEPRI, sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d18:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d136      	bne.n	8003d8e <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003d20:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003d22:	210a      	movs	r1, #10
 8003d24:	2008      	movs	r0, #8
 8003d26:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003d2a:	f7fd fb49 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d2e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d32:	bb7b      	cbnz	r3, 8003d94 <ThdBeeper+0xe4>
 8003d34:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	dd2b      	ble.n	8003d94 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003d3c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003d48:	1bdb      	subs	r3, r3, r7
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	429e      	cmp	r6, r3
 8003d4e:	d8d9      	bhi.n	8003d04 <ThdBeeper+0x54>
        piezo_toggle();
        chThdSleepMilliseconds(1);
      }
      beep_ms = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c9 3000 	str.w	r3, [r9]
 8003d56:	e000      	b.n	8003d5a <ThdBeeper+0xaa>
 8003d58:	4c13      	ldr	r4, [pc, #76]	; (8003da8 <ThdBeeper+0xf8>)
 8003d5a:	2330      	movs	r3, #48	; 0x30
 8003d5c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d60:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8003d64:	4313      	orrs	r3, r2
 8003d66:	d112      	bne.n	8003d8e <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	2164      	movs	r1, #100	; 0x64
 8003d6c:	2008      	movs	r0, #8
 8003d6e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003d72:	f7fd fb25 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d76:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d7a:	b95b      	cbnz	r3, 8003d94 <ThdBeeper+0xe4>
 8003d7c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003d80:	2a00      	cmp	r2, #0
 8003d82:	dd07      	ble.n	8003d94 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003d84:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	e799      	b.n	8003cc2 <ThdBeeper+0x12>
    chSysHalt("SV#4");
 8003d8e:	4807      	ldr	r0, [pc, #28]	; (8003dac <ThdBeeper+0xfc>)
 8003d90:	f7fc ff1e 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 8003d94:	4806      	ldr	r0, [pc, #24]	; (8003db0 <ThdBeeper+0x100>)
 8003d96:	f7fc ff1b 	bl	8000bd0 <chSysHalt>
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8003d9a:	4806      	ldr	r0, [pc, #24]	; (8003db4 <ThdBeeper+0x104>)
 8003d9c:	f7fc ff18 	bl	8000bd0 <chSysHalt>
 8003da0:	08004ccc 	.word	0x08004ccc
 8003da4:	40020800 	.word	0x40020800
 8003da8:	200009f0 	.word	0x200009f0
 8003dac:	08004c08 	.word	0x08004c08
 8003db0:	08004c30 	.word	0x08004c30
 8003db4:	08004d88 	.word	0x08004d88
 8003db8:	20000800 	.word	0x20000800
 8003dbc:	40014800 	.word	0x40014800

08003dc0 <ThdCntr>:
    chThdSleepMilliseconds(10);
  }
}

static THD_WORKING_AREA(waThdCntr, 128);
static THD_FUNCTION(ThdCntr, arg) {
 8003dc0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  return TIM5_get_capture_reg();
}


void ThdCntrFunc(void) {
  myprintf("ThdCntr\n");
 8003dc4:	486d      	ldr	r0, [pc, #436]	; (8003f7c <ThdCntr+0x1bc>)

  TIM5_init();

  //selftest muxout
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 8003dc6:	4d6e      	ldr	r5, [pc, #440]	; (8003f80 <ThdCntr+0x1c0>)
 8003dc8:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8003fb0 <ThdCntr+0x1f0>
  //default: all 0

  //Programming sequence R4,R3,..,R0 (write to R0 transfers double buffered settings)
  adf_write_reg(ADF4156_reg[4]);
  adf_write_reg(ADF4156_reg[3]);
  adf_write_reg(ADF4156_reg[2]);
 8003dcc:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8003fb4 <ThdCntr+0x1f4>
  adf_write_reg(ADF4156_reg[1]);
  adf_write_reg(ADF4156_reg[0]);
 8003dd0:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8003fb8 <ThdCntr+0x1f8>
 8003dd4:	b083      	sub	sp, #12
  myprintf("ThdCntr\n");
 8003dd6:	f7ff f9ab 	bl	8003130 <myprintf>

//adapted from AN4776
//32bit counter, running at 100MHz
void TIM5_init(void){
#warning debug
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8003dda:	486a      	ldr	r0, [pc, #424]	; (8003f84 <ThdCntr+0x1c4>)

  TIM5->CR2 = 0; //defaults
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <ThdCntr+0x1c8>)
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8003dde:	6c01      	ldr	r1, [r0, #64]	; 0x40

  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max

  TIM5->PSC = 0; //prescaler 1

  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8003de0:	2601      	movs	r6, #1
  TIM5->CR2 = 0; //defaults
 8003de2:	2200      	movs	r2, #0
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8003de4:	f041 0108 	orr.w	r1, r1, #8
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 8003de8:	f04f 34ff 	mov.w	r4, #4294967295
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8003dec:	6401      	str	r1, [r0, #64]	; 0x40
  TIM5->CR2 = 0; //defaults
 8003dee:	605a      	str	r2, [r3, #4]
  TIM5->SMCR = RESET; // Reset the SMCR register
 8003df0:	609a      	str	r2, [r3, #8]
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 8003df2:	62dc      	str	r4, [r3, #44]	; 0x2c
  TIM5->PSC = 0; //prescaler 1
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8003df6:	615e      	str	r6, [r3, #20]

  TIM5->CCER = 0; //all CC channels off
 8003df8:	621a      	str	r2, [r3, #32]

  TIM5->CCMR1 = 0;
 8003dfa:	619a      	str	r2, [r3, #24]
  TIM5->CCMR1 |= TIM_CCMR1_CC1S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 8003dfc:	6999      	ldr	r1, [r3, #24]

  //enable and select int 100M ref
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 8003dfe:	4c63      	ldr	r4, [pc, #396]	; (8003f8c <ThdCntr+0x1cc>)
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 8003e00:	4863      	ldr	r0, [pc, #396]	; (8003f90 <ThdCntr+0x1d0>)
 8003e02:	4331      	orrs	r1, r6
 8003e04:	6199      	str	r1, [r3, #24]
                                   //CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).

  TIM5->CCER |= TIM_CCER_CC1P; //Circuit is sensitive to TIxFP1 falling edge (capture..
 8003e06:	6a19      	ldr	r1, [r3, #32]
 8003e08:	f041 0102 	orr.w	r1, r1, #2
 8003e0c:	6219      	str	r1, [r3, #32]
  TIM5->CCER |= TIM_CCER_CC1E; //CC1 enabled
 8003e0e:	6a19      	ldr	r1, [r3, #32]
 8003e10:	4331      	orrs	r1, r6
 8003e12:	6219      	str	r1, [r3, #32]

  TIM5->CR1 = 0;//upcounter, continuous
 8003e14:	601a      	str	r2, [r3, #0]
  TIM5->CR1 |= TIM_CR1_CEN; //enable
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4332      	orrs	r2, r6
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	6929      	ldr	r1, [r5, #16]
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 8003e1e:	2720      	movs	r7, #32
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 8003e20:	4031      	ands	r1, r6
 8003e22:	f7ff f985 	bl	8003130 <myprintf>
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 8003e26:	8327      	strh	r7, [r4, #24]
  palClearPad(GPIOB, GPIOB_REF_INT_SEL);
  chThdSleepMilliseconds(100);
 8003e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  palClearPad(GPIOB, GPIOB_REF_INT_SEL);
 8003e2c:	8366      	strh	r6, [r4, #26]
  chThdSleepMilliseconds(100);
 8003e2e:	f7fd fd8f 	bl	8001950 <chThdSleep>

  myprintf("testmode muxout low\n");
 8003e32:	4858      	ldr	r0, [pc, #352]	; (8003f94 <ThdCntr+0x1d4>)
 8003e34:	f7ff f97c 	bl	8003130 <myprintf>
  adf_write_reg(ADF4156_reg[4]);
 8003e38:	2004      	movs	r0, #4
 8003e3a:	f7fd fdb9 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 8003e3e:	2013      	movs	r0, #19
 8003e40:	f7fd fdb6 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[2]);
 8003e44:	2012      	movs	r0, #18
 8003e46:	f7fd fdb3 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[1]);
 8003e4a:	2009      	movs	r0, #9
 8003e4c:	f7fd fdb0 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 8003e50:	4851      	ldr	r0, [pc, #324]	; (8003f98 <ThdCntr+0x1d8>)
 8003e52:	f7fd fdad 	bl	80019b0 <adf_write_reg>
  adf_config_testmode_muxout_low();
  chThdSleepMilliseconds(1);
 8003e56:	200a      	movs	r0, #10
 8003e58:	f7fd fd7a 	bl	8001950 <chThdSleep>

  //disable and select ext to freeze synchronizer with 0 at output
  palClearPad(GPIOB, GPIOB_REF_INT_EN);
 8003e5c:	8367      	strh	r7, [r4, #26]
  palSetPad(GPIOB, GPIOB_REF_INT_SEL);
  chThdSleepMilliseconds(100);
 8003e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  palSetPad(GPIOB, GPIOB_REF_INT_SEL);
 8003e62:	8326      	strh	r6, [r4, #24]
  chThdSleepMilliseconds(100);
 8003e64:	f7fd fd74 	bl	8001950 <chThdSleep>

  myprintf("testmode muxout high\n");
 8003e68:	484c      	ldr	r0, [pc, #304]	; (8003f9c <ThdCntr+0x1dc>)
 8003e6a:	f7ff f961 	bl	8003130 <myprintf>
  adf_write_reg(ADF4156_reg[4]);
 8003e6e:	2004      	movs	r0, #4
 8003e70:	f7fd fd9e 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 8003e74:	2013      	movs	r0, #19
 8003e76:	f7fd fd9b 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[2]);
 8003e7a:	2012      	movs	r0, #18
 8003e7c:	f7fd fd98 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[1]);
 8003e80:	2009      	movs	r0, #9
 8003e82:	f7fd fd95 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 8003e86:	4846      	ldr	r0, [pc, #280]	; (8003fa0 <ThdCntr+0x1e0>)
 8003e88:	f7fd fd92 	bl	80019b0 <adf_write_reg>
  adf_config_testmode_muxout_high();
  chThdSleepMilliseconds(1);
 8003e8c:	200a      	movs	r0, #10
 8003e8e:	f7fd fd5f 	bl	8001950 <chThdSleep>
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 8003e92:	6929      	ldr	r1, [r5, #16]
 8003e94:	483e      	ldr	r0, [pc, #248]	; (8003f90 <ThdCntr+0x1d0>)
 8003e96:	4031      	ands	r1, r6
 8003e98:	f7ff f94a 	bl	8003130 <myprintf>

  myprintf("testmode muxout low\n");
 8003e9c:	483d      	ldr	r0, [pc, #244]	; (8003f94 <ThdCntr+0x1d4>)
 8003e9e:	f7ff f947 	bl	8003130 <myprintf>
  adf_write_reg(ADF4156_reg[4]);
 8003ea2:	2004      	movs	r0, #4
 8003ea4:	f7fd fd84 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 8003ea8:	2013      	movs	r0, #19
 8003eaa:	f7fd fd81 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[2]);
 8003eae:	2012      	movs	r0, #18
 8003eb0:	f7fd fd7e 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[1]);
 8003eb4:	2009      	movs	r0, #9
 8003eb6:	f7fd fd7b 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 8003eba:	4837      	ldr	r0, [pc, #220]	; (8003f98 <ThdCntr+0x1d8>)
 8003ebc:	f7fd fd78 	bl	80019b0 <adf_write_reg>
  adf_config_testmode_muxout_low();
  chThdSleepMilliseconds(1);
 8003ec0:	200a      	movs	r0, #10
 8003ec2:	f7fd fd45 	bl	8001950 <chThdSleep>
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 8003ec6:	6929      	ldr	r1, [r5, #16]
 8003ec8:	4831      	ldr	r0, [pc, #196]	; (8003f90 <ThdCntr+0x1d0>)
 8003eca:	4031      	ands	r1, r6
 8003ecc:	f7ff f930 	bl	8003130 <myprintf>
  palSetPad(GPIOB, GPIOB_CAL_SOUR_SEL);
 8003ed0:	f04f 0810 	mov.w	r8, #16
 8003ed4:	f8a4 8018 	strh.w	r8, [r4, #24]
  adf_write_reg(ADF4156_reg[4]);
 8003ed8:	2004      	movs	r0, #4
 8003eda:	f7fd fd69 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 8003ede:	2013      	movs	r0, #19
 8003ee0:	f7fd fd66 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[2]);
 8003ee4:	4650      	mov	r0, sl
 8003ee6:	f7fd fd63 	bl	80019b0 <adf_write_reg>

}


uint32_t TIM5_get_capture_reg(void){
  return TIM5->CCR1;
 8003eea:	4d27      	ldr	r5, [pc, #156]	; (8003f88 <ThdCntr+0x1c8>)
  adf_write_reg(ADF4156_reg[1]);
 8003eec:	2009      	movs	r0, #9
 8003eee:	f7fd fd5f 	bl	80019b0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 8003ef2:	4648      	mov	r0, r9
 8003ef4:	f7fd fd5c 	bl	80019b0 <adf_write_reg>
 8003ef8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003efa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2630      	movs	r6, #48	; 0x30
 8003f00:	f386 8811 	msr	BASEPRI, r6
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f04:	e9db 2122 	ldrd	r2, r1, [fp, #136]	; 0x88
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	d130      	bne.n	8003f6e <ThdCntr+0x1ae>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003f0c:	2701      	movs	r7, #1
 8003f0e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003f12:	2008      	movs	r0, #8
 8003f14:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
 8003f18:	f7fd fa52 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f1c:	f8db 2088 	ldr.w	r2, [fp, #136]	; 0x88
 8003f20:	bb42      	cbnz	r2, 8003f74 <ThdCntr+0x1b4>
 8003f22:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
 8003f26:	2900      	cmp	r1, #0
 8003f28:	dd24      	ble.n	8003f74 <ThdCntr+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003f2a:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
 8003f2e:	f382 8811 	msr	BASEPRI, r2
 8003f32:	6b69      	ldr	r1, [r5, #52]	; 0x34
    cntr_count_CAL_100M();
    a = TIM5_get_capture_reg();
    chThdSleepMilliseconds(1000);
    b = TIM5_get_capture_reg();

    myprintf("diff: 0x%10u\n", b-a);
 8003f34:	9b01      	ldr	r3, [sp, #4]
 8003f36:	481b      	ldr	r0, [pc, #108]	; (8003fa4 <ThdCntr+0x1e4>)
 8003f38:	1ac9      	subs	r1, r1, r3
 8003f3a:	f7ff f8f9 	bl	8003130 <myprintf>
 8003f3e:	f386 8811 	msr	BASEPRI, r6
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f42:	e9db 2122 	ldrd	r2, r1, [fp, #136]	; 0x88
 8003f46:	430a      	orrs	r2, r1
 8003f48:	d111      	bne.n	8003f6e <ThdCntr+0x1ae>
 8003f4a:	2164      	movs	r1, #100	; 0x64
 8003f4c:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8003f4e:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
 8003f52:	f7fd fa35 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f56:	f8db 2088 	ldr.w	r2, [fp, #136]	; 0x88
 8003f5a:	b95a      	cbnz	r2, 8003f74 <ThdCntr+0x1b4>
 8003f5c:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
 8003f60:	2900      	cmp	r1, #0
 8003f62:	dd07      	ble.n	8003f74 <ThdCntr+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003f64:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
 8003f68:	f382 8811 	msr	BASEPRI, r2
 8003f6c:	e7b2      	b.n	8003ed4 <ThdCntr+0x114>
    chSysHalt("SV#4");
 8003f6e:	480e      	ldr	r0, [pc, #56]	; (8003fa8 <ThdCntr+0x1e8>)
 8003f70:	f7fc fe2e 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 8003f74:	480d      	ldr	r0, [pc, #52]	; (8003fac <ThdCntr+0x1ec>)
 8003f76:	f7fc fe2b 	bl	8000bd0 <chSysHalt>
 8003f7a:	bf00      	nop
 8003f7c:	08004cd8 	.word	0x08004cd8
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	08004ce4 	.word	0x08004ce4
 8003f94:	08004cf4 	.word	0x08004cf4
 8003f98:	100b8000 	.word	0x100b8000
 8003f9c:	08004d0c 	.word	0x08004d0c
 8003fa0:	080b8000 	.word	0x080b8000
 8003fa4:	08004d24 	.word	0x08004d24
 8003fa8:	08004c08 	.word	0x08004c08
 8003fac:	08004c30 	.word	0x08004c30
 8003fb0:	200009f0 	.word	0x200009f0
 8003fb4:	00108012 	.word	0x00108012
 8003fb8:	77d00000 	.word	0x77d00000
 8003fbc:	00000000 	.word	0x00000000

08003fc0 <chThdExit>:
void chThdExit(msg_t msg) {
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	2330      	movs	r3, #48	; 0x30
 8003fc4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <chThdExit+0x60>)
 8003fca:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	d11a      	bne.n	8004008 <chThdExit+0x48>
  return __sch_get_currthread();
 8003fd2:	68dc      	ldr	r4, [r3, #12]
  return (bool)(lp->next != lp);
 8003fd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8003fd6:	f104 052c 	add.w	r5, r4, #44	; 0x2c
  oip->dbg.lock_cnt = (cnt_t)1;
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4295      	cmp	r5, r2
 8003fde:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  currtp->u.exitcode = msg;
 8003fe2:	62a0      	str	r0, [r4, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8003fe4:	d107      	bne.n	8003ff6 <chThdExit+0x36>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8003fe6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8003fea:	b183      	cbz	r3, 800400e <chThdExit+0x4e>
}
 8003fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8003ff0:	200f      	movs	r0, #15
 8003ff2:	f7fd b9b5 	b.w	8001360 <chSchGoSleepS>
  lp->next = p->next;
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f7fd f830 	bl	8001060 <chSchReadyI.isra.0>
  return (bool)(lp->next != lp);
 8004000:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004002:	42aa      	cmp	r2, r5
 8004004:	d0ef      	beq.n	8003fe6 <chThdExit+0x26>
 8004006:	e7f6      	b.n	8003ff6 <chThdExit+0x36>
    chSysHalt("SV#4");
 8004008:	4806      	ldr	r0, [pc, #24]	; (8004024 <chThdExit+0x64>)
 800400a:	f7fc fde1 	bl	8000bd0 <chSysHalt>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800400e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8004012:	079b      	lsls	r3, r3, #30
 8004014:	d1ea      	bne.n	8003fec <chThdExit+0x2c>
  p->prev->next = p->next;
 8004016:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800401a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800401c:	605a      	str	r2, [r3, #4]
  return p;
 800401e:	e7e5      	b.n	8003fec <chThdExit+0x2c>
 8004020:	200009f0 	.word	0x200009f0
 8004024:	08004c08 	.word	0x08004c08
	...

08004030 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004030:	f3ef 8309 	mrs	r3, PSP
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8004034:	4905      	ldr	r1, [pc, #20]	; (800404c <SVC_Handler+0x1c>)
 8004036:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004038:	f022 0201 	bic.w	r2, r2, #1
    psp += sizeof (struct port_extctx);
 800403c:	3368      	adds	r3, #104	; 0x68
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800403e:	634a      	str	r2, [r1, #52]	; 0x34
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004040:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004044:	2300      	movs	r3, #0
 8004046:	f383 8811 	msr	BASEPRI, r3
}
 800404a:	4770      	bx	lr
 800404c:	e000ef00 	.word	0xe000ef00

08004050 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <__early_init+0x168>)
  gpiop->OTYPER  = config->otyper;
 8004052:	495a      	ldr	r1, [pc, #360]	; (80041bc <__early_init+0x16c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004054:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 8004056:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8004204 <__early_init+0x1b4>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800405a:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800405e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004062:	611a      	str	r2, [r3, #16]
 8004064:	6918      	ldr	r0, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8004066:	4c56      	ldr	r4, [pc, #344]	; (80041c0 <__early_init+0x170>)
  gpiop->PUPDR   = config->pupdr;
 8004068:	4f56      	ldr	r7, [pc, #344]	; (80041c4 <__early_init+0x174>)
  gpiop->MODER   = config->moder;
 800406a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8004208 <__early_init+0x1b8>
  gpiop->PUPDR   = config->pupdr;
 800406e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800420c <__early_init+0x1bc>
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8004072:	4e55      	ldr	r6, [pc, #340]	; (80041c8 <__early_init+0x178>)
  gpiop->MODER   = config->moder;
 8004074:	f8df e198 	ldr.w	lr, [pc, #408]	; 8004210 <__early_init+0x1c0>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8004078:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 800407c:	6118      	str	r0, [r3, #16]
 800407e:	6918      	ldr	r0, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004080:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004082:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 8004086:	6318      	str	r0, [r3, #48]	; 0x30
 8004088:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800408a:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 800408e:	6518      	str	r0, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8004090:	2200      	movs	r2, #0
  gpiop->OSPEEDR = config->ospeedr;
 8004092:	484e      	ldr	r0, [pc, #312]	; (80041cc <__early_init+0x17c>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8004094:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8004096:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004098:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800409a:	484d      	ldr	r0, [pc, #308]	; (80041d0 <__early_init+0x180>)
 800409c:	60c8      	str	r0, [r1, #12]
  gpiop->AFRL    = config->afrl;
 800409e:	f247 7002 	movw	r0, #30466	; 0x7702
  gpiop->ODR     = config->odr;
 80040a2:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80040a4:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80040a6:	f44f 60ee 	mov.w	r0, #1904	; 0x770
 80040aa:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80040ac:	4849      	ldr	r0, [pc, #292]	; (80041d4 <__early_init+0x184>)
 80040ae:	6008      	str	r0, [r1, #0]
  gpiop->ODR     = config->odr;
 80040b0:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  gpiop->OTYPER  = config->otyper;
 80040b4:	4848      	ldr	r0, [pc, #288]	; (80041d8 <__early_init+0x188>)
  gpiop->OSPEEDR = config->ospeedr;
 80040b6:	4949      	ldr	r1, [pc, #292]	; (80041dc <__early_init+0x18c>)
  gpiop->OTYPER  = config->otyper;
 80040b8:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80040ba:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
 80040be:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80040c0:	60e7      	str	r7, [r4, #12]
  gpiop->OTYPER  = config->otyper;
 80040c2:	4947      	ldr	r1, [pc, #284]	; (80041e0 <__early_init+0x190>)
  gpiop->ODR     = config->odr;
 80040c4:	f8c4 a014 	str.w	sl, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80040c8:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80040ca:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80040cc:	f8c4 9000 	str.w	r9, [r4]
  gpiop->ODR     = config->odr;
 80040d0:	f44f 6400 	mov.w	r4, #2048	; 0x800
  gpiop->OTYPER  = config->otyper;
 80040d4:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80040d6:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80040d8:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->ODR     = config->odr;
 80040dc:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80040de:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 80040e2:	6204      	str	r4, [r0, #32]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 80040e4:	4f3f      	ldr	r7, [pc, #252]	; (80041e4 <__early_init+0x194>)
  gpiop->AFRH    = config->afrh;
 80040e6:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80040e8:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 80040ec:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80040ee:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80040f0:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 80040f4:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80040f6:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80040f8:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80040fa:	600a      	str	r2, [r1, #0]
  PWR->CR = STM32_VOS;
 80040fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8004100:	641f      	str	r7, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8004102:	6032      	str	r2, [r6, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	0791      	lsls	r1, r2, #30
 8004110:	d5fc      	bpl.n	800410c <__early_init+0xbc>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004112:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004114:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <__early_init+0x168>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8004116:	f021 0103 	bic.w	r1, r1, #3
 800411a:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800411c:	6893      	ldr	r3, [r2, #8]
 800411e:	f013 030c 	ands.w	r3, r3, #12
 8004122:	d1fb      	bne.n	800411c <__early_init+0xcc>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004124:	6811      	ldr	r1, [r2, #0]
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8004126:	4830      	ldr	r0, [pc, #192]	; (80041e8 <__early_init+0x198>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004128:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800412c:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800412e:	6093      	str	r3, [r2, #8]
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8004130:	6050      	str	r0, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8004132:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8004134:	4924      	ldr	r1, [pc, #144]	; (80041c8 <__early_init+0x178>)
  RCC->CR |= RCC_CR_PLLON;
 8004136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413a:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800413c:	684b      	ldr	r3, [r1, #4]
 800413e:	045a      	lsls	r2, r3, #17
 8004140:	d5fc      	bpl.n	800413c <__early_init+0xec>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <__early_init+0x168>)
 8004144:	6813      	ldr	r3, [r2, #0]
 8004146:	019b      	lsls	r3, r3, #6
 8004148:	d5fc      	bpl.n	8004144 <__early_init+0xf4>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <__early_init+0x19c>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800414c:	4c28      	ldr	r4, [pc, #160]	; (80041f0 <__early_init+0x1a0>)
 800414e:	6094      	str	r4, [r2, #8]
    RCC->DCKCFGR = dckcfgr |
 8004150:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8004152:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 8004154:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8004158:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <__early_init+0x1a4>)
 8004160:	429a      	cmp	r2, r3
 8004162:	d01e      	beq.n	80041a2 <__early_init+0x152>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8004164:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <__early_init+0x1a8>)
 8004166:	f240 7203 	movw	r2, #1795	; 0x703
 800416a:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800416c:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <__early_init+0x1a8>)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	2b03      	cmp	r3, #3
 8004176:	d1fa      	bne.n	800416e <__early_init+0x11e>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8004178:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <__early_init+0x168>)
 800417a:	6893      	ldr	r3, [r2, #8]
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004182:	6893      	ldr	r3, [r2, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d1fa      	bne.n	8004182 <__early_init+0x132>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 800418c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800418e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004192:	6453      	str	r3, [r2, #68]	; 0x44
 8004194:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8004196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800419a:	6653      	str	r3, [r2, #100]	; 0x64
 800419c:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 800419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <__early_init+0x1ac>)
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <__early_init+0x1b0>)
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1db      	bne.n	8004164 <__early_init+0x114>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 80041ac:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <__early_init+0x1a8>)
 80041ae:	f240 1203 	movw	r2, #259	; 0x103
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e7da      	b.n	800416c <__early_init+0x11c>
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40020400 	.word	0x40020400
 80041c4:	00aaa0a8 	.word	0x00aaa0a8
 80041c8:	40007000 	.word	0x40007000
 80041cc:	556955a5 	.word	0x556955a5
 80041d0:	a8822a0a 	.word	0xa8822a0a
 80041d4:	2928c0a0 	.word	0x2928c0a0
 80041d8:	40020800 	.word	0x40020800
 80041dc:	9a555555 	.word	0x9a555555
 80041e0:	40021c00 	.word	0x40021c00
 80041e4:	10000400 	.word	0x10000400
 80041e8:	04001908 	.word	0x04001908
 80041ec:	e0042000 	.word	0xe0042000
 80041f0:	38881000 	.word	0x38881000
 80041f4:	20006411 	.word	0x20006411
 80041f8:	40023c00 	.word	0x40023c00
 80041fc:	e000ed00 	.word	0xe000ed00
 8004200:	410fc241 	.word	0x410fc241
 8004204:	aaaaaaa0 	.word	0xaaaaaaa0
 8004208:	55000581 	.word	0x55000581
 800420c:	8a0aaa8a 	.word	0x8a0aaa8a
 8004210:	10500030 	.word	0x10500030
	...

08004220 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8004220:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <main+0x88>)
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	f062 0287 	orn	r2, r2, #135	; 0x87


/*
 * Application entry point.
 */
int main(void) {
 8004228:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	f002 0287 	and.w	r2, r2, #135	; 0x87
 8004234:	611a      	str	r2, [r3, #16]
 8004236:	691a      	ldr	r2, [r3, #16]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8004238:	6a1a      	ldr	r2, [r3, #32]
 800423a:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 800423e:	621a      	str	r2, [r3, #32]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004246:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800424c:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800424e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004250:	6258      	str	r0, [r3, #36]	; 0x24
 8004252:	2100      	movs	r1, #0
 8004254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004256:	6259      	str	r1, [r3, #36]	; 0x24
 8004258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 800425a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 800425c:	4813      	ldr	r0, [pc, #76]	; (80042ac <main+0x8c>)
  rccEnablePWRInterface(true);
 800425e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004262:	641a      	str	r2, [r3, #64]	; 0x40
 8004264:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004266:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800426a:	661a      	str	r2, [r3, #96]	; 0x60
 800426c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800426e:	6802      	ldr	r2, [r0, #0]
 8004270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004274:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8004276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004278:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800427c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004280:	b087      	sub	sp, #28
 8004282:	d003      	beq.n	800428c <main+0x6c>
    RCC->BDCR = RCC_BDCR_BDRST;
 8004284:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004288:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800428a:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800428c:	4807      	ldr	r0, [pc, #28]	; (80042ac <main+0x8c>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 800428e:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <main+0x90>)
 8004290:	6841      	ldr	r1, [r0, #4]
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <main+0x94>)
 8004294:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004298:	2400      	movs	r4, #0
 800429a:	6041      	str	r1, [r0, #4]
 800429c:	4906      	ldr	r1, [pc, #24]	; (80042b8 <main+0x98>)
 800429e:	6014      	str	r4, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80042a0:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80042a4:	e00c      	b.n	80042c0 <main+0xa0>
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000
 80042b0:	20000cf8 	.word	0x20000cf8
 80042b4:	08004de0 	.word	0x08004de0
 80042b8:	40026010 	.word	0x40026010
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80042bc:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80042c0:	600c      	str	r4, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80042c2:	330c      	adds	r3, #12
 80042c4:	4298      	cmp	r0, r3
 80042c6:	f102 0208 	add.w	r2, r2, #8
    dma.streams[i].func = NULL;
 80042ca:	f842 4c04 	str.w	r4, [r2, #-4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80042ce:	d1f5      	bne.n	80042bc <main+0x9c>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 80042d0:	4bc6      	ldr	r3, [pc, #792]	; (80045ec <main+0x3cc>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 80042d2:	49c7      	ldr	r1, [pc, #796]	; (80045f0 <main+0x3d0>)
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80042d4:	4ac7      	ldr	r2, [pc, #796]	; (80045f4 <main+0x3d4>)
  rccResetADC();
 80042d6:	4dc8      	ldr	r5, [pc, #800]	; (80045f8 <main+0x3d8>)
  dacp->state = DAC_STOP;
 80042d8:	4fc8      	ldr	r7, [pc, #800]	; (80045fc <main+0x3dc>)
  sdObjectInit(&SD1, NULL, notify1);
 80042da:	f8df a3a8 	ldr.w	sl, [pc, #936]	; 8004684 <main+0x464>
  sdObjectInit(&SD2, NULL, notify2);
 80042de:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 8004688 <main+0x468>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state           = SPI_STOP;
 80042e2:	4ec7      	ldr	r6, [pc, #796]	; (8004600 <main+0x3e0>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 80042e4:	f04f 39ff 	mov.w	r9, #4294967295
 80042e8:	f8c3 9008 	str.w	r9, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 80042ec:	f8c3 900c 	str.w	r9, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80042f0:	f8c1 9008 	str.w	r9, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80042f4:	f8c1 900c 	str.w	r9, [r1, #12]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80042f8:	49c2      	ldr	r1, [pc, #776]	; (8004604 <main+0x3e4>)
 80042fa:	2370      	movs	r3, #112	; 0x70
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80042fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004300:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
  adcp->config   = NULL;
  adcp->samples  = NULL;
 8004304:	e9c1 4401 	strd	r4, r4, [r1, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 8004308:	e9c1 4403 	strd	r4, r4, [r1, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 800430c:	614c      	str	r4, [r1, #20]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800430e:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004312:	6010      	str	r0, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004314:	f882 3336 	strb.w	r3, [r2, #822]	; 0x336
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800431c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8004320:	2020      	movs	r0, #32
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004322:	6053      	str	r3, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004324:	23c0      	movs	r3, #192	; 0xc0
 8004326:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800432a:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 800432e:	6050      	str	r0, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004330:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004334:	2340      	movs	r3, #64	; 0x40
  adcp->state    = ADC_STOP;
 8004336:	f04f 0801 	mov.w	r8, #1
 800433a:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800433e:	f101 0018 	add.w	r0, r1, #24
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004342:	6053      	str	r3, [r2, #4]
 8004344:	f881 8000 	strb.w	r8, [r1]
 8004348:	f7fc fd72 	bl	8000e30 <chMtxObjectInit>
 800434c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  ADCD1.dmastp  = NULL;
 800434e:	62cc      	str	r4, [r1, #44]	; 0x2c
  rccResetADC();
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	626b      	str	r3, [r5, #36]	; 0x24
 8004356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435c:	626b      	str	r3, [r5, #36]	; 0x24
 800435e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004360:	2060      	movs	r0, #96	; 0x60
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004362:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  dacp->thread = NULL;
 8004366:	e9c7 4404 	strd	r4, r4, [r7, #16]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800436a:	f882 0312 	strb.w	r0, [r2, #786]	; 0x312
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800436e:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004372:	6013      	str	r3, [r2, #0]
  ADCD1.adc     = ADC1;
 8004374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004378:	f5a3 3338 	sub.w	r3, r3, #188416	; 0x2e000
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800437c:	4aa2      	ldr	r2, [pc, #648]	; (8004608 <main+0x3e8>)
 800437e:	628b      	str	r3, [r1, #40]	; 0x28
 8004380:	f107 0018 	add.w	r0, r7, #24
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8004384:	4ba1      	ldr	r3, [pc, #644]	; (800460c <main+0x3ec>)
 8004386:	630b      	str	r3, [r1, #48]	; 0x30
  dacp->state = DAC_STOP;
 8004388:	f887 8000 	strb.w	r8, [r7]
  DACD1.params  = &dac1_ch1_params;
 800438c:	49a0      	ldr	r1, [pc, #640]	; (8004610 <main+0x3f0>)
 800438e:	f7fc fd4f 	bl	8000e30 <chMtxObjectInit>
  GPTD6.tim = STM32_TIM6;
 8004392:	4ba0      	ldr	r3, [pc, #640]	; (8004614 <main+0x3f4>)
 8004394:	62b9      	str	r1, [r7, #40]	; 0x28
 8004396:	f102 000c 	add.w	r0, r2, #12
 800439a:	499f      	ldr	r1, [pc, #636]	; (8004618 <main+0x3f8>)
 800439c:	f882 8000 	strb.w	r8, [r2]
  i2cp->config = NULL;
 80043a0:	6054      	str	r4, [r2, #4]
 80043a2:	60d9      	str	r1, [r3, #12]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80043a4:	f883 8000 	strb.w	r8, [r3]
  sdObjectInit(&SD1, NULL, notify1);
 80043a8:	499c      	ldr	r1, [pc, #624]	; (800461c <main+0x3fc>)
  gptp->config = NULL;
 80043aa:	605c      	str	r4, [r3, #4]
  DACD1.dma = NULL;
 80043ac:	62fc      	str	r4, [r7, #44]	; 0x2c
 80043ae:	f7fc fd3f 	bl	8000e30 <chMtxObjectInit>
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 80043b2:	4b9b      	ldr	r3, [pc, #620]	; (8004620 <main+0x400>)
 80043b4:	6353      	str	r3, [r2, #52]	; 0x34
 80043b6:	4650      	mov	r0, sl
  I2CD2.dmarx  = NULL;
  I2CD2.dmatx  = NULL;
 80043b8:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
  I2CD2.thread = NULL;
 80043bc:	61d4      	str	r4, [r2, #28]
 80043be:	f7fc fc6f 	bl	8000ca0 <sdObjectInit.constprop.0>
  SD1.clock = STM32_PCLK2;
 80043c2:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 800468c <main+0x46c>
 80043c6:	4b97      	ldr	r3, [pc, #604]	; (8004624 <main+0x404>)
  sdObjectInit(&SD2, NULL, notify2);
 80043c8:	4997      	ldr	r1, [pc, #604]	; (8004628 <main+0x408>)
 80043ca:	4658      	mov	r0, fp
  SD1.clock = STM32_PCLK2;
 80043cc:	e9ca c31d 	strd	ip, r3, [sl, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
 80043d0:	f7fc fc66 	bl	8000ca0 <sdObjectInit.constprop.0>
  SD2.clock = STM32_PCLK1;
 80043d4:	4b95      	ldr	r3, [pc, #596]	; (800462c <main+0x40c>)
 80043d6:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 8004690 <main+0x470>
 80043da:	f886 8000 	strb.w	r8, [r6]
 80043de:	f106 000c 	add.w	r0, r6, #12
 80043e2:	e9cb e31d 	strd	lr, r3, [fp, #116]	; 0x74
  spip->config          = NULL;
#if SPI_USE_SYNCHRONIZATION == TRUE
  spip->sync_transfer   = NULL;
 80043e6:	e9c6 4401 	strd	r4, r4, [r6, #4]
 80043ea:	f7fc fd21 	bl	8000e30 <chMtxObjectInit>
  ST_ENABLE_CLOCK();
 80043ee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  ST_ENABLE_STOP();
 80043f0:	498f      	ldr	r1, [pc, #572]	; (8004630 <main+0x410>)
  ch_system.state = ch_sys_initializing;
 80043f2:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 8004694 <main+0x474>
  ST_ENABLE_CLOCK();
 80043f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
 80043fa:	e9c6 4408 	strd	r4, r4, [r6, #32]
 80043fe:	646b      	str	r3, [r5, #68]	; 0x44
 8004400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004406:	666b      	str	r3, [r5, #100]	; 0x64
 8004408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  ST_ENABLE_STOP();
 800440a:	68ca      	ldr	r2, [r1, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800440c:	4b89      	ldr	r3, [pc, #548]	; (8004634 <main+0x414>)
  ST_ENABLE_STOP();
 800440e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004412:	60ca      	str	r2, [r1, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004414:	f242 720f 	movw	r2, #9999	; 0x270f
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800441a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004420:	619c      	str	r4, [r3, #24]
  tmp->cumulative = (rttime_t)0;
 8004422:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
 8004424:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004426:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8004428:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800442a:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800442e:	f8c3 8000 	str.w	r8, [r3]
 8004432:	2300      	movs	r3, #0
 8004434:	e9cd 2304 	strd	r2, r3, [sp, #16]
  SPID2.spi       = SPI2;
 8004438:	4b7f      	ldr	r3, [pc, #508]	; (8004638 <main+0x418>)
 800443a:	61f3      	str	r3, [r6, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 800443c:	4b7f      	ldr	r3, [pc, #508]	; (800463c <main+0x41c>)
 800443e:	62b3      	str	r3, [r6, #40]	; 0x28
  tmp->worst      = (rtcnt_t)0;
 8004440:	e9cd 9400 	strd	r9, r4, [sp]
  tmp->n          = (ucnt_t)0;
 8004444:	e9cd 4402 	strd	r4, r4, [sp, #8]
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8004448:	3330      	adds	r3, #48	; 0x30
}
 800444a:	2504      	movs	r5, #4
 800444c:	f88a 8000 	strb.w	r8, [sl]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8004450:	f8ca 4008 	str.w	r4, [sl, #8]
 8004454:	62f3      	str	r3, [r6, #44]	; 0x2c
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 8004456:	4668      	mov	r0, sp
 8004458:	f7fc fbd2 	bl	8000c00 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800445c:	f7fc fbd8 	bl	8000c10 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 8004460:	3d01      	subs	r5, #1
 8004462:	d1f8      	bne.n	8004456 <main+0x236>
  tcp->offset = tm.best;
 8004464:	9a00      	ldr	r2, [sp, #0]
  ch_memcore.basemem = __heap_base__;
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <main+0x420>)
 8004468:	f8ca 2008 	str.w	r2, [sl, #8]
 800446c:	4a75      	ldr	r2, [pc, #468]	; (8004644 <main+0x424>)
 800446e:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8004470:	4a75      	ldr	r2, [pc, #468]	; (8004648 <main+0x428>)
 8004472:	605a      	str	r2, [r3, #4]
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8004474:	4b75      	ldr	r3, [pc, #468]	; (800464c <main+0x42c>)
 8004476:	4a76      	ldr	r2, [pc, #472]	; (8004650 <main+0x430>)
 8004478:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 800447a:	f103 000c 	add.w	r0, r3, #12
  H_PAGES(&default_heap.header) = 0;
 800447e:	e9c3 5501 	strd	r5, r5, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 8004482:	f7fc fcd5 	bl	8000e30 <chMtxObjectInit>
 * @init
 */
void __factory_init(void) {

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8004486:	4873      	ldr	r0, [pc, #460]	; (8004654 <main+0x434>)
 8004488:	f7fc fcd2 	bl	8000e30 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 800448c:	f100 0310 	add.w	r3, r0, #16
 8004490:	6103      	str	r3, [r0, #16]
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 8004492:	2414      	movs	r4, #20
 8004494:	2304      	movs	r3, #4
 8004496:	e9c0 4306 	strd	r4, r3, [r0, #24]
 800449a:	6343      	str	r3, [r0, #52]	; 0x34
 800449c:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80044a0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80044a2:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80044a6:	6403      	str	r3, [r0, #64]	; 0x40
 80044a8:	f100 0344 	add.w	r3, r0, #68	; 0x44
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 80044ac:	4c6a      	ldr	r4, [pc, #424]	; (8004658 <main+0x438>)
 80044ae:	6443      	str	r3, [r0, #68]	; 0x44
  mp->provider = provider;
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <main+0x43c>)
 80044b2:	6203      	str	r3, [r0, #32]
 80044b4:	6383      	str	r3, [r0, #56]	; 0x38

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <main+0x440>)
 80044b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80044ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80044be:	6243      	str	r3, [r0, #36]	; 0x24
 80044c0:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80044c4:	6283      	str	r3, [r0, #40]	; 0x28
  mp->object_size = size;
 80044c6:	231c      	movs	r3, #28
  mp->next = NULL;
 80044c8:	6145      	str	r5, [r0, #20]
 80044ca:	62c5      	str	r5, [r0, #44]	; 0x2c
  mp->object_size = size;
 80044cc:	6303      	str	r3, [r0, #48]	; 0x30
  ch_system.instances[core_id] = oip;
 80044ce:	f8ca 4004 	str.w	r4, [sl, #4]
  oip->core_id = core_id;
 80044d2:	6325      	str	r5, [r4, #48]	; 0x30
 80044d4:	2030      	movs	r0, #48	; 0x30
 80044d6:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 80044da:	b662      	cpsie	i
  pqp->prio = (tprio_t)0;
 80044dc:	e9c4 4501 	strd	r4, r5, [r4, #4]
  tp->epending          = (eventmask_t)0;
 80044e0:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e4:	4b5f      	ldr	r3, [pc, #380]	; (8004664 <main+0x444>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 80044e6:	6365      	str	r5, [r4, #52]	; 0x34

  sdp->panic_msg = NULL;

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 80044e8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80044ec:	68d9      	ldr	r1, [r3, #12]

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 80044ee:	83a5      	strh	r5, [r4, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044f0:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 80044f4:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 80044f6:	4a5c      	ldr	r2, [pc, #368]	; (8004668 <main+0x448>)
  tp->owner             = oip;
 80044f8:	6564      	str	r4, [r4, #84]	; 0x54
 80044fa:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80044fc:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80044fe:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004502:	495a      	ldr	r1, [pc, #360]	; (800466c <main+0x44c>)
 8004504:	4e4b      	ldr	r6, [pc, #300]	; (8004634 <main+0x414>)
  tp->name              = name;
 8004506:	f8df e190 	ldr.w	lr, [pc, #400]	; 8004698 <main+0x478>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800450a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800450e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004512:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004514:	f04f 0b20 	mov.w	fp, #32
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	600a      	str	r2, [r1, #0]
 800451e:	f883 b01f 	strb.w	fp, [r3, #31]
 8004522:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 8004526:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004528:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 800452c:	461a      	mov	r2, r3
  dlhp->next  = dlhp;
 800452e:	f104 0110 	add.w	r1, r4, #16
  tp->wabase = tdp->wbase;
 8004532:	4b4f      	ldr	r3, [pc, #316]	; (8004670 <main+0x450>)
  pqp->next = pqp;
 8004534:	6024      	str	r4, [r4, #0]
  dlhp->delta = (sysinterval_t)-1;
 8004536:	f04f 3eff 	mov.w	lr, #4294967295
  dlhp->prev  = dlhp;
 800453a:	e9c4 1104 	strd	r1, r1, [r4, #16]
  qp->next = qp;
 800453e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
  tp->hdr.pqueue.prio   = prio;
 8004542:	2180      	movs	r1, #128	; 0x80
  dlhp->delta = (sysinterval_t)-1;
 8004544:	f8c4 e018 	str.w	lr, [r4, #24]
  lp->next = lp;
 8004548:	f104 0e68 	add.w	lr, r4, #104	; 0x68
  sdp->lock_cnt = (cnt_t)1;
 800454c:	2601      	movs	r6, #1
  p->prev       = qp->prev;
 800454e:	f104 0c28 	add.w	ip, r4, #40	; 0x28
  qp->prev = qp;
 8004552:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
 8004556:	6461      	str	r1, [r4, #68]	; 0x44
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8004558:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
  tp->realprio          = prio;
 800455c:	67e1      	str	r1, [r4, #124]	; 0x7c
  lp->next = lp;
 800455e:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  p->prev->next = p;
 8004562:	f104 014c 	add.w	r1, r4, #76	; 0x4c
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8004566:	f104 0e3c 	add.w	lr, r4, #60	; 0x3c
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 800456a:	fa1f f882 	uxth.w	r8, r2
 800456e:	46a9      	mov	r9, r5
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8004570:	4a40      	ldr	r2, [pc, #256]	; (8004674 <main+0x454>)
  p->prev       = qp->prev;
 8004572:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  p->prev->next = p;
 8004576:	62a1      	str	r1, [r4, #40]	; 0x28
 8004578:	e9c4 8908 	strd	r8, r9, [r4, #32]
 800457c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  sdp->panic_msg = NULL;
 8004580:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8004584:	f8c4 e00c 	str.w	lr, [r4, #12]
  oip->rlist.current->wabase = oicp->mainthread_base;
 8004588:	65e2      	str	r2, [r4, #92]	; 0x5c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800458a:	f1a0 0264 	sub.w	r2, r0, #100	; 0x64
 800458e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8004592:	4a39      	ldr	r2, [pc, #228]	; (8004678 <main+0x458>)
 8004594:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8004598:	4a38      	ldr	r2, [pc, #224]	; (800467c <main+0x45c>)
 800459a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tp->name              = name;
 800459e:	4a38      	ldr	r2, [pc, #224]	; (8004680 <main+0x460>)
 80045a0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  lp->next = lp;
 80045a4:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 80045a8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  tp->state             = CH_STATE_WTSTART;
 80045ac:	f04f 0202 	mov.w	r2, #2
 80045b0:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
  p->prev->next = p;
 80045b4:	f100 0210 	add.w	r2, r0, #16
 80045b8:	64e2      	str	r2, [r4, #76]	; 0x4c
  qp->prev      = p;
 80045ba:	62e2      	str	r2, [r4, #44]	; 0x2c
  qp->next = qp;
 80045bc:	f100 0230 	add.w	r2, r0, #48	; 0x30
  p->prev       = qp->prev;
 80045c0:	e9c3 c172 	strd	ip, r1, [r3, #456]	; 0x1c8
  qp->prev = qp;
 80045c4:	e9c3 227a 	strd	r2, r2, [r3, #488]	; 0x1e8
  tp->mtxlist           = NULL;
 80045c8:	e9c3 567d 	strd	r5, r6, [r3, #500]	; 0x1f4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80045cc:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
  tp->hdr.pqueue.prio   = prio;
 80045d0:	f8c3 61c0 	str.w	r6, [r3, #448]	; 0x1c0
  tp->owner             = oip;
 80045d4:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  tp->epending          = (eventmask_t)0;
 80045d8:	f8c3 51f0 	str.w	r5, [r3, #496]	; 0x1f0
  tp->refs              = (trefs_t)1;
 80045dc:	f883 61de 	strb.w	r6, [r3, #478]	; 0x1de
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 80045e0:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 80045e4:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
 80045e8:	e058      	b.n	800469c <main+0x47c>
 80045ea:	bf00      	nop
 80045ec:	40026000 	.word	0x40026000
 80045f0:	40026400 	.word	0x40026400
 80045f4:	e000e100 	.word	0xe000e100
 80045f8:	40023800 	.word	0x40023800
 80045fc:	2000083c 	.word	0x2000083c
 8004600:	200009b4 	.word	0x200009b4
 8004604:	20000808 	.word	0x20000808
 8004608:	2000087c 	.word	0x2000087c
 800460c:	00022c16 	.word	0x00022c16
 8004610:	08004ed4 	.word	0x08004ed4
 8004614:	2000086c 	.word	0x2000086c
 8004618:	40001000 	.word	0x40001000
 800461c:	08000bb1 	.word	0x08000bb1
 8004620:	40005800 	.word	0x40005800
 8004624:	05f5e100 	.word	0x05f5e100
 8004628:	08000bc1 	.word	0x08000bc1
 800462c:	02faf080 	.word	0x02faf080
 8004630:	e0042000 	.word	0xe0042000
 8004634:	40014800 	.word	0x40014800
 8004638:	40003800 	.word	0x40003800
 800463c:	00010016 	.word	0x00010016
 8004640:	20000cc8 	.word	0x20000cc8
 8004644:	20002020 	.word	0x20002020
 8004648:	20008000 	.word	0x20008000
 800464c:	20000cdc 	.word	0x20000cdc
 8004650:	08000ef1 	.word	0x08000ef1
 8004654:	20000c80 	.word	0x20000c80
 8004658:	200009f0 	.word	0x200009f0
 800465c:	08000f71 	.word	0x08000f71
 8004660:	08004e94 	.word	0x08004e94
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	05fa0300 	.word	0x05fa0300
 800466c:	e0001000 	.word	0xe0001000
 8004670:	20000a80 	.word	0x20000a80
 8004674:	20000400 	.word	0x20000400
 8004678:	08000bf1 	.word	0x08000bf1
 800467c:	0800031d 	.word	0x0800031d
 8004680:	08004d34 	.word	0x08004d34
 8004684:	200008b4 	.word	0x200008b4
 8004688:	20000934 	.word	0x20000934
 800468c:	40011000 	.word	0x40011000
 8004690:	40004400 	.word	0x40004400
 8004694:	20000cd0 	.word	0x20000cd0
 8004698:	08004ea8 	.word	0x08004ea8
  tp->wabase = tdp->wbase;
 800469c:	f8c3 31d8 	str.w	r3, [r3, #472]	; 0x1d8
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 80046a0:	f7fc fcde 	bl	8001060 <chSchReadyI.isra.0>
  ch_system.state = ch_sys_running;
 80046a4:	f04f 0302 	mov.w	r3, #2
 80046a8:	f88a 3000 	strb.w	r3, [sl]
 80046ac:	f7fd fa98 	bl	8001be0 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80046b0:	f385 8811 	msr	BASEPRI, r5
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  chMtxObjectInit(&mutex_bsp2);
 80046b4:	4854      	ldr	r0, [pc, #336]	; (8004808 <main+0x5e8>)
 80046b6:	f7fc fbbb 	bl	8000e30 <chMtxObjectInit>
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80046ba:	2203      	movs	r2, #3

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80046bc:	4b53      	ldr	r3, [pc, #332]	; (800480c <main+0x5ec>)
 80046be:	4659      	mov	r1, fp
      m2 = 3 << (bit * 2);
 80046c0:	4690      	mov	r8, r2
      m4 = 15 << ((bit & 7) * 4);
 80046c2:	f04f 0e0f 	mov.w	lr, #15
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80046c6:	2d05      	cmp	r5, #5
    mask >>= 1;
 80046c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (!mask)
 80046cc:	d025      	beq.n	800471a <main+0x4fa>
    if ((mask & 1) != 0) {
 80046ce:	07c8      	lsls	r0, r1, #31
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 80046d0:	ea4f 0282 	mov.w	r2, r2, lsl #2
    bit++;
 80046d4:	f105 0501 	add.w	r5, r5, #1
    if ((mask & 1) != 0) {
 80046d8:	d5f5      	bpl.n	80046c6 <main+0x4a6>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80046da:	6858      	ldr	r0, [r3, #4]
      m1 = 1 << bit;
 80046dc:	fa06 fc05 	lsl.w	ip, r6, r5
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80046e0:	ea20 000c 	bic.w	r0, r0, ip
 80046e4:	6058      	str	r0, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80046e6:	6898      	ldr	r0, [r3, #8]
      m2 = 3 << (bit * 2);
 80046e8:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 80046ec:	fa08 fc0c 	lsl.w	ip, r8, ip
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80046f0:	ea20 000c 	bic.w	r0, r0, ip
 80046f4:	6098      	str	r0, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80046f6:	68d8      	ldr	r0, [r3, #12]
 80046f8:	ea20 000c 	bic.w	r0, r0, ip
 80046fc:	60d8      	str	r0, [r3, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	ea20 000c 	bic.w	r0, r0, ip
 8004704:	4310      	orrs	r0, r2
 8004706:	6018      	str	r0, [r3, #0]
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004708:	6a18      	ldr	r0, [r3, #32]
      m4 = 15 << ((bit & 7) * 4);
 800470a:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800470e:	fa0e fc0c 	lsl.w	ip, lr, ip
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004712:	ea20 000c 	bic.w	r0, r0, ip
 8004716:	6218      	str	r0, [r3, #32]
 8004718:	e7d5      	b.n	80046c6 <main+0x4a6>
 800471a:	2330      	movs	r3, #48	; 0x30
 800471c:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8004720:	f7fd fa76 	bl	8001c10 <__dbg_check_lock>
  if (dacp->state == DAC_STOP) {
 8004724:	783b      	ldrb	r3, [r7, #0]
  dacp->config = config;
 8004726:	4a3a      	ldr	r2, [pc, #232]	; (8004810 <main+0x5f0>)
 8004728:	613a      	str	r2, [r7, #16]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d116      	bne.n	800475c <main+0x53c>
      rccEnableDAC1(true);
 800472e:	4a39      	ldr	r2, [pc, #228]	; (8004814 <main+0x5f4>)
 8004730:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004732:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004736:	6411      	str	r1, [r2, #64]	; 0x40
 8004738:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800473a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800473e:	6611      	str	r1, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 8004740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
      rccEnableDAC1(true);
 8004742:	6e12      	ldr	r2, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 8004744:	6808      	ldr	r0, [r1, #0]
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8004746:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800474a:	4093      	lsls	r3, r2
      cr = dacp->params->dac->CR;
 800474c:	6802      	ldr	r2, [r0, #0]
      cr &= dacp->params->regmask;
 800474e:	402a      	ands	r2, r5
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8004750:	4313      	orrs	r3, r2
      dacp->params->dac->CR = cr;
 8004752:	6003      	str	r3, [r0, #0]
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 8004754:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004758:	f7fc fa82 	bl	8000c60 <dac_lld_put_channel.constprop.0>
    dacp->state = DAC_READY;
 800475c:	2302      	movs	r3, #2
 800475e:	703b      	strb	r3, [r7, #0]
  __dbg_check_unlock();
 8004760:	f7fd fa3e 	bl	8001be0 <__dbg_check_unlock>
 8004764:	2300      	movs	r3, #0
 8004766:	f383 8811 	msr	BASEPRI, r3
  dac_lld_put_channel(dacp, channel, sample);
 800476a:	f640 7031 	movw	r0, #3889	; 0xf31
 800476e:	f7fc fa77 	bl	8000c60 <dac_lld_put_channel.constprop.0>
  chThdSleepMilliseconds(100); //wait for opamp input to settle
 8004772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004776:	f7fd f8eb 	bl	8001950 <chThdSleep>
  palSetPad(GPIOA, GPIOA_heater_enable);
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <main+0x5ec>)

  /*
   * Create threads
   */

  chThdCreateStatic(waThdBlinker, sizeof(waThdBlinker), NORMALPRIO, ThdBlinker, NULL);
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <main+0x5f8>)
 800477e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004782:	8318      	strh	r0, [r3, #24]
 8004784:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004788:	4824      	ldr	r0, [pc, #144]	; (800481c <main+0x5fc>)
 800478a:	f7fd fa59 	bl	8001c40 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdSerial, sizeof(waThdSerial), NORMALPRIO, ThdSerial, NULL);
 800478e:	4a24      	ldr	r2, [pc, #144]	; (8004820 <main+0x600>)
 8004790:	4824      	ldr	r0, [pc, #144]	; (8004824 <main+0x604>)
 8004792:	f44f 6119 	mov.w	r1, #2448	; 0x990
 8004796:	f7fd fa53 	bl	8001c40 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdBeeper, sizeof(waThdBeeper), NORMALPRIO, ThdBeeper, NULL);
 800479a:	4a23      	ldr	r2, [pc, #140]	; (8004828 <main+0x608>)
 800479c:	4823      	ldr	r0, [pc, #140]	; (800482c <main+0x60c>)
 800479e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80047a2:	f7fd fa4d 	bl	8001c40 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdGNSS, sizeof(waThdGNSS), NORMALPRIO, ThdGNSS, NULL);
 80047a6:	4a22      	ldr	r2, [pc, #136]	; (8004830 <main+0x610>)
 80047a8:	4822      	ldr	r0, [pc, #136]	; (8004834 <main+0x614>)
 80047aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80047ae:	f7fd fa47 	bl	8001c40 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdCntr, sizeof(waThdCntr), NORMALPRIO, ThdCntr, NULL);
 80047b2:	4a21      	ldr	r2, [pc, #132]	; (8004838 <main+0x618>)
 80047b4:	4821      	ldr	r0, [pc, #132]	; (800483c <main+0x61c>)
 80047b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80047ba:	f7fd fa41 	bl	8001c40 <chThdCreateStatic.constprop.0.isra.0>

  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  myprintf("Thdmain\n");
 80047be:	4820      	ldr	r0, [pc, #128]	; (8004840 <main+0x620>)
 80047c0:	f7fe fcb6 	bl	8003130 <myprintf>
 80047c4:	2530      	movs	r5, #48	; 0x30
  oip->dbg.lock_cnt = (cnt_t)1;
 80047c6:	2601      	movs	r6, #1
 80047c8:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80047cc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80047d0:	4313      	orrs	r3, r2
 80047d2:	d112      	bne.n	80047fa <main+0x5da>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80047d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80047d8:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 80047da:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80047de:	f7fc fdef 	bl	80013c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80047e2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80047e6:	b95b      	cbnz	r3, 8004800 <main+0x5e0>
 80047e8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	dd07      	ble.n	8004800 <main+0x5e0>
  oip->dbg.lock_cnt = (cnt_t)0;
 80047f0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80047f4:	f383 8811 	msr	BASEPRI, r3
}
 80047f8:	e7e6      	b.n	80047c8 <main+0x5a8>
    chSysHalt("SV#4");
 80047fa:	4812      	ldr	r0, [pc, #72]	; (8004844 <main+0x624>)
 80047fc:	f7fc f9e8 	bl	8000bd0 <chSysHalt>
    chSysHalt("SV#5");
 8004800:	4811      	ldr	r0, [pc, #68]	; (8004848 <main+0x628>)
 8004802:	f7fc f9e5 	bl	8000bd0 <chSysHalt>
 8004806:	bf00      	nop
 8004808:	20000d7c 	.word	0x20000d7c
 800480c:	40020000 	.word	0x40020000
 8004810:	08004ef0 	.word	0x08004ef0
 8004814:	40023800 	.word	0x40023800
 8004818:	080039a1 	.word	0x080039a1
 800481c:	20000fd0 	.word	0x20000fd0
 8004820:	080038f1 	.word	0x080038f1
 8004824:	20001690 	.word	0x20001690
 8004828:	08003cb1 	.word	0x08003cb1
 800482c:	20000d90 	.word	0x20000d90
 8004830:	08003c71 	.word	0x08003c71
 8004834:	20001450 	.word	0x20001450
 8004838:	08003dc1 	.word	0x08003dc1
 800483c:	20001210 	.word	0x20001210
 8004840:	08004d3c 	.word	0x08004d3c
 8004844:	08004c08 	.word	0x08004c08
 8004848:	08004c30 	.word	0x08004c30

0800484c <memset>:
 800484c:	0783      	lsls	r3, r0, #30
 800484e:	b530      	push	{r4, r5, lr}
 8004850:	d048      	beq.n	80048e4 <memset+0x98>
 8004852:	1e54      	subs	r4, r2, #1
 8004854:	2a00      	cmp	r2, #0
 8004856:	d03f      	beq.n	80048d8 <memset+0x8c>
 8004858:	b2ca      	uxtb	r2, r1
 800485a:	4603      	mov	r3, r0
 800485c:	e001      	b.n	8004862 <memset+0x16>
 800485e:	3c01      	subs	r4, #1
 8004860:	d33a      	bcc.n	80048d8 <memset+0x8c>
 8004862:	f803 2b01 	strb.w	r2, [r3], #1
 8004866:	079d      	lsls	r5, r3, #30
 8004868:	d1f9      	bne.n	800485e <memset+0x12>
 800486a:	2c03      	cmp	r4, #3
 800486c:	d92d      	bls.n	80048ca <memset+0x7e>
 800486e:	b2cd      	uxtb	r5, r1
 8004870:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004874:	2c0f      	cmp	r4, #15
 8004876:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800487a:	d936      	bls.n	80048ea <memset+0x9e>
 800487c:	f1a4 0210 	sub.w	r2, r4, #16
 8004880:	f022 0c0f 	bic.w	ip, r2, #15
 8004884:	f103 0e20 	add.w	lr, r3, #32
 8004888:	44e6      	add	lr, ip
 800488a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800488e:	f103 0210 	add.w	r2, r3, #16
 8004892:	e942 5504 	strd	r5, r5, [r2, #-16]
 8004896:	e942 5502 	strd	r5, r5, [r2, #-8]
 800489a:	3210      	adds	r2, #16
 800489c:	4572      	cmp	r2, lr
 800489e:	d1f8      	bne.n	8004892 <memset+0x46>
 80048a0:	f10c 0201 	add.w	r2, ip, #1
 80048a4:	f014 0f0c 	tst.w	r4, #12
 80048a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80048ac:	f004 0c0f 	and.w	ip, r4, #15
 80048b0:	d013      	beq.n	80048da <memset+0x8e>
 80048b2:	f1ac 0304 	sub.w	r3, ip, #4
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	3304      	adds	r3, #4
 80048bc:	4413      	add	r3, r2
 80048be:	f842 5b04 	str.w	r5, [r2], #4
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d1fb      	bne.n	80048be <memset+0x72>
 80048c6:	f00c 0403 	and.w	r4, ip, #3
 80048ca:	b12c      	cbz	r4, 80048d8 <memset+0x8c>
 80048cc:	b2c9      	uxtb	r1, r1
 80048ce:	441c      	add	r4, r3
 80048d0:	f803 1b01 	strb.w	r1, [r3], #1
 80048d4:	429c      	cmp	r4, r3
 80048d6:	d1fb      	bne.n	80048d0 <memset+0x84>
 80048d8:	bd30      	pop	{r4, r5, pc}
 80048da:	4664      	mov	r4, ip
 80048dc:	4613      	mov	r3, r2
 80048de:	2c00      	cmp	r4, #0
 80048e0:	d1f4      	bne.n	80048cc <memset+0x80>
 80048e2:	e7f9      	b.n	80048d8 <memset+0x8c>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4614      	mov	r4, r2
 80048e8:	e7bf      	b.n	800486a <memset+0x1e>
 80048ea:	461a      	mov	r2, r3
 80048ec:	46a4      	mov	ip, r4
 80048ee:	e7e0      	b.n	80048b2 <memset+0x66>

080048f0 <__aeabi_f2ulz>:
 80048f0:	b5d0      	push	{r4, r6, r7, lr}
 80048f2:	f7fc f84f 	bl	8000994 <__aeabi_f2d>
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <__aeabi_f2ulz+0x38>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	4606      	mov	r6, r0
 80048fc:	460f      	mov	r7, r1
 80048fe:	f7fb fdbb 	bl	8000478 <__aeabi_dmul>
 8004902:	f7fc f931 	bl	8000b68 <__aeabi_d2uiz>
 8004906:	4604      	mov	r4, r0
 8004908:	f7fc f822 	bl	8000950 <__aeabi_ui2d>
 800490c:	4b07      	ldr	r3, [pc, #28]	; (800492c <__aeabi_f2ulz+0x3c>)
 800490e:	2200      	movs	r2, #0
 8004910:	f7fb fdb2 	bl	8000478 <__aeabi_dmul>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4630      	mov	r0, r6
 800491a:	4639      	mov	r1, r7
 800491c:	f7fb feda 	bl	80006d4 <__aeabi_dsub>
 8004920:	f7fc f922 	bl	8000b68 <__aeabi_d2uiz>
 8004924:	4621      	mov	r1, r4
 8004926:	bdd0      	pop	{r4, r6, r7, pc}
 8004928:	3df00000 	.word	0x3df00000
 800492c:	41f00000 	.word	0x41f00000

08004930 <__udivmoddi4>:
 8004930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004934:	9e08      	ldr	r6, [sp, #32]
 8004936:	460d      	mov	r5, r1
 8004938:	4604      	mov	r4, r0
 800493a:	460f      	mov	r7, r1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d14a      	bne.n	80049d6 <__udivmoddi4+0xa6>
 8004940:	428a      	cmp	r2, r1
 8004942:	4694      	mov	ip, r2
 8004944:	d965      	bls.n	8004a12 <__udivmoddi4+0xe2>
 8004946:	fab2 f382 	clz	r3, r2
 800494a:	b143      	cbz	r3, 800495e <__udivmoddi4+0x2e>
 800494c:	fa02 fc03 	lsl.w	ip, r2, r3
 8004950:	f1c3 0220 	rsb	r2, r3, #32
 8004954:	409f      	lsls	r7, r3
 8004956:	fa20 f202 	lsr.w	r2, r0, r2
 800495a:	4317      	orrs	r7, r2
 800495c:	409c      	lsls	r4, r3
 800495e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004962:	fa1f f58c 	uxth.w	r5, ip
 8004966:	fbb7 f1fe 	udiv	r1, r7, lr
 800496a:	0c22      	lsrs	r2, r4, #16
 800496c:	fb0e 7711 	mls	r7, lr, r1, r7
 8004970:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004974:	fb01 f005 	mul.w	r0, r1, r5
 8004978:	4290      	cmp	r0, r2
 800497a:	d90a      	bls.n	8004992 <__udivmoddi4+0x62>
 800497c:	eb1c 0202 	adds.w	r2, ip, r2
 8004980:	f101 37ff 	add.w	r7, r1, #4294967295
 8004984:	f080 811c 	bcs.w	8004bc0 <__udivmoddi4+0x290>
 8004988:	4290      	cmp	r0, r2
 800498a:	f240 8119 	bls.w	8004bc0 <__udivmoddi4+0x290>
 800498e:	3902      	subs	r1, #2
 8004990:	4462      	add	r2, ip
 8004992:	1a12      	subs	r2, r2, r0
 8004994:	b2a4      	uxth	r4, r4
 8004996:	fbb2 f0fe 	udiv	r0, r2, lr
 800499a:	fb0e 2210 	mls	r2, lr, r0, r2
 800499e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80049a2:	fb00 f505 	mul.w	r5, r0, r5
 80049a6:	42a5      	cmp	r5, r4
 80049a8:	d90a      	bls.n	80049c0 <__udivmoddi4+0x90>
 80049aa:	eb1c 0404 	adds.w	r4, ip, r4
 80049ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80049b2:	f080 8107 	bcs.w	8004bc4 <__udivmoddi4+0x294>
 80049b6:	42a5      	cmp	r5, r4
 80049b8:	f240 8104 	bls.w	8004bc4 <__udivmoddi4+0x294>
 80049bc:	4464      	add	r4, ip
 80049be:	3802      	subs	r0, #2
 80049c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	2100      	movs	r1, #0
 80049c8:	b11e      	cbz	r6, 80049d2 <__udivmoddi4+0xa2>
 80049ca:	40dc      	lsrs	r4, r3
 80049cc:	2300      	movs	r3, #0
 80049ce:	e9c6 4300 	strd	r4, r3, [r6]
 80049d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d6:	428b      	cmp	r3, r1
 80049d8:	d908      	bls.n	80049ec <__udivmoddi4+0xbc>
 80049da:	2e00      	cmp	r6, #0
 80049dc:	f000 80ed 	beq.w	8004bba <__udivmoddi4+0x28a>
 80049e0:	2100      	movs	r1, #0
 80049e2:	e9c6 0500 	strd	r0, r5, [r6]
 80049e6:	4608      	mov	r0, r1
 80049e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ec:	fab3 f183 	clz	r1, r3
 80049f0:	2900      	cmp	r1, #0
 80049f2:	d149      	bne.n	8004a88 <__udivmoddi4+0x158>
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	d302      	bcc.n	80049fe <__udivmoddi4+0xce>
 80049f8:	4282      	cmp	r2, r0
 80049fa:	f200 80f8 	bhi.w	8004bee <__udivmoddi4+0x2be>
 80049fe:	1a84      	subs	r4, r0, r2
 8004a00:	eb65 0203 	sbc.w	r2, r5, r3
 8004a04:	2001      	movs	r0, #1
 8004a06:	4617      	mov	r7, r2
 8004a08:	2e00      	cmp	r6, #0
 8004a0a:	d0e2      	beq.n	80049d2 <__udivmoddi4+0xa2>
 8004a0c:	e9c6 4700 	strd	r4, r7, [r6]
 8004a10:	e7df      	b.n	80049d2 <__udivmoddi4+0xa2>
 8004a12:	b902      	cbnz	r2, 8004a16 <__udivmoddi4+0xe6>
 8004a14:	deff      	udf	#255	; 0xff
 8004a16:	fab2 f382 	clz	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 8090 	bne.w	8004b40 <__udivmoddi4+0x210>
 8004a20:	1a8a      	subs	r2, r1, r2
 8004a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004a26:	fa1f fe8c 	uxth.w	lr, ip
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fbb2 f5f7 	udiv	r5, r2, r7
 8004a30:	fb07 2015 	mls	r0, r7, r5, r2
 8004a34:	0c22      	lsrs	r2, r4, #16
 8004a36:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004a3a:	fb0e f005 	mul.w	r0, lr, r5
 8004a3e:	4290      	cmp	r0, r2
 8004a40:	d908      	bls.n	8004a54 <__udivmoddi4+0x124>
 8004a42:	eb1c 0202 	adds.w	r2, ip, r2
 8004a46:	f105 38ff 	add.w	r8, r5, #4294967295
 8004a4a:	d202      	bcs.n	8004a52 <__udivmoddi4+0x122>
 8004a4c:	4290      	cmp	r0, r2
 8004a4e:	f200 80cb 	bhi.w	8004be8 <__udivmoddi4+0x2b8>
 8004a52:	4645      	mov	r5, r8
 8004a54:	1a12      	subs	r2, r2, r0
 8004a56:	b2a4      	uxth	r4, r4
 8004a58:	fbb2 f0f7 	udiv	r0, r2, r7
 8004a5c:	fb07 2210 	mls	r2, r7, r0, r2
 8004a60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004a64:	fb0e fe00 	mul.w	lr, lr, r0
 8004a68:	45a6      	cmp	lr, r4
 8004a6a:	d908      	bls.n	8004a7e <__udivmoddi4+0x14e>
 8004a6c:	eb1c 0404 	adds.w	r4, ip, r4
 8004a70:	f100 32ff 	add.w	r2, r0, #4294967295
 8004a74:	d202      	bcs.n	8004a7c <__udivmoddi4+0x14c>
 8004a76:	45a6      	cmp	lr, r4
 8004a78:	f200 80bb 	bhi.w	8004bf2 <__udivmoddi4+0x2c2>
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	eba4 040e 	sub.w	r4, r4, lr
 8004a82:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004a86:	e79f      	b.n	80049c8 <__udivmoddi4+0x98>
 8004a88:	f1c1 0720 	rsb	r7, r1, #32
 8004a8c:	408b      	lsls	r3, r1
 8004a8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8004a92:	ea4c 0c03 	orr.w	ip, ip, r3
 8004a96:	fa05 f401 	lsl.w	r4, r5, r1
 8004a9a:	fa20 f307 	lsr.w	r3, r0, r7
 8004a9e:	40fd      	lsrs	r5, r7
 8004aa0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004aa4:	4323      	orrs	r3, r4
 8004aa6:	fbb5 f8f9 	udiv	r8, r5, r9
 8004aaa:	fa1f fe8c 	uxth.w	lr, ip
 8004aae:	fb09 5518 	mls	r5, r9, r8, r5
 8004ab2:	0c1c      	lsrs	r4, r3, #16
 8004ab4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004ab8:	fb08 f50e 	mul.w	r5, r8, lr
 8004abc:	42a5      	cmp	r5, r4
 8004abe:	fa02 f201 	lsl.w	r2, r2, r1
 8004ac2:	fa00 f001 	lsl.w	r0, r0, r1
 8004ac6:	d90b      	bls.n	8004ae0 <__udivmoddi4+0x1b0>
 8004ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8004acc:	f108 3aff 	add.w	sl, r8, #4294967295
 8004ad0:	f080 8088 	bcs.w	8004be4 <__udivmoddi4+0x2b4>
 8004ad4:	42a5      	cmp	r5, r4
 8004ad6:	f240 8085 	bls.w	8004be4 <__udivmoddi4+0x2b4>
 8004ada:	f1a8 0802 	sub.w	r8, r8, #2
 8004ade:	4464      	add	r4, ip
 8004ae0:	1b64      	subs	r4, r4, r5
 8004ae2:	b29d      	uxth	r5, r3
 8004ae4:	fbb4 f3f9 	udiv	r3, r4, r9
 8004ae8:	fb09 4413 	mls	r4, r9, r3, r4
 8004aec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004af0:	fb03 fe0e 	mul.w	lr, r3, lr
 8004af4:	45a6      	cmp	lr, r4
 8004af6:	d908      	bls.n	8004b0a <__udivmoddi4+0x1da>
 8004af8:	eb1c 0404 	adds.w	r4, ip, r4
 8004afc:	f103 35ff 	add.w	r5, r3, #4294967295
 8004b00:	d26c      	bcs.n	8004bdc <__udivmoddi4+0x2ac>
 8004b02:	45a6      	cmp	lr, r4
 8004b04:	d96a      	bls.n	8004bdc <__udivmoddi4+0x2ac>
 8004b06:	3b02      	subs	r3, #2
 8004b08:	4464      	add	r4, ip
 8004b0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004b0e:	fba3 9502 	umull	r9, r5, r3, r2
 8004b12:	eba4 040e 	sub.w	r4, r4, lr
 8004b16:	42ac      	cmp	r4, r5
 8004b18:	46c8      	mov	r8, r9
 8004b1a:	46ae      	mov	lr, r5
 8004b1c:	d356      	bcc.n	8004bcc <__udivmoddi4+0x29c>
 8004b1e:	d053      	beq.n	8004bc8 <__udivmoddi4+0x298>
 8004b20:	b156      	cbz	r6, 8004b38 <__udivmoddi4+0x208>
 8004b22:	ebb0 0208 	subs.w	r2, r0, r8
 8004b26:	eb64 040e 	sbc.w	r4, r4, lr
 8004b2a:	fa04 f707 	lsl.w	r7, r4, r7
 8004b2e:	40ca      	lsrs	r2, r1
 8004b30:	40cc      	lsrs	r4, r1
 8004b32:	4317      	orrs	r7, r2
 8004b34:	e9c6 7400 	strd	r7, r4, [r6]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	f1c3 0120 	rsb	r1, r3, #32
 8004b44:	fa02 fc03 	lsl.w	ip, r2, r3
 8004b48:	fa20 f201 	lsr.w	r2, r0, r1
 8004b4c:	fa25 f101 	lsr.w	r1, r5, r1
 8004b50:	409d      	lsls	r5, r3
 8004b52:	432a      	orrs	r2, r5
 8004b54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004b58:	fa1f fe8c 	uxth.w	lr, ip
 8004b5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8004b60:	fb07 1510 	mls	r5, r7, r0, r1
 8004b64:	0c11      	lsrs	r1, r2, #16
 8004b66:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004b6a:	fb00 f50e 	mul.w	r5, r0, lr
 8004b6e:	428d      	cmp	r5, r1
 8004b70:	fa04 f403 	lsl.w	r4, r4, r3
 8004b74:	d908      	bls.n	8004b88 <__udivmoddi4+0x258>
 8004b76:	eb1c 0101 	adds.w	r1, ip, r1
 8004b7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8004b7e:	d22f      	bcs.n	8004be0 <__udivmoddi4+0x2b0>
 8004b80:	428d      	cmp	r5, r1
 8004b82:	d92d      	bls.n	8004be0 <__udivmoddi4+0x2b0>
 8004b84:	3802      	subs	r0, #2
 8004b86:	4461      	add	r1, ip
 8004b88:	1b49      	subs	r1, r1, r5
 8004b8a:	b292      	uxth	r2, r2
 8004b8c:	fbb1 f5f7 	udiv	r5, r1, r7
 8004b90:	fb07 1115 	mls	r1, r7, r5, r1
 8004b94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004b98:	fb05 f10e 	mul.w	r1, r5, lr
 8004b9c:	4291      	cmp	r1, r2
 8004b9e:	d908      	bls.n	8004bb2 <__udivmoddi4+0x282>
 8004ba0:	eb1c 0202 	adds.w	r2, ip, r2
 8004ba4:	f105 38ff 	add.w	r8, r5, #4294967295
 8004ba8:	d216      	bcs.n	8004bd8 <__udivmoddi4+0x2a8>
 8004baa:	4291      	cmp	r1, r2
 8004bac:	d914      	bls.n	8004bd8 <__udivmoddi4+0x2a8>
 8004bae:	3d02      	subs	r5, #2
 8004bb0:	4462      	add	r2, ip
 8004bb2:	1a52      	subs	r2, r2, r1
 8004bb4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004bb8:	e738      	b.n	8004a2c <__udivmoddi4+0xfc>
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	e708      	b.n	80049d2 <__udivmoddi4+0xa2>
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	e6e6      	b.n	8004992 <__udivmoddi4+0x62>
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	e6fb      	b.n	80049c0 <__udivmoddi4+0x90>
 8004bc8:	4548      	cmp	r0, r9
 8004bca:	d2a9      	bcs.n	8004b20 <__udivmoddi4+0x1f0>
 8004bcc:	ebb9 0802 	subs.w	r8, r9, r2
 8004bd0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	e7a3      	b.n	8004b20 <__udivmoddi4+0x1f0>
 8004bd8:	4645      	mov	r5, r8
 8004bda:	e7ea      	b.n	8004bb2 <__udivmoddi4+0x282>
 8004bdc:	462b      	mov	r3, r5
 8004bde:	e794      	b.n	8004b0a <__udivmoddi4+0x1da>
 8004be0:	4640      	mov	r0, r8
 8004be2:	e7d1      	b.n	8004b88 <__udivmoddi4+0x258>
 8004be4:	46d0      	mov	r8, sl
 8004be6:	e77b      	b.n	8004ae0 <__udivmoddi4+0x1b0>
 8004be8:	3d02      	subs	r5, #2
 8004bea:	4462      	add	r2, ip
 8004bec:	e732      	b.n	8004a54 <__udivmoddi4+0x124>
 8004bee:	4608      	mov	r0, r1
 8004bf0:	e70a      	b.n	8004a08 <__udivmoddi4+0xd8>
 8004bf2:	4464      	add	r4, ip
 8004bf4:	3802      	subs	r0, #2
 8004bf6:	e742      	b.n	8004a7e <__udivmoddi4+0x14e>
