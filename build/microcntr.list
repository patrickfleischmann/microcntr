
build/microcntr.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002fd 	.word	0x080002fd
 8000008:	080002ff 	.word	0x080002ff
 800000c:	080002ff 	.word	0x080002ff
 8000010:	080002ff 	.word	0x080002ff
 8000014:	080002ff 	.word	0x080002ff
 8000018:	080002ff 	.word	0x080002ff
 800001c:	080002ff 	.word	0x080002ff
 8000020:	080002ff 	.word	0x080002ff
 8000024:	080002ff 	.word	0x080002ff
 8000028:	080002ff 	.word	0x080002ff
 800002c:	080066d1 	.word	0x080066d1
 8000030:	080002ff 	.word	0x080002ff
 8000034:	080002ff 	.word	0x080002ff
 8000038:	080002ff 	.word	0x080002ff
 800003c:	080002ff 	.word	0x080002ff
 8000040:	080002ff 	.word	0x080002ff
 8000044:	080002ff 	.word	0x080002ff
 8000048:	080002ff 	.word	0x080002ff
 800004c:	080002ff 	.word	0x080002ff
 8000050:	080002ff 	.word	0x080002ff
 8000054:	080002ff 	.word	0x080002ff
 8000058:	080002ff 	.word	0x080002ff
 800005c:	080002ff 	.word	0x080002ff
 8000060:	080002ff 	.word	0x080002ff
 8000064:	080002ff 	.word	0x080002ff
 8000068:	080002ff 	.word	0x080002ff
 800006c:	08004ed1 	.word	0x08004ed1
 8000070:	08004f71 	.word	0x08004f71
 8000074:	08005011 	.word	0x08005011
 8000078:	080050b1 	.word	0x080050b1
 800007c:	08005151 	.word	0x08005151
 8000080:	080051f1 	.word	0x080051f1
 8000084:	08005291 	.word	0x08005291
 8000088:	080068d1 	.word	0x080068d1
 800008c:	080002ff 	.word	0x080002ff
 8000090:	080002ff 	.word	0x080002ff
 8000094:	080002ff 	.word	0x080002ff
 8000098:	080002ff 	.word	0x080002ff
 800009c:	080002ff 	.word	0x080002ff
 80000a0:	080002ff 	.word	0x080002ff
 80000a4:	08006901 	.word	0x08006901
 80000a8:	08004c31 	.word	0x08004c31
 80000ac:	080002ff 	.word	0x080002ff
 80000b0:	080002ff 	.word	0x080002ff
 80000b4:	080002ff 	.word	0x080002ff
 80000b8:	080002ff 	.word	0x080002ff
 80000bc:	080002ff 	.word	0x080002ff
 80000c0:	080002ff 	.word	0x080002ff
 80000c4:	080058d1 	.word	0x080058d1
 80000c8:	08005b01 	.word	0x08005b01
 80000cc:	080002ff 	.word	0x080002ff
 80000d0:	080002ff 	.word	0x080002ff
 80000d4:	08004b31 	.word	0x08004b31
 80000d8:	08004bb1 	.word	0x08004bb1
 80000dc:	080002ff 	.word	0x080002ff
 80000e0:	080002ff 	.word	0x080002ff
 80000e4:	080002ff 	.word	0x080002ff
 80000e8:	080002ff 	.word	0x080002ff
 80000ec:	080002ff 	.word	0x080002ff
 80000f0:	080002ff 	.word	0x080002ff
 80000f4:	080002ff 	.word	0x080002ff
 80000f8:	080002ff 	.word	0x080002ff
 80000fc:	08005331 	.word	0x08005331
 8000100:	080002ff 	.word	0x080002ff
 8000104:	080002ff 	.word	0x080002ff
 8000108:	080002ff 	.word	0x080002ff
 800010c:	080002ff 	.word	0x080002ff
 8000110:	080002ff 	.word	0x080002ff
 8000114:	080002ff 	.word	0x080002ff
 8000118:	08004e11 	.word	0x08004e11
 800011c:	080002ff 	.word	0x080002ff
 8000120:	080053d1 	.word	0x080053d1
 8000124:	08005471 	.word	0x08005471
 8000128:	08005511 	.word	0x08005511
 800012c:	080055b1 	.word	0x080055b1
 8000130:	08005651 	.word	0x08005651
 8000134:	080002ff 	.word	0x080002ff
 8000138:	080002ff 	.word	0x080002ff
 800013c:	080002ff 	.word	0x080002ff
 8000140:	080002ff 	.word	0x080002ff
 8000144:	080002ff 	.word	0x080002ff
 8000148:	080002ff 	.word	0x080002ff
 800014c:	080002ff 	.word	0x080002ff
 8000150:	080056f1 	.word	0x080056f1
 8000154:	08005791 	.word	0x08005791
 8000158:	08005831 	.word	0x08005831
 800015c:	080002ff 	.word	0x080002ff
 8000160:	080002ff 	.word	0x080002ff
 8000164:	080002ff 	.word	0x080002ff
 8000168:	080002ff 	.word	0x080002ff
 800016c:	080002ff 	.word	0x080002ff
 8000170:	080002ff 	.word	0x080002ff
 8000174:	080002ff 	.word	0x080002ff
 8000178:	080002ff 	.word	0x080002ff
 800017c:	080002ff 	.word	0x080002ff
 8000180:	080002ff 	.word	0x080002ff
 8000184:	080002ff 	.word	0x080002ff
 8000188:	080002ff 	.word	0x080002ff
 800018c:	080002ff 	.word	0x080002ff
 8000190:	080002ff 	.word	0x080002ff
 8000194:	080002ff 	.word	0x080002ff
 8000198:	080002ff 	.word	0x080002ff
 800019c:	080002ff 	.word	0x080002ff
 80001a0:	080002ff 	.word	0x080002ff
 80001a4:	080002ff 	.word	0x080002ff
 80001a8:	080002ff 	.word	0x080002ff
 80001ac:	080002ff 	.word	0x080002ff
 80001b0:	080002ff 	.word	0x080002ff
 80001b4:	080002ff 	.word	0x080002ff
 80001b8:	080002ff 	.word	0x080002ff
 80001bc:	080002ff 	.word	0x080002ff
 80001c0:	080002ff 	.word	0x080002ff
 80001c4:	080002ff 	.word	0x080002ff
 80001c8:	080002ff 	.word	0x080002ff
 80001cc:	080002ff 	.word	0x080002ff
 80001d0:	080002ff 	.word	0x080002ff
 80001d4:	080002ff 	.word	0x080002ff
 80001d8:	080002ff 	.word	0x080002ff
 80001dc:	080002ff 	.word	0x080002ff

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4837      	ldr	r0, [pc, #220]	; (80002c0 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4836      	ldr	r0, [pc, #216]	; (80002c4 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4836      	ldr	r0, [pc, #216]	; (80002c8 <endfiniloop+0xc>)
                ldr     r1, =SCB_VTOR
 80001f0:	4936      	ldr	r1, [pc, #216]	; (80002cc <endfiniloop+0x10>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001f4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001f8:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001fc:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000200:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000204:	6008      	str	r0, [r1, #0]
                dsb
 8000206:	f3bf 8f4f 	dsb	sy
                isb
 800020a:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800020e:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000212:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000216:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 800021a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021e:	6008      	str	r0, [r1, #0]
                dsb
 8000220:	f3bf 8f4f 	dsb	sy
                isb
 8000224:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000228:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800022c:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000230:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000234:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000238:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800023a:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800023c:	f380 8814 	msr	CONTROL, r0
                isb
 8000240:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000244:	f004 fb74 	bl	8004930 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000248:	f006 fa52 	bl	80066f0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800024c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000250:	491f      	ldr	r1, [pc, #124]	; (80002d0 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8000252:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <endfiniloop+0x4>)

08000254 <msloop>:
msloop:
                cmp     r1, r2
 8000254:	4291      	cmp	r1, r2
                itt     lo
 8000256:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000258:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800025c:	e7fa      	bcc.n	8000254 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800025e:	491d      	ldr	r1, [pc, #116]	; (80002d4 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <endfiniloop+0x8>)

08000262 <psloop>:
psloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800026a:	e7fa      	bcc.n	8000262 <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 800026c:	491a      	ldr	r1, [pc, #104]	; (80002d8 <endfiniloop+0x1c>)
                ldr     r2, =__data_base__
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <endfiniloop+0x20>)
                ldr     r3, =__data_end__
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <endfiniloop+0x24>)

08000272 <dloop>:
dloop:
                cmp     r2, r3
 8000272:	429a      	cmp	r2, r3
                ittt    lo
 8000274:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000276:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800027a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800027e:	e7f8      	bcc.n	8000272 <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 8000280:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000282:	4918      	ldr	r1, [pc, #96]	; (80002e4 <endfiniloop+0x28>)
                ldr     r2, =__bss_end__
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <endfiniloop+0x2c>)

08000286 <bloop>:
bloop:
                cmp     r1, r2
 8000286:	4291      	cmp	r1, r2
                itt     lo
 8000288:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800028a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800028e:	e7fa      	bcc.n	8000286 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000290:	f004 fb66 	bl	8004960 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000294:	f004 fb54 	bl	8004940 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000298:	4c14      	ldr	r4, [pc, #80]	; (80002ec <endfiniloop+0x30>)
                ldr     r5, =__init_array_end__
 800029a:	4d15      	ldr	r5, [pc, #84]	; (80002f0 <endfiniloop+0x34>)

0800029c <initloop>:
initloop:
                cmp     r4, r5
 800029c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800029e:	da03      	bge.n	80002a8 <endinitloop>
                ldr     r1, [r4], #4
 80002a0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002a4:	4788      	blx	r1
                b       initloop
 80002a6:	e7f9      	b.n	800029c <initloop>

080002a8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002a8:	f006 fb4a 	bl	8006940 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002ac:	4c11      	ldr	r4, [pc, #68]	; (80002f4 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end__
 80002ae:	4d12      	ldr	r5, [pc, #72]	; (80002f8 <endfiniloop+0x3c>)

080002b0 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b2:	da03      	bge.n	80002bc <endfiniloop>
                ldr     r1, [r4], #4
 80002b4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b8:	4788      	blx	r1
                b       finiloop
 80002ba:	e7f9      	b.n	80002b0 <finiloop>

080002bc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002bc:	f004 bb48 	b.w	8004950 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002c0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002c4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002c8:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 80002cc:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 80002d0:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d4:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002d8:	08009760 	.word	0x08009760
                ldr     r2, =__data_base__
 80002dc:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002e0:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002e4:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002e8:	20002638 	.word	0x20002638
                ldr     r4, =__init_array_base__
 80002ec:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002f8:	080001e0 	.word	0x080001e0

080002fc <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002fc:	e770      	b.n	80001e0 <_crt0_entry>

080002fe <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002fe:	f000 f800 	bl	8000302 <_unhandled_exception>

08000302 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000302:	e7fe      	b.n	8000302 <_unhandled_exception>

08000304 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
 8000308:	ed2d 8a10 	vpush	{s16-s31}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 800030c:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000310:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000312:	469d      	mov	sp, r3
#endif
#endif

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
 8000314:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800031c <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800031c:	f004 fb58 	bl	80049d0 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f006 f998 	bl	8006660 <chThdExit>

08000330 <.zombies>:
.zombies:       b       .zombies
 8000330:	e7fe      	b.n	8000330 <.zombies>

08000332 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 8000332:	f004 fb65 	bl	8004a00 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 8000336:	f005 fcab 	bl	8005c90 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800033a:	f004 fb49 	bl	80049d0 <__dbg_check_unlock>

0800033e <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033e:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000340:	e7fe      	b.n	8000340 <__port_exit_from_isr+0x2>
	...

08000344 <memcpy>:
 8000344:	4684      	mov	ip, r0
 8000346:	ea41 0300 	orr.w	r3, r1, r0
 800034a:	f013 0303 	ands.w	r3, r3, #3
 800034e:	d16d      	bne.n	800042c <memcpy+0xe8>
 8000350:	3a40      	subs	r2, #64	; 0x40
 8000352:	d341      	bcc.n	80003d8 <memcpy+0x94>
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a40      	subs	r2, #64	; 0x40
 80003d6:	d2bd      	bcs.n	8000354 <memcpy+0x10>
 80003d8:	3230      	adds	r2, #48	; 0x30
 80003da:	d311      	bcc.n	8000400 <memcpy+0xbc>
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	3a10      	subs	r2, #16
 80003fe:	d2ed      	bcs.n	80003dc <memcpy+0x98>
 8000400:	320c      	adds	r2, #12
 8000402:	d305      	bcc.n	8000410 <memcpy+0xcc>
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	3a04      	subs	r2, #4
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0xc0>
 8000410:	3204      	adds	r2, #4
 8000412:	d008      	beq.n	8000426 <memcpy+0xe2>
 8000414:	07d2      	lsls	r2, r2, #31
 8000416:	bf1c      	itt	ne
 8000418:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800041c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000420:	d301      	bcc.n	8000426 <memcpy+0xe2>
 8000422:	880b      	ldrh	r3, [r1, #0]
 8000424:	8003      	strh	r3, [r0, #0]
 8000426:	4660      	mov	r0, ip
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2a08      	cmp	r2, #8
 800042e:	d313      	bcc.n	8000458 <memcpy+0x114>
 8000430:	078b      	lsls	r3, r1, #30
 8000432:	d08d      	beq.n	8000350 <memcpy+0xc>
 8000434:	f010 0303 	ands.w	r3, r0, #3
 8000438:	d08a      	beq.n	8000350 <memcpy+0xc>
 800043a:	f1c3 0304 	rsb	r3, r3, #4
 800043e:	1ad2      	subs	r2, r2, r3
 8000440:	07db      	lsls	r3, r3, #31
 8000442:	bf1c      	itt	ne
 8000444:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000448:	f800 3b01 	strbne.w	r3, [r0], #1
 800044c:	d380      	bcc.n	8000350 <memcpy+0xc>
 800044e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000452:	f820 3b02 	strh.w	r3, [r0], #2
 8000456:	e77b      	b.n	8000350 <memcpy+0xc>
 8000458:	3a04      	subs	r2, #4
 800045a:	d3d9      	bcc.n	8000410 <memcpy+0xcc>
 800045c:	3a01      	subs	r2, #1
 800045e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000462:	f800 3b01 	strb.w	r3, [r0], #1
 8000466:	d2f9      	bcs.n	800045c <memcpy+0x118>
 8000468:	780b      	ldrb	r3, [r1, #0]
 800046a:	7003      	strb	r3, [r0, #0]
 800046c:	784b      	ldrb	r3, [r1, #1]
 800046e:	7043      	strb	r3, [r0, #1]
 8000470:	788b      	ldrb	r3, [r1, #2]
 8000472:	7083      	strb	r3, [r0, #2]
 8000474:	4660      	mov	r0, ip
 8000476:	4770      	bx	lr

08000478 <__aeabi_drsub>:
 8000478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e002      	b.n	8000484 <__adddf3>
 800047e:	bf00      	nop

08000480 <__aeabi_dsub>:
 8000480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000484 <__adddf3>:
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	bf1f      	itttt	ne
 800049a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800049e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004aa:	f000 80e2 	beq.w	8000672 <__adddf3+0x1ee>
 80004ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004b6:	bfb8      	it	lt
 80004b8:	426d      	neglt	r5, r5
 80004ba:	dd0c      	ble.n	80004d6 <__adddf3+0x52>
 80004bc:	442c      	add	r4, r5
 80004be:	ea80 0202 	eor.w	r2, r0, r2
 80004c2:	ea81 0303 	eor.w	r3, r1, r3
 80004c6:	ea82 0000 	eor.w	r0, r2, r0
 80004ca:	ea83 0101 	eor.w	r1, r3, r1
 80004ce:	ea80 0202 	eor.w	r2, r0, r2
 80004d2:	ea81 0303 	eor.w	r3, r1, r3
 80004d6:	2d36      	cmp	r5, #54	; 0x36
 80004d8:	bf88      	it	hi
 80004da:	bd30      	pophi	{r4, r5, pc}
 80004dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004ec:	d002      	beq.n	80004f4 <__adddf3+0x70>
 80004ee:	4240      	negs	r0, r0
 80004f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x84>
 8000502:	4252      	negs	r2, r2
 8000504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000508:	ea94 0f05 	teq	r4, r5
 800050c:	f000 80a7 	beq.w	800065e <__adddf3+0x1da>
 8000510:	f1a4 0401 	sub.w	r4, r4, #1
 8000514:	f1d5 0e20 	rsbs	lr, r5, #32
 8000518:	db0d      	blt.n	8000536 <__adddf3+0xb2>
 800051a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800051e:	fa22 f205 	lsr.w	r2, r2, r5
 8000522:	1880      	adds	r0, r0, r2
 8000524:	f141 0100 	adc.w	r1, r1, #0
 8000528:	fa03 f20e 	lsl.w	r2, r3, lr
 800052c:	1880      	adds	r0, r0, r2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	4159      	adcs	r1, r3
 8000534:	e00e      	b.n	8000554 <__adddf3+0xd0>
 8000536:	f1a5 0520 	sub.w	r5, r5, #32
 800053a:	f10e 0e20 	add.w	lr, lr, #32
 800053e:	2a01      	cmp	r2, #1
 8000540:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000544:	bf28      	it	cs
 8000546:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054a:	fa43 f305 	asr.w	r3, r3, r5
 800054e:	18c0      	adds	r0, r0, r3
 8000550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	d507      	bpl.n	800056a <__adddf3+0xe6>
 800055a:	f04f 0e00 	mov.w	lr, #0
 800055e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000562:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000566:	eb6e 0101 	sbc.w	r1, lr, r1
 800056a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800056e:	d31b      	bcc.n	80005a8 <__adddf3+0x124>
 8000570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000574:	d30c      	bcc.n	8000590 <__adddf3+0x10c>
 8000576:	0849      	lsrs	r1, r1, #1
 8000578:	ea5f 0030 	movs.w	r0, r0, rrx
 800057c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000580:	f104 0401 	add.w	r4, r4, #1
 8000584:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800058c:	f080 809a 	bcs.w	80006c4 <__adddf3+0x240>
 8000590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	ea41 0105 	orr.w	r1, r1, r5
 80005a6:	bd30      	pop	{r4, r5, pc}
 80005a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005ac:	4140      	adcs	r0, r0
 80005ae:	eb41 0101 	adc.w	r1, r1, r1
 80005b2:	3c01      	subs	r4, #1
 80005b4:	bf28      	it	cs
 80005b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ba:	d2e9      	bcs.n	8000590 <__adddf3+0x10c>
 80005bc:	f091 0f00 	teq	r1, #0
 80005c0:	bf04      	itt	eq
 80005c2:	4601      	moveq	r1, r0
 80005c4:	2000      	moveq	r0, #0
 80005c6:	fab1 f381 	clz	r3, r1
 80005ca:	bf08      	it	eq
 80005cc:	3320      	addeq	r3, #32
 80005ce:	f1a3 030b 	sub.w	r3, r3, #11
 80005d2:	f1b3 0220 	subs.w	r2, r3, #32
 80005d6:	da0c      	bge.n	80005f2 <__adddf3+0x16e>
 80005d8:	320c      	adds	r2, #12
 80005da:	dd08      	ble.n	80005ee <__adddf3+0x16a>
 80005dc:	f102 0c14 	add.w	ip, r2, #20
 80005e0:	f1c2 020c 	rsb	r2, r2, #12
 80005e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e8:	fa21 f102 	lsr.w	r1, r1, r2
 80005ec:	e00c      	b.n	8000608 <__adddf3+0x184>
 80005ee:	f102 0214 	add.w	r2, r2, #20
 80005f2:	bfd8      	it	le
 80005f4:	f1c2 0c20 	rsble	ip, r2, #32
 80005f8:	fa01 f102 	lsl.w	r1, r1, r2
 80005fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000600:	bfdc      	itt	le
 8000602:	ea41 010c 	orrle.w	r1, r1, ip
 8000606:	4090      	lslle	r0, r2
 8000608:	1ae4      	subs	r4, r4, r3
 800060a:	bfa2      	ittt	ge
 800060c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000610:	4329      	orrge	r1, r5
 8000612:	bd30      	popge	{r4, r5, pc}
 8000614:	ea6f 0404 	mvn.w	r4, r4
 8000618:	3c1f      	subs	r4, #31
 800061a:	da1c      	bge.n	8000656 <__adddf3+0x1d2>
 800061c:	340c      	adds	r4, #12
 800061e:	dc0e      	bgt.n	800063e <__adddf3+0x1ba>
 8000620:	f104 0414 	add.w	r4, r4, #20
 8000624:	f1c4 0220 	rsb	r2, r4, #32
 8000628:	fa20 f004 	lsr.w	r0, r0, r4
 800062c:	fa01 f302 	lsl.w	r3, r1, r2
 8000630:	ea40 0003 	orr.w	r0, r0, r3
 8000634:	fa21 f304 	lsr.w	r3, r1, r4
 8000638:	ea45 0103 	orr.w	r1, r5, r3
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f1c4 040c 	rsb	r4, r4, #12
 8000642:	f1c4 0220 	rsb	r2, r4, #32
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 f304 	lsl.w	r3, r1, r4
 800064e:	ea40 0003 	orr.w	r0, r0, r3
 8000652:	4629      	mov	r1, r5
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	fa21 f004 	lsr.w	r0, r1, r4
 800065a:	4629      	mov	r1, r5
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	f094 0f00 	teq	r4, #0
 8000662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000666:	bf06      	itte	eq
 8000668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800066c:	3401      	addeq	r4, #1
 800066e:	3d01      	subne	r5, #1
 8000670:	e74e      	b.n	8000510 <__adddf3+0x8c>
 8000672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000676:	bf18      	it	ne
 8000678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800067c:	d029      	beq.n	80006d2 <__adddf3+0x24e>
 800067e:	ea94 0f05 	teq	r4, r5
 8000682:	bf08      	it	eq
 8000684:	ea90 0f02 	teqeq	r0, r2
 8000688:	d005      	beq.n	8000696 <__adddf3+0x212>
 800068a:	ea54 0c00 	orrs.w	ip, r4, r0
 800068e:	bf04      	itt	eq
 8000690:	4619      	moveq	r1, r3
 8000692:	4610      	moveq	r0, r2
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea91 0f03 	teq	r1, r3
 800069a:	bf1e      	ittt	ne
 800069c:	2100      	movne	r1, #0
 800069e:	2000      	movne	r0, #0
 80006a0:	bd30      	popne	{r4, r5, pc}
 80006a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006a6:	d105      	bne.n	80006b4 <__adddf3+0x230>
 80006a8:	0040      	lsls	r0, r0, #1
 80006aa:	4149      	adcs	r1, r1
 80006ac:	bf28      	it	cs
 80006ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd30      	pop	{r4, r5, pc}
 80006b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006b8:	bf3c      	itt	cc
 80006ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006be:	bd30      	popcc	{r4, r5, pc}
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d6:	bf1a      	itte	ne
 80006d8:	4619      	movne	r1, r3
 80006da:	4610      	movne	r0, r2
 80006dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e0:	bf1c      	itt	ne
 80006e2:	460b      	movne	r3, r1
 80006e4:	4602      	movne	r2, r0
 80006e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ea:	bf06      	itte	eq
 80006ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f0:	ea91 0f03 	teqeq	r1, r3
 80006f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop

080006fc <__aeabi_ui2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f04f 0500 	mov.w	r5, #0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e750      	b.n	80005bc <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_i2d>:
 800071c:	f090 0f00 	teq	r0, #0
 8000720:	bf04      	itt	eq
 8000722:	2100      	moveq	r1, #0
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000734:	bf48      	it	mi
 8000736:	4240      	negmi	r0, r0
 8000738:	f04f 0100 	mov.w	r1, #0
 800073c:	e73e      	b.n	80005bc <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_f2d>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000746:	ea4f 0131 	mov.w	r1, r1, rrx
 800074a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800074e:	bf1f      	itttt	ne
 8000750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800075c:	4770      	bxne	lr
 800075e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000762:	bf08      	it	eq
 8000764:	4770      	bxeq	lr
 8000766:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076a:	bf04      	itt	eq
 800076c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800077c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000780:	e71c      	b.n	80005bc <__adddf3+0x138>
 8000782:	bf00      	nop

08000784 <__aeabi_ul2d>:
 8000784:	ea50 0201 	orrs.w	r2, r0, r1
 8000788:	bf08      	it	eq
 800078a:	4770      	bxeq	lr
 800078c:	b530      	push	{r4, r5, lr}
 800078e:	f04f 0500 	mov.w	r5, #0
 8000792:	e00a      	b.n	80007aa <__aeabi_l2d+0x16>

08000794 <__aeabi_l2d>:
 8000794:	ea50 0201 	orrs.w	r2, r0, r1
 8000798:	bf08      	it	eq
 800079a:	4770      	bxeq	lr
 800079c:	b530      	push	{r4, r5, lr}
 800079e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a2:	d502      	bpl.n	80007aa <__aeabi_l2d+0x16>
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b6:	f43f aed8 	beq.w	800056a <__adddf3+0xe6>
 80007ba:	f04f 0203 	mov.w	r2, #3
 80007be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c2:	bf18      	it	ne
 80007c4:	3203      	addne	r2, #3
 80007c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ca:	bf18      	it	ne
 80007cc:	3203      	addne	r2, #3
 80007ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007da:	fa20 f002 	lsr.w	r0, r0, r2
 80007de:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e2:	ea40 000e 	orr.w	r0, r0, lr
 80007e6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ea:	4414      	add	r4, r2
 80007ec:	e6bd      	b.n	800056a <__adddf3+0xe6>
 80007ee:	bf00      	nop

080007f0 <__aeabi_dmul>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8de 	bleq	80009cc <__aeabi_dmul+0x1dc>
 8000810:	442c      	add	r4, r5
 8000812:	ea81 0603 	eor.w	r6, r1, r3
 8000816:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800081a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800081e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000822:	bf18      	it	ne
 8000824:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000830:	d038      	beq.n	80008a4 <__aeabi_dmul+0xb4>
 8000832:	fba0 ce02 	umull	ip, lr, r0, r2
 8000836:	f04f 0500 	mov.w	r5, #0
 800083a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800083e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000842:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000846:	f04f 0600 	mov.w	r6, #0
 800084a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800084e:	f09c 0f00 	teq	ip, #0
 8000852:	bf18      	it	ne
 8000854:	f04e 0e01 	orrne.w	lr, lr, #1
 8000858:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800085c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000860:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000864:	d204      	bcs.n	8000870 <__aeabi_dmul+0x80>
 8000866:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800086a:	416d      	adcs	r5, r5
 800086c:	eb46 0606 	adc.w	r6, r6, r6
 8000870:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000874:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000878:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800087c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000880:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000884:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000888:	bf88      	it	hi
 800088a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800088e:	d81e      	bhi.n	80008ce <__aeabi_dmul+0xde>
 8000890:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000894:	bf08      	it	eq
 8000896:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008a8:	ea46 0101 	orr.w	r1, r6, r1
 80008ac:	ea40 0002 	orr.w	r0, r0, r2
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008b8:	bfc2      	ittt	gt
 80008ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008c2:	bd70      	popgt	{r4, r5, r6, pc}
 80008c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c8:	f04f 0e00 	mov.w	lr, #0
 80008cc:	3c01      	subs	r4, #1
 80008ce:	f300 80ab 	bgt.w	8000a28 <__aeabi_dmul+0x238>
 80008d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008d6:	bfde      	ittt	le
 80008d8:	2000      	movle	r0, #0
 80008da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008de:	bd70      	pople	{r4, r5, r6, pc}
 80008e0:	f1c4 0400 	rsb	r4, r4, #0
 80008e4:	3c20      	subs	r4, #32
 80008e6:	da35      	bge.n	8000954 <__aeabi_dmul+0x164>
 80008e8:	340c      	adds	r4, #12
 80008ea:	dc1b      	bgt.n	8000924 <__aeabi_dmul+0x134>
 80008ec:	f104 0414 	add.w	r4, r4, #20
 80008f0:	f1c4 0520 	rsb	r5, r4, #32
 80008f4:	fa00 f305 	lsl.w	r3, r0, r5
 80008f8:	fa20 f004 	lsr.w	r0, r0, r4
 80008fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000900:	ea40 0002 	orr.w	r0, r0, r2
 8000904:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800090c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000910:	fa21 f604 	lsr.w	r6, r1, r4
 8000914:	eb42 0106 	adc.w	r1, r2, r6
 8000918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800091c:	bf08      	it	eq
 800091e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f1c4 040c 	rsb	r4, r4, #12
 8000928:	f1c4 0520 	rsb	r5, r4, #32
 800092c:	fa00 f304 	lsl.w	r3, r0, r4
 8000930:	fa20 f005 	lsr.w	r0, r0, r5
 8000934:	fa01 f204 	lsl.w	r2, r1, r4
 8000938:	ea40 0002 	orr.w	r0, r0, r2
 800093c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000940:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000944:	f141 0100 	adc.w	r1, r1, #0
 8000948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800094c:	bf08      	it	eq
 800094e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f1c4 0520 	rsb	r5, r4, #32
 8000958:	fa00 f205 	lsl.w	r2, r0, r5
 800095c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000960:	fa20 f304 	lsr.w	r3, r0, r4
 8000964:	fa01 f205 	lsl.w	r2, r1, r5
 8000968:	ea43 0302 	orr.w	r3, r3, r2
 800096c:	fa21 f004 	lsr.w	r0, r1, r4
 8000970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000974:	fa21 f204 	lsr.w	r2, r1, r4
 8000978:	ea20 0002 	bic.w	r0, r0, r2
 800097c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000980:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000984:	bf08      	it	eq
 8000986:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f094 0f00 	teq	r4, #0
 8000990:	d10f      	bne.n	80009b2 <__aeabi_dmul+0x1c2>
 8000992:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000996:	0040      	lsls	r0, r0, #1
 8000998:	eb41 0101 	adc.w	r1, r1, r1
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	bf08      	it	eq
 80009a2:	3c01      	subeq	r4, #1
 80009a4:	d0f7      	beq.n	8000996 <__aeabi_dmul+0x1a6>
 80009a6:	ea41 0106 	orr.w	r1, r1, r6
 80009aa:	f095 0f00 	teq	r5, #0
 80009ae:	bf18      	it	ne
 80009b0:	4770      	bxne	lr
 80009b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	eb43 0303 	adc.w	r3, r3, r3
 80009bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009c0:	bf08      	it	eq
 80009c2:	3d01      	subeq	r5, #1
 80009c4:	d0f7      	beq.n	80009b6 <__aeabi_dmul+0x1c6>
 80009c6:	ea43 0306 	orr.w	r3, r3, r6
 80009ca:	4770      	bx	lr
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d4:	bf18      	it	ne
 80009d6:	ea95 0f0c 	teqne	r5, ip
 80009da:	d00c      	beq.n	80009f6 <__aeabi_dmul+0x206>
 80009dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e6:	d1d1      	bne.n	800098c <__aeabi_dmul+0x19c>
 80009e8:	ea81 0103 	eor.w	r1, r1, r3
 80009ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009f0:	f04f 0000 	mov.w	r0, #0
 80009f4:	bd70      	pop	{r4, r5, r6, pc}
 80009f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fa:	bf06      	itte	eq
 80009fc:	4610      	moveq	r0, r2
 80009fe:	4619      	moveq	r1, r3
 8000a00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a04:	d019      	beq.n	8000a3a <__aeabi_dmul+0x24a>
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	d102      	bne.n	8000a12 <__aeabi_dmul+0x222>
 8000a0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a10:	d113      	bne.n	8000a3a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	d105      	bne.n	8000a24 <__aeabi_dmul+0x234>
 8000a18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a1c:	bf1c      	itt	ne
 8000a1e:	4610      	movne	r0, r2
 8000a20:	4619      	movne	r1, r3
 8000a22:	d10a      	bne.n	8000a3a <__aeabi_dmul+0x24a>
 8000a24:	ea81 0103 	eor.w	r1, r1, r3
 8000a28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a42:	bd70      	pop	{r4, r5, r6, pc}

08000a44 <__aeabi_ddiv>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a52:	bf1d      	ittte	ne
 8000a54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a58:	ea94 0f0c 	teqne	r4, ip
 8000a5c:	ea95 0f0c 	teqne	r5, ip
 8000a60:	f000 f8a7 	bleq	8000bb2 <__aeabi_ddiv+0x16e>
 8000a64:	eba4 0405 	sub.w	r4, r4, r5
 8000a68:	ea81 0e03 	eor.w	lr, r1, r3
 8000a6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a74:	f000 8088 	beq.w	8000b88 <__aeabi_ddiv+0x144>
 8000a78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a9c:	429d      	cmp	r5, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4296      	cmpeq	r6, r2
 8000aa2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000aa6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000aaa:	d202      	bcs.n	8000ab2 <__aeabi_ddiv+0x6e>
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ab2:	1ab6      	subs	r6, r6, r2
 8000ab4:	eb65 0503 	sbc.w	r5, r5, r3
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	ea4f 0232 	mov.w	r2, r2, rrx
 8000abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ac2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ac6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000aca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ace:	bf22      	ittt	cs
 8000ad0:	1ab6      	subcs	r6, r6, r2
 8000ad2:	4675      	movcs	r5, lr
 8000ad4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ade:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ae2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ae6:	bf22      	ittt	cs
 8000ae8:	1ab6      	subcs	r6, r6, r2
 8000aea:	4675      	movcs	r5, lr
 8000aec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000af0:	085b      	lsrs	r3, r3, #1
 8000af2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000af6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000afa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000afe:	bf22      	ittt	cs
 8000b00:	1ab6      	subcs	r6, r6, r2
 8000b02:	4675      	movcs	r5, lr
 8000b04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b16:	bf22      	ittt	cs
 8000b18:	1ab6      	subcs	r6, r6, r2
 8000b1a:	4675      	movcs	r5, lr
 8000b1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b20:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b24:	d018      	beq.n	8000b58 <__aeabi_ddiv+0x114>
 8000b26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b42:	d1c0      	bne.n	8000ac6 <__aeabi_ddiv+0x82>
 8000b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b48:	d10b      	bne.n	8000b62 <__aeabi_ddiv+0x11e>
 8000b4a:	ea41 0100 	orr.w	r1, r1, r0
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b56:	e7b6      	b.n	8000ac6 <__aeabi_ddiv+0x82>
 8000b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b5c:	bf04      	itt	eq
 8000b5e:	4301      	orreq	r1, r0
 8000b60:	2000      	moveq	r0, #0
 8000b62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b66:	bf88      	it	hi
 8000b68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b6c:	f63f aeaf 	bhi.w	80008ce <__aeabi_dmul+0xde>
 8000b70:	ebb5 0c03 	subs.w	ip, r5, r3
 8000b74:	bf04      	itt	eq
 8000b76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000b7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000b7e:	f150 0000 	adcs.w	r0, r0, #0
 8000b82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
 8000b88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b94:	bfc2      	ittt	gt
 8000b96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b9e:	bd70      	popgt	{r4, r5, r6, pc}
 8000ba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba4:	f04f 0e00 	mov.w	lr, #0
 8000ba8:	3c01      	subs	r4, #1
 8000baa:	e690      	b.n	80008ce <__aeabi_dmul+0xde>
 8000bac:	ea45 0e06 	orr.w	lr, r5, r6
 8000bb0:	e68d      	b.n	80008ce <__aeabi_dmul+0xde>
 8000bb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bb6:	ea94 0f0c 	teq	r4, ip
 8000bba:	bf08      	it	eq
 8000bbc:	ea95 0f0c 	teqeq	r5, ip
 8000bc0:	f43f af3b 	beq.w	8000a3a <__aeabi_dmul+0x24a>
 8000bc4:	ea94 0f0c 	teq	r4, ip
 8000bc8:	d10a      	bne.n	8000be0 <__aeabi_ddiv+0x19c>
 8000bca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000bce:	f47f af34 	bne.w	8000a3a <__aeabi_dmul+0x24a>
 8000bd2:	ea95 0f0c 	teq	r5, ip
 8000bd6:	f47f af25 	bne.w	8000a24 <__aeabi_dmul+0x234>
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	e72c      	b.n	8000a3a <__aeabi_dmul+0x24a>
 8000be0:	ea95 0f0c 	teq	r5, ip
 8000be4:	d106      	bne.n	8000bf4 <__aeabi_ddiv+0x1b0>
 8000be6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000bea:	f43f aefd 	beq.w	80009e8 <__aeabi_dmul+0x1f8>
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	e722      	b.n	8000a3a <__aeabi_dmul+0x24a>
 8000bf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000bf8:	bf18      	it	ne
 8000bfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000bfe:	f47f aec5 	bne.w	800098c <__aeabi_dmul+0x19c>
 8000c02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c06:	f47f af0d 	bne.w	8000a24 <__aeabi_dmul+0x234>
 8000c0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c0e:	f47f aeeb 	bne.w	80009e8 <__aeabi_dmul+0x1f8>
 8000c12:	e712      	b.n	8000a3a <__aeabi_dmul+0x24a>

08000c14 <__gedf2>:
 8000c14:	f04f 3cff 	mov.w	ip, #4294967295
 8000c18:	e006      	b.n	8000c28 <__cmpdf2+0x4>
 8000c1a:	bf00      	nop

08000c1c <__ledf2>:
 8000c1c:	f04f 0c01 	mov.w	ip, #1
 8000c20:	e002      	b.n	8000c28 <__cmpdf2+0x4>
 8000c22:	bf00      	nop

08000c24 <__cmpdf2>:
 8000c24:	f04f 0c01 	mov.w	ip, #1
 8000c28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c38:	bf18      	it	ne
 8000c3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c3e:	d01b      	beq.n	8000c78 <__cmpdf2+0x54>
 8000c40:	b001      	add	sp, #4
 8000c42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000c46:	bf0c      	ite	eq
 8000c48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000c4c:	ea91 0f03 	teqne	r1, r3
 8000c50:	bf02      	ittt	eq
 8000c52:	ea90 0f02 	teqeq	r0, r2
 8000c56:	2000      	moveq	r0, #0
 8000c58:	4770      	bxeq	lr
 8000c5a:	f110 0f00 	cmn.w	r0, #0
 8000c5e:	ea91 0f03 	teq	r1, r3
 8000c62:	bf58      	it	pl
 8000c64:	4299      	cmppl	r1, r3
 8000c66:	bf08      	it	eq
 8000c68:	4290      	cmpeq	r0, r2
 8000c6a:	bf2c      	ite	cs
 8000c6c:	17d8      	asrcs	r0, r3, #31
 8000c6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000c72:	f040 0001 	orr.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c80:	d102      	bne.n	8000c88 <__cmpdf2+0x64>
 8000c82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c86:	d107      	bne.n	8000c98 <__cmpdf2+0x74>
 8000c88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c90:	d1d6      	bne.n	8000c40 <__cmpdf2+0x1c>
 8000c92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c96:	d0d3      	beq.n	8000c40 <__cmpdf2+0x1c>
 8000c98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_cdrcmple>:
 8000ca0:	4684      	mov	ip, r0
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4662      	mov	r2, ip
 8000ca6:	468c      	mov	ip, r1
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4663      	mov	r3, ip
 8000cac:	e000      	b.n	8000cb0 <__aeabi_cdcmpeq>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_cdcmpeq>:
 8000cb0:	b501      	push	{r0, lr}
 8000cb2:	f7ff ffb7 	bl	8000c24 <__cmpdf2>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	bf48      	it	mi
 8000cba:	f110 0f00 	cmnmi.w	r0, #0
 8000cbe:	bd01      	pop	{r0, pc}

08000cc0 <__aeabi_dcmpeq>:
 8000cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc4:	f7ff fff4 	bl	8000cb0 <__aeabi_cdcmpeq>
 8000cc8:	bf0c      	ite	eq
 8000cca:	2001      	moveq	r0, #1
 8000ccc:	2000      	movne	r0, #0
 8000cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_dcmplt>:
 8000cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd8:	f7ff ffea 	bl	8000cb0 <__aeabi_cdcmpeq>
 8000cdc:	bf34      	ite	cc
 8000cde:	2001      	movcc	r0, #1
 8000ce0:	2000      	movcs	r0, #0
 8000ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_dcmple>:
 8000ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cec:	f7ff ffe0 	bl	8000cb0 <__aeabi_cdcmpeq>
 8000cf0:	bf94      	ite	ls
 8000cf2:	2001      	movls	r0, #1
 8000cf4:	2000      	movhi	r0, #0
 8000cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfa:	bf00      	nop

08000cfc <__aeabi_dcmpge>:
 8000cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d00:	f7ff ffce 	bl	8000ca0 <__aeabi_cdrcmple>
 8000d04:	bf94      	ite	ls
 8000d06:	2001      	movls	r0, #1
 8000d08:	2000      	movhi	r0, #0
 8000d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0e:	bf00      	nop

08000d10 <__aeabi_dcmpgt>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff ffc4 	bl	8000ca0 <__aeabi_cdrcmple>
 8000d18:	bf34      	ite	cc
 8000d1a:	2001      	movcc	r0, #1
 8000d1c:	2000      	movcs	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_d2iz>:
 8000d24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d2c:	d215      	bcs.n	8000d5a <__aeabi_d2iz+0x36>
 8000d2e:	d511      	bpl.n	8000d54 <__aeabi_d2iz+0x30>
 8000d30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d38:	d912      	bls.n	8000d60 <__aeabi_d2iz+0x3c>
 8000d3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000d4e:	bf18      	it	ne
 8000d50:	4240      	negne	r0, r0
 8000d52:	4770      	bx	lr
 8000d54:	f04f 0000 	mov.w	r0, #0
 8000d58:	4770      	bx	lr
 8000d5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d5e:	d105      	bne.n	8000d6c <__aeabi_d2iz+0x48>
 8000d60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d64:	bf08      	it	eq
 8000d66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d6a:	4770      	bx	lr
 8000d6c:	f04f 0000 	mov.w	r0, #0
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <__aeabi_d2uiz>:
 8000d74:	004a      	lsls	r2, r1, #1
 8000d76:	d211      	bcs.n	8000d9c <__aeabi_d2uiz+0x28>
 8000d78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d7c:	d211      	bcs.n	8000da2 <__aeabi_d2uiz+0x2e>
 8000d7e:	d50d      	bpl.n	8000d9c <__aeabi_d2uiz+0x28>
 8000d80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d88:	d40e      	bmi.n	8000da8 <__aeabi_d2uiz+0x34>
 8000d8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d96:	fa23 f002 	lsr.w	r0, r3, r2
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000da6:	d102      	bne.n	8000dae <__aeabi_d2uiz+0x3a>
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	4770      	bx	lr
 8000dae:	f04f 0000 	mov.w	r0, #0
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_d2f>:
 8000db4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000db8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000dbc:	bf24      	itt	cs
 8000dbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000dc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000dc6:	d90d      	bls.n	8000de4 <__aeabi_d2f+0x30>
 8000dc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000dd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000dd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000dd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000de8:	d121      	bne.n	8000e2e <__aeabi_d2f+0x7a>
 8000dea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000dee:	bfbc      	itt	lt
 8000df0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000df4:	4770      	bxlt	lr
 8000df6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000dfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000dfe:	f1c2 0218 	rsb	r2, r2, #24
 8000e02:	f1c2 0c20 	rsb	ip, r2, #32
 8000e06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000e0e:	bf18      	it	ne
 8000e10:	f040 0001 	orrne.w	r0, r0, #1
 8000e14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000e1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000e20:	ea40 000c 	orr.w	r0, r0, ip
 8000e24:	fa23 f302 	lsr.w	r3, r3, r2
 8000e28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e2c:	e7cc      	b.n	8000dc8 <__aeabi_d2f+0x14>
 8000e2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000e32:	d107      	bne.n	8000e44 <__aeabi_d2f+0x90>
 8000e34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000e38:	bf1e      	ittt	ne
 8000e3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000e3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000e42:	4770      	bxne	lr
 8000e44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <__aeabi_uldivmod>:
 8000e54:	b953      	cbnz	r3, 8000e6c <__aeabi_uldivmod+0x18>
 8000e56:	b94a      	cbnz	r2, 8000e6c <__aeabi_uldivmod+0x18>
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	bf08      	it	eq
 8000e5c:	2800      	cmpeq	r0, #0
 8000e5e:	bf1c      	itt	ne
 8000e60:	f04f 31ff 	movne.w	r1, #4294967295
 8000e64:	f04f 30ff 	movne.w	r0, #4294967295
 8000e68:	f000 b80c 	b.w	8000e84 <__aeabi_idiv0>
 8000e6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e74:	f006 f9b2 	bl	80071dc <__udivmoddi4>
 8000e78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e80:	b004      	add	sp, #16
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
	...

08000e90 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000e94:	f002 0803 	and.w	r8, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000e98:	f3c2 04c1 	ubfx	r4, r2, #3, #2
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000e9c:	f3c2 0580 	ubfx	r5, r2, #2, #1
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000ea0:	09d6      	lsrs	r6, r2, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000ea2:	46c6      	mov	lr, r8
  uint32_t bit     = 0;
 8000ea4:	2200      	movs	r2, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000ea6:	f04f 0b0f 	mov.w	fp, #15
      m1 = 1 << bit;
 8000eaa:	f04f 0a01 	mov.w	sl, #1
      m2 = 3 << (bit * 2);
 8000eae:	46a1      	mov	r9, r4
 8000eb0:	e015      	b.n	8000ede <_pal_lld_setgroupmode+0x4e>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000eb2:	f8d0 c000 	ldr.w	ip, [r0]
 8000eb6:	ea03 030c 	and.w	r3, r3, ip
 8000eba:	ea43 030e 	orr.w	r3, r3, lr
        if (bit < 8)
 8000ebe:	2a07      	cmp	r2, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000ec0:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000ec2:	d841      	bhi.n	8000f48 <_pal_lld_setgroupmode+0xb8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000ec4:	6a03      	ldr	r3, [r0, #32]
 8000ec6:	ea23 0307 	bic.w	r3, r3, r7
 8000eca:	4323      	orrs	r3, r4
 8000ecc:	6203      	str	r3, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000ece:	0849      	lsrs	r1, r1, #1
 8000ed0:	d038      	beq.n	8000f44 <_pal_lld_setgroupmode+0xb4>
      return;
    otyper <<= 1;
 8000ed2:	006d      	lsls	r5, r5, #1
    ospeedr <<= 2;
 8000ed4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    pupdr <<= 2;
    moder <<= 2;
 8000ed8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8000edc:	3201      	adds	r2, #1
    if ((mask & 1) != 0) {
 8000ede:	07cb      	lsls	r3, r1, #31
 8000ee0:	d5f5      	bpl.n	8000ece <_pal_lld_setgroupmode+0x3e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000ee2:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000ee4:	fa0a f402 	lsl.w	r4, sl, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000ee8:	ea23 0304 	bic.w	r3, r3, r4
 8000eec:	432b      	orrs	r3, r5
 8000eee:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000ef0:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 8000ef2:	f04f 0c03 	mov.w	ip, #3
 8000ef6:	0053      	lsls	r3, r2, #1
 8000ef8:	fa0c f303 	lsl.w	r3, ip, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000efc:	ea24 0c03 	bic.w	ip, r4, r3
 8000f00:	ea4c 0409 	orr.w	r4, ip, r9
 8000f04:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f06:	68c4      	ldr	r4, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000f08:	f002 0707 	and.w	r7, r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f0c:	ea24 0403 	bic.w	r4, r4, r3
      altrmask = altr << ((bit & 7) * 4);
 8000f10:	00bf      	lsls	r7, r7, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000f12:	f1b8 0f02 	cmp.w	r8, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f16:	60c4      	str	r4, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000f18:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000f1c:	fa06 f407 	lsl.w	r4, r6, r7
      m4 = 15 << ((bit & 7) * 4);
 8000f20:	fa0b f707 	lsl.w	r7, fp, r7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000f24:	d1c5      	bne.n	8000eb2 <_pal_lld_setgroupmode+0x22>
        if (bit < 8)
 8000f26:	2a07      	cmp	r2, #7
 8000f28:	d814      	bhi.n	8000f54 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000f2a:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8000f2e:	ea2c 0707 	bic.w	r7, ip, r7
 8000f32:	433c      	orrs	r4, r7
 8000f34:	6204      	str	r4, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f36:	6804      	ldr	r4, [r0, #0]
 8000f38:	4023      	ands	r3, r4
 8000f3a:	ea43 030e 	orr.w	r3, r3, lr
    if (!mask)
 8000f3e:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f40:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000f42:	d1c6      	bne.n	8000ed2 <_pal_lld_setgroupmode+0x42>
  }
}
 8000f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f4a:	ea23 0307 	bic.w	r3, r3, r7
 8000f4e:	4323      	orrs	r3, r4
 8000f50:	6243      	str	r3, [r0, #36]	; 0x24
 8000f52:	e7bc      	b.n	8000ece <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f54:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8000f58:	ea2c 0707 	bic.w	r7, ip, r7
 8000f5c:	433c      	orrs	r4, r7
 8000f5e:	6244      	str	r4, [r0, #36]	; 0x24
 8000f60:	e7e9      	b.n	8000f36 <_pal_lld_setgroupmode+0xa6>
 8000f62:	bf00      	nop
	...

08000f70 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000f70:	4a02      	ldr	r2, [pc, #8]	; (8000f7c <notify1+0xc>)
 8000f72:	68d3      	ldr	r3, [r2, #12]
 8000f74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f78:	60d3      	str	r3, [r2, #12]
}
 8000f7a:	4770      	bx	lr
 8000f7c:	40011000 	.word	0x40011000

08000f80 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000f80:	4a02      	ldr	r2, [pc, #8]	; (8000f8c <notify2+0xc>)
 8000f82:	68d3      	ldr	r3, [r2, #12]
 8000f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f88:	60d3      	str	r3, [r2, #12]
}
 8000f8a:	4770      	bx	lr
 8000f8c:	40004400 	.word	0x40004400

08000f90 <chSysHalt>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8000f92:	4903      	ldr	r1, [pc, #12]	; (8000fa0 <chSysHalt+0x10>)
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <chSysHalt+0x14>)
  currcore->dbg.panic_msg = reason;
 8000f96:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 8000f9e:	e7fe      	b.n	8000f9e <chSysHalt+0xe>
 8000fa0:	20000de0 	.word	0x20000de0
 8000fa4:	200010c0 	.word	0x200010c0
	...

08000fb0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000fb0:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000fb4:	b510      	push	{r4, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8000fb6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000fb8:	d112      	bne.n	8000fe0 <i2c_lld_serve_tx_end_irq+0x30>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000fba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000fbc:	680a      	ldr	r2, [r1, #0]
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	f023 031f 	bic.w	r3, r3, #31
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	07db      	lsls	r3, r3, #31
 8000fca:	d4fc      	bmi.n	8000fc6 <i2c_lld_serve_tx_end_irq+0x16>
 8000fcc:	7a48      	ldrb	r0, [r1, #9]
 8000fce:	684a      	ldr	r2, [r1, #4]
 8000fd0:	233d      	movs	r3, #61	; 0x3d
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000fd6:	6863      	ldr	r3, [r4, #4]
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fdc:	6063      	str	r3, [r4, #4]
}
 8000fde:	bd10      	pop	{r4, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8000fe0:	4801      	ldr	r0, [pc, #4]	; (8000fe8 <i2c_lld_serve_tx_end_irq+0x38>)
 8000fe2:	f7ff ffd5 	bl	8000f90 <chSysHalt>
 8000fe6:	bf00      	nop
 8000fe8:	080074a8 	.word	0x080074a8
 8000fec:	00000000 	.word	0x00000000

08000ff0 <__idle_thread>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8000ff0:	e7fe      	b.n	8000ff0 <__idle_thread>
 8000ff2:	bf00      	nop
	...

08001000 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001000:	4b01      	ldr	r3, [pc, #4]	; (8001008 <chTMStartMeasurementX+0x8>)
 8001002:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001004:	6083      	str	r3, [r0, #8]
}
 8001006:	4770      	bx	lr
 8001008:	e0001000 	.word	0xe0001000
 800100c:	00000000 	.word	0x00000000

08001010 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <chTMStopMeasurementX+0x3c>)
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8001014:	6881      	ldr	r1, [r0, #8]
 8001016:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001018:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 800101a:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800101c:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800101e:	1b1b      	subs	r3, r3, r4
 8001020:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8001022:	18d2      	adds	r2, r2, r3
 8001024:	6941      	ldr	r1, [r0, #20]
 8001026:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8001028:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 800102a:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800102c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8001030:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8001032:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8001034:	bf88      	it	hi
 8001036:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8001038:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 800103a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 800103c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001040:	6141      	str	r1, [r0, #20]
}
 8001042:	f85d 4b04 	ldr.w	r4, [sp], #4
    tmp->best = tmp->last;
 8001046:	bf38      	it	cc
 8001048:	6003      	strcc	r3, [r0, #0]
}
 800104a:	4770      	bx	lr
 800104c:	200010c0 	.word	0x200010c0
 8001050:	e0001000 	.word	0xe0001000
	...

08001060 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001064:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 8001066:	f890 8038 	ldrb.w	r8, [r0, #56]	; 0x38
  dest_row = u8g2->tile_curr_row;
 800106a:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800106e:	f893 9011 	ldrb.w	r9, [r3, #17]
 8001072:	2400      	movs	r4, #0
{
 8001074:	b082      	sub	sp, #8
 8001076:	4606      	mov	r6, r0
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001078:	46a2      	mov	sl, r4
 800107a:	e002      	b.n	8001082 <u8g2_send_buffer+0x22>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 800107c:	45a9      	cmp	r9, r5
 800107e:	d91a      	bls.n	80010b6 <u8g2_send_buffer+0x56>
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001080:	6833      	ldr	r3, [r6, #0]
 8001082:	7c19      	ldrb	r1, [r3, #16]
  ptr = u8g2->tile_buf_ptr;
 8001084:	6b72      	ldr	r2, [r6, #52]	; 0x34
  tile.y_pos = y;
 8001086:	f88d 5006 	strb.w	r5, [sp, #6]
  offset *= 8;
 800108a:	fb11 f304 	smulbb	r3, r1, r4
 800108e:	00db      	lsls	r3, r3, #3
  ptr += offset;
 8001090:	b29b      	uxth	r3, r3
 8001092:	441a      	add	r2, r3
  tile.cnt = cnt;
 8001094:	f88d 1004 	strb.w	r1, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8001098:	9200      	str	r2, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800109a:	466b      	mov	r3, sp
 800109c:	68b7      	ldr	r7, [r6, #8]
  tile.x_pos = x;
 800109e:	f88d a005 	strb.w	sl, [sp, #5]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80010a2:	2201      	movs	r2, #1
 80010a4:	210f      	movs	r1, #15
 80010a6:	4630      	mov	r0, r6
  } while( src_row < src_max && dest_row < dest_max );
 80010a8:	3401      	adds	r4, #1
 80010aa:	47b8      	blx	r7
 80010ac:	b2e3      	uxtb	r3, r4
    dest_row++;
 80010ae:	3501      	adds	r5, #1
  } while( src_row < src_max && dest_row < dest_max );
 80010b0:	4598      	cmp	r8, r3
    dest_row++;
 80010b2:	b2ed      	uxtb	r5, r5
  } while( src_row < src_max && dest_row < dest_max );
 80010b4:	d8e2      	bhi.n	800107c <u8g2_send_buffer+0x1c>
}
 80010b6:	b002      	add	sp, #8
 80010b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010bc:	0000      	movs	r0, r0
	...

080010c0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 80010c4:	f7ff ffcc 	bl	8001060 <u8g2_send_buffer>
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80010c8:	68a5      	ldr	r5, [r4, #8]
 80010ca:	2300      	movs	r3, #0
 80010cc:	4620      	mov	r0, r4
 80010ce:	46ac      	mov	ip, r5
 80010d0:	461a      	mov	r2, r3
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}
 80010d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80010d6:	2110      	movs	r1, #16
 80010d8:	4760      	bx	ip
 80010da:	bf00      	nop
 80010dc:	0000      	movs	r0, r0
	...

080010e0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 80010e0:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 80010e2:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 80010e4:	7850      	ldrb	r0, [r2, #1]
 80010e6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 80010ea:	b280      	uxth	r0, r0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d005      	beq.n	8001100 <u8g2_add_vector_y+0x10>
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d009      	beq.n	800110c <u8g2_add_vector_y+0x1c>
 80010f8:	b12b      	cbz	r3, 8001106 <u8g2_add_vector_y+0x16>
      break;
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
 80010fa:	1a41      	subs	r1, r0, r1
 80010fc:	b288      	uxth	r0, r1
      break;      
  }
  return dy;
}
 80010fe:	4770      	bx	lr
      dy += x;
 8001100:	4401      	add	r1, r0
 8001102:	b288      	uxth	r0, r1
      break;
 8001104:	4770      	bx	lr
      dy += y;
 8001106:	4402      	add	r2, r0
 8001108:	b290      	uxth	r0, r2
      break;
 800110a:	4770      	bx	lr
      dy -= y;
 800110c:	1a82      	subs	r2, r0, r2
 800110e:	b290      	uxth	r0, r2
      break;
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
	...

08001120 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 8001120:	2b01      	cmp	r3, #1
 8001122:	d005      	beq.n	8001130 <u8g2_add_vector_x+0x10>
 8001124:	2b02      	cmp	r3, #2
 8001126:	d009      	beq.n	800113c <u8g2_add_vector_x+0x1c>
 8001128:	b12b      	cbz	r3, 8001136 <u8g2_add_vector_x+0x16>
      break;
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
 800112a:	4402      	add	r2, r0
 800112c:	b290      	uxth	r0, r2
      break;      
  }
  return dx;
}
 800112e:	4770      	bx	lr
      dx -= y;
 8001130:	1a82      	subs	r2, r0, r2
 8001132:	b290      	uxth	r0, r2
      break;
 8001134:	4770      	bx	lr
      dx += x;
 8001136:	4401      	add	r1, r0
 8001138:	b288      	uxth	r0, r1
      break;
 800113a:	4770      	bx	lr
      dx -= x;
 800113c:	1a41      	subs	r1, r0, r1
 800113e:	b288      	uxth	r0, r1
      break;
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
	...

08001150 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8001150:	2000      	movs	r0, #0
 8001152:	4770      	bx	lr
	...

08001160 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8001160:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001162:	428b      	cmp	r3, r1
 8001164:	d06d      	beq.n	8001242 <u8g2_SetFont+0xe2>
{
 8001166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800116a:	6581      	str	r1, [r0, #88]	; 0x58
  return u8x8_pgm_read( font );  
 800116c:	780b      	ldrb	r3, [r1, #0]
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800116e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  return u8x8_pgm_read( font );  
 8001172:	784b      	ldrb	r3, [r1, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001174:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
  return u8x8_pgm_read( font );  
 8001178:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800117a:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  return u8x8_pgm_read( font );  
 800117e:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001180:	f880 3077 	strb.w	r3, [r0, #119]	; 0x77
  return u8x8_pgm_read( font );  
 8001184:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001186:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  return u8x8_pgm_read( font );  
 800118a:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800118c:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
  return u8x8_pgm_read( font );  
 8001190:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001192:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
  return u8x8_pgm_read( font );  
 8001196:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001198:	f880 307b 	strb.w	r3, [r0, #123]	; 0x7b
  return u8x8_pgm_read( font );  
 800119c:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800119e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80011a2:	7a4b      	ldrb	r3, [r1, #9]
 80011a4:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80011a8:	f991 800a 	ldrsb.w	r8, [r1, #10]
  return u8x8_pgm_read( font );  
 80011ac:	7a8b      	ldrb	r3, [r1, #10]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80011ae:	f880 807e 	strb.w	r8, [r0, #126]	; 0x7e
{
 80011b2:	b083      	sub	sp, #12
 80011b4:	460d      	mov	r5, r1
  return u8x8_pgm_read( font );  
 80011b6:	9300      	str	r3, [sp, #0]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80011b8:	7acb      	ldrb	r3, [r1, #11]
 80011ba:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80011be:	f991 b00c 	ldrsb.w	fp, [r1, #12]
  return u8x8_pgm_read( font );  
 80011c2:	7b0b      	ldrb	r3, [r1, #12]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80011c4:	f880 b080 	strb.w	fp, [r0, #128]	; 0x80
  return u8x8_pgm_read( font );  
 80011c8:	9301      	str	r3, [sp, #4]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80011ca:	f991 700d 	ldrsb.w	r7, [r1, #13]
 80011ce:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80011d2:	f991 600e 	ldrsb.w	r6, [r1, #14]
 80011d6:	f880 6082 	strb.w	r6, [r0, #130]	; 0x82
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80011da:	f991 900f 	ldrsb.w	r9, [r1, #15]
 80011de:	f880 9083 	strb.w	r9, [r0, #131]	; 0x83
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80011e2:	f991 a010 	ldrsb.w	sl, [r1, #16]
 80011e6:	f880 a084 	strb.w	sl, [r0, #132]	; 0x84
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80011ea:	4604      	mov	r4, r0
 80011ec:	2111      	movs	r1, #17
 80011ee:	4628      	mov	r0, r5
 80011f0:	f7ff ff76 	bl	80010e0 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80011f4:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80011f6:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80011fa:	4628      	mov	r0, r5
 80011fc:	f7ff ff70 	bl	80010e0 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001200:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001202:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001206:	4628      	mov	r0, r5
 8001208:	f7ff ff6a 	bl	80010e0 <u8g2_font_get_word>
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800120c:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001210:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001214:	f884 708e 	strb.w	r7, [r4, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001218:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800121c:	b911      	cbnz	r1, 8001224 <u8g2_SetFont+0xc4>
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800121e:	b003      	add	sp, #12
 8001220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001224:	2901      	cmp	r1, #1
 8001226:	d00d      	beq.n	8001244 <u8g2_SetFont+0xe4>
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001228:	44d8      	add	r8, fp
 800122a:	4547      	cmp	r7, r8
 800122c:	da04      	bge.n	8001238 <u8g2_SetFont+0xd8>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800122e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001232:	4413      	add	r3, r2
 8001234:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001238:	45b3      	cmp	fp, r6
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800123a:	bfb8      	it	lt
 800123c:	f884 b08f 	strblt.w	fp, [r4, #143]	; 0x8f
}
 8001240:	e7ed      	b.n	800121e <u8g2_SetFont+0xbe>
 8001242:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001244:	454f      	cmp	r7, r9
 8001246:	463b      	mov	r3, r7
 8001248:	bfb8      	it	lt
 800124a:	464b      	movlt	r3, r9
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800124c:	4556      	cmp	r6, sl
 800124e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
 8001252:	dde4      	ble.n	800121e <u8g2_SetFont+0xbe>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001254:	f884 a08f 	strb.w	sl, [r4, #143]	; 0x8f
 8001258:	e7e1      	b.n	800121e <u8g2_SetFont+0xbe>
 800125a:	bf00      	nop
 800125c:	0000      	movs	r0, r0
	...

08001260 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001260:	b410      	push	{r4}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001262:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
{
 8001266:	f89d c004 	ldrb.w	ip, [sp, #4]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800126a:	b19c      	cbz	r4, 8001294 <u8g2_DrawHVLine+0x34>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800126c:	b193      	cbz	r3, 8001294 <u8g2_DrawHVLine+0x34>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800126e:	2b01      	cmp	r3, #1
 8001270:	d005      	beq.n	800127e <u8g2_DrawHVLine+0x1e>
      {
	if ( dir == 2 )
 8001272:	f1bc 0f02 	cmp.w	ip, #2
 8001276:	d010      	beq.n	800129a <u8g2_DrawHVLine+0x3a>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
 8001278:	f1bc 0f03 	cmp.w	ip, #3
 800127c:	d058      	beq.n	8001330 <u8g2_DrawHVLine+0xd0>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 800127e:	f01c 0f01 	tst.w	ip, #1
 8001282:	d00d      	beq.n	80012a0 <u8g2_DrawHVLine+0x40>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001284:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
 8001288:	428c      	cmp	r4, r1
 800128a:	d803      	bhi.n	8001294 <u8g2_DrawHVLine+0x34>
	  return;
	if ( x >= u8g2->user_x1 )
 800128c:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 8001290:	428c      	cmp	r4, r1
 8001292:	d830      	bhi.n	80012f6 <u8g2_DrawHVLine+0x96>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
 8001294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001298:	4770      	bx	lr
	  x++;
 800129a:	3101      	adds	r1, #1
 800129c:	1ac9      	subs	r1, r1, r3
 800129e:	b289      	uxth	r1, r1
	if ( y < u8g2->user_y0 )
 80012a0:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
 80012a4:	4294      	cmp	r4, r2
 80012a6:	d8f5      	bhi.n	8001294 <u8g2_DrawHVLine+0x34>
	if ( y >= u8g2->user_y1 )
 80012a8:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 80012ac:	4294      	cmp	r4, r2
 80012ae:	d9f1      	bls.n	8001294 <u8g2_DrawHVLine+0x34>
  b += *len;
 80012b0:	440b      	add	r3, r1
 80012b2:	fa1f fc83 	uxth.w	ip, r3
  if ( a > b )
 80012b6:	4561      	cmp	r1, ip
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80012b8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 80012bc:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
  if ( a > b )
 80012c0:	d93f      	bls.n	8001342 <u8g2_DrawHVLine+0xe2>
    if ( a < d )
 80012c2:	428c      	cmp	r4, r1
 80012c4:	d93c      	bls.n	8001340 <u8g2_DrawHVLine+0xe0>
      b--;
 80012c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80012ca:	fa1f fc8c 	uxth.w	ip, ip
  if ( b <= c )
 80012ce:	4563      	cmp	r3, ip
 80012d0:	d2e0      	bcs.n	8001294 <u8g2_DrawHVLine+0x34>
  if ( a < c )		
 80012d2:	4299      	cmp	r1, r3
 80012d4:	bf38      	it	cc
 80012d6:	4619      	movcc	r1, r3
  b -= a;
 80012d8:	4564      	cmp	r4, ip
 80012da:	bf94      	ite	ls
 80012dc:	ebc1 0304 	rsbls	r3, r1, r4
 80012e0:	ebc1 030c 	rsbhi	r3, r1, ip
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	2400      	movs	r4, #0
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80012e8:	9401      	str	r4, [sp, #4]
 80012ea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012ec:	68a4      	ldr	r4, [r4, #8]
 80012ee:	46a4      	mov	ip, r4
}
 80012f0:	f85d 4b04 	ldr.w	r4, [sp], #4
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80012f4:	4760      	bx	ip
  b += *len;
 80012f6:	4413      	add	r3, r2
 80012f8:	fa1f fc83 	uxth.w	ip, r3
  if ( a > b )
 80012fc:	4594      	cmp	ip, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80012fe:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8001302:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
  if ( a > b )
 8001306:	d218      	bcs.n	800133a <u8g2_DrawHVLine+0xda>
    if ( a < d )
 8001308:	4294      	cmp	r4, r2
 800130a:	d915      	bls.n	8001338 <u8g2_DrawHVLine+0xd8>
      b--;
 800130c:	f104 3cff 	add.w	ip, r4, #4294967295
 8001310:	fa1f fc8c 	uxth.w	ip, ip
  if ( b <= c )
 8001314:	4563      	cmp	r3, ip
 8001316:	d2bd      	bcs.n	8001294 <u8g2_DrawHVLine+0x34>
  if ( a < c )		
 8001318:	429a      	cmp	r2, r3
 800131a:	bf38      	it	cc
 800131c:	461a      	movcc	r2, r3
  b -= a;
 800131e:	4564      	cmp	r4, ip
 8001320:	bf94      	ite	ls
 8001322:	ebc2 0304 	rsbls	r3, r2, r4
 8001326:	ebc2 030c 	rsbhi	r3, r2, ip
 800132a:	b29b      	uxth	r3, r3
 800132c:	2401      	movs	r4, #1
 800132e:	e7db      	b.n	80012e8 <u8g2_DrawHVLine+0x88>
	  y++;
 8001330:	3201      	adds	r2, #1
 8001332:	1ad2      	subs	r2, r2, r3
 8001334:	b292      	uxth	r2, r2
      if ( dir == 0 )
 8001336:	e7a5      	b.n	8001284 <u8g2_DrawHVLine+0x24>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001338:	461a      	mov	r2, r3
  if ( a >= d )
 800133a:	4294      	cmp	r4, r2
 800133c:	d8ea      	bhi.n	8001314 <u8g2_DrawHVLine+0xb4>
 800133e:	e7a9      	b.n	8001294 <u8g2_DrawHVLine+0x34>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001340:	4619      	mov	r1, r3
  if ( a >= d )
 8001342:	428c      	cmp	r4, r1
 8001344:	d8c3      	bhi.n	80012ce <u8g2_DrawHVLine+0x6e>
 8001346:	e7a5      	b.n	8001294 <u8g2_DrawHVLine+0x34>
	...

08001350 <u8g2_font_decode_len>:
{
 8001350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001354:	b087      	sub	sp, #28
  lx = decode->x;
 8001356:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
  ly = decode->y;
 800135a:	f890 b069 	ldrb.w	fp, [r0, #105]	; 0x69
{
 800135e:	9205      	str	r2, [sp, #20]
 8001360:	4604      	mov	r4, r0
 8001362:	460e      	mov	r6, r1
  ly = decode->y;
 8001364:	e00f      	b.n	8001386 <u8g2_font_decode_len+0x36>
    else if ( decode->is_transparent == 0 )    
 8001366:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 800136a:	2900      	cmp	r1, #0
 800136c:	d046      	beq.n	80013fc <u8g2_font_decode_len+0xac>
    cnt -= rem;
 800136e:	19f3      	adds	r3, r6, r7
    if ( cnt < rem )
 8001370:	42ae      	cmp	r6, r5
    cnt -= rem;
 8001372:	eba3 030a 	sub.w	r3, r3, sl
    ly++;
 8001376:	f10b 0b01 	add.w	fp, fp, #1
    if ( cnt < rem )
 800137a:	d337      	bcc.n	80013ec <u8g2_font_decode_len+0x9c>
    cnt -= rem;
 800137c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    ly++;
 8001380:	fa5f fb8b 	uxtb.w	fp, fp
    lx = 0;
 8001384:	2700      	movs	r7, #0
    rem = decode->glyph_width;
 8001386:	f894 a06a 	ldrb.w	sl, [r4, #106]	; 0x6a
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800138a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800138e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    y = decode->target_y;
 8001392:	f8b4 8066 	ldrh.w	r8, [r4, #102]	; 0x66
    rem -= lx;
 8001396:	ebaa 0507 	sub.w	r5, sl, r7
 800139a:	b2ed      	uxtb	r5, r5
    if ( cnt < rem )
 800139c:	42ae      	cmp	r6, r5
 800139e:	4632      	mov	r2, r6
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80013a0:	fa4f f98b 	sxtb.w	r9, fp
 80013a4:	bf28      	it	cs
 80013a6:	462a      	movcs	r2, r5
 80013a8:	b279      	sxtb	r1, r7
 80013aa:	9204      	str	r2, [sp, #16]
 80013ac:	464a      	mov	r2, r9
 80013ae:	9103      	str	r1, [sp, #12]
 80013b0:	f7ff feb6 	bl	8001120 <u8g2_add_vector_x>
 80013b4:	4602      	mov	r2, r0
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80013b6:	9903      	ldr	r1, [sp, #12]
 80013b8:	4640      	mov	r0, r8
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80013ba:	4690      	mov	r8, r2
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80013bc:	464a      	mov	r2, r9
 80013be:	f7ff fe97 	bl	80010f0 <u8g2_add_vector_y>
    if ( is_foreground )
 80013c2:	9905      	ldr	r1, [sp, #20]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80013c4:	4602      	mov	r2, r0
    if ( is_foreground )
 80013c6:	2900      	cmp	r1, #0
 80013c8:	d0cd      	beq.n	8001366 <u8g2_font_decode_len+0x16>
      u8g2_DrawHVLine(u8g2, 
 80013ca:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80013cc:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
      u8g2_DrawHVLine(u8g2, 
 80013d0:	9b04      	ldr	r3, [sp, #16]
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80013d2:	f884 c092 	strb.w	ip, [r4, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80013d6:	4641      	mov	r1, r8
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff ff41 	bl	8001260 <u8g2_DrawHVLine>
    cnt -= rem;
 80013de:	19f3      	adds	r3, r6, r7
    if ( cnt < rem )
 80013e0:	42ae      	cmp	r6, r5
    cnt -= rem;
 80013e2:	eba3 030a 	sub.w	r3, r3, sl
    ly++;
 80013e6:	f10b 0b01 	add.w	fp, fp, #1
    if ( cnt < rem )
 80013ea:	d2c7      	bcs.n	800137c <u8g2_font_decode_len+0x2c>
  lx += cnt;
 80013ec:	443e      	add	r6, r7
  decode->x = lx;
 80013ee:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  decode->y = ly;  
 80013f2:	f884 9069 	strb.w	r9, [r4, #105]	; 0x69
}
 80013f6:	b007      	add	sp, #28
 80013f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u8g2_DrawHVLine(u8g2, 
 80013fc:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80013fe:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
 8001402:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001406:	9b04      	ldr	r3, [sp, #16]
 8001408:	4641      	mov	r1, r8
 800140a:	4620      	mov	r0, r4
 800140c:	f7ff ff28 	bl	8001260 <u8g2_DrawHVLine>
 8001410:	e7ad      	b.n	800136e <u8g2_font_decode_len+0x1e>
 8001412:	bf00      	nop
	...

08001420 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001420:	b510      	push	{r4, lr}
  if ( v0 < a1 )		// v0 <= a1
 8001422:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
{
 8001426:	f8bd c008 	ldrh.w	ip, [sp, #8]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800142a:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	; 0x4c
  if ( v0 < a1 )		// v0 <= a1
 800142e:	4294      	cmp	r4, r2
 8001430:	d910      	bls.n	8001454 <u8g2_IsIntersection+0x34>
    if ( v1 > a0 )	// v1 >= a0
 8001432:	45e6      	cmp	lr, ip
 8001434:	d301      	bcc.n	800143a <u8g2_IsIntersection+0x1a>
      if ( v0 > v1 )	// v0 > v1
 8001436:	4562      	cmp	r2, ip
 8001438:	d90e      	bls.n	8001458 <u8g2_IsIntersection+0x38>
  if ( v0 < a1 )		// v0 <= a1
 800143a:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 800143e:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 8001442:	428c      	cmp	r4, r1
 8001444:	d90a      	bls.n	800145c <u8g2_IsIntersection+0x3c>
    if ( v1 > a0 )	// v1 >= a0
 8001446:	4293      	cmp	r3, r2
 8001448:	d80f      	bhi.n	800146a <u8g2_IsIntersection+0x4a>
    return 0; 
 800144a:	4299      	cmp	r1, r3
 800144c:	bf94      	ite	ls
 800144e:	2000      	movls	r0, #0
 8001450:	2001      	movhi	r0, #1
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
 8001452:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 8001454:	45e6      	cmp	lr, ip
 8001456:	d3ee      	bcc.n	8001436 <u8g2_IsIntersection+0x16>
    return 0; 
 8001458:	2000      	movs	r0, #0
}
 800145a:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 800145c:	4293      	cmp	r3, r2
 800145e:	d9fb      	bls.n	8001458 <u8g2_IsIntersection+0x38>
    return 0; 
 8001460:	4299      	cmp	r1, r3
 8001462:	bf94      	ite	ls
 8001464:	2000      	movls	r0, #0
 8001466:	2001      	movhi	r0, #1
 8001468:	e7f3      	b.n	8001452 <u8g2_IsIntersection+0x32>
      return 1;
 800146a:	2001      	movs	r0, #1
}
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop

08001470 <u8g2_DrawXBMP>:
  u8g2->draw_color = color;
}


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001474:	b089      	sub	sp, #36	; 0x24
 8001476:	461c      	mov	r4, r3
 8001478:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800147c:	9106      	str	r1, [sp, #24]
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800147e:	4413      	add	r3, r2
 8001480:	1867      	adds	r7, r4, r1
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2bf      	uxth	r7, r7
 8001486:	9305      	str	r3, [sp, #20]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	463b      	mov	r3, r7
{
 800148c:	4605      	mov	r5, r0
 800148e:	4690      	mov	r8, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001490:	f7ff ffc6 	bl	8001420 <u8g2_IsIntersection>
 8001494:	2800      	cmp	r0, #0
 8001496:	d053      	beq.n	8001540 <u8g2_DrawXBMP+0xd0>
  blen += 7;
 8001498:	3407      	adds	r4, #7
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
    bitmap += blen;
 800149a:	f3c4 03cc 	ubfx	r3, r4, #3, #13
 800149e:	9307      	str	r3, [sp, #28]
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80014a0:	f108 0301 	add.w	r3, r8, #1
 80014a4:	4642      	mov	r2, r8
 80014a6:	fa1f f883 	uxth.w	r8, r3
 80014aa:	9906      	ldr	r1, [sp, #24]
 80014ac:	f8cd 8000 	str.w	r8, [sp]
 80014b0:	463b      	mov	r3, r7
 80014b2:	4628      	mov	r0, r5
 80014b4:	9203      	str	r2, [sp, #12]
 80014b6:	f7ff ffb3 	bl	8001420 <u8g2_IsIntersection>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d039      	beq.n	8001532 <u8g2_DrawXBMP+0xc2>
  uint8_t color = u8g2->draw_color;
 80014be:	f895 9092 	ldrb.w	r9, [r5, #146]	; 0x92
  mask = 1;
 80014c2:	9a03      	ldr	r2, [sp, #12]
 80014c4:	f8cd 8010 	str.w	r8, [sp, #16]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80014c8:	fab9 fa89 	clz	sl, r9
 80014cc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80014ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80014d2:	468b      	mov	fp, r1
  mask = 1;
 80014d4:	2401      	movs	r4, #1
 80014d6:	4690      	mov	r8, r2
 80014d8:	e00f      	b.n	80014fa <u8g2_DrawXBMP+0x8a>
    } else if( u8g2->bitmap_transparency == 0 ) {
 80014da:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 80014de:	b1d3      	cbz	r3, 8001516 <u8g2_DrawXBMP+0xa6>
    mask <<= 1;
 80014e0:	0064      	lsls	r4, r4, #1
    if ( mask == 0 )
 80014e2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    x++;
 80014e6:	f10b 0b01 	add.w	fp, fp, #1
      mask = 1;
 80014ea:	bf08      	it	eq
 80014ec:	2401      	moveq	r4, #1
    x++;
 80014ee:	fa1f fb8b 	uxth.w	fp, fp
      b++;
 80014f2:	bf08      	it	eq
 80014f4:	1936      	addeq	r6, r6, r4
  while(len > 0)
 80014f6:	455f      	cmp	r7, fp
 80014f8:	d017      	beq.n	800152a <u8g2_DrawXBMP+0xba>
    if( u8x8_pgm_read(b) & mask ) {
 80014fa:	7833      	ldrb	r3, [r6, #0]
 80014fc:	421c      	tst	r4, r3
 80014fe:	d0ec      	beq.n	80014da <u8g2_DrawXBMP+0x6a>
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001500:	2300      	movs	r3, #0
      u8g2->draw_color = color;
 8001502:	f885 9092 	strb.w	r9, [r5, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001506:	4642      	mov	r2, r8
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4659      	mov	r1, fp
 800150c:	2301      	movs	r3, #1
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff fea6 	bl	8001260 <u8g2_DrawHVLine>
 8001514:	e7e4      	b.n	80014e0 <u8g2_DrawXBMP+0x70>
      u8g2->draw_color = ncolor;
 8001516:	f885 a092 	strb.w	sl, [r5, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800151a:	4659      	mov	r1, fp
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	4642      	mov	r2, r8
 8001520:	2301      	movs	r3, #1
 8001522:	4628      	mov	r0, r5
 8001524:	f7ff fe9c 	bl	8001260 <u8g2_DrawHVLine>
 8001528:	e7da      	b.n	80014e0 <u8g2_DrawXBMP+0x70>
  u8g2->draw_color = color;
 800152a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800152e:	f885 9092 	strb.w	r9, [r5, #146]	; 0x92
    bitmap += blen;
 8001532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001534:	9a07      	ldr	r2, [sp, #28]
 8001536:	4413      	add	r3, r2
 8001538:	9313      	str	r3, [sp, #76]	; 0x4c
  while( h > 0 )
 800153a:	9b05      	ldr	r3, [sp, #20]
 800153c:	4543      	cmp	r3, r8
 800153e:	d1af      	bne.n	80014a0 <u8g2_DrawXBMP+0x30>
    y++;
    h--;
  }
}
 8001540:	b009      	add	sp, #36	; 0x24
 8001542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001546:	bf00      	nop
	...

08001550 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001550:	b570      	push	{r4, r5, r6, lr}
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8001552:	f890 5092 	ldrb.w	r5, [r0, #146]	; 0x92
{
 8001556:	f89d 6010 	ldrb.w	r6, [sp, #16]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800155a:	f002 0407 	and.w	r4, r2, #7
  mask <<= bit_pos;
 800155e:	f04f 0c01 	mov.w	ip, #1
 8001562:	fa0c fc04 	lsl.w	ip, ip, r4
  if ( u8g2->draw_color <= 1 )
 8001566:	2d01      	cmp	r5, #1
  mask <<= bit_pos;
 8001568:	fa5f fc8c 	uxtb.w	ip, ip
  if ( u8g2->draw_color <= 1 )
 800156c:	d942      	bls.n	80015f4 <u8g2_ll_hvline_vertical_top_lsb+0xa4>
  or_mask = 0;
 800156e:	f04f 0e00 	mov.w	lr, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001572:	6805      	ldr	r5, [r0, #0]
 8001574:	7c2d      	ldrb	r5, [r5, #16]
  offset &= ~7;
 8001576:	f022 0207 	bic.w	r2, r2, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800157a:	fb02 f505 	mul.w	r5, r2, r5
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 800157e:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8001582:	402a      	ands	r2, r5
  ptr += x;
 8001584:	4411      	add	r1, r2
  ptr = u8g2->tile_buf_ptr;
 8001586:	6b42      	ldr	r2, [r0, #52]	; 0x34
  ptr += x;
 8001588:	4411      	add	r1, r2
  
  if ( dir == 0 )
 800158a:	b99e      	cbnz	r6, 80015b4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 800158c:	1e5a      	subs	r2, r3, #1
 800158e:	b292      	uxth	r2, r2
 8001590:	3201      	adds	r2, #1
 8001592:	440a      	add	r2, r1
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001594:	780b      	ldrb	r3, [r1, #0]
 8001596:	ea4e 0303 	orr.w	r3, lr, r3
	*ptr ^= xor_mask;
 800159a:	ea8c 0303 	eor.w	r3, ip, r3
 800159e:	f801 3b01 	strb.w	r3, [r1], #1
	ptr++;
	len--;
      } while( len != 0 );
 80015a2:	4291      	cmp	r1, r2
 80015a4:	d1f6      	bne.n	8001594 <u8g2_ll_hvline_vertical_top_lsb+0x44>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
	or_mask <<= 1;
 80015a8:	fa5f fe85 	uxtb.w	lr, r5
	xor_mask <<= 1;
 80015ac:	fa5f fc82 	uxtb.w	ip, r2
    } while( len != 0 );
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f8      	beq.n	80015a6 <u8g2_ll_hvline_vertical_top_lsb+0x56>
      *ptr |= or_mask;
 80015b4:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 80015b6:	3401      	adds	r4, #1
      *ptr |= or_mask;
 80015b8:	ea4e 0202 	orr.w	r2, lr, r2
      *ptr ^= xor_mask;
 80015bc:	ea8c 0202 	eor.w	r2, ip, r2
      len--;
 80015c0:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 80015c2:	f014 0407 	ands.w	r4, r4, #7
      *ptr ^= xor_mask;
 80015c6:	700a      	strb	r2, [r1, #0]
      len--;
 80015c8:	b29b      	uxth	r3, r3
	or_mask <<= 1;
 80015ca:	ea4f 054e 	mov.w	r5, lr, lsl #1
	xor_mask <<= 1;
 80015ce:	ea4f 024c 	mov.w	r2, ip, lsl #1
      if ( bit_pos == 0 )
 80015d2:	d1e9      	bne.n	80015a8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
	if ( u8g2->draw_color <= 1 )
 80015d4:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80015d8:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
	if ( u8g2->draw_color <= 1 )
 80015da:	2a01      	cmp	r2, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80015dc:	4429      	add	r1, r5
	if ( u8g2->draw_color <= 1 )
 80015de:	d904      	bls.n	80015ea <u8g2_ll_hvline_vertical_top_lsb+0x9a>
	  xor_mask = 1;
 80015e0:	f04f 0c01 	mov.w	ip, #1
    } while( len != 0 );
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e5      	bne.n	80015b4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 80015e8:	e7dd      	b.n	80015a6 <u8g2_ll_hvline_vertical_top_lsb+0x56>
	if ( u8g2->draw_color != 1 )
 80015ea:	d108      	bne.n	80015fe <u8g2_ll_hvline_vertical_top_lsb+0xae>
	  or_mask  = 1;
 80015ec:	4696      	mov	lr, r2
    } while( len != 0 );
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1e0      	bne.n	80015b4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 80015f2:	e7d8      	b.n	80015a6 <u8g2_ll_hvline_vertical_top_lsb+0x56>
    or_mask  = mask;
 80015f4:	46e6      	mov	lr, ip
  if ( u8g2->draw_color != 1 )
 80015f6:	d1bc      	bne.n	8001572 <u8g2_ll_hvline_vertical_top_lsb+0x22>
  xor_mask = 0;
 80015f8:	f04f 0c00 	mov.w	ip, #0
 80015fc:	e7b9      	b.n	8001572 <u8g2_ll_hvline_vertical_top_lsb+0x22>
	  xor_mask = 1;
 80015fe:	f04f 0c01 	mov.w	ip, #1
	  or_mask  = 1;
 8001602:	46e6      	mov	lr, ip
    } while( len != 0 );
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1d5      	bne.n	80015b4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 8001608:	e7cd      	b.n	80015a6 <u8g2_ll_hvline_vertical_top_lsb+0x56>
 800160a:	bf00      	nop
 800160c:	0000      	movs	r0, r0
	...

08001610 <u8g2_update_dimension_r1>:
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8001610:	b510      	push	{r4, lr}
  t = u8g2->tile_buf_height;
 8001612:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001616:	6801      	ldr	r1, [r0, #0]
  t *= 8;
 8001618:	ea4f 03cc 	mov.w	r3, ip, lsl #3
  u8g2->pixel_buf_height = t;
 800161c:	8783      	strh	r3, [r0, #60]	; 0x3c
  t = display_info->tile_width;
 800161e:	7c0a      	ldrb	r2, [r1, #16]
  t *= 8;
 8001620:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_buf_width = t;
 8001622:	8742      	strh	r2, [r0, #58]	; 0x3a
  t = u8g2->tile_curr_row;
 8001624:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  t *= 8;
 8001628:	00d4      	lsls	r4, r2, #3
  u8g2->pixel_curr_row = t;
 800162a:	87c4      	strh	r4, [r0, #62]	; 0x3e
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800162c:	f891 e011 	ldrb.w	lr, [r1, #17]
 8001630:	4494      	add	ip, r2
 8001632:	45f4      	cmp	ip, lr
 8001634:	dd06      	ble.n	8001644 <u8g2_update_dimension_r1+0x34>
 8001636:	b292      	uxth	r2, r2
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001638:	ebae 0e02 	sub.w	lr, lr, r2
  t *= 8;
 800163c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8001640:	fa1f f38e 	uxth.w	r3, lr
  u8g2->height = display_info->pixel_height;
 8001644:	8aca      	ldrh	r2, [r1, #22]
  u8g2_update_dimension_common(u8g2);
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8001646:	8a89      	ldrh	r1, [r1, #20]
 8001648:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
  u8g2->buf_y1 += t;
 800164c:	4423      	add	r3, r4
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800164e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
  u8g2->buf_y1 += t;
 8001652:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8001656:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  
}
 800165a:	bd10      	pop	{r4, pc}
 800165c:	0000      	movs	r0, r0
	...

08001660 <u8g2_update_page_win_r1>:
{
  u8g2->user_x0 = u8g2->buf_y0;
  u8g2->user_x1 = u8g2->buf_y1;
  
  u8g2->user_y0 = 0;
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8001660:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001664:	f8b0 c054 	ldrh.w	ip, [r0, #84]	; 0x54
  u8g2->user_x0 = u8g2->buf_y0;
 8001668:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800166c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  u8g2->user_y0 = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  if ( v0 < a1 )		// v0 <= a1
 8001676:	4561      	cmp	r1, ip
  u8g2->user_x1 = u8g2->buf_y1;
 8001678:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 800167c:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
{
 8001680:	b570      	push	{r4, r5, r6, lr}
  u8g2->user_x1 = u8g2->buf_y1;
 8001682:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001686:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800168a:	f8b0 e052 	ldrh.w	lr, [r0, #82]	; 0x52
 800168e:	f8b0 4056 	ldrh.w	r4, [r0, #86]	; 0x56
 8001692:	d906      	bls.n	80016a2 <u8g2_update_page_win_r1+0x42>
    if ( v1 > a0 )	// v1 >= a0
 8001694:	ea5c 0604 	orrs.w	r6, ip, r4
 8001698:	d107      	bne.n	80016aa <u8g2_update_page_win_r1+0x4a>
    u8g2->is_page_clip_window_intersection = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
    if ( v1 > a0 )	// v1 >= a0
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d0f9      	beq.n	800169a <u8g2_update_page_win_r1+0x3a>
      if ( v0 > v1 )	// v0 > v1
 80016a6:	45a4      	cmp	ip, r4
 80016a8:	d9f7      	bls.n	800169a <u8g2_update_page_win_r1+0x3a>
  if ( v0 < a1 )		// v0 <= a1
 80016aa:	42ab      	cmp	r3, r5
 80016ac:	d918      	bls.n	80016e0 <u8g2_update_page_win_r1+0x80>
    if ( v1 > a0 )	// v1 >= a0
 80016ae:	4572      	cmp	r2, lr
 80016b0:	d301      	bcc.n	80016b6 <u8g2_update_page_win_r1+0x56>
      if ( v0 > v1 )	// v0 > v1
 80016b2:	4575      	cmp	r5, lr
 80016b4:	d9f1      	bls.n	800169a <u8g2_update_page_win_r1+0x3a>
    u8g2->is_page_clip_window_intersection = 1;
 80016b6:	42aa      	cmp	r2, r5
 80016b8:	bf38      	it	cc
 80016ba:	462a      	movcc	r2, r5
 80016bc:	4573      	cmp	r3, lr
 80016be:	bf28      	it	cs
 80016c0:	4673      	movcs	r3, lr
 80016c2:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80016c6:	42a1      	cmp	r1, r4
    u8g2->is_page_clip_window_intersection = 1;
 80016c8:	f04f 0301 	mov.w	r3, #1
 80016cc:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80016d0:	f8a0 c04c 	strh.w	ip, [r0, #76]	; 0x4c
 80016d4:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
      u8g2->user_y1 = u8g2->clip_y1;
 80016d8:	bf88      	it	hi
 80016da:	f8a0 404e 	strhhi.w	r4, [r0, #78]	; 0x4e
}
 80016de:	bd70      	pop	{r4, r5, r6, pc}
    if ( v1 > a0 )	// v1 >= a0
 80016e0:	4572      	cmp	r2, lr
 80016e2:	d2da      	bcs.n	800169a <u8g2_update_page_win_r1+0x3a>
      if ( v0 > v1 )	// v0 > v1
 80016e4:	4575      	cmp	r5, lr
 80016e6:	d8e6      	bhi.n	80016b6 <u8g2_update_page_win_r1+0x56>
 80016e8:	e7d7      	b.n	800169a <u8g2_update_page_win_r1+0x3a>
 80016ea:	bf00      	nop
 80016ec:	0000      	movs	r0, r0
	...

080016f0 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, x, yy, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80016f0:	b510      	push	{r4, lr}
 80016f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80016f6:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
  
  xx = u8g2->height;
  xx -= y;
  xx--;
  
  dir ++;
 80016fa:	3401      	adds	r4, #1
 80016fc:	b2e4      	uxtb	r4, r4
 80016fe:	ebac 0c02 	sub.w	ip, ip, r2
  xx--;
 8001702:	f10c 3cff 	add.w	ip, ip, #4294967295
  if ( dir == 2 )
 8001706:	2c02      	cmp	r4, #2
{
 8001708:	468e      	mov	lr, r1
  xx--;
 800170a:	fa1f f18c 	uxth.w	r1, ip
  if ( dir == 2 )
 800170e:	d106      	bne.n	800171e <u8g2_draw_l90_r1+0x2e>
  {
    xx -= len;
    xx++;
 8001710:	f1c3 0201 	rsb	r2, r3, #1
 8001714:	eb01 0c02 	add.w	ip, r1, r2
 8001718:	fa1f f18c 	uxth.w	r1, ip
    dir = 0;
 800171c:	2400      	movs	r4, #0
  y -= u8g2->pixel_curr_row;
 800171e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001720:	9402      	str	r4, [sp, #8]
 8001722:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  y -= u8g2->pixel_curr_row;
 8001724:	ebae 0202 	sub.w	r2, lr, r2
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001728:	46a4      	mov	ip, r4
 800172a:	b292      	uxth	r2, r2
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}
 800172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001730:	4760      	bx	ip
 8001732:	bf00      	nop
	...

08001740 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001740:	b119      	cbz	r1, 800174a <u8x8_ascii_next+0xa>
 8001742:	290a      	cmp	r1, #10
 8001744:	d001      	beq.n	800174a <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8001746:	b288      	uxth	r0, r1
 8001748:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 800174a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800174e:	4770      	bx	lr

08001750 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001750:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001752:	6944      	ldr	r4, [r0, #20]
 8001754:	2300      	movs	r3, #0
 8001756:	46a4      	mov	ip, r4
}
 8001758:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800175c:	4760      	bx	ip
 800175e:	bf00      	nop

08001760 <_out_rev.constprop.0>:
  return i;
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 8001760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001764:	4698      	mov	r8, r3
{
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001766:	e9dd a30b 	ldrd	sl, r3, [sp, #44]	; 0x2c
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 800176a:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800176c:	079a      	lsls	r2, r3, #30
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 800176e:	4606      	mov	r6, r0
 8001770:	468b      	mov	fp, r1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001772:	d110      	bne.n	8001796 <_out_rev.constprop.0+0x36>
    for (size_t i = len; i < width; i++) {
 8001774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001776:	459a      	cmp	sl, r3
 8001778:	d90d      	bls.n	8001796 <_out_rev.constprop.0+0x36>
 800177a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800177c:	1afd      	subs	r5, r7, r3
 800177e:	4455      	add	r5, sl
 8001780:	463c      	mov	r4, r7
 8001782:	4622      	mov	r2, r4
      out(' ', buffer, idx++, maxlen);
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	3401      	adds	r4, #1
 800178a:	4659      	mov	r1, fp
 800178c:	2020      	movs	r0, #32
 800178e:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8001790:	42ac      	cmp	r4, r5
 8001792:	d1f6      	bne.n	8001782 <_out_rev.constprop.0+0x22>
 8001794:	e000      	b.n	8001798 <_out_rev.constprop.0+0x38>
 8001796:	463d      	mov	r5, r7
    }
  }

  // reverse string
  while (len) {
 8001798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800179a:	b183      	cbz	r3, 80017be <_out_rev.constprop.0+0x5e>
 800179c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800179e:	eb08 0403 	add.w	r4, r8, r3
 80017a2:	eb05 0904 	add.w	r9, r5, r4
 80017a6:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 80017aa:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	4659      	mov	r1, fp
 80017b4:	47b0      	blx	r6
  while (len) {
 80017b6:	4544      	cmp	r4, r8
 80017b8:	d1f5      	bne.n	80017a6 <_out_rev.constprop.0+0x46>
    out(buf[--len], buffer, idx++, maxlen);
 80017ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017bc:	441d      	add	r5, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80017be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017c0:	079b      	lsls	r3, r3, #30
 80017c2:	d50d      	bpl.n	80017e0 <_out_rev.constprop.0+0x80>
    while (idx - start_idx < width) {
 80017c4:	1bef      	subs	r7, r5, r7
 80017c6:	45ba      	cmp	sl, r7
 80017c8:	d90a      	bls.n	80017e0 <_out_rev.constprop.0+0x80>
 80017ca:	462a      	mov	r2, r5
      out(' ', buffer, idx++, maxlen);
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	4659      	mov	r1, fp
 80017d2:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 80017d4:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 80017d6:	47b0      	blx	r6
    while (idx - start_idx < width) {
 80017d8:	45ba      	cmp	sl, r7
      out(' ', buffer, idx++, maxlen);
 80017da:	f105 0501 	add.w	r5, r5, #1
    while (idx - start_idx < width) {
 80017de:	d8f4      	bhi.n	80017ca <_out_rev.constprop.0+0x6a>
    }
  }

  return idx;
}
 80017e0:	4628      	mov	r0, r5
 80017e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017e6:	bf00      	nop
	...

080017f0 <_ntoa_format.constprop.0>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
 80017f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017f4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80017f6:	9c08      	ldr	r4, [sp, #32]
 80017f8:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80017fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80017fe:	f016 0f02 	tst.w	r6, #2
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
 8001802:	e9dd e70a 	ldrd	lr, r7, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT)) {
 8001806:	d12a      	bne.n	800185e <_ntoa_format.constprop.0+0x6e>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001808:	2d00      	cmp	r5, #0
 800180a:	d146      	bne.n	800189a <_ntoa_format.constprop.0+0xaa>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800180c:	42a7      	cmp	r7, r4
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800180e:	f006 0a01 	and.w	sl, r6, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001812:	f240 80b8 	bls.w	8001986 <_ntoa_format.constprop.0+0x196>
 8001816:	2c20      	cmp	r4, #32
 8001818:	f000 80b5 	beq.w	8001986 <_ntoa_format.constprop.0+0x196>
 800181c:	f104 3cff 	add.w	ip, r4, #4294967295
 8001820:	449c      	add	ip, r3
      buf[len++] = '0';
 8001822:	f04f 0930 	mov.w	r9, #48	; 0x30
 8001826:	e001      	b.n	800182c <_ntoa_format.constprop.0+0x3c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001828:	2c20      	cmp	r4, #32
 800182a:	d004      	beq.n	8001836 <_ntoa_format.constprop.0+0x46>
      buf[len++] = '0';
 800182c:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800182e:	42bc      	cmp	r4, r7
      buf[len++] = '0';
 8001830:	f80c 9f01 	strb.w	r9, [ip, #1]!
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001834:	d3f8      	bcc.n	8001828 <_ntoa_format.constprop.0+0x38>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001836:	f1ba 0f00 	cmp.w	sl, #0
 800183a:	d010      	beq.n	800185e <_ntoa_format.constprop.0+0x6e>
 800183c:	42a5      	cmp	r5, r4
 800183e:	d90e      	bls.n	800185e <_ntoa_format.constprop.0+0x6e>
 8001840:	2c20      	cmp	r4, #32
 8001842:	d03a      	beq.n	80018ba <_ntoa_format.constprop.0+0xca>
 8001844:	f104 3cff 	add.w	ip, r4, #4294967295
 8001848:	449c      	add	ip, r3
      buf[len++] = '0';
 800184a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800184e:	e001      	b.n	8001854 <_ntoa_format.constprop.0+0x64>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001850:	2c20      	cmp	r4, #32
 8001852:	d032      	beq.n	80018ba <_ntoa_format.constprop.0+0xca>
      buf[len++] = '0';
 8001854:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001856:	42ac      	cmp	r4, r5
      buf[len++] = '0';
 8001858:	f80c 9f01 	strb.w	r9, [ip, #1]!
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800185c:	d1f8      	bne.n	8001850 <_ntoa_format.constprop.0+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800185e:	f016 0f10 	tst.w	r6, #16
 8001862:	d042      	beq.n	80018ea <_ntoa_format.constprop.0+0xfa>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001864:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001868:	d133      	bne.n	80018d2 <_ntoa_format.constprop.0+0xe2>
 800186a:	bb74      	cbnz	r4, 80018ca <_ntoa_format.constprop.0+0xda>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800186c:	f1be 0f10 	cmp.w	lr, #16
 8001870:	d07b      	beq.n	800196a <_ntoa_format.constprop.0+0x17a>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001872:	f1be 0f02 	cmp.w	lr, #2
 8001876:	f000 8082 	beq.w	800197e <_ntoa_format.constprop.0+0x18e>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
      buf[len++] = '0';
 800187a:	2430      	movs	r4, #48	; 0x30
 800187c:	701c      	strb	r4, [r3, #0]
 800187e:	2401      	movs	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    if (negative) {
 8001880:	f1b8 0f00 	cmp.w	r8, #0
 8001884:	d036      	beq.n	80018f4 <_ntoa_format.constprop.0+0x104>
      buf[len++] = '-';
 8001886:	272d      	movs	r7, #45	; 0x2d
 8001888:	551f      	strb	r7, [r3, r4]
 800188a:	3401      	adds	r4, #1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800188c:	e9cd 5609 	strd	r5, r6, [sp, #36]	; 0x24
 8001890:	9408      	str	r4, [sp, #32]
}
 8001892:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001896:	f7ff bf63 	b.w	8001760 <_out_rev.constprop.0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800189a:	f016 0a01 	ands.w	sl, r6, #1
 800189e:	d031      	beq.n	8001904 <_ntoa_format.constprop.0+0x114>
 80018a0:	f1b8 0f00 	cmp.w	r8, #0
 80018a4:	d102      	bne.n	80018ac <_ntoa_format.constprop.0+0xbc>
 80018a6:	f016 0f0c 	tst.w	r6, #12
 80018aa:	d000      	beq.n	80018ae <_ntoa_format.constprop.0+0xbe>
      width--;
 80018ac:	3d01      	subs	r5, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80018ae:	42a7      	cmp	r7, r4
 80018b0:	d9c4      	bls.n	800183c <_ntoa_format.constprop.0+0x4c>
 80018b2:	2c20      	cmp	r4, #32
 80018b4:	d1b2      	bne.n	800181c <_ntoa_format.constprop.0+0x2c>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80018b6:	2d20      	cmp	r5, #32
 80018b8:	d9d1      	bls.n	800185e <_ntoa_format.constprop.0+0x6e>
  if (flags & FLAGS_HASH) {
 80018ba:	f016 0f10 	tst.w	r6, #16
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80018be:	f04f 0420 	mov.w	r4, #32
  if (flags & FLAGS_HASH) {
 80018c2:	d0e3      	beq.n	800188c <_ntoa_format.constprop.0+0x9c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80018c4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80018c8:	d103      	bne.n	80018d2 <_ntoa_format.constprop.0+0xe2>
 80018ca:	42a7      	cmp	r7, r4
 80018cc:	d02e      	beq.n	800192c <_ntoa_format.constprop.0+0x13c>
 80018ce:	42ac      	cmp	r4, r5
 80018d0:	d02c      	beq.n	800192c <_ntoa_format.constprop.0+0x13c>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80018d2:	f1be 0f10 	cmp.w	lr, #16
 80018d6:	d037      	beq.n	8001948 <_ntoa_format.constprop.0+0x158>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80018d8:	f1be 0f02 	cmp.w	lr, #2
 80018dc:	d021      	beq.n	8001922 <_ntoa_format.constprop.0+0x132>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80018de:	2c20      	cmp	r4, #32
 80018e0:	d0d4      	beq.n	800188c <_ntoa_format.constprop.0+0x9c>
 80018e2:	4627      	mov	r7, r4
      buf[len++] = '0';
 80018e4:	2430      	movs	r4, #48	; 0x30
 80018e6:	55dc      	strb	r4, [r3, r7]
 80018e8:	1c7c      	adds	r4, r7, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80018ea:	2c20      	cmp	r4, #32
 80018ec:	d0ce      	beq.n	800188c <_ntoa_format.constprop.0+0x9c>
    if (negative) {
 80018ee:	f1b8 0f00 	cmp.w	r8, #0
 80018f2:	d1c8      	bne.n	8001886 <_ntoa_format.constprop.0+0x96>
    else if (flags & FLAGS_PLUS) {
 80018f4:	0777      	lsls	r7, r6, #29
 80018f6:	d40a      	bmi.n	800190e <_ntoa_format.constprop.0+0x11e>
    else if (flags & FLAGS_SPACE) {
 80018f8:	0737      	lsls	r7, r6, #28
 80018fa:	d5c7      	bpl.n	800188c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = ' ';
 80018fc:	2720      	movs	r7, #32
 80018fe:	551f      	strb	r7, [r3, r4]
 8001900:	3401      	adds	r4, #1
 8001902:	e7c3      	b.n	800188c <_ntoa_format.constprop.0+0x9c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001904:	42a7      	cmp	r7, r4
 8001906:	d9aa      	bls.n	800185e <_ntoa_format.constprop.0+0x6e>
 8001908:	2c20      	cmp	r4, #32
 800190a:	d187      	bne.n	800181c <_ntoa_format.constprop.0+0x2c>
 800190c:	e7a7      	b.n	800185e <_ntoa_format.constprop.0+0x6e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800190e:	272b      	movs	r7, #43	; 0x2b
 8001910:	551f      	strb	r7, [r3, r4]
 8001912:	3401      	adds	r4, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001914:	e9cd 5609 	strd	r5, r6, [sp, #36]	; 0x24
 8001918:	9408      	str	r4, [sp, #32]
}
 800191a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800191e:	f7ff bf1f 	b.w	8001760 <_out_rev.constprop.0>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001922:	2c20      	cmp	r4, #32
 8001924:	d0b2      	beq.n	800188c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = 'b';
 8001926:	191f      	adds	r7, r3, r4
 8001928:	3401      	adds	r4, #1
 800192a:	e008      	b.n	800193e <_ntoa_format.constprop.0+0x14e>
      if (len && (base == 16U)) {
 800192c:	1e67      	subs	r7, r4, #1
 800192e:	d09d      	beq.n	800186c <_ntoa_format.constprop.0+0x7c>
 8001930:	f1be 0f10 	cmp.w	lr, #16
 8001934:	d02c      	beq.n	8001990 <_ntoa_format.constprop.0+0x1a0>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001936:	f1be 0f02 	cmp.w	lr, #2
 800193a:	d1d3      	bne.n	80018e4 <_ntoa_format.constprop.0+0xf4>
      buf[len++] = 'b';
 800193c:	441f      	add	r7, r3
 800193e:	f04f 0c62 	mov.w	ip, #98	; 0x62
 8001942:	f887 c000 	strb.w	ip, [r7]
 8001946:	e7ca      	b.n	80018de <_ntoa_format.constprop.0+0xee>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001948:	06b7      	lsls	r7, r6, #26
 800194a:	d408      	bmi.n	800195e <_ntoa_format.constprop.0+0x16e>
 800194c:	2c20      	cmp	r4, #32
 800194e:	d09d      	beq.n	800188c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = 'b';
 8001950:	eb03 0c04 	add.w	ip, r3, r4
 8001954:	3401      	adds	r4, #1
      buf[len++] = 'x';
 8001956:	2778      	movs	r7, #120	; 0x78
 8001958:	f88c 7000 	strb.w	r7, [ip]
 800195c:	e7bf      	b.n	80018de <_ntoa_format.constprop.0+0xee>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800195e:	2c20      	cmp	r4, #32
 8001960:	d094      	beq.n	800188c <_ntoa_format.constprop.0+0x9c>
      buf[len++] = 'X';
 8001962:	2758      	movs	r7, #88	; 0x58
 8001964:	551f      	strb	r7, [r3, r4]
 8001966:	3401      	adds	r4, #1
 8001968:	e7b9      	b.n	80018de <_ntoa_format.constprop.0+0xee>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800196a:	06b4      	lsls	r4, r6, #26
 800196c:	d403      	bmi.n	8001976 <_ntoa_format.constprop.0+0x186>
      buf[len++] = 'x';
 800196e:	2478      	movs	r4, #120	; 0x78
 8001970:	701c      	strb	r4, [r3, #0]
 8001972:	2701      	movs	r7, #1
 8001974:	e7b6      	b.n	80018e4 <_ntoa_format.constprop.0+0xf4>
      buf[len++] = 'X';
 8001976:	2458      	movs	r4, #88	; 0x58
 8001978:	701c      	strb	r4, [r3, #0]
 800197a:	2701      	movs	r7, #1
 800197c:	e7b2      	b.n	80018e4 <_ntoa_format.constprop.0+0xf4>
      buf[len++] = 'b';
 800197e:	2462      	movs	r4, #98	; 0x62
 8001980:	701c      	strb	r4, [r3, #0]
 8001982:	2701      	movs	r7, #1
 8001984:	e7ae      	b.n	80018e4 <_ntoa_format.constprop.0+0xf4>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001986:	f1ba 0f00 	cmp.w	sl, #0
 800198a:	bf08      	it	eq
 800198c:	2500      	moveq	r5, #0
 800198e:	e766      	b.n	800185e <_ntoa_format.constprop.0+0x6e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001990:	f016 0f20 	tst.w	r6, #32
        len--;
 8001994:	f1a4 0402 	sub.w	r4, r4, #2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001998:	d1e3      	bne.n	8001962 <_ntoa_format.constprop.0+0x172>
      buf[len++] = 'x';
 800199a:	eb03 0c04 	add.w	ip, r3, r4
 800199e:	463c      	mov	r4, r7
 80019a0:	e7d9      	b.n	8001956 <_ntoa_format.constprop.0+0x166>
 80019a2:	bf00      	nop
	...

080019b0 <_ntoa_long_long.constprop.0>:
}


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
 80019b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b4:	ed2d 8b04 	vpush	{d8-d9}
 80019b8:	b091      	sub	sp, #68	; 0x44
 80019ba:	e9dd 641e 	ldrd	r6, r4, [sp, #120]	; 0x78
 80019be:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 80019c2:	9307      	str	r3, [sp, #28]
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80019c4:	ea56 0304 	orrs.w	r3, r6, r4
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
 80019c8:	e9dd 7822 	ldrd	r7, r8, [sp, #136]	; 0x88
 80019cc:	ee08 0a10 	vmov	s16, r0
 80019d0:	ee08 1a90 	vmov	s17, r1
 80019d4:	ee09 2a10 	vmov	s18, r2
  if (!value) {
 80019d8:	d106      	bne.n	80019e8 <_ntoa_long_long.constprop.0+0x38>
    flags &= ~FLAGS_HASH;
 80019da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80019dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    flags &= ~FLAGS_HASH;
 80019de:	f023 0310 	bic.w	r3, r3, #16
 80019e2:	9326      	str	r3, [sp, #152]	; 0x98
  if (!(flags & FLAGS_PRECISION) || value) {
 80019e4:	0553      	lsls	r3, r2, #21
 80019e6:	d440      	bmi.n	8001a6a <_ntoa_long_long.constprop.0+0xba>
 80019e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80019ea:	f013 0f20 	tst.w	r3, #32
 80019ee:	bf14      	ite	ne
 80019f0:	f04f 0a41 	movne.w	sl, #65	; 0x41
 80019f4:	f04f 0a61 	moveq.w	sl, #97	; 0x61
 80019f8:	f10d 0b20 	add.w	fp, sp, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80019fc:	f1aa 0a0a 	sub.w	sl, sl, #10
 8001a00:	46d9      	mov	r9, fp
 8001a02:	2500      	movs	r5, #0
 8001a04:	e003      	b.n	8001a0e <_ntoa_long_long.constprop.0+0x5e>
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001a06:	2d20      	cmp	r5, #32
 8001a08:	d017      	beq.n	8001a3a <_ntoa_long_long.constprop.0+0x8a>
      value /= base;
 8001a0a:	4606      	mov	r6, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4630      	mov	r0, r6
 8001a12:	463a      	mov	r2, r7
 8001a14:	4643      	mov	r3, r8
 8001a16:	f7ff fa1d 	bl	8000e54 <__aeabi_uldivmod>
      const char digit = (char)(value % base);
 8001a1a:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001a1c:	2a09      	cmp	r2, #9
 8001a1e:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001a22:	bf8a      	itet	hi
 8001a24:	4452      	addhi	r2, sl
 8001a26:	b2da      	uxtbls	r2, r3
 8001a28:	b2d2      	uxtbhi	r2, r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001a2a:	42be      	cmp	r6, r7
 8001a2c:	eb74 0408 	sbcs.w	r4, r4, r8
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001a30:	f809 2b01 	strb.w	r2, [r9], #1
 8001a34:	f105 0501 	add.w	r5, r5, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001a38:	d2e5      	bcs.n	8001a06 <_ntoa_long_long.constprop.0+0x56>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001a3c:	9305      	str	r3, [sp, #20]
 8001a3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001a40:	9304      	str	r3, [sp, #16]
 8001a42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001a44:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8001a48:	9b07      	ldr	r3, [sp, #28]
 8001a4a:	ee19 2a10 	vmov	r2, s18
 8001a4e:	e9cd 5300 	strd	r5, r3, [sp]
 8001a52:	ee18 1a90 	vmov	r1, s17
 8001a56:	ee18 0a10 	vmov	r0, s16
 8001a5a:	465b      	mov	r3, fp
 8001a5c:	f7ff fec8 	bl	80017f0 <_ntoa_format.constprop.0>
}
 8001a60:	b011      	add	sp, #68	; 0x44
 8001a62:	ecbd 8b04 	vpop	{d8-d9}
 8001a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t len = 0U;
 8001a6a:	2500      	movs	r5, #0
 8001a6c:	f10d 0b20 	add.w	fp, sp, #32
 8001a70:	e7e3      	b.n	8001a3a <_ntoa_long_long.constprop.0+0x8a>
 8001a72:	bf00      	nop
	...

08001a80 <_ntoa_long.constprop.0>:
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
 8001a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a84:	b08f      	sub	sp, #60	; 0x3c
  if (!value) {
 8001a86:	469e      	mov	lr, r3
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
 8001a88:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
 8001a8c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8001a8e:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
  if (!value) {
 8001a92:	b92b      	cbnz	r3, 8001aa0 <_ntoa_long.constprop.0+0x20>
    flags &= ~FLAGS_HASH;
 8001a94:	f02a 0310 	bic.w	r3, sl, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 8001a98:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    flags &= ~FLAGS_HASH;
 8001a9c:	469a      	mov	sl, r3
  if (!(flags & FLAGS_PRECISION) || value) {
 8001a9e:	d12f      	bne.n	8001b00 <_ntoa_long.constprop.0+0x80>
 8001aa0:	f01a 0f20 	tst.w	sl, #32
 8001aa4:	bf14      	ite	ne
 8001aa6:	f04f 0941 	movne.w	r9, #65	; 0x41
 8001aaa:	f04f 0961 	moveq.w	r9, #97	; 0x61
 8001aae:	ab06      	add	r3, sp, #24
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001ab0:	f1a9 090a 	sub.w	r9, r9, #10
 8001ab4:	4698      	mov	r8, r3
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	e002      	b.n	8001ac0 <_ntoa_long.constprop.0+0x40>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001aba:	2d20      	cmp	r5, #32
 8001abc:	d012      	beq.n	8001ae4 <_ntoa_long.constprop.0+0x64>
      value /= base;
 8001abe:	46e6      	mov	lr, ip
      const char digit = (char)(value % base);
 8001ac0:	fbbe fcf4 	udiv	ip, lr, r4
 8001ac4:	fb04 e71c 	mls	r7, r4, ip, lr
 8001ac8:	b2fe      	uxtb	r6, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001aca:	2f09      	cmp	r7, #9
 8001acc:	f106 0730 	add.w	r7, r6, #48	; 0x30
 8001ad0:	bf8a      	itet	hi
 8001ad2:	444e      	addhi	r6, r9
 8001ad4:	b2fe      	uxtbls	r6, r7
 8001ad6:	b2f6      	uxtbhi	r6, r6
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001ad8:	45a6      	cmp	lr, r4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001ada:	f808 6b01 	strb.w	r6, [r8], #1
 8001ade:	f105 0501 	add.w	r5, r5, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001ae2:	d2ea      	bcs.n	8001aba <_ntoa_long.constprop.0+0x3a>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001ae4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8001ae6:	9604      	str	r6, [sp, #16]
 8001ae8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8001aea:	f8cd a014 	str.w	sl, [sp, #20]
 8001aee:	e9cd 4602 	strd	r4, r6, [sp, #8]
 8001af2:	e9cd 5b00 	strd	r5, fp, [sp]
 8001af6:	f7ff fe7b 	bl	80017f0 <_ntoa_format.constprop.0>
}
 8001afa:	b00f      	add	sp, #60	; 0x3c
 8001afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t len = 0U;
 8001b00:	4675      	mov	r5, lr
 8001b02:	ab06      	add	r3, sp, #24
 8001b04:	e7ee      	b.n	8001ae4 <_ntoa_long.constprop.0+0x64>
 8001b06:	bf00      	nop
	...

08001b10 <_etoa.constprop.0>:
}


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
 8001b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b14:	ed2d 8b04 	vpush	{d8-d9}
 8001b18:	b091      	sub	sp, #68	; 0x44
 8001b1a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8001b1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001b20:	930a      	str	r3, [sp, #40]	; 0x28
 8001b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001b24:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001b28:	9307      	str	r3, [sp, #28]
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	460d      	mov	r5, r1
 8001b2e:	4691      	mov	r9, r2
{
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8001b30:	465b      	mov	r3, fp
 8001b32:	4652      	mov	r2, sl
 8001b34:	4650      	mov	r0, sl
 8001b36:	4659      	mov	r1, fp
 8001b38:	f7ff f8c2 	bl	8000cc0 <__aeabi_dcmpeq>
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	f000 8199 	beq.w	8001e74 <_etoa.constprop.0+0x364>
 8001b42:	4bc5      	ldr	r3, [pc, #788]	; (8001e58 <_etoa.constprop.0+0x348>)
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	4650      	mov	r0, sl
 8001b4a:	4659      	mov	r1, fp
 8001b4c:	f7ff f8e0 	bl	8000d10 <__aeabi_dcmpgt>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	f040 818f 	bne.w	8001e74 <_etoa.constprop.0+0x364>
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001b5e:	4650      	mov	r0, sl
 8001b60:	4659      	mov	r1, fp
 8001b62:	f7ff f8b7 	bl	8000cd4 <__aeabi_dcmplt>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	f040 8184 	bne.w	8001e74 <_etoa.constprop.0+0x364>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2300      	movs	r3, #0
 8001b70:	4650      	mov	r0, sl
 8001b72:	4659      	mov	r1, fp
 8001b74:	f7ff f8ae 	bl	8000cd4 <__aeabi_dcmplt>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f040 8198 	bne.w	8001eae <_etoa.constprop.0+0x39e>
 8001b7e:	e9cd ab08 	strd	sl, fp, [sp, #32]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8001b82:	9f09      	ldr	r7, [sp, #36]	; 0x24
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001b84:	9b07      	ldr	r3, [sp, #28]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8001b86:	f3c7 500a 	ubfx	r0, r7, #20, #11
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001b8a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001b8e:	930f      	str	r3, [sp, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001b90:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b96:	bf08      	it	eq
 8001b98:	2306      	moveq	r3, #6
 8001b9a:	930a      	str	r3, [sp, #40]	; 0x28
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001b9c:	f7fe fdbe 	bl	800071c <__aeabi_i2d>
 8001ba0:	a39d      	add	r3, pc, #628	; (adr r3, 8001e18 <_etoa.constprop.0+0x308>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe fe23 	bl	80007f0 <__aeabi_dmul>
 8001baa:	a39d      	add	r3, pc, #628	; (adr r3, 8001e20 <_etoa.constprop.0+0x310>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fc68 	bl	8000484 <__adddf3>
  conv.F = value;
 8001bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001bb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001bbc:	460f      	mov	r7, r1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001bbe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001bc2:	4606      	mov	r6, r0
 8001bc4:	4ba5      	ldr	r3, [pc, #660]	; (8001e5c <_etoa.constprop.0+0x34c>)
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001bc6:	4640      	mov	r0, r8
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001bc8:	2200      	movs	r2, #0
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8001bca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8001bce:	f7fe fc57 	bl	8000480 <__aeabi_dsub>
 8001bd2:	a395      	add	r3, pc, #596	; (adr r3, 8001e28 <_etoa.constprop.0+0x318>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fe0a 	bl	80007f0 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4630      	mov	r0, r6
 8001be2:	4639      	mov	r1, r7
 8001be4:	f7fe fc4e 	bl	8000484 <__adddf3>
 8001be8:	f7ff f89c 	bl	8000d24 <__aeabi_d2iz>
 8001bec:	4680      	mov	r8, r0
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001bee:	f7fe fd95 	bl	800071c <__aeabi_i2d>
 8001bf2:	a38f      	add	r3, pc, #572	; (adr r3, 8001e30 <_etoa.constprop.0+0x320>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	4606      	mov	r6, r0
 8001bfa:	460f      	mov	r7, r1
 8001bfc:	f7fe fdf8 	bl	80007f0 <__aeabi_dmul>
 8001c00:	4b97      	ldr	r3, [pc, #604]	; (8001e60 <_etoa.constprop.0+0x350>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	f7fe fc3e 	bl	8000484 <__adddf3>
 8001c08:	f7ff f88c 	bl	8000d24 <__aeabi_d2iz>
 8001c0c:	4603      	mov	r3, r0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001c0e:	4639      	mov	r1, r7
 8001c10:	4630      	mov	r0, r6
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8001c12:	930e      	str	r3, [sp, #56]	; 0x38
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001c14:	a388      	add	r3, pc, #544	; (adr r3, 8001e38 <_etoa.constprop.0+0x328>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fde9 	bl	80007f0 <__aeabi_dmul>
 8001c1e:	4606      	mov	r6, r0
 8001c20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001c22:	460f      	mov	r7, r1
 8001c24:	f7fe fd7a 	bl	800071c <__aeabi_i2d>
 8001c28:	a385      	add	r3, pc, #532	; (adr r3, 8001e40 <_etoa.constprop.0+0x330>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fddf 	bl	80007f0 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4630      	mov	r0, r6
 8001c38:	4639      	mov	r1, r7
 8001c3a:	f7fe fc21 	bl	8000480 <__aeabi_dsub>
  const double z2 = z * z;
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001c42:	4606      	mov	r6, r0
 8001c44:	460f      	mov	r7, r1
  const double z2 = z * z;
 8001c46:	f7fe fdd3 	bl	80007f0 <__aeabi_dmul>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001c4a:	4632      	mov	r2, r6
  const double z2 = z * z;
 8001c4c:	ec41 0b18 	vmov	d8, r0, r1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001c50:	463b      	mov	r3, r7
 8001c52:	4630      	mov	r0, r6
 8001c54:	4639      	mov	r1, r7
 8001c56:	f7fe fc15 	bl	8000484 <__adddf3>
 8001c5a:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <_etoa.constprop.0+0x354>)
 8001c5c:	ec41 0b19 	vmov	d9, r0, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	ec51 0b18 	vmov	r0, r1, d8
 8001c66:	f7fe feed 	bl	8000a44 <__aeabi_ddiv>
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <_etoa.constprop.0+0x358>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f7fe fc09 	bl	8000484 <__adddf3>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	ec51 0b18 	vmov	r0, r1, d8
 8001c7a:	f7fe fee3 	bl	8000a44 <__aeabi_ddiv>
 8001c7e:	4b7b      	ldr	r3, [pc, #492]	; (8001e6c <_etoa.constprop.0+0x35c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	f7fe fbff 	bl	8000484 <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	ec51 0b18 	vmov	r0, r1, d8
 8001c8e:	f7fe fed9 	bl	8000a44 <__aeabi_ddiv>
 8001c92:	4632      	mov	r2, r6
 8001c94:	463b      	mov	r3, r7
 8001c96:	4606      	mov	r6, r0
 8001c98:	460f      	mov	r7, r1
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ca0:	f7fe fbee 	bl	8000480 <__aeabi_dsub>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4630      	mov	r0, r6
 8001caa:	4639      	mov	r1, r7
 8001cac:	f7fe fbea 	bl	8000484 <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	ec51 0b19 	vmov	r0, r1, d9
 8001cb8:	f7fe fec4 	bl	8000a44 <__aeabi_ddiv>
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <_etoa.constprop.0+0x360>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f7fe fbe0 	bl	8000484 <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8001cc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001cc6:	f203 36ff 	addw	r6, r3, #1023	; 0x3ff
 8001cca:	0533      	lsls	r3, r6, #20
 8001ccc:	2200      	movs	r2, #0
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001cce:	f7fe fd8f 	bl	80007f0 <__aeabi_dmul>
 8001cd2:	4606      	mov	r6, r0
 8001cd4:	460f      	mov	r7, r1
  // correct for rounding errors
  if (value < conv.F) {
 8001cd6:	4632      	mov	r2, r6
 8001cd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001cdc:	463b      	mov	r3, r7
 8001cde:	f7fe fff9 	bl	8000cd4 <__aeabi_dcmplt>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	f040 80d8 	bne.w	8001e98 <_etoa.constprop.0+0x388>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001ce8:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8001cec:	f108 0363 	add.w	r3, r8, #99	; 0x63
 8001cf0:	2bc7      	cmp	r3, #199	; 0xc7

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8001cf2:	9b07      	ldr	r3, [sp, #28]
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8001cf4:	bf34      	ite	cc
 8001cf6:	2604      	movcc	r6, #4
 8001cf8:	2605      	movcs	r6, #5
  if (flags & FLAGS_ADAPT_EXP) {
 8001cfa:	051f      	lsls	r7, r3, #20
 8001cfc:	d517      	bpl.n	8001d2e <_etoa.constprop.0+0x21e>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8001cfe:	a352      	add	r3, pc, #328	; (adr r3, 8001e48 <_etoa.constprop.0+0x338>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001d08:	f7fe fff8 	bl	8000cfc <__aeabi_dcmpge>
 8001d0c:	b148      	cbz	r0, 8001d22 <_etoa.constprop.0+0x212>
 8001d0e:	a350      	add	r3, pc, #320	; (adr r3, 8001e50 <_etoa.constprop.0+0x340>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001d18:	f7fe ffdc 	bl	8000cd4 <__aeabi_dcmplt>
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	f040 80cc 	bne.w	8001eba <_etoa.constprop.0+0x3aa>
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8001d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d24:	b11b      	cbz	r3, 8001d2e <_etoa.constprop.0+0x21e>
 8001d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	f040 80d6 	bne.w	8001eda <_etoa.constprop.0+0x3ca>
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
 8001d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d30:	42b3      	cmp	r3, r6
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8001d32:	bf88      	it	hi
 8001d34:	1b9f      	subhi	r7, r3, r6
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8001d36:	9b07      	ldr	r3, [sp, #28]
    fwidth = 0U;
 8001d38:	bf98      	it	ls
 8001d3a:	2700      	movls	r7, #0
  if ((flags & FLAGS_LEFT) && minwidth) {
 8001d3c:	f013 0302 	ands.w	r3, r3, #2
 8001d40:	930e      	str	r3, [sp, #56]	; 0x38
 8001d42:	d002      	beq.n	8001d4a <_etoa.constprop.0+0x23a>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8001d44:	2e00      	cmp	r6, #0
 8001d46:	bf18      	it	ne
 8001d48:	2700      	movne	r7, #0
  }

  // rescale the float value
  if (expval) {
 8001d4a:	f1b8 0f00 	cmp.w	r8, #0
 8001d4e:	d007      	beq.n	8001d60 <_etoa.constprop.0+0x250>
    value /= conv.F;
 8001d50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001d54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001d58:	f7fe fe74 	bl	8000a44 <__aeabi_ddiv>
 8001d5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8001d60:	4650      	mov	r0, sl
 8001d62:	4659      	mov	r1, fp
 8001d64:	2200      	movs	r2, #0
 8001d66:	2300      	movs	r3, #0
 8001d68:	f7fe ffb4 	bl	8000cd4 <__aeabi_dcmplt>
 8001d6c:	b130      	cbz	r0, 8001d7c <_etoa.constprop.0+0x26c>
 8001d6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001d72:	4602      	mov	r2, r0
 8001d74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001d78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	ed9d 7b08 	vldr	d7, [sp, #32]
 8001d84:	9b07      	ldr	r3, [sp, #28]
 8001d86:	9703      	str	r7, [sp, #12]
 8001d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d8c:	ed8d 7b00 	vstr	d7, [sp]
 8001d90:	9304      	str	r3, [sp, #16]
 8001d92:	464a      	mov	r2, r9
 8001d94:	4629      	mov	r1, r5
 8001d96:	4620      	mov	r0, r4
 8001d98:	f000 f8aa 	bl	8001ef0 <_ftoa.constprop.0>
 8001d9c:	4607      	mov	r7, r0

  // output the exponent part
  if (minwidth) {
 8001d9e:	b39e      	cbz	r6, 8001e08 <_etoa.constprop.0+0x2f8>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8001da0:	9b07      	ldr	r3, [sp, #28]
 8001da2:	f013 0f20 	tst.w	r3, #32
 8001da6:	bf14      	ite	ne
 8001da8:	2045      	movne	r0, #69	; 0x45
 8001daa:	2065      	moveq	r0, #101	; 0x65
 8001dac:	463a      	mov	r2, r7
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	4629      	mov	r1, r5
 8001db4:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8001db6:	2305      	movs	r3, #5
 8001db8:	9304      	str	r3, [sp, #16]
 8001dba:	2000      	movs	r0, #0
 8001dbc:	230a      	movs	r3, #10
 8001dbe:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001dc2:	ea4f 73d8 	mov.w	r3, r8, lsr #31
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8001dc6:	3701      	adds	r7, #1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	3e01      	subs	r6, #1
 8001dcc:	ea88 73e8 	eor.w	r3, r8, r8, asr #31
 8001dd0:	463a      	mov	r2, r7
 8001dd2:	eba3 73e8 	sub.w	r3, r3, r8, asr #31
 8001dd6:	9603      	str	r6, [sp, #12]
 8001dd8:	4629      	mov	r1, r5
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff fe50 	bl	8001a80 <_ntoa_long.constprop.0>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8001de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8001de2:	4607      	mov	r7, r0
    if (flags & FLAGS_LEFT) {
 8001de4:	b183      	cbz	r3, 8001e08 <_etoa.constprop.0+0x2f8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8001de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001de8:	eba0 0609 	sub.w	r6, r0, r9
 8001dec:	42b3      	cmp	r3, r6
 8001dee:	d90b      	bls.n	8001e08 <_etoa.constprop.0+0x2f8>
 8001df0:	4698      	mov	r8, r3
 8001df2:	463a      	mov	r2, r7
 8001df4:	3601      	adds	r6, #1
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	2020      	movs	r0, #32
 8001dfe:	47a0      	blx	r4
 8001e00:	45b0      	cmp	r8, r6
 8001e02:	f107 0701 	add.w	r7, r7, #1
 8001e06:	d8f4      	bhi.n	8001df2 <_etoa.constprop.0+0x2e2>
    }
  }
  return idx;
}
 8001e08:	4638      	mov	r0, r7
 8001e0a:	b011      	add	sp, #68	; 0x44
 8001e0c:	ecbd 8b04 	vpop	{d8-d9}
 8001e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e14:	f3af 8000 	nop.w
 8001e18:	509f79fb 	.word	0x509f79fb
 8001e1c:	3fd34413 	.word	0x3fd34413
 8001e20:	8b60c8b3 	.word	0x8b60c8b3
 8001e24:	3fc68a28 	.word	0x3fc68a28
 8001e28:	636f4361 	.word	0x636f4361
 8001e2c:	3fd287a7 	.word	0x3fd287a7
 8001e30:	0979a371 	.word	0x0979a371
 8001e34:	400a934f 	.word	0x400a934f
 8001e38:	bbb55516 	.word	0xbbb55516
 8001e3c:	40026bb1 	.word	0x40026bb1
 8001e40:	fefa39ef 	.word	0xfefa39ef
 8001e44:	3fe62e42 	.word	0x3fe62e42
 8001e48:	eb1c432d 	.word	0xeb1c432d
 8001e4c:	3f1a36e2 	.word	0x3f1a36e2
 8001e50:	00000000 	.word	0x00000000
 8001e54:	412e8480 	.word	0x412e8480
 8001e58:	7fefffff 	.word	0x7fefffff
 8001e5c:	3ff80000 	.word	0x3ff80000
 8001e60:	3fe00000 	.word	0x3fe00000
 8001e64:	402c0000 	.word	0x402c0000
 8001e68:	40240000 	.word	0x40240000
 8001e6c:	40180000 	.word	0x40180000
 8001e70:	3ff00000 	.word	0x3ff00000
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001e74:	9b07      	ldr	r3, [sp, #28]
 8001e76:	9322      	str	r3, [sp, #136]	; 0x88
 8001e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e7a:	9321      	str	r3, [sp, #132]	; 0x84
 8001e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e7e:	9320      	str	r3, [sp, #128]	; 0x80
 8001e80:	464a      	mov	r2, r9
 8001e82:	4629      	mov	r1, r5
 8001e84:	4620      	mov	r0, r4
 8001e86:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
}
 8001e8a:	b011      	add	sp, #68	; 0x44
 8001e8c:	ecbd 8b04 	vpop	{d8-d9}
 8001e90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001e94:	f000 b82c 	b.w	8001ef0 <_ftoa.constprop.0>
    conv.F /= 10;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <_etoa.constprop.0+0x3d0>)
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	4639      	mov	r1, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f7fe fdd0 	bl	8000a44 <__aeabi_ddiv>
    expval--;
 8001ea4:	f108 38ff 	add.w	r8, r8, #4294967295
    conv.F /= 10;
 8001ea8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001eac:	e71e      	b.n	8001cec <_etoa.constprop.0+0x1dc>
    value = -value;
 8001eae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8001eb2:	f8cd a020 	str.w	sl, [sp, #32]
 8001eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8001eb8:	e663      	b.n	8001b82 <_etoa.constprop.0+0x72>
      if ((int)prec > expval) {
 8001eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ebc:	4598      	cmp	r8, r3
        prec = (unsigned)((int)prec - expval - 1);
 8001ebe:	bfba      	itte	lt
 8001ec0:	eba3 0308 	sublt.w	r3, r3, r8
 8001ec4:	f103 33ff 	addlt.w	r3, r3, #4294967295
        prec = 0;
 8001ec8:	2300      	movge	r3, #0
 8001eca:	930a      	str	r3, [sp, #40]	; 0x28
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8001ecc:	9b07      	ldr	r3, [sp, #28]
      minwidth = 0U;
 8001ece:	2600      	movs	r6, #0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8001ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed4:	9307      	str	r3, [sp, #28]
      expval   = 0;
 8001ed6:	46b0      	mov	r8, r6
 8001ed8:	e729      	b.n	8001d2e <_etoa.constprop.0+0x21e>
        --prec;
 8001eda:	3b01      	subs	r3, #1
 8001edc:	930a      	str	r3, [sp, #40]	; 0x28
 8001ede:	e726      	b.n	8001d2e <_etoa.constprop.0+0x21e>
 8001ee0:	40240000 	.word	0x40240000
	...

08001ef0 <_ftoa.constprop.0>:
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef4:	ed2d 8b04 	vpush	{d8-d9}
 8001ef8:	b093      	sub	sp, #76	; 0x4c
 8001efa:	e9dd 4322 	ldrd	r4, r3, [sp, #136]	; 0x88
 8001efe:	e9dd 6720 	ldrd	r6, r7, [sp, #128]	; 0x80
 8001f02:	9305      	str	r3, [sp, #20]
 8001f04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001f06:	9006      	str	r0, [sp, #24]
 8001f08:	4688      	mov	r8, r1
 8001f0a:	4691      	mov	r9, r2
 8001f0c:	9304      	str	r3, [sp, #16]
  if (value != value)
 8001f0e:	4632      	mov	r2, r6
 8001f10:	463b      	mov	r3, r7
 8001f12:	4630      	mov	r0, r6
 8001f14:	4639      	mov	r1, r7
 8001f16:	f7fe fed3 	bl	8000cc0 <__aeabi_dcmpeq>
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	f000 8101 	beq.w	8002122 <_ftoa.constprop.0+0x232>
  if (value < -DBL_MAX)
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001f28:	4630      	mov	r0, r6
 8001f2a:	4639      	mov	r1, r7
 8001f2c:	f7fe fed2 	bl	8000cd4 <__aeabi_dcmplt>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 8127 	bne.w	8002184 <_ftoa.constprop.0+0x294>
  if (value > DBL_MAX)
 8001f36:	4bba      	ldr	r3, [pc, #744]	; (8002220 <_ftoa.constprop.0+0x330>)
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	4639      	mov	r1, r7
 8001f40:	f7fe fee6 	bl	8000d10 <__aeabi_dcmpgt>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	f040 80d3 	bne.w	80020f0 <_ftoa.constprop.0+0x200>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001f4a:	a3b1      	add	r3, pc, #708	; (adr r3, 8002210 <_ftoa.constprop.0+0x320>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	4630      	mov	r0, r6
 8001f52:	4639      	mov	r1, r7
 8001f54:	f7fe fedc 	bl	8000d10 <__aeabi_dcmpgt>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	f040 8102 	bne.w	8002162 <_ftoa.constprop.0+0x272>
 8001f5e:	a3ae      	add	r3, pc, #696	; (adr r3, 8002218 <_ftoa.constprop.0+0x328>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	4630      	mov	r0, r6
 8001f66:	4639      	mov	r1, r7
 8001f68:	f7fe feb4 	bl	8000cd4 <__aeabi_dcmplt>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	f040 80f8 	bne.w	8002162 <_ftoa.constprop.0+0x272>
  if (value < 0) {
 8001f72:	2200      	movs	r2, #0
 8001f74:	2300      	movs	r3, #0
 8001f76:	4630      	mov	r0, r6
 8001f78:	4639      	mov	r1, r7
 8001f7a:	f7fe feab 	bl	8000cd4 <__aeabi_dcmplt>
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	f040 80e0 	bne.w	8002144 <_ftoa.constprop.0+0x254>
  bool negative = false;
 8001f84:	9007      	str	r0, [sp, #28]
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001f86:	9b04      	ldr	r3, [sp, #16]
 8001f88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001f8c:	bf08      	it	eq
 8001f8e:	2406      	moveq	r4, #6
 8001f90:	ab0a      	add	r3, sp, #40	; 0x28
 8001f92:	f1a4 0120 	sub.w	r1, r4, #32
 8001f96:	46a2      	mov	sl, r4
    buf[len++] = '0';
 8001f98:	2230      	movs	r2, #48	; 0x30
 8001f9a:	e006      	b.n	8001faa <_ftoa.constprop.0+0xba>
    prec--;
 8001f9c:	f10a 3aff 	add.w	sl, sl, #4294967295
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001fa0:	458a      	cmp	sl, r1
    buf[len++] = '0';
 8001fa2:	f803 2b01 	strb.w	r2, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001fa6:	f000 8131 	beq.w	800220c <_ftoa.constprop.0+0x31c>
 8001faa:	f1ba 0f09 	cmp.w	sl, #9
 8001fae:	eba4 050a 	sub.w	r5, r4, sl
 8001fb2:	d8f3      	bhi.n	8001f9c <_ftoa.constprop.0+0xac>
  int whole = (int)value;
 8001fb4:	4639      	mov	r1, r7
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	f7fe feb4 	bl	8000d24 <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 8001fbc:	4b99      	ldr	r3, [pc, #612]	; (8002224 <_ftoa.constprop.0+0x334>)
 8001fbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8001fc2:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
 8001fc6:	4604      	mov	r4, r0
  double tmp = (value - whole) * pow10[prec];
 8001fc8:	eeb0 8a47 	vmov.f32	s16, s14
 8001fcc:	eef0 8a67 	vmov.f32	s17, s15
 8001fd0:	f7fe fba4 	bl	800071c <__aeabi_i2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4630      	mov	r0, r6
 8001fda:	4639      	mov	r1, r7
 8001fdc:	f7fe fa50 	bl	8000480 <__aeabi_dsub>
 8001fe0:	ec53 2b18 	vmov	r2, r3, d8
 8001fe4:	f7fe fc04 	bl	80007f0 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	ec43 2b19 	vmov	d9, r2, r3
  unsigned long frac = (unsigned long)tmp;
 8001ff0:	f7fe fec0 	bl	8000d74 <__aeabi_d2uiz>
 8001ff4:	4683      	mov	fp, r0
  diff = tmp - frac;
 8001ff6:	f7fe fb81 	bl	80006fc <__aeabi_ui2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	ec51 0b19 	vmov	r0, r1, d9
 8002002:	f7fe fa3d 	bl	8000480 <__aeabi_dsub>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (diff > 0.5) {
 800200e:	4b86      	ldr	r3, [pc, #536]	; (8002228 <_ftoa.constprop.0+0x338>)
 8002010:	2200      	movs	r2, #0
 8002012:	f7fe fe7d 	bl	8000d10 <__aeabi_dcmpgt>
 8002016:	2800      	cmp	r0, #0
 8002018:	f000 80e9 	beq.w	80021ee <_ftoa.constprop.0+0x2fe>
    ++frac;
 800201c:	f10b 0b01 	add.w	fp, fp, #1
    if (frac >= pow10[prec]) {
 8002020:	4658      	mov	r0, fp
 8002022:	f7fe fb6b 	bl	80006fc <__aeabi_ui2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	ec51 0b18 	vmov	r0, r1, d8
 800202e:	f7fe fe5b 	bl	8000ce8 <__aeabi_dcmple>
 8002032:	b110      	cbz	r0, 800203a <_ftoa.constprop.0+0x14a>
      ++whole;
 8002034:	3401      	adds	r4, #1
      frac = 0;
 8002036:	f04f 0b00 	mov.w	fp, #0
  if (prec == 0U) {
 800203a:	f1ba 0f00 	cmp.w	sl, #0
 800203e:	f040 80a9 	bne.w	8002194 <_ftoa.constprop.0+0x2a4>
    diff = value - (double)whole;
 8002042:	4620      	mov	r0, r4
 8002044:	f7fe fb6a 	bl	800071c <__aeabi_i2d>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4630      	mov	r0, r6
 800204e:	4639      	mov	r1, r7
 8002050:	f7fe fa16 	bl	8000480 <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002054:	4b74      	ldr	r3, [pc, #464]	; (8002228 <_ftoa.constprop.0+0x338>)
 8002056:	2200      	movs	r2, #0
    diff = value - (double)whole;
 8002058:	4606      	mov	r6, r0
 800205a:	460f      	mov	r7, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800205c:	f7fe fe3a 	bl	8000cd4 <__aeabi_dcmplt>
 8002060:	2800      	cmp	r0, #0
 8002062:	d07a      	beq.n	800215a <_ftoa.constprop.0+0x26a>
 8002064:	4b70      	ldr	r3, [pc, #448]	; (8002228 <_ftoa.constprop.0+0x338>)
 8002066:	4630      	mov	r0, r6
 8002068:	4639      	mov	r1, r7
 800206a:	2200      	movs	r2, #0
 800206c:	f7fe fe50 	bl	8000d10 <__aeabi_dcmpgt>
 8002070:	2800      	cmp	r0, #0
 8002072:	d172      	bne.n	800215a <_ftoa.constprop.0+0x26a>
 8002074:	1e69      	subs	r1, r5, #1
 8002076:	ab0a      	add	r3, sp, #40	; 0x28
    buf[len++] = (char)(48 + (whole % 10));
 8002078:	486c      	ldr	r0, [pc, #432]	; (800222c <_ftoa.constprop.0+0x33c>)
 800207a:	4419      	add	r1, r3
 800207c:	e000      	b.n	8002080 <_ftoa.constprop.0+0x190>
 800207e:	461d      	mov	r5, r3
 8002080:	fb80 2304 	smull	r2, r3, r0, r4
 8002084:	17e2      	asrs	r2, r4, #31
 8002086:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 800208a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800208e:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002092:	2d20      	cmp	r5, #32
    buf[len++] = (char)(48 + (whole % 10));
 8002094:	f104 0430 	add.w	r4, r4, #48	; 0x30
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002098:	f000 8097 	beq.w	80021ca <_ftoa.constprop.0+0x2da>
    buf[len++] = (char)(48 + (whole % 10));
 800209c:	f801 4f01 	strb.w	r4, [r1, #1]!
 80020a0:	1c6b      	adds	r3, r5, #1
    if (!(whole /= 10)) {
 80020a2:	4614      	mov	r4, r2
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	d1ea      	bne.n	800207e <_ftoa.constprop.0+0x18e>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80020a8:	9a04      	ldr	r2, [sp, #16]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	2a01      	cmp	r2, #1
 80020b0:	f000 8102 	beq.w	80022b8 <_ftoa.constprop.0+0x3c8>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	f000 8098 	beq.w	80021ea <_ftoa.constprop.0+0x2fa>
    if (negative) {
 80020ba:	9a07      	ldr	r2, [sp, #28]
 80020bc:	2a00      	cmp	r2, #0
 80020be:	f000 80c1 	beq.w	8002244 <_ftoa.constprop.0+0x354>
      buf[len++] = '-';
 80020c2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80020c6:	446a      	add	r2, sp
 80020c8:	212d      	movs	r1, #45	; 0x2d
 80020ca:	3301      	adds	r3, #1
 80020cc:	f802 1c20 	strb.w	r1, [r2, #-32]
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80020d0:	9a04      	ldr	r2, [sp, #16]
 80020d2:	9202      	str	r2, [sp, #8]
 80020d4:	9a05      	ldr	r2, [sp, #20]
 80020d6:	9806      	ldr	r0, [sp, #24]
 80020d8:	e9cd 3200 	strd	r3, r2, [sp]
 80020dc:	4641      	mov	r1, r8
 80020de:	ab0a      	add	r3, sp, #40	; 0x28
 80020e0:	464a      	mov	r2, r9
 80020e2:	f7ff fb3d 	bl	8001760 <_out_rev.constprop.0>
}
 80020e6:	b013      	add	sp, #76	; 0x4c
 80020e8:	ecbd 8b04 	vpop	{d8-d9}
 80020ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80020f0:	9b05      	ldr	r3, [sp, #20]
 80020f2:	9321      	str	r3, [sp, #132]	; 0x84
 80020f4:	9b04      	ldr	r3, [sp, #16]
 80020f6:	9322      	str	r3, [sp, #136]	; 0x88
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2303      	moveq	r3, #3
 8002102:	2304      	movne	r3, #4
 8002104:	4c4a      	ldr	r4, [pc, #296]	; (8002230 <_ftoa.constprop.0+0x340>)
 8002106:	9320      	str	r3, [sp, #128]	; 0x80
 8002108:	9806      	ldr	r0, [sp, #24]
 800210a:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <_ftoa.constprop.0+0x344>)
 800210c:	464a      	mov	r2, r9
 800210e:	4641      	mov	r1, r8
 8002110:	bf08      	it	eq
 8002112:	4623      	moveq	r3, r4
}
 8002114:	b013      	add	sp, #76	; 0x4c
 8002116:	ecbd 8b04 	vpop	{d8-d9}
 800211a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800211e:	f7ff bb1f 	b.w	8001760 <_out_rev.constprop.0>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002122:	9b04      	ldr	r3, [sp, #16]
 8002124:	9a05      	ldr	r2, [sp, #20]
 8002126:	9322      	str	r3, [sp, #136]	; 0x88
 8002128:	2303      	movs	r3, #3
 800212a:	e9cd 3220 	strd	r3, r2, [sp, #128]	; 0x80
 800212e:	4b42      	ldr	r3, [pc, #264]	; (8002238 <_ftoa.constprop.0+0x348>)
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002130:	9806      	ldr	r0, [sp, #24]
 8002132:	464a      	mov	r2, r9
 8002134:	4641      	mov	r1, r8
}
 8002136:	b013      	add	sp, #76	; 0x4c
 8002138:	ecbd 8b04 	vpop	{d8-d9}
 800213c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002140:	f7ff bb0e 	b.w	8001760 <_out_rev.constprop.0>
    negative = true;
 8002144:	2101      	movs	r1, #1
    value = 0 - value;
 8002146:	4632      	mov	r2, r6
 8002148:	463b      	mov	r3, r7
    negative = true;
 800214a:	9107      	str	r1, [sp, #28]
    value = 0 - value;
 800214c:	2000      	movs	r0, #0
 800214e:	2100      	movs	r1, #0
 8002150:	f7fe f996 	bl	8000480 <__aeabi_dsub>
 8002154:	4606      	mov	r6, r0
 8002156:	460f      	mov	r7, r1
 8002158:	e715      	b.n	8001f86 <_ftoa.constprop.0+0x96>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800215a:	07e0      	lsls	r0, r4, #31
 800215c:	d58a      	bpl.n	8002074 <_ftoa.constprop.0+0x184>
      ++whole;
 800215e:	3401      	adds	r4, #1
 8002160:	e788      	b.n	8002074 <_ftoa.constprop.0+0x184>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002162:	9b04      	ldr	r3, [sp, #16]
 8002164:	9324      	str	r3, [sp, #144]	; 0x90
 8002166:	9806      	ldr	r0, [sp, #24]
 8002168:	9b05      	ldr	r3, [sp, #20]
 800216a:	464a      	mov	r2, r9
 800216c:	4641      	mov	r1, r8
 800216e:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
 8002172:	e9cd 4322 	strd	r4, r3, [sp, #136]	; 0x88
}
 8002176:	b013      	add	sp, #76	; 0x4c
 8002178:	ecbd 8b04 	vpop	{d8-d9}
 800217c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002180:	f7ff bcc6 	b.w	8001b10 <_etoa.constprop.0>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002184:	9b04      	ldr	r3, [sp, #16]
 8002186:	9a05      	ldr	r2, [sp, #20]
 8002188:	9322      	str	r3, [sp, #136]	; 0x88
 800218a:	2304      	movs	r3, #4
 800218c:	e9cd 3220 	strd	r3, r2, [sp, #128]	; 0x80
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <_ftoa.constprop.0+0x34c>)
 8002192:	e7cd      	b.n	8002130 <_ftoa.constprop.0+0x240>
 8002194:	1e68      	subs	r0, r5, #1
 8002196:	ab0a      	add	r3, sp, #40	; 0x28
      buf[len++] = (char)(48U + (frac % 10U));
 8002198:	4f29      	ldr	r7, [pc, #164]	; (8002240 <_ftoa.constprop.0+0x350>)
 800219a:	4418      	add	r0, r3
 800219c:	e00f      	b.n	80021be <_ftoa.constprop.0+0x2ce>
 800219e:	fba7 320b 	umull	r3, r2, r7, fp
 80021a2:	08d2      	lsrs	r2, r2, #3
 80021a4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80021a8:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 80021ac:	3330      	adds	r3, #48	; 0x30
      if (!(frac /= 10U)) {
 80021ae:	f1bb 0f09 	cmp.w	fp, #9
      buf[len++] = (char)(48U + (frac % 10U));
 80021b2:	f800 3f01 	strb.w	r3, [r0, #1]!
      if (!(frac /= 10U)) {
 80021b6:	d954      	bls.n	8002262 <_ftoa.constprop.0+0x372>
      --count;
 80021b8:	46b2      	mov	sl, r6
      if (!(frac /= 10U)) {
 80021ba:	4693      	mov	fp, r2
      buf[len++] = (char)(48U + (frac % 10U));
 80021bc:	460d      	mov	r5, r1
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80021be:	2d20      	cmp	r5, #32
      --count;
 80021c0:	f10a 36ff 	add.w	r6, sl, #4294967295
      buf[len++] = (char)(48U + (frac % 10U));
 80021c4:	f105 0101 	add.w	r1, r5, #1
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80021c8:	d1e9      	bne.n	800219e <_ftoa.constprop.0+0x2ae>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80021ca:	9b04      	ldr	r3, [sp, #16]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10a      	bne.n	80021ea <_ftoa.constprop.0+0x2fa>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80021d4:	9b05      	ldr	r3, [sp, #20]
 80021d6:	b143      	cbz	r3, 80021ea <_ftoa.constprop.0+0x2fa>
 80021d8:	9a07      	ldr	r2, [sp, #28]
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d168      	bne.n	80022b0 <_ftoa.constprop.0+0x3c0>
 80021de:	9a04      	ldr	r2, [sp, #16]
 80021e0:	f012 0f0c 	tst.w	r2, #12
 80021e4:	d001      	beq.n	80021ea <_ftoa.constprop.0+0x2fa>
      width--;
 80021e6:	3b01      	subs	r3, #1
 80021e8:	9305      	str	r3, [sp, #20]
 80021ea:	2320      	movs	r3, #32
 80021ec:	e770      	b.n	80020d0 <_ftoa.constprop.0+0x1e0>
  else if (diff < 0.5) {
 80021ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <_ftoa.constprop.0+0x338>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	f7fe fd6d 	bl	8000cd4 <__aeabi_dcmplt>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	f47f af1d 	bne.w	800203a <_ftoa.constprop.0+0x14a>
  else if ((frac == 0U) || (frac & 1U)) {
 8002200:	f1bb 0f00 	cmp.w	fp, #0
 8002204:	d14f      	bne.n	80022a6 <_ftoa.constprop.0+0x3b6>
    ++frac;
 8002206:	f10b 0b01 	add.w	fp, fp, #1
 800220a:	e716      	b.n	800203a <_ftoa.constprop.0+0x14a>
 800220c:	2520      	movs	r5, #32
 800220e:	e6d1      	b.n	8001fb4 <_ftoa.constprop.0+0xc4>
 8002210:	00000000 	.word	0x00000000
 8002214:	41cdcd65 	.word	0x41cdcd65
 8002218:	00000000 	.word	0x00000000
 800221c:	c1cdcd65 	.word	0xc1cdcd65
 8002220:	7fefffff 	.word	0x7fefffff
 8002224:	080078e0 	.word	0x080078e0
 8002228:	3fe00000 	.word	0x3fe00000
 800222c:	66666667 	.word	0x66666667
 8002230:	080074bc 	.word	0x080074bc
 8002234:	080074b4 	.word	0x080074b4
 8002238:	080074c0 	.word	0x080074c0
 800223c:	080074c4 	.word	0x080074c4
 8002240:	cccccccd 	.word	0xcccccccd
    else if (flags & FLAGS_PLUS) {
 8002244:	9a04      	ldr	r2, [sp, #16]
 8002246:	0751      	lsls	r1, r2, #29
 8002248:	d425      	bmi.n	8002296 <_ftoa.constprop.0+0x3a6>
    else if (flags & FLAGS_SPACE) {
 800224a:	9a04      	ldr	r2, [sp, #16]
 800224c:	0712      	lsls	r2, r2, #28
 800224e:	f57f af3f 	bpl.w	80020d0 <_ftoa.constprop.0+0x1e0>
      buf[len++] = ' ';
 8002252:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002256:	446a      	add	r2, sp
 8002258:	2120      	movs	r1, #32
 800225a:	3301      	adds	r3, #1
 800225c:	f802 1c20 	strb.w	r1, [r2, #-32]
 8002260:	e736      	b.n	80020d0 <_ftoa.constprop.0+0x1e0>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002262:	2920      	cmp	r1, #32
 8002264:	d0b1      	beq.n	80021ca <_ftoa.constprop.0+0x2da>
 8002266:	b32e      	cbz	r6, 80022b4 <_ftoa.constprop.0+0x3c4>
 8002268:	ab0a      	add	r3, sp, #40	; 0x28
 800226a:	195a      	adds	r2, r3, r5
      buf[len++] = '0';
 800226c:	2030      	movs	r0, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800226e:	460d      	mov	r5, r1
      buf[len++] = '0';
 8002270:	3501      	adds	r5, #1
 8002272:	ebaa 0305 	sub.w	r3, sl, r5
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002276:	2d20      	cmp	r5, #32
      buf[len++] = '0';
 8002278:	f802 0f01 	strb.w	r0, [r2, #1]!
 800227c:	f103 33ff 	add.w	r3, r3, #4294967295
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002280:	d0a3      	beq.n	80021ca <_ftoa.constprop.0+0x2da>
 8002282:	42d9      	cmn	r1, r3
 8002284:	d1f4      	bne.n	8002270 <_ftoa.constprop.0+0x380>
      buf[len++] = '.';
 8002286:	f105 0348 	add.w	r3, r5, #72	; 0x48
 800228a:	446b      	add	r3, sp
 800228c:	222e      	movs	r2, #46	; 0x2e
 800228e:	3501      	adds	r5, #1
 8002290:	f803 2c20 	strb.w	r2, [r3, #-32]
 8002294:	e6ee      	b.n	8002074 <_ftoa.constprop.0+0x184>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002296:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800229a:	446a      	add	r2, sp
 800229c:	212b      	movs	r1, #43	; 0x2b
 800229e:	3301      	adds	r3, #1
 80022a0:	f802 1c20 	strb.w	r1, [r2, #-32]
 80022a4:	e714      	b.n	80020d0 <_ftoa.constprop.0+0x1e0>
  else if ((frac == 0U) || (frac & 1U)) {
 80022a6:	f01b 0f01 	tst.w	fp, #1
 80022aa:	f43f aec6 	beq.w	800203a <_ftoa.constprop.0+0x14a>
 80022ae:	e7aa      	b.n	8002206 <_ftoa.constprop.0+0x316>
      width--;
 80022b0:	9b05      	ldr	r3, [sp, #20]
 80022b2:	e798      	b.n	80021e6 <_ftoa.constprop.0+0x2f6>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80022b4:	460d      	mov	r5, r1
 80022b6:	e7e6      	b.n	8002286 <_ftoa.constprop.0+0x396>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80022b8:	9a05      	ldr	r2, [sp, #20]
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	f43f aefa 	beq.w	80020b4 <_ftoa.constprop.0+0x1c4>
 80022c0:	9a07      	ldr	r2, [sp, #28]
 80022c2:	b91a      	cbnz	r2, 80022cc <_ftoa.constprop.0+0x3dc>
 80022c4:	9a04      	ldr	r2, [sp, #16]
 80022c6:	f012 0f0c 	tst.w	r2, #12
 80022ca:	d002      	beq.n	80022d2 <_ftoa.constprop.0+0x3e2>
      width--;
 80022cc:	9a05      	ldr	r2, [sp, #20]
 80022ce:	3a01      	subs	r2, #1
 80022d0:	9205      	str	r2, [sp, #20]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022d2:	9a05      	ldr	r2, [sp, #20]
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f4bf aeed 	bcs.w	80020b4 <_ftoa.constprop.0+0x1c4>
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f43f aef8 	beq.w	80020d0 <_ftoa.constprop.0+0x1e0>
 80022e0:	aa0a      	add	r2, sp, #40	; 0x28
 80022e2:	4415      	add	r5, r2
      buf[len++] = '0';
 80022e4:	9905      	ldr	r1, [sp, #20]
 80022e6:	2230      	movs	r2, #48	; 0x30
 80022e8:	e002      	b.n	80022f0 <_ftoa.constprop.0+0x400>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	f43f aef0 	beq.w	80020d0 <_ftoa.constprop.0+0x1e0>
      buf[len++] = '0';
 80022f0:	3301      	adds	r3, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022f2:	428b      	cmp	r3, r1
      buf[len++] = '0';
 80022f4:	f805 2f01 	strb.w	r2, [r5, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022f8:	d1f7      	bne.n	80022ea <_ftoa.constprop.0+0x3fa>
 80022fa:	9b05      	ldr	r3, [sp, #20]
 80022fc:	e6da      	b.n	80020b4 <_ftoa.constprop.0+0x1c4>
 80022fe:	bf00      	nop

08002300 <_vsnprintf.constprop.0>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
 8002300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!buffer) {
    // use null output function
    out = _out_null;
  }

  while (*format)
 8002304:	780e      	ldrb	r6, [r1, #0]
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
 8002306:	b08d      	sub	sp, #52	; 0x34
 8002308:	4681      	mov	r9, r0
  while (*format)
 800230a:	2e00      	cmp	r6, #0
 800230c:	f000 8251 	beq.w	80027b2 <_vsnprintf.constprop.0+0x4b2>
 8002310:	460c      	mov	r4, r1
 8002312:	4692      	mov	sl, r2
 8002314:	2500      	movs	r5, #0
        if ((*format == 'i') || (*format == 'd')) {
          // signed
          if (flags & FLAGS_LONG_LONG) {
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002316:	4630      	mov	r0, r6
 8002318:	e00b      	b.n	8002332 <_vsnprintf.constprop.0+0x32>
      out(*format, buffer, idx++, maxlen);
 800231a:	462a      	mov	r2, r5
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
 8002320:	4649      	mov	r1, r9
 8002322:	f001 fe8d 	bl	8004040 <_out_char>
 8002326:	3501      	adds	r5, #1
      format++;
 8002328:	3401      	adds	r4, #1
  while (*format)
 800232a:	7820      	ldrb	r0, [r4, #0]
 800232c:	2800      	cmp	r0, #0
 800232e:	f000 80b4 	beq.w	800249a <_vsnprintf.constprop.0+0x19a>
    if (*format != '%') {
 8002332:	2825      	cmp	r0, #37	; 0x25
 8002334:	d1f1      	bne.n	800231a <_vsnprintf.constprop.0+0x1a>
      format++;
 8002336:	1c63      	adds	r3, r4, #1
    flags = 0U;
 8002338:	2100      	movs	r1, #0
 800233a:	461c      	mov	r4, r3
      switch (*format) {
 800233c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002340:	f1a0 0220 	sub.w	r2, r0, #32
 8002344:	2a10      	cmp	r2, #16
 8002346:	d80a      	bhi.n	800235e <_vsnprintf.constprop.0+0x5e>
 8002348:	e8df f002 	tbb	[pc, r2]
 800234c:	80090983 	.word	0x80090983
 8002350:	09090909 	.word	0x09090909
 8002354:	7d090909 	.word	0x7d090909
 8002358:	09097a09 	.word	0x09097a09
 800235c:	77          	.byte	0x77
 800235d:	00          	.byte	0x00
    if (_is_digit(*format)) {
 800235e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002362:	2b09      	cmp	r3, #9
 8002364:	f240 80b7 	bls.w	80024d6 <_vsnprintf.constprop.0+0x1d6>
    else if (*format == '*') {
 8002368:	282a      	cmp	r0, #42	; 0x2a
 800236a:	f000 80c2 	beq.w	80024f2 <_vsnprintf.constprop.0+0x1f2>
    width = 0U;
 800236e:	2600      	movs	r6, #0
    if (*format == '.') {
 8002370:	282e      	cmp	r0, #46	; 0x2e
 8002372:	f000 80a1 	beq.w	80024b8 <_vsnprintf.constprop.0+0x1b8>
    precision = 0U;
 8002376:	2700      	movs	r7, #0
    switch (*format) {
 8002378:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800237c:	2b12      	cmp	r3, #18
 800237e:	d80f      	bhi.n	80023a0 <_vsnprintf.constprop.0+0xa0>
 8002380:	e8df f003 	tbb	[pc, r3]
 8002384:	0ec90ece 	.word	0x0ec90ece
 8002388:	0e0e0ec1 	.word	0x0e0e0ec1
 800238c:	0e0e0e0e 	.word	0x0e0e0e0e
 8002390:	0e0e0e0a 	.word	0x0e0e0e0a
 8002394:	0e0e      	.short	0x0e0e
 8002396:	0a          	.byte	0x0a
 8002397:	00          	.byte	0x00
        if (*format == 'l') {
 8002398:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800239a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 800239e:	3401      	adds	r4, #1
    switch (*format) {
 80023a0:	2867      	cmp	r0, #103	; 0x67
 80023a2:	d859      	bhi.n	8002458 <_vsnprintf.constprop.0+0x158>
 80023a4:	2824      	cmp	r0, #36	; 0x24
 80023a6:	d96c      	bls.n	8002482 <_vsnprintf.constprop.0+0x182>
 80023a8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80023ac:	2b42      	cmp	r3, #66	; 0x42
 80023ae:	d868      	bhi.n	8002482 <_vsnprintf.constprop.0+0x182>
 80023b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023b4:	006700d5 	.word	0x006700d5
 80023b8:	00670067 	.word	0x00670067
 80023bc:	00670067 	.word	0x00670067
 80023c0:	00670067 	.word	0x00670067
 80023c4:	00670067 	.word	0x00670067
 80023c8:	00670067 	.word	0x00670067
 80023cc:	00670067 	.word	0x00670067
 80023d0:	00670067 	.word	0x00670067
 80023d4:	00670067 	.word	0x00670067
 80023d8:	00670067 	.word	0x00670067
 80023dc:	00670067 	.word	0x00670067
 80023e0:	00670067 	.word	0x00670067
 80023e4:	00670067 	.word	0x00670067
 80023e8:	00670067 	.word	0x00670067
 80023ec:	00670067 	.word	0x00670067
 80023f0:	00670067 	.word	0x00670067
 80023f4:	00be0164 	.word	0x00be0164
 80023f8:	00670164 	.word	0x00670164
 80023fc:	00670067 	.word	0x00670067
 8002400:	00670067 	.word	0x00670067
 8002404:	00670067 	.word	0x00670067
 8002408:	00670067 	.word	0x00670067
 800240c:	00670067 	.word	0x00670067
 8002410:	00670067 	.word	0x00670067
 8002414:	00670067 	.word	0x00670067
 8002418:	018a0067 	.word	0x018a0067
 800241c:	00670067 	.word	0x00670067
 8002420:	00670067 	.word	0x00670067
 8002424:	00670067 	.word	0x00670067
 8002428:	00670067 	.word	0x00670067
 800242c:	018a0067 	.word	0x018a0067
 8002430:	018a00df 	.word	0x018a00df
 8002434:	00be0164 	.word	0x00be0164
 8002438:	0164      	.short	0x0164
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800243a:	f041 0101 	orr.w	r1, r1, #1
 800243e:	e77c      	b.n	800233a <_vsnprintf.constprop.0+0x3a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002440:	f041 0102 	orr.w	r1, r1, #2
 8002444:	e779      	b.n	800233a <_vsnprintf.constprop.0+0x3a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002446:	f041 0104 	orr.w	r1, r1, #4
 800244a:	e776      	b.n	800233a <_vsnprintf.constprop.0+0x3a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800244c:	f041 0110 	orr.w	r1, r1, #16
 8002450:	e773      	b.n	800233a <_vsnprintf.constprop.0+0x3a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002452:	f041 0108 	orr.w	r1, r1, #8
 8002456:	e770      	b.n	800233a <_vsnprintf.constprop.0+0x3a>
    switch (*format) {
 8002458:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b0f      	cmp	r3, #15
 8002460:	d80f      	bhi.n	8002482 <_vsnprintf.constprop.0+0x182>
 8002462:	f04f 0801 	mov.w	r8, #1
 8002466:	fa08 f803 	lsl.w	r8, r8, r3
 800246a:	f249 0241 	movw	r2, #36929	; 0x9041
 800246e:	ea18 0802 	ands.w	r8, r8, r2
 8002472:	f040 8167 	bne.w	8002744 <_vsnprintf.constprop.0+0x444>
 8002476:	2b0a      	cmp	r3, #10
 8002478:	f000 80ad 	beq.w	80025d6 <_vsnprintf.constprop.0+0x2d6>
 800247c:	2b07      	cmp	r3, #7
 800247e:	f000 8096 	beq.w	80025ae <_vsnprintf.constprop.0+0x2ae>
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
        format++;
 8002482:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 8002484:	462a      	mov	r2, r5
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	4649      	mov	r1, r9
 800248c:	f001 fdd8 	bl	8004040 <_out_char>
  while (*format)
 8002490:	7820      	ldrb	r0, [r4, #0]
        out(*format, buffer, idx++, maxlen);
 8002492:	3501      	adds	r5, #1
  while (*format)
 8002494:	2800      	cmp	r0, #0
 8002496:	f47f af4c 	bne.w	8002332 <_vsnprintf.constprop.0+0x32>
 800249a:	f06f 0201 	mvn.w	r2, #1
 800249e:	42aa      	cmp	r2, r5
 80024a0:	bf28      	it	cs
 80024a2:	462a      	movcs	r2, r5
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	4649      	mov	r1, r9
 80024aa:	2000      	movs	r0, #0
 80024ac:	f001 fdc8 	bl	8004040 <_out_char>

  // return written chars without terminating \0
  return (int)idx;
}
 80024b0:	4628      	mov	r0, r5
 80024b2:	b00d      	add	sp, #52	; 0x34
 80024b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (_is_digit(*format)) {
 80024b8:	7860      	ldrb	r0, [r4, #1]
 80024ba:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 80024be:	2a09      	cmp	r2, #9
      flags |= FLAGS_PRECISION;
 80024c0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      format++;
 80024c4:	f104 0301 	add.w	r3, r4, #1
      if (_is_digit(*format)) {
 80024c8:	f240 80c9 	bls.w	800265e <_vsnprintf.constprop.0+0x35e>
      else if (*format == '*') {
 80024cc:	282a      	cmp	r0, #42	; 0x2a
 80024ce:	f000 80f4 	beq.w	80026ba <_vsnprintf.constprop.0+0x3ba>
      format++;
 80024d2:	461c      	mov	r4, r3
 80024d4:	e74f      	b.n	8002376 <_vsnprintf.constprop.0+0x76>
  unsigned int i = 0U;
 80024d6:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80024d8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80024dc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  while (_is_digit(**str)) {
 80024e0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80024e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80024e8:	2b09      	cmp	r3, #9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80024ea:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
  while (_is_digit(**str)) {
 80024ee:	d9f3      	bls.n	80024d8 <_vsnprintf.constprop.0+0x1d8>
 80024f0:	e73e      	b.n	8002370 <_vsnprintf.constprop.0+0x70>
      const int w = va_arg(va, int);
 80024f2:	f85a 6b04 	ldr.w	r6, [sl], #4
    if (*format == '.') {
 80024f6:	7860      	ldrb	r0, [r4, #1]
      if (w < 0) {
 80024f8:	2e00      	cmp	r6, #0
        flags |= FLAGS_LEFT;    // reverse padding
 80024fa:	bfbc      	itt	lt
 80024fc:	f041 0102 	orrlt.w	r1, r1, #2
        width = (unsigned int)-w;
 8002500:	4276      	neglt	r6, r6
      format++;
 8002502:	3401      	adds	r4, #1
 8002504:	e734      	b.n	8002370 <_vsnprintf.constprop.0+0x70>
        if (*format == 'l') {
 8002506:	7860      	ldrb	r0, [r4, #1]
 8002508:	286c      	cmp	r0, #108	; 0x6c
 800250a:	f000 814d 	beq.w	80027a8 <_vsnprintf.constprop.0+0x4a8>
        flags |= FLAGS_LONG;
 800250e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8002512:	3401      	adds	r4, #1
 8002514:	e744      	b.n	80023a0 <_vsnprintf.constprop.0+0xa0>
        if (*format == 'l') {
 8002516:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002518:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        format++;
 800251c:	3401      	adds	r4, #1
        break;
 800251e:	e73f      	b.n	80023a0 <_vsnprintf.constprop.0+0xa0>
        if (*format == 'h') {
 8002520:	7860      	ldrb	r0, [r4, #1]
 8002522:	2868      	cmp	r0, #104	; 0x68
 8002524:	f000 813b 	beq.w	800279e <_vsnprintf.constprop.0+0x49e>
        flags |= FLAGS_SHORT;
 8002528:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        format++;
 800252c:	3401      	adds	r4, #1
 800252e:	e737      	b.n	80023a0 <_vsnprintf.constprop.0+0xa0>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002530:	2846      	cmp	r0, #70	; 0x46
 8002532:	bf08      	it	eq
 8002534:	f041 0120 	orreq.w	r1, r1, #32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002538:	e9cd 6103 	strd	r6, r1, [sp, #12]
 800253c:	f10a 0a07 	add.w	sl, sl, #7
 8002540:	9702      	str	r7, [sp, #8]
 8002542:	f02a 0a07 	bic.w	sl, sl, #7
 8002546:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 800254a:	462a      	mov	r2, r5
 800254c:	e9cd 6700 	strd	r6, r7, [sp]
 8002550:	48c2      	ldr	r0, [pc, #776]	; (800285c <_vsnprintf.constprop.0+0x55c>)
 8002552:	4649      	mov	r1, r9
 8002554:	f7ff fccc 	bl	8001ef0 <_ftoa.constprop.0>
        format++;
 8002558:	3401      	adds	r4, #1
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800255a:	4605      	mov	r5, r0
        break;
 800255c:	e6e5      	b.n	800232a <_vsnprintf.constprop.0+0x2a>
        out('%', buffer, idx++, maxlen);
 800255e:	462a      	mov	r2, r5
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	4649      	mov	r1, r9
 8002566:	2025      	movs	r0, #37	; 0x25
        format++;
 8002568:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 800256a:	3501      	adds	r5, #1
 800256c:	f001 fd68 	bl	8004040 <_out_char>
        break;
 8002570:	e6db      	b.n	800232a <_vsnprintf.constprop.0+0x2a>
        if (!(flags & FLAGS_LEFT)) {
 8002572:	078f      	lsls	r7, r1, #30
 8002574:	f140 8151 	bpl.w	800281a <_vsnprintf.constprop.0+0x51a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002578:	f85a 0b04 	ldr.w	r0, [sl], #4
 800257c:	462a      	mov	r2, r5
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	b2c0      	uxtb	r0, r0
 8002584:	4649      	mov	r1, r9
 8002586:	f001 fd5b 	bl	8004040 <_out_char>
 800258a:	1c6f      	adds	r7, r5, #1
          while (l++ < width) {
 800258c:	2e01      	cmp	r6, #1
 800258e:	bf98      	it	ls
 8002590:	463d      	movls	r5, r7
 8002592:	d90a      	bls.n	80025aa <_vsnprintf.constprop.0+0x2aa>
 8002594:	4435      	add	r5, r6
 8002596:	463a      	mov	r2, r7
            out(' ', buffer, idx++, maxlen);
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	3701      	adds	r7, #1
 800259e:	4649      	mov	r1, r9
 80025a0:	2020      	movs	r0, #32
 80025a2:	f001 fd4d 	bl	8004040 <_out_char>
          while (l++ < width) {
 80025a6:	42af      	cmp	r7, r5
 80025a8:	d1f5      	bne.n	8002596 <_vsnprintf.constprop.0+0x296>
        format++;
 80025aa:	3401      	adds	r4, #1
        break;
 80025ac:	e6bd      	b.n	800232a <_vsnprintf.constprop.0+0x2a>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80025ae:	f041 0121 	orr.w	r1, r1, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80025b2:	f85a 3b04 	ldr.w	r3, [sl], #4
 80025b6:	9104      	str	r1, [sp, #16]
 80025b8:	2108      	movs	r1, #8
 80025ba:	9103      	str	r1, [sp, #12]
 80025bc:	2110      	movs	r1, #16
 80025be:	462a      	mov	r2, r5
 80025c0:	9101      	str	r1, [sp, #4]
 80025c2:	48a6      	ldr	r0, [pc, #664]	; (800285c <_vsnprintf.constprop.0+0x55c>)
 80025c4:	9702      	str	r7, [sp, #8]
 80025c6:	f8cd 8000 	str.w	r8, [sp]
 80025ca:	4649      	mov	r1, r9
 80025cc:	f7ff fa58 	bl	8001a80 <_ntoa_long.constprop.0>
        format++;
 80025d0:	3401      	adds	r4, #1
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80025d2:	4605      	mov	r5, r0
        break;
 80025d4:	e6a9      	b.n	800232a <_vsnprintf.constprop.0+0x2a>
        const char* p = va_arg(va, char*);
 80025d6:	4653      	mov	r3, sl
 80025d8:	f853 ab04 	ldr.w	sl, [r3], #4
 80025dc:	930a      	str	r3, [sp, #40]	; 0x28
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80025de:	2f00      	cmp	r7, #0
 80025e0:	f040 80a9 	bne.w	8002736 <_vsnprintf.constprop.0+0x436>
  for (s = str; *s && maxsize--; ++s);
 80025e4:	f89a 0000 	ldrb.w	r0, [sl]
 80025e8:	f06f 0201 	mvn.w	r2, #1
 80025ec:	b158      	cbz	r0, 8002606 <_vsnprintf.constprop.0+0x306>
 80025ee:	3201      	adds	r2, #1
 80025f0:	4452      	add	r2, sl
        const char* p = va_arg(va, char*);
 80025f2:	46d0      	mov	r8, sl
 80025f4:	e001      	b.n	80025fa <_vsnprintf.constprop.0+0x2fa>
  for (s = str; *s && maxsize--; ++s);
 80025f6:	4590      	cmp	r8, r2
 80025f8:	d003      	beq.n	8002602 <_vsnprintf.constprop.0+0x302>
 80025fa:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <_vsnprintf.constprop.0+0x2f6>
  return (unsigned int)(s - str);
 8002602:	eba8 080a 	sub.w	r8, r8, sl
        if (flags & FLAGS_PRECISION) {
 8002606:	f411 6b80 	ands.w	fp, r1, #1024	; 0x400
 800260a:	d002      	beq.n	8002612 <_vsnprintf.constprop.0+0x312>
          l = (l < precision ? l : precision);
 800260c:	45b8      	cmp	r8, r7
 800260e:	bf28      	it	cs
 8002610:	46b8      	movcs	r8, r7
        if (!(flags & FLAGS_LEFT)) {
 8002612:	f011 0302 	ands.w	r3, r1, #2
 8002616:	930b      	str	r3, [sp, #44]	; 0x2c
 8002618:	f000 80e5 	beq.w	80027e6 <_vsnprintf.constprop.0+0x4e6>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800261c:	2800      	cmp	r0, #0
 800261e:	f000 80d0 	beq.w	80027c2 <_vsnprintf.constprop.0+0x4c2>
 8002622:	4623      	mov	r3, r4
          out(*(p++), buffer, idx++, maxlen);
 8002624:	462a      	mov	r2, r5
 8002626:	465c      	mov	r4, fp
 8002628:	469b      	mov	fp, r3
 800262a:	e000      	b.n	800262e <_vsnprintf.constprop.0+0x32e>
 800262c:	462a      	mov	r2, r5
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	4649      	mov	r1, r9
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002634:	b11c      	cbz	r4, 800263e <_vsnprintf.constprop.0+0x33e>
 8002636:	eb07 0c03 	add.w	ip, r7, r3
 800263a:	b13f      	cbz	r7, 800264c <_vsnprintf.constprop.0+0x34c>
 800263c:	4667      	mov	r7, ip
          out(*(p++), buffer, idx++, maxlen);
 800263e:	f001 fcff 	bl	8004040 <_out_char>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002642:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
          out(*(p++), buffer, idx++, maxlen);
 8002646:	3501      	adds	r5, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002648:	2800      	cmp	r0, #0
 800264a:	d1ef      	bne.n	800262c <_vsnprintf.constprop.0+0x32c>
        if (flags & FLAGS_LEFT) {
 800264c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800264e:	465c      	mov	r4, fp
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 80b6 	bne.w	80027c2 <_vsnprintf.constprop.0+0x4c2>
        const char* p = va_arg(va, char*);
 8002656:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        format++;
 800265a:	3401      	adds	r4, #1
        break;
 800265c:	e665      	b.n	800232a <_vsnprintf.constprop.0+0x2a>
  unsigned int i = 0U;
 800265e:	2700      	movs	r7, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002660:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002664:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  while (_is_digit(**str)) {
 8002668:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800266c:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8002670:	2a09      	cmp	r2, #9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002672:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
  while (_is_digit(**str)) {
 8002676:	d9f3      	bls.n	8002660 <_vsnprintf.constprop.0+0x360>
 8002678:	461c      	mov	r4, r3
 800267a:	e67d      	b.n	8002378 <_vsnprintf.constprop.0+0x78>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800267c:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8002680:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002682:	bf04      	itt	eq
 8002684:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002688:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800268c:	2845      	cmp	r0, #69	; 0x45
 800268e:	bf08      	it	eq
 8002690:	f041 0120 	orreq.w	r1, r1, #32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002694:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8002698:	f10a 0a07 	add.w	sl, sl, #7
 800269c:	9702      	str	r7, [sp, #8]
 800269e:	f02a 0a07 	bic.w	sl, sl, #7
 80026a2:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 80026a6:	462a      	mov	r2, r5
 80026a8:	e9cd 6700 	strd	r6, r7, [sp]
 80026ac:	486b      	ldr	r0, [pc, #428]	; (800285c <_vsnprintf.constprop.0+0x55c>)
 80026ae:	4649      	mov	r1, r9
 80026b0:	f7ff fa2e 	bl	8001b10 <_etoa.constprop.0>
        format++;
 80026b4:	3401      	adds	r4, #1
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80026b6:	4605      	mov	r5, r0
        break;
 80026b8:	e637      	b.n	800232a <_vsnprintf.constprop.0+0x2a>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80026ba:	f85a 7b04 	ldr.w	r7, [sl], #4
    switch (*format) {
 80026be:	78a0      	ldrb	r0, [r4, #2]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80026c0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
        format++;
 80026c4:	3402      	adds	r4, #2
 80026c6:	e657      	b.n	8002378 <_vsnprintf.constprop.0+0x78>
 80026c8:	2862      	cmp	r0, #98	; 0x62
 80026ca:	f000 80f0 	beq.w	80028ae <_vsnprintf.constprop.0+0x5ae>
 80026ce:	286f      	cmp	r0, #111	; 0x6f
 80026d0:	f000 80c1 	beq.w	8002856 <_vsnprintf.constprop.0+0x556>
 80026d4:	2858      	cmp	r0, #88	; 0x58
 80026d6:	d06f      	beq.n	80027b8 <_vsnprintf.constprop.0+0x4b8>
        if ((*format != 'i') && (*format != 'd')) {
 80026d8:	2869      	cmp	r0, #105	; 0x69
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80026da:	f021 0110 	bic.w	r1, r1, #16
          base = 10U;
 80026de:	f04f 0e0a 	mov.w	lr, #10
        if ((*format != 'i') && (*format != 'd')) {
 80026e2:	f040 80b4 	bne.w	800284e <_vsnprintf.constprop.0+0x54e>
        if (flags & FLAGS_PRECISION) {
 80026e6:	054b      	lsls	r3, r1, #21
 80026e8:	468c      	mov	ip, r1
 80026ea:	d534      	bpl.n	8002756 <_vsnprintf.constprop.0+0x456>
          flags &= ~FLAGS_ZEROPAD;
 80026ec:	f02c 0c01 	bic.w	ip, ip, #1
        if ((*format == 'i') || (*format == 'd')) {
 80026f0:	2869      	cmp	r0, #105	; 0x69
 80026f2:	d030      	beq.n	8002756 <_vsnprintf.constprop.0+0x456>
 80026f4:	2864      	cmp	r0, #100	; 0x64
 80026f6:	d02e      	beq.n	8002756 <_vsnprintf.constprop.0+0x456>
          if (flags & FLAGS_LONG_LONG) {
 80026f8:	f41c 7100 	ands.w	r1, ip, #512	; 0x200
 80026fc:	f040 80da 	bne.w	80028b4 <_vsnprintf.constprop.0+0x5b4>
          else if (flags & FLAGS_LONG) {
 8002700:	f41c 7f80 	tst.w	ip, #256	; 0x100
 8002704:	f040 80ff 	bne.w	8002906 <_vsnprintf.constprop.0+0x606>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002708:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800270c:	f85a 3b04 	ldr.w	r3, [sl], #4
 8002710:	f040 80c7 	bne.w	80028a2 <_vsnprintf.constprop.0+0x5a2>
 8002714:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8002718:	bf18      	it	ne
 800271a:	b29b      	uxthne	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800271c:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 8002720:	e9cd e701 	strd	lr, r7, [sp, #4]
 8002724:	462a      	mov	r2, r5
 8002726:	2100      	movs	r1, #0
 8002728:	9100      	str	r1, [sp, #0]
 800272a:	484c      	ldr	r0, [pc, #304]	; (800285c <_vsnprintf.constprop.0+0x55c>)
 800272c:	4649      	mov	r1, r9
 800272e:	f7ff f9a7 	bl	8001a80 <_ntoa_long.constprop.0>
 8002732:	4605      	mov	r5, r0
 8002734:	e739      	b.n	80025aa <_vsnprintf.constprop.0+0x2aa>
  for (s = str; *s && maxsize--; ++s);
 8002736:	f89a 0000 	ldrb.w	r0, [sl]
 800273a:	2800      	cmp	r0, #0
 800273c:	f43f af63 	beq.w	8002606 <_vsnprintf.constprop.0+0x306>
 8002740:	1e7a      	subs	r2, r7, #1
 8002742:	e754      	b.n	80025ee <_vsnprintf.constprop.0+0x2ee>
        if (*format == 'x' || *format == 'X') {
 8002744:	2878      	cmp	r0, #120	; 0x78
 8002746:	d1bf      	bne.n	80026c8 <_vsnprintf.constprop.0+0x3c8>
          base = 16U;
 8002748:	f04f 0e10 	mov.w	lr, #16
        if (flags & FLAGS_PRECISION) {
 800274c:	054b      	lsls	r3, r1, #21
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800274e:	f021 0c0c 	bic.w	ip, r1, #12
        if (flags & FLAGS_PRECISION) {
 8002752:	d4cb      	bmi.n	80026ec <_vsnprintf.constprop.0+0x3ec>
 8002754:	e7cc      	b.n	80026f0 <_vsnprintf.constprop.0+0x3f0>
          if (flags & FLAGS_LONG_LONG) {
 8002756:	f41c 7f00 	tst.w	ip, #512	; 0x200
 800275a:	f040 8081 	bne.w	8002860 <_vsnprintf.constprop.0+0x560>
          else if (flags & FLAGS_LONG) {
 800275e:	f41c 7f80 	tst.w	ip, #256	; 0x100
 8002762:	f040 80be 	bne.w	80028e2 <_vsnprintf.constprop.0+0x5e2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002766:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800276a:	f040 8095 	bne.w	8002898 <_vsnprintf.constprop.0+0x598>
 800276e:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8002772:	f000 80d0 	beq.w	8002916 <_vsnprintf.constprop.0+0x616>
 8002776:	f93a 2b04 	ldrsh.w	r2, [sl], #4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800277a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800277e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8002782:	b29b      	uxth	r3, r3
 8002784:	0fd2      	lsrs	r2, r2, #31
 8002786:	9200      	str	r2, [sp, #0]
 8002788:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 800278c:	462a      	mov	r2, r5
 800278e:	e9cd e701 	strd	lr, r7, [sp, #4]
 8002792:	4832      	ldr	r0, [pc, #200]	; (800285c <_vsnprintf.constprop.0+0x55c>)
 8002794:	4649      	mov	r1, r9
 8002796:	f7ff f973 	bl	8001a80 <_ntoa_long.constprop.0>
 800279a:	4605      	mov	r5, r0
 800279c:	e705      	b.n	80025aa <_vsnprintf.constprop.0+0x2aa>
    switch (*format) {
 800279e:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 80027a0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
          format++;
 80027a4:	3402      	adds	r4, #2
 80027a6:	e5fb      	b.n	80023a0 <_vsnprintf.constprop.0+0xa0>
    switch (*format) {
 80027a8:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 80027aa:	f441 7140 	orr.w	r1, r1, #768	; 0x300
          format++;
 80027ae:	3402      	adds	r4, #2
 80027b0:	e5f6      	b.n	80023a0 <_vsnprintf.constprop.0+0xa0>
  while (*format)
 80027b2:	4632      	mov	r2, r6
 80027b4:	4635      	mov	r5, r6
 80027b6:	e675      	b.n	80024a4 <_vsnprintf.constprop.0+0x1a4>
          flags |= FLAGS_UPPERCASE;
 80027b8:	f041 0120 	orr.w	r1, r1, #32
 80027bc:	f04f 0e10 	mov.w	lr, #16
 80027c0:	e7c4      	b.n	800274c <_vsnprintf.constprop.0+0x44c>
          while (l++ < width) {
 80027c2:	4546      	cmp	r6, r8
 80027c4:	462f      	mov	r7, r5
 80027c6:	f67f af46 	bls.w	8002656 <_vsnprintf.constprop.0+0x356>
 80027ca:	4435      	add	r5, r6
 80027cc:	eba5 0508 	sub.w	r5, r5, r8
 80027d0:	463a      	mov	r2, r7
            out(' ', buffer, idx++, maxlen);
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	3701      	adds	r7, #1
 80027d8:	4649      	mov	r1, r9
 80027da:	2020      	movs	r0, #32
 80027dc:	f001 fc30 	bl	8004040 <_out_char>
          while (l++ < width) {
 80027e0:	42af      	cmp	r7, r5
 80027e2:	d1f5      	bne.n	80027d0 <_vsnprintf.constprop.0+0x4d0>
 80027e4:	e737      	b.n	8002656 <_vsnprintf.constprop.0+0x356>
          while (l++ < width) {
 80027e6:	4546      	cmp	r6, r8
 80027e8:	f108 0301 	add.w	r3, r8, #1
 80027ec:	f240 809c 	bls.w	8002928 <_vsnprintf.constprop.0+0x628>
 80027f0:	1973      	adds	r3, r6, r5
 80027f2:	eba3 0808 	sub.w	r8, r3, r8
 80027f6:	462a      	mov	r2, r5
            out(' ', buffer, idx++, maxlen);
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	3501      	adds	r5, #1
 80027fe:	4649      	mov	r1, r9
 8002800:	2020      	movs	r0, #32
 8002802:	f001 fc1d 	bl	8004040 <_out_char>
          while (l++ < width) {
 8002806:	4545      	cmp	r5, r8
 8002808:	d1f5      	bne.n	80027f6 <_vsnprintf.constprop.0+0x4f6>
 800280a:	f89a 0000 	ldrb.w	r0, [sl]
 800280e:	f106 0801 	add.w	r8, r6, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002812:	2800      	cmp	r0, #0
 8002814:	f47f af05 	bne.w	8002622 <_vsnprintf.constprop.0+0x322>
 8002818:	e71d      	b.n	8002656 <_vsnprintf.constprop.0+0x356>
          while (l++ < width) {
 800281a:	2e01      	cmp	r6, #1
 800281c:	f240 8082 	bls.w	8002924 <_vsnprintf.constprop.0+0x624>
 8002820:	1e6b      	subs	r3, r5, #1
 8002822:	441e      	add	r6, r3
 8002824:	462a      	mov	r2, r5
            out(' ', buffer, idx++, maxlen);
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
 800282a:	3501      	adds	r5, #1
 800282c:	4649      	mov	r1, r9
 800282e:	2020      	movs	r0, #32
 8002830:	f001 fc06 	bl	8004040 <_out_char>
          while (l++ < width) {
 8002834:	42b5      	cmp	r5, r6
 8002836:	d1f5      	bne.n	8002824 <_vsnprintf.constprop.0+0x524>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002838:	f85a 0b04 	ldr.w	r0, [sl], #4
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
 8002840:	b2c0      	uxtb	r0, r0
 8002842:	4632      	mov	r2, r6
 8002844:	4649      	mov	r1, r9
 8002846:	1c75      	adds	r5, r6, #1
 8002848:	f001 fbfa 	bl	8004040 <_out_char>
 800284c:	e6ad      	b.n	80025aa <_vsnprintf.constprop.0+0x2aa>
        if ((*format != 'i') && (*format != 'd')) {
 800284e:	2864      	cmp	r0, #100	; 0x64
 8002850:	f43f af49 	beq.w	80026e6 <_vsnprintf.constprop.0+0x3e6>
 8002854:	e77a      	b.n	800274c <_vsnprintf.constprop.0+0x44c>
          while (l++ < width) {
 8002856:	f04f 0e08 	mov.w	lr, #8
 800285a:	e777      	b.n	800274c <_vsnprintf.constprop.0+0x44c>
 800285c:	08004041 	.word	0x08004041
            const long long value = va_arg(va, long long);
 8002860:	f10a 0a07 	add.w	sl, sl, #7
 8002864:	f02a 0a07 	bic.w	sl, sl, #7
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002868:	2100      	movs	r1, #0
            const long long value = va_arg(va, long long);
 800286a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800286e:	f85a 2b08 	ldr.w	r2, [sl], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002872:	9105      	str	r1, [sp, #20]
 8002874:	0fd9      	lsrs	r1, r3, #31
 8002876:	2b00      	cmp	r3, #0
 8002878:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 800287c:	9706      	str	r7, [sp, #24]
 800287e:	f8cd e010 	str.w	lr, [sp, #16]
 8002882:	9102      	str	r1, [sp, #8]
 8002884:	db0f      	blt.n	80028a6 <_vsnprintf.constprop.0+0x5a6>
 8002886:	e9cd 2300 	strd	r2, r3, [sp]
 800288a:	482a      	ldr	r0, [pc, #168]	; (8002934 <_vsnprintf.constprop.0+0x634>)
 800288c:	462a      	mov	r2, r5
 800288e:	4649      	mov	r1, r9
 8002890:	f7ff f88e 	bl	80019b0 <_ntoa_long_long.constprop.0>
 8002894:	4605      	mov	r5, r0
 8002896:	e688      	b.n	80025aa <_vsnprintf.constprop.0+0x2aa>
 8002898:	f85a 2b04 	ldr.w	r2, [sl], #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	4613      	mov	r3, r2
 80028a0:	e770      	b.n	8002784 <_vsnprintf.constprop.0+0x484>
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e73a      	b.n	800271c <_vsnprintf.constprop.0+0x41c>
 80028a6:	4252      	negs	r2, r2
 80028a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80028ac:	e7eb      	b.n	8002886 <_vsnprintf.constprop.0+0x586>
        format++;
 80028ae:	f04f 0e02 	mov.w	lr, #2
 80028b2:	e74b      	b.n	800274c <_vsnprintf.constprop.0+0x44c>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80028b4:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 80028b8:	2300      	movs	r3, #0
 80028ba:	f10a 0a07 	add.w	sl, sl, #7
 80028be:	9706      	str	r7, [sp, #24]
 80028c0:	f8cd e010 	str.w	lr, [sp, #16]
 80028c4:	9305      	str	r3, [sp, #20]
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	f02a 0a07 	bic.w	sl, sl, #7
 80028cc:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 80028d0:	462a      	mov	r2, r5
 80028d2:	e9cd 6700 	strd	r6, r7, [sp]
 80028d6:	4817      	ldr	r0, [pc, #92]	; (8002934 <_vsnprintf.constprop.0+0x634>)
 80028d8:	4649      	mov	r1, r9
 80028da:	f7ff f869 	bl	80019b0 <_ntoa_long_long.constprop.0>
 80028de:	4605      	mov	r5, r0
 80028e0:	e663      	b.n	80025aa <_vsnprintf.constprop.0+0x2aa>
            const long value = va_arg(va, long);
 80028e2:	f85a 3b04 	ldr.w	r3, [sl], #4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80028e6:	4813      	ldr	r0, [pc, #76]	; (8002934 <_vsnprintf.constprop.0+0x634>)
 80028e8:	0fd9      	lsrs	r1, r3, #31
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	462a      	mov	r2, r5
 80028ee:	9100      	str	r1, [sp, #0]
 80028f0:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 80028f4:	e9cd e701 	strd	lr, r7, [sp, #4]
 80028f8:	bfb8      	it	lt
 80028fa:	425b      	neglt	r3, r3
 80028fc:	4649      	mov	r1, r9
 80028fe:	f7ff f8bf 	bl	8001a80 <_ntoa_long.constprop.0>
 8002902:	4605      	mov	r5, r0
 8002904:	e651      	b.n	80025aa <_vsnprintf.constprop.0+0x2aa>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002906:	f85a 3b04 	ldr.w	r3, [sl], #4
 800290a:	462a      	mov	r2, r5
 800290c:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 8002910:	e9cd e701 	strd	lr, r7, [sp, #4]
 8002914:	e708      	b.n	8002728 <_vsnprintf.constprop.0+0x428>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002916:	f85a 2b04 	ldr.w	r2, [sl], #4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800291a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800291e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8002922:	e72f      	b.n	8002784 <_vsnprintf.constprop.0+0x484>
          while (l++ < width) {
 8002924:	462e      	mov	r6, r5
 8002926:	e787      	b.n	8002838 <_vsnprintf.constprop.0+0x538>
          while (l++ < width) {
 8002928:	4698      	mov	r8, r3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800292a:	2800      	cmp	r0, #0
 800292c:	f47f ae79 	bne.w	8002622 <_vsnprintf.constprop.0+0x322>
 8002930:	e691      	b.n	8002656 <_vsnprintf.constprop.0+0x356>
 8002932:	bf00      	nop
 8002934:	08004041 	.word	0x08004041
	...

08002940 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8002940:	b570      	push	{r4, r5, r6, lr}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8002942:	4c27      	ldr	r4, [pc, #156]	; (80029e0 <dmaStreamAllocI.part.0.constprop.0+0xa0>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8002944:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8002946:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8002948:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800294a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800294c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800294e:	bf18      	it	ne
 8002950:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8002952:	d000      	beq.n	8002956 <dmaStreamAllocI.part.0.constprop.0+0x16>
}
 8002954:	bd70      	pop	{r4, r5, r6, pc}
      dma.allocated_mask  |= mask;
 8002956:	4302      	orrs	r2, r0
 8002958:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 800295a:	4822      	ldr	r0, [pc, #136]	; (80029e4 <dmaStreamAllocI.part.0.constprop.0+0xa4>)
      dma.streams[i].param = param;
 800295c:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <dmaStreamAllocI.part.0.constprop.0+0xa8>)
      dma.streams[i].func  = func;
 800295e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8002962:	005d      	lsls	r5, r3, #1
      dma.streams[i].param = param;
 8002964:	60a2      	str	r2, [r4, #8]
        rccEnableDMA1(true);
 8002966:	6b02      	ldr	r2, [r0, #48]	; 0x30
      dma.streams[i].func  = func;
 8002968:	6061      	str	r1, [r4, #4]
        rccEnableDMA1(true);
 800296a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800296e:	6302      	str	r2, [r0, #48]	; 0x30
 8002970:	6d02      	ldr	r2, [r0, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8002972:	4c1e      	ldr	r4, [pc, #120]	; (80029ec <dmaStreamAllocI.part.0.constprop.0+0xac>)
        rccEnableDMA1(true);
 8002974:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002978:	6502      	str	r2, [r0, #80]	; 0x50
 800297a:	6d02      	ldr	r2, [r0, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800297c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002980:	eb04 0082 	add.w	r0, r4, r2, lsl #2
      dmaStreamDisable(dmastp);
 8002984:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8002988:	680a      	ldr	r2, [r1, #0]
 800298a:	f022 021f 	bic.w	r2, r2, #31
 800298e:	600a      	str	r2, [r1, #0]
 8002990:	680a      	ldr	r2, [r1, #0]
 8002992:	f012 0201 	ands.w	r2, r2, #1
 8002996:	d1fb      	bne.n	8002990 <dmaStreamAllocI.part.0.constprop.0+0x50>
 8002998:	442b      	add	r3, r5
 800299a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800299e:	253d      	movs	r5, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 80029a0:	7adc      	ldrb	r4, [r3, #11]
      dmaStreamDisable(dmastp);
 80029a2:	f893 e009 	ldrb.w	lr, [r3, #9]
 80029a6:	685e      	ldr	r6, [r3, #4]
 80029a8:	fa05 f50e 	lsl.w	r5, r5, lr
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80029ac:	0963      	lsrs	r3, r4, #5
 80029ae:	6035      	str	r5, [r6, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80029b0:	f104 4c60 	add.w	ip, r4, #3758096384	; 0xe0000000
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80029b4:	600a      	str	r2, [r1, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80029b6:	f004 041f 	and.w	r4, r4, #31
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	2201      	movs	r2, #1
 80029be:	40a2      	lsls	r2, r4
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80029c0:	f50c 4c61 	add.w	ip, ip, #57600	; 0xe100
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80029c4:	2421      	movs	r4, #33	; 0x21
 80029c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80029ca:	614c      	str	r4, [r1, #20]
 80029cc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80029d0:	2150      	movs	r1, #80	; 0x50
 80029d2:	f88c 1300 	strb.w	r1, [ip, #768]	; 0x300
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80029d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
 80029de:	bf00      	nop
 80029e0:	200010e8 	.word	0x200010e8
 80029e4:	40023800 	.word	0x40023800
 80029e8:	20000840 	.word	0x20000840
 80029ec:	080076ec 	.word	0x080076ec

080029f0 <dac_lld_put_channel.constprop.0>:
 */
void dac_lld_put_channel(DACDriver *dacp,
                         dacchannel_t channel,
                         dacsample_t sample) {

  switch (dacp->config->datamode) {
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <dac_lld_put_channel.constprop.0+0x3c>)
 80029f2:	6913      	ldr	r3, [r2, #16]
 80029f4:	789b      	ldrb	r3, [r3, #2]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d003      	beq.n	8002a02 <dac_lld_put_channel.constprop.0+0x12>
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d008      	beq.n	8002a10 <dac_lld_put_channel.constprop.0+0x20>
 80029fe:	b173      	cbz	r3, 8002a1e <dac_lld_put_channel.constprop.0+0x2e>
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
    break;
  }
}
 8002a00:	4770      	bx	lr
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002a02:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a04:	e9d2 3200 	ldrd	r3, r2, [r2]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002a0e:	4770      	bx	lr
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002a10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a12:	e9d2 3200 	ldrd	r3, r2, [r2]
 8002a16:	3310      	adds	r3, #16
 8002a18:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
 8002a1c:	e7f0      	b.n	8002a00 <dac_lld_put_channel.constprop.0+0x10>
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8002a1e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a20:	e9d2 3200 	ldrd	r3, r2, [r2]
 8002a24:	3308      	adds	r3, #8
 8002a26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002a2a:	4770      	bx	lr
 8002a2c:	20000800 	.word	0x20000800

08002a30 <sdObjectInit.constprop.0>:
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <sdObjectInit.constprop.0+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002a34:	b410      	push	{r4}
  sdp->vmt = &vmt;
 8002a36:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002a3a:	f100 040c 	add.w	r4, r0, #12
 8002a3e:	f100 0254 	add.w	r2, r0, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8002a42:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_counter = 0;
 8002a44:	2100      	movs	r1, #0
 8002a46:	6141      	str	r1, [r0, #20]
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
  qp->prev = qp;
 8002a48:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_wrptr   = bp;
 8002a4c:	e9c0 2208 	strd	r2, r2, [r0, #32]
  oqp->q_counter = size;
 8002a50:	2410      	movs	r4, #16
  sdp->state = SD_STOP;
 8002a52:	f04f 0c01 	mov.w	ip, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002a56:	6043      	str	r3, [r0, #4]
  iqp->q_notify  = infy;
 8002a58:	6281      	str	r1, [r0, #40]	; 0x28
  iqp->q_top     = bp + size;
 8002a5a:	f100 0364 	add.w	r3, r0, #100	; 0x64
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8002a5e:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_buffer  = bp;
 8002a62:	6182      	str	r2, [r0, #24]
  oqp->q_top     = bp + size;
 8002a64:	f100 0274 	add.w	r2, r0, #116	; 0x74
  oqp->q_counter = size;
 8002a68:	6384      	str	r4, [r0, #56]	; 0x38
  qp->next = qp;
 8002a6a:	e9c0 010b 	strd	r0, r1, [r0, #44]	; 0x2c
  oqp->q_wrptr   = bp;
 8002a6e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
}
 8002a72:	f85d 4b04 	ldr.w	r4, [sp], #4
  sdp->state = SD_STOP;
 8002a76:	f880 c008 	strb.w	ip, [r0, #8]
  iqp->q_top     = bp + size;
 8002a7a:	61c3      	str	r3, [r0, #28]
  qp->prev = qp;
 8002a7c:	6341      	str	r1, [r0, #52]	; 0x34
  oqp->q_buffer  = bp;
 8002a7e:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_top     = bp + size;
 8002a80:	6402      	str	r2, [r0, #64]	; 0x40
  oqp->q_link    = link;
 8002a82:	6500      	str	r0, [r0, #80]	; 0x50
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	08009330 	.word	0x08009330
 8002a8c:	00000000 	.word	0x00000000

08002a90 <u8x8_byte_SendBytes.constprop.0.isra.0>:
uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 8002a90:	b410      	push	{r4}
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002a92:	6904      	ldr	r4, [r0, #16]
uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 8002a94:	460b      	mov	r3, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002a96:	46a4      	mov	ip, r4
 8002a98:	2201      	movs	r2, #1
}
 8002a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002a9e:	2117      	movs	r1, #23
 8002aa0:	4760      	bx	ip
 8002aa2:	bf00      	nop
	...

08002ab0 <u8x8_cad_EndTransfer.isra.0>:
uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
}

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
 8002ab0:	b410      	push	{r4}
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002ab2:	68c4      	ldr	r4, [r0, #12]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	46a4      	mov	ip, r4
 8002ab8:	461a      	mov	r2, r3
}
 8002aba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002abe:	2119      	movs	r1, #25
 8002ac0:	4760      	bx	ip
 8002ac2:	bf00      	nop
	...

08002ad0 <u8x8_cad_StartTransfer.isra.0>:
uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
 8002ad0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ad2:	68c4      	ldr	r4, [r0, #12]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	46a4      	mov	ip, r4
 8002ad8:	461a      	mov	r2, r3
}
 8002ada:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002ade:	2118      	movs	r1, #24
 8002ae0:	4760      	bx	ip
 8002ae2:	bf00      	nop
	...

08002af0 <u8x8_cad_SendData.isra.0>:
uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 8002af0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002af2:	68c4      	ldr	r4, [r0, #12]
uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 8002af4:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002af6:	46a4      	mov	ip, r4
 8002af8:	460a      	mov	r2, r1
}
 8002afa:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002afe:	2117      	movs	r1, #23
 8002b00:	4760      	bx	ip
 8002b02:	bf00      	nop
	...

08002b10 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	4605      	mov	r5, r0
 8002b14:	b082      	sub	sp, #8
 8002b16:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002b18:	f894 c000 	ldrb.w	ip, [r4]
    data++;
    switch( cmd )
 8002b1c:	f1bc 0f19 	cmp.w	ip, #25
 8002b20:	d813      	bhi.n	8002b4a <u8x8_cad_SendSequence+0x3a>
 8002b22:	f1bc 0f17 	cmp.w	ip, #23
 8002b26:	d82b      	bhi.n	8002b80 <u8x8_cad_SendSequence+0x70>
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002b28:	f10d 0207 	add.w	r2, sp, #7
 8002b2c:	f04f 0101 	mov.w	r1, #1
 8002b30:	4628      	mov	r0, r5
    switch( cmd )
 8002b32:	d117      	bne.n	8002b64 <u8x8_cad_SendSequence+0x54>
	  v = *data;
 8002b34:	7863      	ldrb	r3, [r4, #1]
 8002b36:	f88d 3007 	strb.w	r3, [sp, #7]
	  data++;
 8002b3a:	3402      	adds	r4, #2
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002b3c:	f7ff ffd8 	bl	8002af0 <u8x8_cad_SendData.isra.0>
    cmd = *data;
 8002b40:	f894 c000 	ldrb.w	ip, [r4]
    switch( cmd )
 8002b44:	f1bc 0f19 	cmp.w	ip, #25
 8002b48:	d9eb      	bls.n	8002b22 <u8x8_cad_SendSequence+0x12>
 8002b4a:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002b4e:	f04f 0129 	mov.w	r1, #41	; 0x29
 8002b52:	4628      	mov	r0, r5
    switch( cmd )
 8002b54:	d109      	bne.n	8002b6a <u8x8_cad_SendSequence+0x5a>
	  v = *data;
 8002b56:	7862      	ldrb	r2, [r4, #1]
 8002b58:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 8002b5c:	3402      	adds	r4, #2
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002b5e:	f7fe fdf7 	bl	8001750 <u8x8_gpio_call>
	  break;
 8002b62:	e7d9      	b.n	8002b18 <u8x8_cad_SendSequence+0x8>
    switch( cmd )
 8002b64:	f1bc 0f14 	cmp.w	ip, #20
 8002b68:	d801      	bhi.n	8002b6e <u8x8_cad_SendSequence+0x5e>
      default:
	return;
    }
  }
}
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 8002b6e:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002b70:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8002b72:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002b76:	2300      	movs	r3, #0
 8002b78:	4661      	mov	r1, ip
	  data++;
 8002b7a:	3402      	adds	r4, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002b7c:	47b0      	blx	r6
	  break;
 8002b7e:	e7cb      	b.n	8002b18 <u8x8_cad_SendSequence+0x8>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002b80:	2300      	movs	r3, #0
 8002b82:	68ee      	ldr	r6, [r5, #12]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4661      	mov	r1, ip
 8002b88:	4628      	mov	r0, r5
    data++;
 8002b8a:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002b8c:	47b0      	blx	r6
	  break;
 8002b8e:	e7c3      	b.n	8002b18 <u8x8_cad_SendSequence+0x8>

08002b90 <u8x8_cad_SendArg.isra.0>:
uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
 8002b90:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002b92:	68c4      	ldr	r4, [r0, #12]
uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
 8002b94:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002b96:	46a4      	mov	ip, r4
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002b9e:	2116      	movs	r1, #22
 8002ba0:	4760      	bx	ip
 8002ba2:	bf00      	nop
	...

08002bb0 <u8x8_cad_SendCmd.isra.0>:
uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
 8002bb0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002bb2:	68c4      	ldr	r4, [r0, #12]
uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
 8002bb4:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002bb6:	46a4      	mov	ip, r4
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002bbe:	2115      	movs	r1, #21
 8002bc0:	4760      	bx	ip
 8002bc2:	bf00      	nop
	...

08002bd0 <u8x8_d_sh1107_64x128>:

static uint8_t u8x8_d_sh1107_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002bd0:	f1a1 0c0b 	sub.w	ip, r1, #11
  /* pixel_width = */ 64,
  /* pixel_height = */ 128
};

uint8_t u8x8_d_sh1107_64x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	4615      	mov	r5, r2
 8002bda:	461c      	mov	r4, r3
  switch(msg)
 8002bdc:	f1bc 0f04 	cmp.w	ip, #4
 8002be0:	d804      	bhi.n	8002bec <u8x8_d_sh1107_64x128+0x1c>
 8002be2:	e8df f00c 	tbb	[pc, ip]
 8002be6:	033c      	.short	0x033c
 8002be8:	6f7e      	.short	0x6f7e
 8002bea:	43          	.byte	0x43
 8002beb:	00          	.byte	0x00
    
  if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
  
  switch(msg)
 8002bec:	2909      	cmp	r1, #9
 8002bee:	f000 8082 	beq.w	8002cf6 <u8x8_d_sh1107_64x128+0x126>
 8002bf2:	290a      	cmp	r1, #10
 8002bf4:	d001      	beq.n	8002bfa <u8x8_d_sh1107_64x128+0x2a>
 8002bf6:	2000      	movs	r0, #0
      break;
    default:
      return 0;
  }
  return 1;
}
 8002bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_gpio_Init(u8x8);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6944      	ldr	r4, [r0, #20]
 8002c00:	2128      	movs	r1, #40	; 0x28
 8002c02:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002c04:	2300      	movs	r3, #0
 8002c06:	461a      	mov	r2, r3
 8002c08:	68f4      	ldr	r4, [r6, #12]
 8002c0a:	2114      	movs	r1, #20
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	47a0      	blx	r4
      u8x8_gpio_SetReset(u8x8, 1);
 8002c10:	4630      	mov	r0, r6
 8002c12:	2201      	movs	r2, #1
 8002c14:	214b      	movs	r1, #75	; 0x4b
 8002c16:	f7fe fd9b 	bl	8001750 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002c1a:	6833      	ldr	r3, [r6, #0]
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	791a      	ldrb	r2, [r3, #4]
 8002c20:	2129      	movs	r1, #41	; 0x29
 8002c22:	f7fe fd95 	bl	8001750 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002c26:	4630      	mov	r0, r6
 8002c28:	2200      	movs	r2, #0
 8002c2a:	214b      	movs	r1, #75	; 0x4b
 8002c2c:	f7fe fd90 	bl	8001750 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002c30:	6833      	ldr	r3, [r6, #0]
 8002c32:	4630      	mov	r0, r6
 8002c34:	791a      	ldrb	r2, [r3, #4]
 8002c36:	2129      	movs	r1, #41	; 0x29
 8002c38:	f7fe fd8a 	bl	8001750 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	2201      	movs	r2, #1
 8002c40:	214b      	movs	r1, #75	; 0x4b
 8002c42:	f7fe fd85 	bl	8001750 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002c46:	6833      	ldr	r3, [r6, #0]
 8002c48:	4630      	mov	r0, r6
 8002c4a:	795a      	ldrb	r2, [r3, #5]
 8002c4c:	2129      	movs	r1, #41	; 0x29
 8002c4e:	f7fe fd7f 	bl	8001750 <u8x8_gpio_call>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
 8002c52:	4630      	mov	r0, r6
 8002c54:	4932      	ldr	r1, [pc, #200]	; (8002d20 <u8x8_d_sh1107_64x128+0x150>)
 8002c56:	f7ff ff5b 	bl	8002b10 <u8x8_cad_SendSequence>
 8002c5a:	2001      	movs	r0, #1
}
 8002c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d159      	bne.n	8002d16 <u8x8_d_sh1107_64x128+0x146>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave0_seq);
 8002c62:	4930      	ldr	r1, [pc, #192]	; (8002d24 <u8x8_d_sh1107_64x128+0x154>)
 8002c64:	f7ff ff54 	bl	8002b10 <u8x8_cad_SendSequence>
    return 1;
 8002c68:	2001      	movs	r0, #1
}
 8002c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_cad_StartTransfer(u8x8);
 8002c6c:	f7ff ff30 	bl	8002ad0 <u8x8_cad_StartTransfer.isra.0>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002c70:	7963      	ldrb	r3, [r4, #5]
      x += u8x8->x_offset;
 8002c72:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
 8002c76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002c7a:	f001 07ff 	and.w	r7, r1, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 8002c7e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8002c82:	f041 0110 	orr.w	r1, r1, #16
 8002c86:	4630      	mov	r0, r6
 8002c88:	f7ff ff92 	bl	8002bb0 <u8x8_cad_SendCmd.isra.0>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 8002c8c:	f007 010f 	and.w	r1, r7, #15
 8002c90:	4630      	mov	r0, r6
 8002c92:	f7ff ff8d 	bl	8002bb0 <u8x8_cad_SendCmd.isra.0>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be SendCmd */
 8002c96:	79a1      	ldrb	r1, [r4, #6]
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8002c9e:	f7ff ff87 	bl	8002bb0 <u8x8_cad_SendCmd.isra.0>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002ca2:	7921      	ldrb	r1, [r4, #4]
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	00c9      	lsls	r1, r1, #3
 8002ca8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8002cac:	4630      	mov	r0, r6
 8002cae:	f7ff ff1f 	bl	8002af0 <u8x8_cad_SendData.isra.0>
	arg_int--;
 8002cb2:	1e6a      	subs	r2, r5, #1
      } while( arg_int > 0 );
 8002cb4:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8002cb8:	d1f3      	bne.n	8002ca2 <u8x8_d_sh1107_64x128+0xd2>
      u8x8_cad_EndTransfer(u8x8);
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f7ff fef8 	bl	8002ab0 <u8x8_cad_EndTransfer.isra.0>
    return 1;
 8002cc0:	2001      	movs	r0, #1
}
 8002cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_cad_StartTransfer(u8x8);
 8002cc4:	f7ff ff04 	bl	8002ad0 <u8x8_cad_StartTransfer.isra.0>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002cc8:	4630      	mov	r0, r6
 8002cca:	2181      	movs	r1, #129	; 0x81
 8002ccc:	f7ff ff70 	bl	8002bb0 <u8x8_cad_SendCmd.isra.0>
      u8x8_cad_SendArg(u8x8, arg_int );	/* sh1107 has range from 0 to 255 */
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f7ff ff5c 	bl	8002b90 <u8x8_cad_SendArg.isra.0>
      u8x8_cad_EndTransfer(u8x8);
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f7ff fee9 	bl	8002ab0 <u8x8_cad_EndTransfer.isra.0>
    return 1;
 8002cde:	2001      	movs	r0, #1
}
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 8002ce2:	b97a      	cbnz	r2, 8002d04 <u8x8_d_sh1107_64x128+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip0_seq);
 8002ce4:	4910      	ldr	r1, [pc, #64]	; (8002d28 <u8x8_d_sh1107_64x128+0x158>)
 8002ce6:	f7ff ff13 	bl	8002b10 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002cea:	6833      	ldr	r3, [r6, #0]
 8002cec:	7c9b      	ldrb	r3, [r3, #18]
 8002cee:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    return 1;
 8002cf2:	2001      	movs	r0, #1
}
 8002cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002cf6:	2300      	movs	r3, #0
      u8x8->display_info = display_info;
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <u8x8_d_sh1107_64x128+0x15c>)
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002cfa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
      u8x8->display_info = display_info;
 8002cfe:	6002      	str	r2, [r0, #0]
  return 1;
 8002d00:	2001      	movs	r0, #1
}
 8002d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
 8002d04:	490a      	ldr	r1, [pc, #40]	; (8002d30 <u8x8_d_sh1107_64x128+0x160>)
 8002d06:	f7ff ff03 	bl	8002b10 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002d0a:	6833      	ldr	r3, [r6, #0]
 8002d0c:	7cdb      	ldrb	r3, [r3, #19]
 8002d0e:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    return 1;
 8002d12:	2001      	movs	r0, #1
}
 8002d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
 8002d16:	4907      	ldr	r1, [pc, #28]	; (8002d34 <u8x8_d_sh1107_64x128+0x164>)
 8002d18:	f7ff fefa 	bl	8002b10 <u8x8_cad_SendSequence>
    return 1;
 8002d1c:	2001      	movs	r0, #1
}
 8002d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d20:	080092d4 	.word	0x080092d4
 8002d24:	08009308 	.word	0x08009308
 8002d28:	080092c4 	.word	0x080092c4
 8002d2c:	08009318 	.word	0x08009318
 8002d30:	080092cc 	.word	0x080092cc
 8002d34:	08009310 	.word	0x08009310
	...

08002d40 <u8x8_byte_SendByte.isra.0>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
 8002d40:	b500      	push	{lr}
 8002d42:	b083      	sub	sp, #12
 8002d44:	460b      	mov	r3, r1
{
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002d46:	f10d 0107 	add.w	r1, sp, #7
uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
 8002d4a:	f88d 3007 	strb.w	r3, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002d4e:	f7ff fe9f 	bl	8002a90 <u8x8_byte_SendBytes.constprop.0.isra.0>
}
 8002d52:	b003      	add	sp, #12
 8002d54:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d60 <u8x8_i2c_data_transfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002d60:	2300      	movs	r3, #0
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	4616      	mov	r6, r2
 8002d6c:	6907      	ldr	r7, [r0, #16]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2118      	movs	r1, #24
 8002d72:	47b8      	blx	r7
    u8x8_byte_StartTransfer(u8x8);    
    u8x8_byte_SendByte(u8x8, 0x040);
 8002d74:	4620      	mov	r0, r4
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	f7ff ffe2 	bl	8002d40 <u8x8_byte_SendByte.isra.0>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002d7c:	4633      	mov	r3, r6
 8002d7e:	462a      	mov	r2, r5
 8002d80:	2117      	movs	r1, #23
 8002d82:	6925      	ldr	r5, [r4, #16]
 8002d84:	4620      	mov	r0, r4
 8002d86:	47a8      	blx	r5
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002d88:	6925      	ldr	r5, [r4, #16]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	46ac      	mov	ip, r5
 8002d90:	461a      	mov	r2, r3
    u8x8_byte_EndTransfer(u8x8);
}
 8002d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d96:	2119      	movs	r1, #25
 8002d98:	4760      	bx	ip
 8002d9a:	bf00      	nop
 8002d9c:	0000      	movs	r0, r0
	...

08002da0 <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002da0:	3914      	subs	r1, #20
{
 8002da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da6:	4606      	mov	r6, r0
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
  switch(msg)
 8002dac:	2905      	cmp	r1, #5
 8002dae:	d86f      	bhi.n	8002e90 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
 8002db0:	e8df f001 	tbb	[pc, r1]
 8002db4:	3c361d0f 	.word	0x3c361d0f
 8002db8:	0356      	.short	0x0356
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002dba:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002e94 <u8x8_cad_ssd13xx_fast_i2c+0xf4>
 8002dbe:	f898 3000 	ldrb.w	r3, [r8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d152      	bne.n	8002e6c <u8x8_cad_ssd13xx_fast_i2c+0xcc>
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f888 3000 	strb.w	r3, [r8]
      break;
    default:
      return 0;
  }
  return 1;
 8002dcc:	2001      	movs	r0, #1
}
 8002dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( u8x8->i2c_address == 255 )
 8002dd2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002dd6:	6907      	ldr	r7, [r0, #16]
      if ( u8x8->i2c_address == 255 )
 8002dd8:	2bff      	cmp	r3, #255	; 0xff
	u8x8->i2c_address = 0x078;
 8002dda:	bf04      	itt	eq
 8002ddc:	2378      	moveq	r3, #120	; 0x78
 8002dde:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002de2:	46bc      	mov	ip, r7
 8002de4:	462b      	mov	r3, r5
 8002de6:	2114      	movs	r1, #20
}
 8002de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002dec:	4760      	bx	ip
      if ( in_transfer != 0 )
 8002dee:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002e94 <u8x8_cad_ssd13xx_fast_i2c+0xf4>
 8002df2:	f898 3000 	ldrb.w	r3, [r8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d144      	bne.n	8002e84 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6935      	ldr	r5, [r6, #16]
 8002e00:	2118      	movs	r1, #24
 8002e02:	4630      	mov	r0, r6
 8002e04:	47a8      	blx	r5
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002e06:	4630      	mov	r0, r6
 8002e08:	2100      	movs	r1, #0
 8002e0a:	f7ff ff99 	bl	8002d40 <u8x8_byte_SendByte.isra.0>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e0e:	4630      	mov	r0, r6
 8002e10:	4621      	mov	r1, r4
 8002e12:	f7ff ff95 	bl	8002d40 <u8x8_byte_SendByte.isra.0>
      in_transfer = 1;
 8002e16:	2001      	movs	r0, #1
 8002e18:	f888 0000 	strb.w	r0, [r8]
}
 8002e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e20:	4611      	mov	r1, r2
 8002e22:	f7ff ff8d 	bl	8002d40 <u8x8_byte_SendByte.isra.0>
  return 1;
 8002e26:	2001      	movs	r0, #1
}
 8002e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( in_transfer != 0 )
 8002e2c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002e94 <u8x8_cad_ssd13xx_fast_i2c+0xf4>
 8002e30:	f898 3000 	ldrb.w	r3, [r8]
 8002e34:	b13b      	cbz	r3, 8002e46 <u8x8_cad_ssd13xx_fast_i2c+0xa6>
 8002e36:	e01f      	b.n	8002e78 <u8x8_cad_ssd13xx_fast_i2c+0xd8>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002e38:	2118      	movs	r1, #24
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f7ff ff90 	bl	8002d60 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002e40:	3c18      	subs	r4, #24
 8002e42:	b2e4      	uxtb	r4, r4
	p+=24;
 8002e44:	3518      	adds	r5, #24
       while( arg_int > 24 )
 8002e46:	2c18      	cmp	r4, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002e48:	462a      	mov	r2, r5
       while( arg_int > 24 )
 8002e4a:	d8f5      	bhi.n	8002e38 <u8x8_cad_ssd13xx_fast_i2c+0x98>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f7ff ff86 	bl	8002d60 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f888 3000 	strb.w	r3, [r8]
  return 1;
 8002e5a:	2001      	movs	r0, #1
}
 8002e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      in_transfer = 0;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <u8x8_cad_ssd13xx_fast_i2c+0xf4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
  return 1;
 8002e66:	2001      	movs	r0, #1
}
 8002e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	6904      	ldr	r4, [r0, #16]
 8002e70:	461a      	mov	r2, r3
 8002e72:	2119      	movs	r1, #25
 8002e74:	47a0      	blx	r4
 8002e76:	e7a6      	b.n	8002dc6 <u8x8_cad_ssd13xx_fast_i2c+0x26>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6907      	ldr	r7, [r0, #16]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2119      	movs	r1, #25
 8002e80:	47b8      	blx	r7
 8002e82:	e7e0      	b.n	8002e46 <u8x8_cad_ssd13xx_fast_i2c+0xa6>
 8002e84:	2300      	movs	r3, #0
 8002e86:	6905      	ldr	r5, [r0, #16]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2119      	movs	r1, #25
 8002e8c:	47a8      	blx	r5
 8002e8e:	e7b4      	b.n	8002dfa <u8x8_cad_ssd13xx_fast_i2c+0x5a>
  switch(msg)
 8002e90:	2000      	movs	r0, #0
 8002e92:	e79c      	b.n	8002dce <u8x8_cad_ssd13xx_fast_i2c+0x2e>
 8002e94:	20001170 	.word	0x20001170
	...

08002ea0 <u8g2_draw_string.isra.0>:
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	b08b      	sub	sp, #44	; 0x2c
 8002ea6:	4681      	mov	r9, r0
 8002ea8:	e9cd 1203 	strd	r1, r2, [sp, #12]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002eac:	2000      	movs	r0, #0
 8002eae:	f889 0026 	strb.w	r0, [r9, #38]	; 0x26
 8002eb2:	f103 3bff 	add.w	fp, r3, #4294967295
  val &= (1U<<cnt)-1;
 8002eb6:	f04f 3aff 	mov.w	sl, #4294967295
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002eba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002ebe:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8002ec2:	4648      	mov	r0, r9
 8002ec4:	4798      	blx	r3
    if ( e == 0x0ffff )
 8002ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eca:	4298      	cmp	r0, r3
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002ecc:	4604      	mov	r4, r0
    if ( e == 0x0ffff )
 8002ece:	f000 808b 	beq.w	8002fe8 <u8g2_draw_string.isra.0+0x148>
    if ( e != 0x0fffe )
 8002ed2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002ed6:	4298      	cmp	r0, r3
 8002ed8:	d0ef      	beq.n	8002eba <u8g2_draw_string.isra.0+0x1a>
  switch(u8g2->font_decode.dir)
 8002eda:	f899 3070 	ldrb.w	r3, [r9, #112]	; 0x70
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	f200 8216 	bhi.w	8003310 <u8g2_draw_string.isra.0+0x470>
 8002ee4:	e8df f003 	tbb	[pc, r3]
 8002ee8:	023d464f 	.word	0x023d464f
      x += u8g2->font_calc_vref(u8g2);
 8002eec:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8002ef0:	4648      	mov	r0, r9
 8002ef2:	4798      	blx	r3
 8002ef4:	9b03      	ldr	r3, [sp, #12]
      break;
 8002ef6:	9e04      	ldr	r6, [sp, #16]
      x += u8g2->font_calc_vref(u8g2);
 8002ef8:	4418      	add	r0, r3
 8002efa:	b287      	uxth	r7, r0
  const uint8_t *font = u8g2->font;
 8002efc:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
  u8g2->font_decode.target_x = x;
 8002f00:	f8a9 7064 	strh.w	r7, [r9, #100]	; 0x64
  if ( encoding <= 255 )
 8002f04:	2cff      	cmp	r4, #255	; 0xff
  u8g2->font_decode.target_y = y;
 8002f06:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002f0a:	f103 0317 	add.w	r3, r3, #23
  if ( encoding <= 255 )
 8002f0e:	d843      	bhi.n	8002f98 <u8g2_draw_string.isra.0+0xf8>
    if ( encoding >= 'a' )
 8002f10:	2c60      	cmp	r4, #96	; 0x60
 8002f12:	d96c      	bls.n	8002fee <u8g2_draw_string.isra.0+0x14e>
      font += u8g2->font_info.start_pos_lower_a;
 8002f14:	f8b9 2088 	ldrh.w	r2, [r9, #136]	; 0x88
 8002f18:	4413      	add	r3, r2
 8002f1a:	e003      	b.n	8002f24 <u8g2_draw_string.isra.0+0x84>
      if ( u8x8_pgm_read( font ) == encoding )
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	42a2      	cmp	r2, r4
 8002f20:	d06b      	beq.n	8002ffa <u8g2_draw_string.isra.0+0x15a>
      font += u8x8_pgm_read( font + 1 );
 8002f22:	442b      	add	r3, r5
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002f24:	785d      	ldrb	r5, [r3, #1]
 8002f26:	2d00      	cmp	r5, #0
 8002f28:	d1f8      	bne.n	8002f1c <u8g2_draw_string.isra.0+0x7c>
      switch(u8g2->font_decode.dir)
 8002f2a:	f899 3070 	ldrb.w	r3, [r9, #112]	; 0x70
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d8c3      	bhi.n	8002eba <u8g2_draw_string.isra.0+0x1a>
 8002f32:	e8df f003 	tbb	[pc, r3]
 8002f36:	0c11      	.short	0x0c11
 8002f38:	0207      	.short	0x0207
	  y -= delta;
 8002f3a:	9b04      	ldr	r3, [sp, #16]
 8002f3c:	1b5d      	subs	r5, r3, r5
 8002f3e:	b2ab      	uxth	r3, r5
 8002f40:	9304      	str	r3, [sp, #16]
	  break;
 8002f42:	e7ba      	b.n	8002eba <u8g2_draw_string.isra.0+0x1a>
	  x -= delta;
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	1b5d      	subs	r5, r3, r5
 8002f48:	b2ab      	uxth	r3, r5
 8002f4a:	9303      	str	r3, [sp, #12]
	  break;
 8002f4c:	e7b5      	b.n	8002eba <u8g2_draw_string.isra.0+0x1a>
	  y += delta;
 8002f4e:	9b04      	ldr	r3, [sp, #16]
 8002f50:	442b      	add	r3, r5
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	9304      	str	r3, [sp, #16]
	  break;
 8002f56:	e7b0      	b.n	8002eba <u8g2_draw_string.isra.0+0x1a>
	  x += delta;
 8002f58:	9b03      	ldr	r3, [sp, #12]
 8002f5a:	442b      	add	r3, r5
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	9303      	str	r3, [sp, #12]
	  break;
 8002f60:	e7ab      	b.n	8002eba <u8g2_draw_string.isra.0+0x1a>
      y -= u8g2->font_calc_vref(u8g2);
 8002f62:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8002f66:	4648      	mov	r0, r9
 8002f68:	4798      	blx	r3
 8002f6a:	9b04      	ldr	r3, [sp, #16]
      break;
 8002f6c:	9f03      	ldr	r7, [sp, #12]
      y -= u8g2->font_calc_vref(u8g2);
 8002f6e:	1a18      	subs	r0, r3, r0
 8002f70:	b286      	uxth	r6, r0
      break;
 8002f72:	e7c3      	b.n	8002efc <u8g2_draw_string.isra.0+0x5c>
      x -= u8g2->font_calc_vref(u8g2);
 8002f74:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8002f78:	4648      	mov	r0, r9
 8002f7a:	4798      	blx	r3
 8002f7c:	9b03      	ldr	r3, [sp, #12]
      break;
 8002f7e:	9e04      	ldr	r6, [sp, #16]
      x -= u8g2->font_calc_vref(u8g2);
 8002f80:	1a18      	subs	r0, r3, r0
 8002f82:	b287      	uxth	r7, r0
      break;
 8002f84:	e7ba      	b.n	8002efc <u8g2_draw_string.isra.0+0x5c>
      y += u8g2->font_calc_vref(u8g2);
 8002f86:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8002f8a:	4648      	mov	r0, r9
 8002f8c:	4798      	blx	r3
 8002f8e:	9b04      	ldr	r3, [sp, #16]
      break;
 8002f90:	9f03      	ldr	r7, [sp, #12]
      y += u8g2->font_calc_vref(u8g2);
 8002f92:	4418      	add	r0, r3
 8002f94:	b286      	uxth	r6, r0
      break;
 8002f96:	e7b1      	b.n	8002efc <u8g2_draw_string.isra.0+0x5c>
    font += u8g2->font_info.start_pos_unicode;
 8002f98:	f8b9 208a 	ldrh.w	r2, [r9, #138]	; 0x8a
 8002f9c:	eb03 0802 	add.w	r8, r3, r2
    unicode_lookup_table = font; 
 8002fa0:	4645      	mov	r5, r8
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f7fe f89b 	bl	80010e0 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002faa:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002fac:	4480      	add	r8, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f7fe f896 	bl	80010e0 <u8g2_font_get_word>
    } while( e < encoding );
 8002fb4:	4284      	cmp	r4, r0
      unicode_lookup_table+=4;
 8002fb6:	f105 0504 	add.w	r5, r5, #4
    } while( e < encoding );
 8002fba:	d8f2      	bhi.n	8002fa2 <u8g2_draw_string.isra.0+0x102>
 8002fbc:	f8b8 5000 	ldrh.w	r5, [r8]
 8002fc0:	ba6d      	rev16	r5, r5
 8002fc2:	b2ad      	uxth	r5, r5
      if ( e == 0 )
 8002fc4:	2d00      	cmp	r5, #0
 8002fc6:	d0b0      	beq.n	8002f2a <u8g2_draw_string.isra.0+0x8a>
      if ( e == encoding )
 8002fc8:	42ac      	cmp	r4, r5
 8002fca:	d00a      	beq.n	8002fe2 <u8g2_draw_string.isra.0+0x142>
      font += u8x8_pgm_read( font + 2 );
 8002fcc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8002fd0:	4498      	add	r8, r3
 8002fd2:	f8b8 5000 	ldrh.w	r5, [r8]
 8002fd6:	ba6d      	rev16	r5, r5
 8002fd8:	b2ad      	uxth	r5, r5
      if ( e == 0 )
 8002fda:	2d00      	cmp	r5, #0
 8002fdc:	d0a5      	beq.n	8002f2a <u8g2_draw_string.isra.0+0x8a>
      if ( e == encoding )
 8002fde:	42ac      	cmp	r4, r5
 8002fe0:	d1f4      	bne.n	8002fcc <u8g2_draw_string.isra.0+0x12c>
	return font+3;	/* skip encoding and glyph size */
 8002fe2:	f108 0303 	add.w	r3, r8, #3
 8002fe6:	e009      	b.n	8002ffc <u8g2_draw_string.isra.0+0x15c>
}
 8002fe8:	b00b      	add	sp, #44	; 0x2c
 8002fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( encoding >= 'A' )
 8002fee:	2c40      	cmp	r4, #64	; 0x40
 8002ff0:	d998      	bls.n	8002f24 <u8g2_draw_string.isra.0+0x84>
      font += u8g2->font_info.start_pos_upper_A;
 8002ff2:	f8b9 2086 	ldrh.w	r2, [r9, #134]	; 0x86
 8002ff6:	4413      	add	r3, r2
 8002ff8:	e794      	b.n	8002f24 <u8g2_draw_string.isra.0+0x84>
	return font+2;	/* skip encoding and glyph size */
 8002ffa:	3302      	adds	r3, #2
  decode->decode_bit_pos = 0;
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003002:	f899 2078 	ldrb.w	r2, [r9, #120]	; 0x78
  decode->decode_ptr = glyph_data;
 8003006:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
  if ( bit_pos_plus_cnt >= 8 )
 800300a:	2a07      	cmp	r2, #7
  val = u8x8_pgm_read( f->decode_ptr );  
 800300c:	7819      	ldrb	r1, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 800300e:	f200 80db 	bhi.w	80031c8 <u8g2_draw_string.isra.0+0x328>
 8003012:	4610      	mov	r0, r2
  val &= (1U<<cnt)-1;
 8003014:	fa0a f202 	lsl.w	r2, sl, r2
 8003018:	ea21 0102 	bic.w	r1, r1, r2
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800301c:	b24a      	sxtb	r2, r1
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800301e:	f899 1079 	ldrb.w	r1, [r9, #121]	; 0x79
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003022:	f889 206a 	strb.w	r2, [r9, #106]	; 0x6a
 8003026:	9205      	str	r2, [sp, #20]
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003028:	f889 006c 	strb.w	r0, [r9, #108]	; 0x6c
  bit_pos_plus_cnt += cnt;
 800302c:	180a      	adds	r2, r1, r0
  val >>= bit_pos;
 800302e:	781d      	ldrb	r5, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8003030:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8003032:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8003034:	fa45 f500 	asr.w	r5, r5, r0
  if ( bit_pos_plus_cnt >= 8 )
 8003038:	f200 80b6 	bhi.w	80031a8 <u8g2_draw_string.isra.0+0x308>
  val >>= bit_pos;
 800303c:	b2e8      	uxtb	r0, r5
  val &= (1U<<cnt)-1;
 800303e:	fa0a f101 	lsl.w	r1, sl, r1
 8003042:	ea20 0001 	bic.w	r0, r0, r1
  decode->fg_color = u8g2->draw_color;
 8003046:	f899 1092 	ldrb.w	r1, [r9, #146]	; 0x92
 800304a:	f889 106e 	strb.w	r1, [r9, #110]	; 0x6e
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800304e:	f899 e07a 	ldrb.w	lr, [r9, #122]	; 0x7a
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003052:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003056:	fab1 f181 	clz	r1, r1
 800305a:	0949      	lsrs	r1, r1, #5
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800305c:	fa4f f880 	sxtb.w	r8, r0
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003060:	f889 106f 	strb.w	r1, [r9, #111]	; 0x6f
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003064:	f889 806b 	strb.w	r8, [r9, #107]	; 0x6b
  bit_pos_plus_cnt += cnt;
 8003068:	eb0e 0102 	add.w	r1, lr, r2
  val &= (1U<<cnt)-1;
 800306c:	9007      	str	r0, [sp, #28]
  bit_pos_plus_cnt += cnt;
 800306e:	b2c9      	uxtb	r1, r1
  val >>= bit_pos;
 8003070:	7818      	ldrb	r0, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 8003072:	2907      	cmp	r1, #7
  val >>= bit_pos;
 8003074:	fa40 f002 	asr.w	r0, r0, r2
  if ( bit_pos_plus_cnt >= 8 )
 8003078:	f200 8087 	bhi.w	800318a <u8g2_draw_string.isra.0+0x2ea>
  val >>= bit_pos;
 800307c:	b2c2      	uxtb	r2, r0
 800307e:	9209      	str	r2, [sp, #36]	; 0x24
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003080:	f899 c07b 	ldrb.w	ip, [r9, #123]	; 0x7b
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003084:	f889 106c 	strb.w	r1, [r9, #108]	; 0x6c
  bit_pos_plus_cnt += cnt;
 8003088:	eb0c 0201 	add.w	r2, ip, r1
  val >>= bit_pos;
 800308c:	781c      	ldrb	r4, [r3, #0]
  bit_pos_plus_cnt += cnt;
 800308e:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8003090:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8003092:	fa44 f401 	asr.w	r4, r4, r1
  if ( bit_pos_plus_cnt >= 8 )
 8003096:	d869      	bhi.n	800316c <u8g2_draw_string.isra.0+0x2cc>
  val >>= bit_pos;
 8003098:	b2e1      	uxtb	r1, r4
 800309a:	9108      	str	r1, [sp, #32]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800309c:	f899 107c 	ldrb.w	r1, [r9, #124]	; 0x7c
  f->decode_bit_pos = bit_pos_plus_cnt;
 80030a0:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
  bit_pos_plus_cnt += cnt;
 80030a4:	188c      	adds	r4, r1, r2
  val >>= bit_pos;
 80030a6:	7818      	ldrb	r0, [r3, #0]
  bit_pos_plus_cnt += cnt;
 80030a8:	b2e4      	uxtb	r4, r4
  if ( bit_pos_plus_cnt >= 8 )
 80030aa:	2c07      	cmp	r4, #7
  val >>= bit_pos;
 80030ac:	fa40 f002 	asr.w	r0, r0, r2
  if ( bit_pos_plus_cnt >= 8 )
 80030b0:	d84f      	bhi.n	8003152 <u8g2_draw_string.isra.0+0x2b2>
  val >>= bit_pos;
 80030b2:	b2c5      	uxtb	r5, r0
  cnt--;
 80030b4:	1e4a      	subs	r2, r1, #1
  d <<= cnt;
 80030b6:	b2d2      	uxtb	r2, r2
  val &= (1U<<cnt)-1;
 80030b8:	fa0a f101 	lsl.w	r1, sl, r1
  d <<= cnt;
 80030bc:	2301      	movs	r3, #1
 80030be:	fa03 f202 	lsl.w	r2, r3, r2
  val &= (1U<<cnt)-1;
 80030c2:	ea25 0501 	bic.w	r5, r5, r1
  v -= d;
 80030c6:	1aad      	subs	r5, r5, r2
 80030c8:	b26a      	sxtb	r2, r5
 80030ca:	9206      	str	r2, [sp, #24]
  if ( decode->glyph_width > 0 )
 80030cc:	9a05      	ldr	r2, [sp, #20]
  f->decode_bit_pos = bit_pos_plus_cnt;
 80030ce:	f889 406c 	strb.w	r4, [r9, #108]	; 0x6c
  if ( decode->glyph_width > 0 )
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	dd3a      	ble.n	800314c <u8g2_draw_string.isra.0+0x2ac>
  cnt--;
 80030d6:	f10c 32ff 	add.w	r2, ip, #4294967295
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80030da:	9907      	ldr	r1, [sp, #28]
  d <<= cnt;
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	fa03 f202 	lsl.w	r2, r3, r2
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80030e2:	1a52      	subs	r2, r2, r1
  val &= (1U<<cnt)-1;
 80030e4:	9908      	ldr	r1, [sp, #32]
 80030e6:	fa0a fc0c 	lsl.w	ip, sl, ip
 80030ea:	ea21 010c 	bic.w	r1, r1, ip
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80030ee:	4638      	mov	r0, r7
 80030f0:	1a52      	subs	r2, r2, r1
  cnt--;
 80030f2:	f10e 37ff 	add.w	r7, lr, #4294967295
  val &= (1U<<cnt)-1;
 80030f6:	9909      	ldr	r1, [sp, #36]	; 0x24
  d <<= cnt;
 80030f8:	b2ff      	uxtb	r7, r7
  val &= (1U<<cnt)-1;
 80030fa:	fa0a fe0e 	lsl.w	lr, sl, lr
 80030fe:	ea21 0e0e 	bic.w	lr, r1, lr
  d <<= cnt;
 8003102:	40bb      	lsls	r3, r7
  v -= d;
 8003104:	ebae 0103 	sub.w	r1, lr, r3
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003108:	b252      	sxtb	r2, r2
  v -= d;
 800310a:	b249      	sxtb	r1, r1
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800310c:	f899 3070 	ldrb.w	r3, [r9, #112]	; 0x70
 8003110:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8003114:	f7fe f804 	bl	8001120 <u8g2_add_vector_x>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003118:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800311c:	f8a9 0064 	strh.w	r0, [r9, #100]	; 0x64
 8003120:	4607      	mov	r7, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003122:	4630      	mov	r0, r6
 8003124:	f7fd ffe4 	bl	80010f0 <u8g2_add_vector_y>
 8003128:	4602      	mov	r2, r0
 800312a:	f8a9 0066 	strh.w	r0, [r9, #102]	; 0x66
      switch(decode->dir)
 800312e:	2b03      	cmp	r3, #3
 8003130:	f200 80eb 	bhi.w	800330a <u8g2_draw_string.isra.0+0x46a>
 8003134:	e8df f003 	tbb	[pc, r3]
 8003138:	4fafbdc7 	.word	0x4fafbdc7
      if ( decode->y >= h )
 800313c:	f999 3069 	ldrsb.w	r3, [r9, #105]	; 0x69
 8003140:	4543      	cmp	r3, r8
 8003142:	db5c      	blt.n	80031fe <u8g2_draw_string.isra.0+0x35e>
    u8g2->draw_color = decode->fg_color;
 8003144:	f899 306e 	ldrb.w	r3, [r9, #110]	; 0x6e
 8003148:	f889 3092 	strb.w	r3, [r9, #146]	; 0x92
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800314c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8003150:	e6eb      	b.n	8002f2a <u8g2_draw_string.isra.0+0x8a>
    f->decode_ptr++;
 8003152:	1c5d      	adds	r5, r3, #1
 8003154:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003158:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 800315a:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	4093      	lsls	r3, r2
    bit_pos_plus_cnt -= 8;
 8003162:	3c08      	subs	r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003164:	4303      	orrs	r3, r0
    bit_pos_plus_cnt -= 8;
 8003166:	b2e4      	uxtb	r4, r4
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003168:	b2dd      	uxtb	r5, r3
 800316a:	e7a3      	b.n	80030b4 <u8g2_draw_string.isra.0+0x214>
    f->decode_ptr++;
 800316c:	1c58      	adds	r0, r3, #1
 800316e:	f8c9 0060 	str.w	r0, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003172:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 8003174:	f1c1 0108 	rsb	r1, r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003178:	b2c9      	uxtb	r1, r1
 800317a:	408b      	lsls	r3, r1
 800317c:	4323      	orrs	r3, r4
 800317e:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8003180:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003182:	9308      	str	r3, [sp, #32]
    bit_pos_plus_cnt -= 8;
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	4603      	mov	r3, r0
 8003188:	e788      	b.n	800309c <u8g2_draw_string.isra.0+0x1fc>
    f->decode_ptr++;
 800318a:	1c5c      	adds	r4, r3, #1
 800318c:	f8c9 4060 	str.w	r4, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003190:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 8003192:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	4093      	lsls	r3, r2
 800319a:	4303      	orrs	r3, r0
 800319c:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 800319e:	3908      	subs	r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80031a0:	9309      	str	r3, [sp, #36]	; 0x24
    bit_pos_plus_cnt -= 8;
 80031a2:	b2c9      	uxtb	r1, r1
 80031a4:	4623      	mov	r3, r4
 80031a6:	e76b      	b.n	8003080 <u8g2_draw_string.isra.0+0x1e0>
    f->decode_ptr++;
 80031a8:	1c5c      	adds	r4, r3, #1
    s -= bit_pos;
 80031aa:	f1c0 0008 	rsb	r0, r0, #8
    f->decode_ptr++;
 80031ae:	f8c9 4060 	str.w	r4, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80031b2:	fa5f fc80 	uxtb.w	ip, r0
 80031b6:	7858      	ldrb	r0, [r3, #1]
 80031b8:	fa00 f00c 	lsl.w	r0, r0, ip
    bit_pos_plus_cnt -= 8;
 80031bc:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80031be:	4328      	orrs	r0, r5
    bit_pos_plus_cnt -= 8;
 80031c0:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80031c2:	b2c0      	uxtb	r0, r0
    bit_pos_plus_cnt -= 8;
 80031c4:	4623      	mov	r3, r4
 80031c6:	e73a      	b.n	800303e <u8g2_draw_string.isra.0+0x19e>
    f->decode_ptr++;
 80031c8:	3301      	adds	r3, #1
    bit_pos_plus_cnt -= 8;
 80031ca:	f1a2 0008 	sub.w	r0, r2, #8
    f->decode_ptr++;
 80031ce:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
    bit_pos_plus_cnt -= 8;
 80031d2:	b2c0      	uxtb	r0, r0
 80031d4:	e71e      	b.n	8003014 <u8g2_draw_string.isra.0+0x174>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80031d6:	9b05      	ldr	r3, [sp, #20]
 80031d8:	f1c3 0301 	rsb	r3, r3, #1
 80031dc:	4403      	add	r3, r0
	    y1++;
 80031de:	1c41      	adds	r1, r0, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80031e0:	b29a      	uxth	r2, r3
	    x1 += h;
 80031e2:	eb07 0308 	add.w	r3, r7, r8
	    y1++;
 80031e6:	b289      	uxth	r1, r1
	    x1 += h;
 80031e8:	b29b      	uxth	r3, r3
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80031ea:	9100      	str	r1, [sp, #0]
 80031ec:	4648      	mov	r0, r9
 80031ee:	4639      	mov	r1, r7
 80031f0:	f7fe f916 	bl	8001420 <u8g2_IsIntersection>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d0a9      	beq.n	800314c <u8g2_draw_string.isra.0+0x2ac>
    decode->x = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80031fe:	f899 2076 	ldrb.w	r2, [r9, #118]	; 0x76
  val = u8x8_pgm_read( f->decode_ptr );  
 8003202:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
  bit_pos_plus_cnt += cnt;
 8003206:	18a3      	adds	r3, r4, r2
  val >>= bit_pos;
 8003208:	7808      	ldrb	r0, [r1, #0]
  bit_pos_plus_cnt += cnt;
 800320a:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 800320c:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 800320e:	fa40 f004 	asr.w	r0, r0, r4
  if ( bit_pos_plus_cnt >= 8 )
 8003212:	d86c      	bhi.n	80032ee <u8g2_draw_string.isra.0+0x44e>
  val >>= bit_pos;
 8003214:	b2c6      	uxtb	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003216:	f899 0077 	ldrb.w	r0, [r9, #119]	; 0x77
  f->decode_bit_pos = bit_pos_plus_cnt;
 800321a:	f889 306c 	strb.w	r3, [r9, #108]	; 0x6c
  val &= (1U<<cnt)-1;
 800321e:	fa0a f202 	lsl.w	r2, sl, r2
 8003222:	ea26 0602 	bic.w	r6, r6, r2
  bit_pos_plus_cnt += cnt;
 8003226:	18c2      	adds	r2, r0, r3
  val >>= bit_pos;
 8003228:	780c      	ldrb	r4, [r1, #0]
  bit_pos_plus_cnt += cnt;
 800322a:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 800322c:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 800322e:	fa44 f403 	asr.w	r4, r4, r3
  if ( bit_pos_plus_cnt >= 8 )
 8003232:	d84f      	bhi.n	80032d4 <u8g2_draw_string.isra.0+0x434>
  val >>= bit_pos;
 8003234:	b2e5      	uxtb	r5, r4
  val &= (1U<<cnt)-1;
 8003236:	fa0a f000 	lsl.w	r0, sl, r0
 800323a:	ea25 0500 	bic.w	r5, r5, r0
  f->decode_bit_pos = bit_pos_plus_cnt;
 800323e:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
 8003242:	e005      	b.n	8003250 <u8g2_draw_string.isra.0+0x3b0>
  val >>= bit_pos;
 8003244:	b2ca      	uxtb	r2, r1
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003246:	07d3      	lsls	r3, r2, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003248:	f889 406c 	strb.w	r4, [r9, #108]	; 0x6c
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800324c:	f57f af76 	bpl.w	800313c <u8g2_draw_string.isra.0+0x29c>
	u8g2_font_decode_len(u8g2, a, 0);
 8003250:	4631      	mov	r1, r6
 8003252:	4648      	mov	r0, r9
 8003254:	2200      	movs	r2, #0
 8003256:	f7fe f87b 	bl	8001350 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800325a:	2201      	movs	r2, #1
 800325c:	4629      	mov	r1, r5
 800325e:	4648      	mov	r0, r9
 8003260:	f7fe f876 	bl	8001350 <u8g2_font_decode_len>
  uint8_t bit_pos = f->decode_bit_pos;
 8003264:	f899 306c 	ldrb.w	r3, [r9, #108]	; 0x6c
  val = u8x8_pgm_read( f->decode_ptr );  
 8003268:	f8d9 7060 	ldr.w	r7, [r9, #96]	; 0x60
  bit_pos_plus_cnt += cnt;
 800326c:	1c5c      	adds	r4, r3, #1
  val >>= bit_pos;
 800326e:	7839      	ldrb	r1, [r7, #0]
  bit_pos_plus_cnt += cnt;
 8003270:	b2e4      	uxtb	r4, r4
    s -= bit_pos;
 8003272:	f1c3 0208 	rsb	r2, r3, #8
  if ( bit_pos_plus_cnt >= 8 )
 8003276:	2c07      	cmp	r4, #7
    f->decode_ptr++;
 8003278:	f107 0c01 	add.w	ip, r7, #1
  val >>= bit_pos;
 800327c:	fa41 f103 	asr.w	r1, r1, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003280:	b2d0      	uxtb	r0, r2
  if ( bit_pos_plus_cnt >= 8 )
 8003282:	d9df      	bls.n	8003244 <u8g2_draw_string.isra.0+0x3a4>
    f->decode_ptr++;
 8003284:	f8c9 c060 	str.w	ip, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003288:	787a      	ldrb	r2, [r7, #1]
 800328a:	4082      	lsls	r2, r0
    bit_pos_plus_cnt -= 8;
 800328c:	3b07      	subs	r3, #7
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800328e:	430a      	orrs	r2, r1
 8003290:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8003292:	b2dc      	uxtb	r4, r3
 8003294:	e7d7      	b.n	8003246 <u8g2_draw_string.isra.0+0x3a6>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003296:	9b05      	ldr	r3, [sp, #20]
 8003298:	f1c3 0101 	rsb	r1, r3, #1
 800329c:	4439      	add	r1, r7
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800329e:	f1c8 0001 	rsb	r0, r8, #1
	    x1++;
 80032a2:	1c7b      	adds	r3, r7, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80032a4:	4410      	add	r0, r2
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80032a6:	b28f      	uxth	r7, r1
	    y1++;
 80032a8:	1c51      	adds	r1, r2, #1
	    x1++;
 80032aa:	b29b      	uxth	r3, r3
	    y1++;
 80032ac:	b289      	uxth	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80032ae:	b282      	uxth	r2, r0
	    break;	  
 80032b0:	e79b      	b.n	80031ea <u8g2_draw_string.isra.0+0x34a>
	    y1 += decode->glyph_width;
 80032b2:	9905      	ldr	r1, [sp, #20]
 80032b4:	4401      	add	r1, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80032b6:	f1c8 0001 	rsb	r0, r8, #1
	    x1++;
 80032ba:	1c7b      	adds	r3, r7, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80032bc:	4438      	add	r0, r7
	    y1 += decode->glyph_width;
 80032be:	b289      	uxth	r1, r1
	    x1++;
 80032c0:	b29b      	uxth	r3, r3
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80032c2:	b287      	uxth	r7, r0
	    break;
 80032c4:	e791      	b.n	80031ea <u8g2_draw_string.isra.0+0x34a>
	    x1 += decode->glyph_width;
 80032c6:	9b05      	ldr	r3, [sp, #20]
	    y1 += h;
 80032c8:	eb00 0108 	add.w	r1, r0, r8
	    x1 += decode->glyph_width;
 80032cc:	443b      	add	r3, r7
 80032ce:	b29b      	uxth	r3, r3
	    y1 += h;
 80032d0:	b289      	uxth	r1, r1
	    break;
 80032d2:	e78a      	b.n	80031ea <u8g2_draw_string.isra.0+0x34a>
    f->decode_ptr++;
 80032d4:	1c4d      	adds	r5, r1, #1
 80032d6:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80032da:	784d      	ldrb	r5, [r1, #1]
    s -= bit_pos;
 80032dc:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	409d      	lsls	r5, r3
    bit_pos_plus_cnt -= 8;
 80032e4:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80032e6:	4325      	orrs	r5, r4
    bit_pos_plus_cnt -= 8;
 80032e8:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80032ea:	b2ed      	uxtb	r5, r5
 80032ec:	e7a3      	b.n	8003236 <u8g2_draw_string.isra.0+0x396>
    f->decode_ptr++;
 80032ee:	1c4d      	adds	r5, r1, #1
 80032f0:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80032f4:	784e      	ldrb	r6, [r1, #1]
    s -= bit_pos;
 80032f6:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80032fa:	b2e4      	uxtb	r4, r4
 80032fc:	40a6      	lsls	r6, r4
    bit_pos_plus_cnt -= 8;
 80032fe:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003300:	4306      	orrs	r6, r0
    bit_pos_plus_cnt -= 8;
 8003302:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003304:	b2f6      	uxtb	r6, r6
    bit_pos_plus_cnt -= 8;
 8003306:	4629      	mov	r1, r5
 8003308:	e785      	b.n	8003216 <u8g2_draw_string.isra.0+0x376>
      switch(decode->dir)
 800330a:	4601      	mov	r1, r0
 800330c:	463b      	mov	r3, r7
 800330e:	e76c      	b.n	80031ea <u8g2_draw_string.isra.0+0x34a>
  switch(u8g2->font_decode.dir)
 8003310:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8003314:	e5f2      	b.n	8002efc <u8g2_draw_string.isra.0+0x5c>
 8003316:	bf00      	nop
	...

08003320 <_ctl>:
  osalDbgCheck(sdp != NULL);
 8003320:	b120      	cbz	r0, 800332c <_ctl+0xc>
  switch (operation) {
 8003322:	2901      	cmp	r1, #1
 8003324:	d106      	bne.n	8003334 <_ctl+0x14>
    osalDbgCheck(arg == NULL);
 8003326:	b90a      	cbnz	r2, 800332c <_ctl+0xc>
  return HAL_RET_SUCCESS;
 8003328:	4610      	mov	r0, r2
 800332a:	4770      	bx	lr
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 800332c:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 800332e:	4803      	ldr	r0, [pc, #12]	; (800333c <_ctl+0x1c>)
 8003330:	f7fd fe2e 	bl	8000f90 <chSysHalt>
    return HAL_RET_UNKNOWN_CTL;
 8003334:	f06f 0013 	mvn.w	r0, #19
}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	080076e4 	.word	0x080076e4

08003340 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003340:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8003344:	b510      	push	{r4, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003346:	d141      	bne.n	80033cc <i2c_lld_serve_rx_end_irq+0x8c>
  dmaStreamDisable(i2cp->dmarx);
 8003348:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 800334a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	f023 031f 	bic.w	r3, r3, #31
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	6813      	ldr	r3, [r2, #0]
 8003358:	07db      	lsls	r3, r3, #31
 800335a:	d4fc      	bmi.n	8003356 <i2c_lld_serve_rx_end_irq+0x16>
 800335c:	f894 c009 	ldrb.w	ip, [r4, #9]
 8003360:	6862      	ldr	r2, [r4, #4]
 8003362:	233d      	movs	r3, #61	; 0x3d
 8003364:	fa03 f30c 	lsl.w	r3, r3, ip
 8003368:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 800336a:	684b      	ldr	r3, [r1, #4]
 800336c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003370:	604b      	str	r3, [r1, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8003372:	680b      	ldr	r3, [r1, #0]
 8003374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003378:	600b      	str	r3, [r1, #0]
  dp->CR1 |= I2C_CR1_STOP;
 800337a:	680b      	ldr	r3, [r1, #0]
 800337c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003380:	2230      	movs	r2, #48	; 0x30
 8003382:	600b      	str	r3, [r1, #0]
 8003384:	f382 8811 	msr	BASEPRI, r2
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <i2c_lld_serve_rx_end_irq+0x98>)
 800338a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800338e:	2b00      	cmp	r3, #0
 8003390:	dd1f      	ble.n	80033d2 <i2c_lld_serve_rx_end_irq+0x92>
 8003392:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003396:	b9e1      	cbnz	r1, 80033d2 <i2c_lld_serve_rx_end_irq+0x92>
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8003398:	69c3      	ldr	r3, [r0, #28]
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 800339a:	2401      	movs	r4, #1
 800339c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
 80033a0:	b173      	cbz	r3, 80033c0 <i2c_lld_serve_rx_end_irq+0x80>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80033a2:	699c      	ldr	r4, [r3, #24]
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 80033a4:	61c1      	str	r1, [r0, #28]
    tp->u.rdymsg = msg;
 80033a6:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 80033a8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 80033ac:	6899      	ldr	r1, [r3, #8]
    pqp = pqp->next;
 80033ae:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80033b0:	68a0      	ldr	r0, [r4, #8]
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d2fb      	bcs.n	80033ae <i2c_lld_serve_rx_end_irq+0x6e>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 80033b6:	6861      	ldr	r1, [r4, #4]
 80033b8:	e9c3 4100 	strd	r4, r1, [r3]
  p->prev->next = p;
 80033bc:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80033be:	6063      	str	r3, [r4, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033c6:	f383 8811 	msr	BASEPRI, r3
}
 80033ca:	bd10      	pop	{r4, pc}
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <i2c_lld_serve_rx_end_irq+0x9c>)
 80033ce:	f7fd fddf 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#6");
 80033d2:	4803      	ldr	r0, [pc, #12]	; (80033e0 <i2c_lld_serve_rx_end_irq+0xa0>)
 80033d4:	f7fd fddc 	bl	8000f90 <chSysHalt>
 80033d8:	20000de0 	.word	0x20000de0
 80033dc:	080074a8 	.word	0x080074a8
 80033e0:	080074cc 	.word	0x080074cc
	...

080033f0 <vt_set_alarm>:
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;

  if (delay < currdelta) {
 80033f0:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 80033f4:	bf28      	it	cs
 80033f6:	f44f 417f 	movcs.w	r1, #65280	; 0xff00
 80033fa:	2902      	cmp	r1, #2
 80033fc:	bf38      	it	cc
 80033fe:	2102      	movcc	r1, #2
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8003400:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <vt_set_alarm+0x5c>)

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8003404:	1843      	adds	r3, r0, r1
 8003406:	b29b      	uxth	r3, r3
 8003408:	6353      	str	r3, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800340a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800340c:	b29b      	uxth	r3, r3
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800340e:	1a18      	subs	r0, r3, r0
 8003410:	b280      	uxth	r0, r0
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(now, newnow);
    if (likely(nowdelta < delay)) {
 8003412:	4281      	cmp	r1, r0
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8003414:	bf98      	it	ls
 8003416:	2003      	movls	r0, #3
    if (likely(nowdelta < delay)) {
 8003418:	d901      	bls.n	800341e <vt_set_alarm+0x2e>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 800341a:	bd08      	pop	{r3, pc}
 800341c:	460b      	mov	r3, r1
  return systime + (systime_t)interval;
 800341e:	1819      	adds	r1, r3, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8003420:	b289      	uxth	r1, r1
 8003422:	6351      	str	r1, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8003424:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003426:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8003428:	1acb      	subs	r3, r1, r3
 800342a:	b29b      	uxth	r3, r3
    if (likely(nowdelta < delay)) {
 800342c:	4283      	cmp	r3, r0
 800342e:	d205      	bcs.n	800343c <vt_set_alarm+0x4c>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8003430:	4a07      	ldr	r2, [pc, #28]	; (8003450 <vt_set_alarm+0x60>)
 8003432:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6353      	str	r3, [r2, #52]	; 0x34
}
 800343a:	bd08      	pop	{r3, pc}
    currdelta += (sysinterval_t)1;
 800343c:	3001      	adds	r0, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 800343e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003442:	d1eb      	bne.n	800341c <vt_set_alarm+0x2c>
 8003444:	4803      	ldr	r0, [pc, #12]	; (8003454 <vt_set_alarm+0x64>)
 8003446:	f7fd fda3 	bl	8000f90 <chSysHalt>
 800344a:	bf00      	nop
 800344c:	40014800 	.word	0x40014800
 8003450:	20000de0 	.word	0x20000de0
 8003454:	080076a0 	.word	0x080076a0
	...

08003460 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8003460:	b510      	push	{r4, lr}
 8003462:	2330      	movs	r3, #48	; 0x30
 8003464:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003468:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <__sch_wakeup+0x94>)
 800346a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800346e:	2b00      	cmp	r3, #0
 8003470:	dd3c      	ble.n	80034ec <__sch_wakeup+0x8c>
 8003472:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d138      	bne.n	80034ec <__sch_wakeup+0x8c>
  oip->dbg.lock_cnt = (cnt_t)1;
 800347a:	2301      	movs	r3, #1
 800347c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8003480:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d810      	bhi.n	80034aa <__sch_wakeup+0x4a>
 8003488:	e8df f003 	tbb	[pc, r3]
 800348c:	260f0f2a 	.word	0x260f0f2a
 8003490:	0b0f070b 	.word	0x0b0f070b
 8003494:	0f0f0f0f 	.word	0x0f0f0f0f
 8003498:	0b          	.byte	0x0b
 8003499:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800349a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800349c:	6883      	ldr	r3, [r0, #8]
 800349e:	3301      	adds	r3, #1
 80034a0:	6083      	str	r3, [r0, #8]
  p->prev->next = p->next;
 80034a2:	e9d1 3000 	ldrd	r3, r0, [r1]
 80034a6:	6003      	str	r3, [r0, #0]
  p->next->prev = p->prev;
 80034a8:	6058      	str	r0, [r3, #4]
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 80034aa:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 80034ae:	2000      	movs	r0, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80034b0:	628c      	str	r4, [r1, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80034b2:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80034b4:	688c      	ldr	r4, [r1, #8]
  tp->state = CH_STATE_READY;
 80034b6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    pqp = pqp->next;
 80034ba:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80034bc:	6898      	ldr	r0, [r3, #8]
 80034be:	42a0      	cmp	r0, r4
 80034c0:	d2fb      	bcs.n	80034ba <__sch_wakeup+0x5a>
  p->prev       = pqp->prev;
 80034c2:	685c      	ldr	r4, [r3, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 80034c4:	2000      	movs	r0, #0
 80034c6:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 80034ca:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 80034cc:	6059      	str	r1, [r3, #4]
 80034ce:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 80034d2:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 80034d6:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 80034d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80034da:	2000      	movs	r0, #0
 80034dc:	6018      	str	r0, [r3, #0]
    break;
 80034de:	e7e4      	b.n	80034aa <__sch_wakeup+0x4a>
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034e6:	f383 8811 	msr	BASEPRI, r3
}
 80034ea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#6");
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <__sch_wakeup+0x98>)
 80034ee:	f7fd fd4f 	bl	8000f90 <chSysHalt>
 80034f2:	bf00      	nop
 80034f4:	20000de0 	.word	0x20000de0
 80034f8:	080074cc 	.word	0x080074cc
 80034fc:	00000000 	.word	0x00000000

08003500 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8003500:	2300      	movs	r3, #0
  qp->prev = qp;
 8003502:	e9c0 0000 	strd	r0, r0, [r0]
 8003506:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	0000      	movs	r0, r0
	...

08003510 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @api
 */
void chDbgCheckClassI(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003512:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <chEvtBroadcastFlagsI+0x98>)
 8003514:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003518:	2a00      	cmp	r2, #0
 800351a:	db3e      	blt.n	800359a <chEvtBroadcastFlagsI+0x8a>
 800351c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003520:	2b00      	cmp	r3, #0
 8003522:	dd3a      	ble.n	800359a <chEvtBroadcastFlagsI+0x8a>
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8003524:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003526:	4298      	cmp	r0, r3
 8003528:	d019      	beq.n	800355e <chEvtBroadcastFlagsI+0x4e>
    tp->u.rdymsg = MSG_OK;
 800352a:	2500      	movs	r5, #0
  /*lint -restore*/
    elp->flags |= flags;
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	430a      	orrs	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8003532:	b111      	cbz	r1, 800353a <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8003534:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8003536:	4211      	tst	r1, r2
 8003538:	d00e      	beq.n	8003558 <chEvtBroadcastFlagsI+0x48>
      chEvtSignalI(elp->listener, elp->events);
 800353a:	685a      	ldr	r2, [r3, #4]
  chDbgCheck(tp != NULL);
 800353c:	2a00      	cmp	r2, #0
 800353e:	d02f      	beq.n	80035a0 <chEvtBroadcastFlagsI+0x90>
  tp->epending |= events;
 8003540:	689c      	ldr	r4, [r3, #8]
 8003542:	6b96      	ldr	r6, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003544:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 8003548:	4334      	orrs	r4, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 800354a:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 800354e:	6394      	str	r4, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003550:	d01c      	beq.n	800358c <chEvtBroadcastFlagsI+0x7c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003552:	f1bc 0f0b 	cmp.w	ip, #11
 8003556:	d003      	beq.n	8003560 <chEvtBroadcastFlagsI+0x50>
    }
    elp = elp->next;
 8003558:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 800355a:	4298      	cmp	r0, r3
 800355c:	d1e6      	bne.n	800352c <chEvtBroadcastFlagsI+0x1c>
  }
}
 800355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003560:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8003562:	ea36 0404 	bics.w	r4, r6, r4
 8003566:	d1f7      	bne.n	8003558 <chEvtBroadcastFlagsI+0x48>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003568:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800356a:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 800356c:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 800356e:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 8003572:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003574:	68a6      	ldr	r6, [r4, #8]
 8003576:	42be      	cmp	r6, r7
 8003578:	d2fb      	bcs.n	8003572 <chEvtBroadcastFlagsI+0x62>
    elp = elp->next;
 800357a:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 800357c:	6866      	ldr	r6, [r4, #4]
  p->next       = pqp;
 800357e:	6014      	str	r4, [r2, #0]
  while (elp != (event_listener_t *)esp) {
 8003580:	4298      	cmp	r0, r3
  p->prev       = pqp->prev;
 8003582:	6056      	str	r6, [r2, #4]
  p->prev->next = p;
 8003584:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 8003586:	6062      	str	r2, [r4, #4]
 8003588:	d1d0      	bne.n	800352c <chEvtBroadcastFlagsI+0x1c>
 800358a:	e7e8      	b.n	800355e <chEvtBroadcastFlagsI+0x4e>
  if (((tp->state == CH_STATE_WTOREVT) &&
 800358c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800358e:	4234      	tst	r4, r6
 8003590:	d1ea      	bne.n	8003568 <chEvtBroadcastFlagsI+0x58>
    elp = elp->next;
 8003592:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8003594:	4298      	cmp	r0, r3
 8003596:	d1c9      	bne.n	800352c <chEvtBroadcastFlagsI+0x1c>
 8003598:	e7e1      	b.n	800355e <chEvtBroadcastFlagsI+0x4e>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 800359a:	4804      	ldr	r0, [pc, #16]	; (80035ac <chEvtBroadcastFlagsI+0x9c>)
 800359c:	f7fd fcf8 	bl	8000f90 <chSysHalt>
  chDbgCheck(tp != NULL);
 80035a0:	4803      	ldr	r0, [pc, #12]	; (80035b0 <chEvtBroadcastFlagsI+0xa0>)
 80035a2:	f7fd fcf5 	bl	8000f90 <chSysHalt>
 80035a6:	bf00      	nop
 80035a8:	20000de0 	.word	0x20000de0
 80035ac:	080074d4 	.word	0x080074d4
 80035b0:	080076d4 	.word	0x080076d4
	...

080035c0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	2330      	movs	r3, #48	; 0x30
 80035c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <chCoreAllocFromTop+0x64>)
 80035ca:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80035ce:	ea54 0c05 	orrs.w	ip, r4, r5
 80035d2:	d121      	bne.n	8003618 <chCoreAllocFromTop+0x58>
  oip->dbg.lock_cnt = (cnt_t)1;
 80035d4:	2401      	movs	r4, #1
 80035d6:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 80035da:	b301      	cbz	r1, 800361e <chCoreAllocFromTop+0x5e>
 80035dc:	f101 3cff 	add.w	ip, r1, #4294967295
 80035e0:	ea1c 0c01 	ands.w	ip, ip, r1
 80035e4:	d11b      	bne.n	800361e <chCoreAllocFromTop+0x5e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80035e6:	4c10      	ldr	r4, [pc, #64]	; (8003628 <chCoreAllocFromTop+0x68>)
 80035e8:	6865      	ldr	r5, [r4, #4]
 80035ea:	4249      	negs	r1, r1
 80035ec:	1a28      	subs	r0, r5, r0
 80035ee:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80035f0:	6821      	ldr	r1, [r4, #0]
  prev = p - offset;
 80035f2:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80035f4:	428a      	cmp	r2, r1
 80035f6:	d308      	bcc.n	800360a <chCoreAllocFromTop+0x4a>
 80035f8:	4295      	cmp	r5, r2
 80035fa:	d306      	bcc.n	800360a <chCoreAllocFromTop+0x4a>
  ch_memcore.topmem = prev;
 80035fc:	6062      	str	r2, [r4, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003604:	f382 8811 	msr	BASEPRI, r2
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8003608:	bd38      	pop	{r3, r4, r5, pc}
 800360a:	2200      	movs	r2, #0
    return NULL;
 800360c:	4660      	mov	r0, ip
 800360e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003612:	f382 8811 	msr	BASEPRI, r2
}
 8003616:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 8003618:	4804      	ldr	r0, [pc, #16]	; (800362c <chCoreAllocFromTop+0x6c>)
 800361a:	f7fd fcb9 	bl	8000f90 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800361e:	4804      	ldr	r0, [pc, #16]	; (8003630 <chCoreAllocFromTop+0x70>)
 8003620:	f7fd fcb6 	bl	8000f90 <chSysHalt>
 8003624:	20000de0 	.word	0x20000de0
 8003628:	200010b8 	.word	0x200010b8
 800362c:	080074dc 	.word	0x080074dc
 8003630:	08007670 	.word	0x08007670
	...

08003640 <chCoreAllocAlignedI>:
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <chCoreAllocAlignedI+0x44>)
 8003642:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003646:	2a00      	cmp	r2, #0
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8003648:	b510      	push	{r4, lr}
 800364a:	db15      	blt.n	8003678 <chCoreAllocAlignedI+0x38>
 800364c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003650:	2b00      	cmp	r3, #0
 8003652:	dd11      	ble.n	8003678 <chCoreAllocAlignedI+0x38>
 8003654:	b199      	cbz	r1, 800367e <chCoreAllocAlignedI+0x3e>
 8003656:	1e4b      	subs	r3, r1, #1
 8003658:	400b      	ands	r3, r1
 800365a:	d110      	bne.n	800367e <chCoreAllocAlignedI+0x3e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <chCoreAllocAlignedI+0x48>)
 800365e:	6854      	ldr	r4, [r2, #4]
 8003660:	4249      	negs	r1, r1
 8003662:	1a20      	subs	r0, r4, r0
 8003664:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8003666:	6811      	ldr	r1, [r2, #0]
 8003668:	4288      	cmp	r0, r1
 800366a:	d303      	bcc.n	8003674 <chCoreAllocAlignedI+0x34>
 800366c:	4284      	cmp	r4, r0
 800366e:	d301      	bcc.n	8003674 <chCoreAllocAlignedI+0x34>
  ch_memcore.topmem = prev;
 8003670:	6050      	str	r0, [r2, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8003672:	bd10      	pop	{r4, pc}
    return NULL;
 8003674:	4618      	mov	r0, r3
 8003676:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 8003678:	4804      	ldr	r0, [pc, #16]	; (800368c <chCoreAllocAlignedI+0x4c>)
 800367a:	f7fd fc89 	bl	8000f90 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800367e:	4804      	ldr	r0, [pc, #16]	; (8003690 <chCoreAllocAlignedI+0x50>)
 8003680:	f7fd fc86 	bl	8000f90 <chSysHalt>
 8003684:	20000de0 	.word	0x20000de0
 8003688:	200010b8 	.word	0x200010b8
 800368c:	080074d4 	.word	0x080074d4
 8003690:	08007670 	.word	0x08007670
	...

080036a0 <vt_insert_first.constprop.0>:

/**
 * @brief   Inserts a timer as first element in a delta list.
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
 80036a0:	b538      	push	{r3, r4, r5, lr}
                            sysinterval_t delay) {
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 80036a2:	4c1e      	ldr	r4, [pc, #120]	; (800371c <vt_insert_first.constprop.0+0x7c>)
 80036a4:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
 80036a8:	83a1      	strh	r1, [r4, #28]
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {

  dlp->delta      = delta;
  dlp->prev       = dlhp;
 80036aa:	f104 0310 	add.w	r3, r4, #16
  dlp->delta      = delta;
 80036ae:	6082      	str	r2, [r0, #8]
 80036b0:	bf28      	it	cs
 80036b2:	f44f 427f 	movcs.w	r2, #65280	; 0xff00
  dlp->prev       = dlhp;
 80036b6:	6043      	str	r3, [r0, #4]
 80036b8:	2a02      	cmp	r2, #2
  dlp->next       = dlp->prev->next;
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	6003      	str	r3, [r0, #0]
 80036be:	bf38      	it	cc
 80036c0:	2202      	movcc	r2, #2
  dlp->next->prev = dlp;
 80036c2:	6058      	str	r0, [r3, #4]
  return systime + (systime_t)interval;
 80036c4:	188d      	adds	r5, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <vt_insert_first.constprop.0+0x80>)
  dlhp->next      = dlp;
 80036c8:	6120      	str	r0, [r4, #16]
 80036ca:	b2ad      	uxth	r5, r5
  STM32_ST_TIM->SR     = 0;
 80036cc:	2000      	movs	r0, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80036ce:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80036d0:	6118      	str	r0, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80036d2:	2002      	movs	r0, #2
 80036d4:	60d8      	str	r0, [r3, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 80036d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80036d8:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 80036da:	eba0 0c01 	sub.w	ip, r0, r1
 80036de:	fa1f fc8c 	uxth.w	ip, ip
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 80036e2:	4594      	cmp	ip, r2
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 80036e4:	bf28      	it	cs
 80036e6:	2503      	movcs	r5, #3
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 80036e8:	d206      	bcs.n	80036f8 <vt_insert_first.constprop.0+0x58>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
    currdelta += (sysinterval_t)1;
 80036ec:	3501      	adds	r5, #1
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80036ee:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80036f2:	4601      	mov	r1, r0
 80036f4:	d00e      	beq.n	8003714 <vt_insert_first.constprop.0+0x74>
 80036f6:	4610      	mov	r0, r2
  return systime + (systime_t)interval;
 80036f8:	4429      	add	r1, r5
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80036fa:	b289      	uxth	r1, r1
 80036fc:	6359      	str	r1, [r3, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80036fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003700:	b292      	uxth	r2, r2
  return (sysinterval_t)((systime_t)(end - start));
 8003702:	1a11      	subs	r1, r2, r0
 8003704:	b289      	uxth	r1, r1
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8003706:	42a9      	cmp	r1, r5
 8003708:	d2f0      	bcs.n	80036ec <vt_insert_first.constprop.0+0x4c>
 800370a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6363      	str	r3, [r4, #52]	; 0x34
}
 8003712:	bd38      	pop	{r3, r4, r5, pc}
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8003714:	4803      	ldr	r0, [pc, #12]	; (8003724 <vt_insert_first.constprop.0+0x84>)
 8003716:	f7fd fc3b 	bl	8000f90 <chSysHalt>
 800371a:	bf00      	nop
 800371c:	20000de0 	.word	0x20000de0
 8003720:	40014800 	.word	0x40014800
 8003724:	080076a0 	.word	0x080076a0
	...

08003730 <chSchReadyI.isra.0>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003730:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <chSchReadyI.isra.0+0x40>)
 8003734:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003738:	2a00      	cmp	r2, #0
 800373a:	db13      	blt.n	8003764 <chSchReadyI.isra.0+0x34>
 800373c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003740:	2b00      	cmp	r3, #0
 8003742:	dd0f      	ble.n	8003764 <chSchReadyI.isra.0+0x34>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8003744:	b188      	cbz	r0, 800376a <chSchReadyI.isra.0+0x3a>
  tp->state = CH_STATE_READY;
 8003746:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003748:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800374a:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 800374c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    pqp = pqp->next;
 8003750:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	428a      	cmp	r2, r1
 8003756:	d2fb      	bcs.n	8003750 <chSchReadyI.isra.0+0x20>
  p->prev       = pqp->prev;
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800375e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8003760:	6058      	str	r0, [r3, #4]
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
}
 8003762:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8003764:	4803      	ldr	r0, [pc, #12]	; (8003774 <chSchReadyI.isra.0+0x44>)
 8003766:	f7fd fc13 	bl	8000f90 <chSysHalt>
  chDbgCheck(tp != NULL);
 800376a:	4803      	ldr	r0, [pc, #12]	; (8003778 <chSchReadyI.isra.0+0x48>)
 800376c:	f7fd fc10 	bl	8000f90 <chSysHalt>
 8003770:	20000de0 	.word	0x20000de0
 8003774:	080074d4 	.word	0x080074d4
 8003778:	08007658 	.word	0x08007658
 800377c:	00000000 	.word	0x00000000

08003780 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8003780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8003784:	6f47      	ldr	r7, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8003786:	f8d7 900c 	ldr.w	r9, [r7, #12]
  uint16_t sr = u->SR;
 800378a:	f8d7 a000 	ldr.w	sl, [r7]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800378e:	f41a 7f80 	tst.w	sl, #256	; 0x100
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8003792:	b083      	sub	sp, #12
 8003794:	4604      	mov	r4, r0
  if (sr & USART_SR_LBD) {
 8003796:	f040 8097 	bne.w	80038c8 <sd_lld_serve_interrupt+0x148>
 800379a:	4ea9      	ldr	r6, [pc, #676]	; (8003a40 <sd_lld_serve_interrupt+0x2c0>)
 800379c:	2330      	movs	r3, #48	; 0x30
 800379e:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80037a2:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f340 80c4 	ble.w	8003934 <sd_lld_serve_interrupt+0x1b4>
 80037ac:	f8d6 808c 	ldr.w	r8, [r6, #140]	; 0x8c
 80037b0:	f1b8 0f00 	cmp.w	r8, #0
 80037b4:	f040 80be 	bne.w	8003934 <sd_lld_serve_interrupt+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)1;
 80037b8:	2301      	movs	r3, #1
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80037ba:	f01a 0f2f 	tst.w	sl, #47	; 0x2f
 80037be:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  uint16_t sr = u->SR;
 80037c2:	fa1f f58a 	uxth.w	r5, sl
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80037c6:	d019      	beq.n	80037fc <sd_lld_serve_interrupt+0x7c>
  chnAddFlagsI(sdp, sts);
 80037c8:	f104 0b04 	add.w	fp, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80037cc:	f104 0a0c 	add.w	sl, r4, #12
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80037d0:	0729      	lsls	r1, r5, #28
 80037d2:	d127      	bne.n	8003824 <sd_lld_serve_interrupt+0xa4>
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 80037d4:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 80037dc:	d439      	bmi.n	8003852 <sd_lld_serve_interrupt+0xd2>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80037de:	683b      	ldr	r3, [r7, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80037e0:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80037e4:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80037e6:	d1f3      	bne.n	80037d0 <sd_lld_serve_interrupt+0x50>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80037e8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f340 80b8 	ble.w	8003962 <sd_lld_serve_interrupt+0x1e2>
 80037f2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f340 80b3 	ble.w	8003962 <sd_lld_serve_interrupt+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003802:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8003806:	f019 0f80 	tst.w	r9, #128	; 0x80
 800380a:	d002      	beq.n	8003812 <sd_lld_serve_interrupt+0x92>
 800380c:	062a      	lsls	r2, r5, #24
 800380e:	f100 80b4 	bmi.w	800397a <sd_lld_serve_interrupt+0x1fa>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8003812:	f019 0f40 	tst.w	r9, #64	; 0x40
 8003816:	d002      	beq.n	800381e <sd_lld_serve_interrupt+0x9e>
 8003818:	066b      	lsls	r3, r5, #25
 800381a:	f100 80e9 	bmi.w	80039f0 <sd_lld_serve_interrupt+0x270>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
    }
    osalSysUnlockFromISR();
  }
}
 800381e:	b003      	add	sp, #12
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sr & USART_SR_ORE)
 8003824:	f3c5 01c0 	ubfx	r1, r5, #3, #1
 8003828:	0209      	lsls	r1, r1, #8
  if (sr & USART_SR_PE)
 800382a:	07ea      	lsls	r2, r5, #31
    sts |= SD_PARITY_ERROR;
 800382c:	bf48      	it	mi
 800382e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8003832:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 8003834:	bf48      	it	mi
 8003836:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800383a:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 800383c:	bf48      	it	mi
 800383e:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003842:	4658      	mov	r0, fp
 8003844:	f7ff fe64 	bl	8003510 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8003848:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 8003850:	d5c5      	bpl.n	80037de <sd_lld_serve_interrupt+0x5e>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003852:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8003856:	2900      	cmp	r1, #0
 8003858:	db69      	blt.n	800392e <sd_lld_serve_interrupt+0x1ae>
 800385a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800385e:	2900      	cmp	r1, #0
 8003860:	dd65      	ble.n	800392e <sd_lld_serve_interrupt+0x1ae>
  if (iqIsEmptyI(&sdp->iqueue))
 8003862:	6961      	ldr	r1, [r4, #20]
 8003864:	2900      	cmp	r1, #0
 8003866:	d052      	beq.n	800390e <sd_lld_serve_interrupt+0x18e>
  if (!iqIsFullI(iqp)) {
 8003868:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 800386c:	4288      	cmp	r0, r1
 800386e:	d07b      	beq.n	8003968 <sd_lld_serve_interrupt+0x1e8>
    b = (uint8_t)u->DR & sdp->rxmask;
 8003870:	4013      	ands	r3, r2
    iqp->q_counter++;
 8003872:	6962      	ldr	r2, [r4, #20]
 8003874:	3201      	adds	r2, #1
 8003876:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8003878:	1c42      	adds	r2, r0, #1
 800387a:	6222      	str	r2, [r4, #32]
 800387c:	7003      	strb	r3, [r0, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800387e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003882:	429a      	cmp	r2, r3
 8003884:	d301      	bcc.n	800388a <sd_lld_serve_interrupt+0x10a>
      iqp->q_wrptr = iqp->q_buffer;
 8003886:	69a3      	ldr	r3, [r4, #24]
 8003888:	6223      	str	r3, [r4, #32]
  return (bool)(qp->next != qp);
 800388a:	68e2      	ldr	r2, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 800388c:	4592      	cmp	sl, r2
 800388e:	d0a6      	beq.n	80037de <sd_lld_serve_interrupt+0x5e>
  qp->next       = p->next;
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 8003894:	f8c3 a004 	str.w	sl, [r3, #4]
 8003898:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800389c:	f8c2 8028 	str.w	r8, [r2, #40]	; 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db44      	blt.n	800392e <sd_lld_serve_interrupt+0x1ae>
 80038a4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dd40      	ble.n	800392e <sd_lld_serve_interrupt+0x1ae>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80038ac:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80038ae:	6890      	ldr	r0, [r2, #8]
  tp->state = CH_STATE_READY;
 80038b0:	f882 8024 	strb.w	r8, [r2, #36]	; 0x24
    pqp = pqp->next;
 80038b4:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80038b6:	688b      	ldr	r3, [r1, #8]
 80038b8:	4283      	cmp	r3, r0
 80038ba:	d2fb      	bcs.n	80038b4 <sd_lld_serve_interrupt+0x134>
  p->prev       = pqp->prev;
 80038bc:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 80038be:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 80038c0:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 80038c2:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 80038c4:	604a      	str	r2, [r1, #4]
 80038c6:	e78a      	b.n	80037de <sd_lld_serve_interrupt+0x5e>
 80038c8:	2330      	movs	r3, #48	; 0x30
 80038ca:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80038ce:	4e5c      	ldr	r6, [pc, #368]	; (8003a40 <sd_lld_serve_interrupt+0x2c0>)
 80038d0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dd2d      	ble.n	8003934 <sd_lld_serve_interrupt+0x1b4>
 80038d8:	f8d6 508c 	ldr.w	r5, [r6, #140]	; 0x8c
 80038dc:	bb55      	cbnz	r5, 8003934 <sd_lld_serve_interrupt+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)1;
 80038de:	2301      	movs	r3, #1
 80038e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038e4:	3004      	adds	r0, #4
 80038e6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80038ea:	f7ff fe11 	bl	8003510 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80038ee:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    u->SR = ~USART_SR_LBD;
 80038f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	603a      	str	r2, [r7, #0]
 80038fa:	dd32      	ble.n	8003962 <sd_lld_serve_interrupt+0x1e2>
 80038fc:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003900:	2b00      	cmp	r3, #0
 8003902:	dd2e      	ble.n	8003962 <sd_lld_serve_interrupt+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003904:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
 8003908:	f385 8811 	msr	BASEPRI, r5
}
 800390c:	e746      	b.n	800379c <sd_lld_serve_interrupt+0x1c>
  chEvtBroadcastFlagsI(esp, flags);
 800390e:	2104      	movs	r1, #4
 8003910:	4658      	mov	r0, fp
 8003912:	e9cd 2300 	strd	r2, r3, [sp]
 8003916:	f7ff fdfb 	bl	8003510 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 800391a:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800391e:	2900      	cmp	r1, #0
 8003920:	db05      	blt.n	800392e <sd_lld_serve_interrupt+0x1ae>
 8003922:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8003926:	2900      	cmp	r1, #0
 8003928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800392c:	dc9c      	bgt.n	8003868 <sd_lld_serve_interrupt+0xe8>
    chSysHalt("SV#10");
 800392e:	4845      	ldr	r0, [pc, #276]	; (8003a44 <sd_lld_serve_interrupt+0x2c4>)
 8003930:	f7fd fb2e 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#6");
 8003934:	4844      	ldr	r0, [pc, #272]	; (8003a48 <sd_lld_serve_interrupt+0x2c8>)
 8003936:	f7fd fb2b 	bl	8000f90 <chSysHalt>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800393a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d069      	beq.n	8003a14 <sd_lld_serve_interrupt+0x294>
 8003940:	2110      	movs	r1, #16
 8003942:	1d20      	adds	r0, r4, #4
 8003944:	f7ff fde4 	bl	8003510 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003948:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800394c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003950:	ea09 0303 	and.w	r3, r9, r3
 8003954:	2a00      	cmp	r2, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	dd03      	ble.n	8003962 <sd_lld_serve_interrupt+0x1e2>
 800395a:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800395e:	2b00      	cmp	r3, #0
 8003960:	dc58      	bgt.n	8003a14 <sd_lld_serve_interrupt+0x294>
    chSysHalt("SV#7");
 8003962:	483a      	ldr	r0, [pc, #232]	; (8003a4c <sd_lld_serve_interrupt+0x2cc>)
 8003964:	f7fd fb14 	bl	8000f90 <chSysHalt>
  if (!iqIsFullI(iqp)) {
 8003968:	6961      	ldr	r1, [r4, #20]
 800396a:	2900      	cmp	r1, #0
 800396c:	d080      	beq.n	8003870 <sd_lld_serve_interrupt+0xf0>
 800396e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003972:	4658      	mov	r0, fp
 8003974:	f7ff fdcc 	bl	8003510 <chEvtBroadcastFlagsI>
}
 8003978:	e731      	b.n	80037de <sd_lld_serve_interrupt+0x5e>
 800397a:	2330      	movs	r3, #48	; 0x30
 800397c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003980:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8003984:	2b00      	cmp	r3, #0
 8003986:	ddd5      	ble.n	8003934 <sd_lld_serve_interrupt+0x1b4>
 8003988:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 800398c:	2a00      	cmp	r2, #0
 800398e:	d1d1      	bne.n	8003934 <sd_lld_serve_interrupt+0x1b4>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8003990:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
  oip->dbg.lock_cnt = (cnt_t)1;
 8003994:	2001      	movs	r0, #1
 8003996:	4291      	cmp	r1, r2
 8003998:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    b = oqGetI(&sdp->oqueue);
 800399c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80039a0:	d03e      	beq.n	8003a20 <sd_lld_serve_interrupt+0x2a0>
    uint8_t b;

    oqp->q_counter++;
 80039a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80039a4:	3101      	adds	r1, #1
 80039a6:	63a1      	str	r1, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 80039a8:	1c51      	adds	r1, r2, #1
 80039aa:	64a1      	str	r1, [r4, #72]	; 0x48
 80039ac:	f892 8000 	ldrb.w	r8, [r2]
    if (oqp->q_rdptr >= oqp->q_top) {
 80039b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039b2:	4291      	cmp	r1, r2
 80039b4:	d301      	bcc.n	80039ba <sd_lld_serve_interrupt+0x23a>
      oqp->q_rdptr = oqp->q_buffer;
 80039b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80039b8:	64a2      	str	r2, [r4, #72]	; 0x48
  return (bool)(qp->next != qp);
 80039ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80039bc:	4584      	cmp	ip, r0
 80039be:	d009      	beq.n	80039d4 <sd_lld_serve_interrupt+0x254>
  qp->next       = p->next;
 80039c0:	6803      	ldr	r3, [r0, #0]
 80039c2:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 80039c4:	f8c3 c004 	str.w	ip, [r3, #4]
 80039c8:	2300      	movs	r3, #0
 80039ca:	6283      	str	r3, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 80039cc:	f7ff feb0 	bl	8003730 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80039d0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      u->DR = b;
 80039d4:	f8c7 8004 	str.w	r8, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	ddc2      	ble.n	8003962 <sd_lld_serve_interrupt+0x1e2>
 80039dc:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	ddbe      	ble.n	8003962 <sd_lld_serve_interrupt+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80039ea:	f383 8811 	msr	BASEPRI, r3
}
 80039ee:	e710      	b.n	8003812 <sd_lld_serve_interrupt+0x92>
 80039f0:	2330      	movs	r3, #48	; 0x30
 80039f2:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80039f6:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dd9a      	ble.n	8003934 <sd_lld_serve_interrupt+0x1b4>
 80039fe:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d196      	bne.n	8003934 <sd_lld_serve_interrupt+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if (oqIsEmptyI(&sdp->oqueue)) {
 8003a0c:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d092      	beq.n	800393a <sd_lld_serve_interrupt+0x1ba>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003a1a:	f383 8811 	msr	BASEPRI, r3
}
 8003a1e:	e6fe      	b.n	800381e <sd_lld_serve_interrupt+0x9e>
  if (!oqIsEmptyI(oqp)) {
 8003a20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d0bd      	beq.n	80039a2 <sd_lld_serve_interrupt+0x222>
  chEvtBroadcastFlagsI(esp, flags);
 8003a26:	2108      	movs	r1, #8
 8003a28:	1d20      	adds	r0, r4, #4
 8003a2a:	f7ff fd71 	bl	8003510 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8003a2e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8003a32:	ea09 0303 	and.w	r3, r9, r3
 8003a36:	60fb      	str	r3, [r7, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003a38:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8003a3c:	e7cc      	b.n	80039d8 <sd_lld_serve_interrupt+0x258>
 8003a3e:	bf00      	nop
 8003a40:	20000de0 	.word	0x20000de0
 8003a44:	080074d4 	.word	0x080074d4
 8003a48:	080074cc 	.word	0x080074cc
 8003a4c:	080074e4 	.word	0x080074e4

08003a50 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003a50:	b508      	push	{r3, lr}
 * @api
 */
void chDbgCheckClassS(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <chSchGoSleepS+0x4c>)
 8003a54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a58:	b9ea      	cbnz	r2, 8003a96 <chSchGoSleepS+0x46>
 8003a5a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a5e:	2a00      	cmp	r2, #0
 8003a60:	dd19      	ble.n	8003a96 <chSchGoSleepS+0x46>
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 8003a62:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8003a64:	681a      	ldr	r2, [r3, #0]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8003a66:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  pqp->next       = p->next;
 8003a6a:	6810      	ldr	r0, [r2, #0]
 8003a6c:	6018      	str	r0, [r3, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 8003a6e:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8003a72:	6043      	str	r3, [r0, #4]
 8003a74:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8003a78:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003a7a:	f3ef 8309 	mrs	r3, PSP
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8003a7e:	6a08      	ldr	r0, [r1, #32]
 8003a80:	3b64      	subs	r3, #100	; 0x64
 8003a82:	4298      	cmp	r0, r3
 8003a84:	d804      	bhi.n	8003a90 <chSchGoSleepS+0x40>
}
 8003a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chSysSwitch(ntp, otp);
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f7fc bc3a 	b.w	8000304 <__port_switch>
 8003a90:	4803      	ldr	r0, [pc, #12]	; (8003aa0 <chSchGoSleepS+0x50>)
 8003a92:	f7fd fa7d 	bl	8000f90 <chSysHalt>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 8003a96:	4803      	ldr	r0, [pc, #12]	; (8003aa4 <chSchGoSleepS+0x54>)
 8003a98:	f7fd fa7a 	bl	8000f90 <chSysHalt>
 8003a9c:	20000de0 	.word	0x20000de0
 8003aa0:	080074f4 	.word	0x080074f4
 8003aa4:	080074ec 	.word	0x080074ec
	...

08003ab0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8003ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003ab4:	4d45      	ldr	r5, [pc, #276]	; (8003bcc <chSchGoSleepTimeoutS+0x11c>)
 8003ab6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003aba:	b088      	sub	sp, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d15e      	bne.n	8003b7e <chSchGoSleepTimeoutS+0xce>
 8003ac0:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
 8003ac4:	2c00      	cmp	r4, #0
 8003ac6:	dd5a      	ble.n	8003b7e <chSchGoSleepTimeoutS+0xce>
  thread_t *tp = __instance_get_currthread(currcore);

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8003ac8:	1c4c      	adds	r4, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 8003aca:	68ef      	ldr	r7, [r5, #12]
  if (TIME_INFINITE != timeout) {
 8003acc:	460a      	mov	r2, r1
 8003ace:	d04d      	beq.n	8003b6c <chSchGoSleepTimeoutS+0xbc>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	d051      	beq.n	8003b78 <chSchGoSleepTimeoutS+0xc8>

  /* Timer initialization.*/
  vtp->par     = par;
 8003ad4:	e9cd 7306 	strd	r7, r3, [sp, #24]
 8003ad8:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <chSchGoSleepTimeoutS+0x120>)
  return (bool)(dlhp == dlhp->next);
 8003ada:	46a8      	mov	r8, r5
 8003adc:	4606      	mov	r6, r0
 8003ade:	6a58      	ldr	r0, [r3, #36]	; 0x24
  vtp->func    = vtfunc;
 8003ae0:	4b3c      	ldr	r3, [pc, #240]	; (8003bd4 <chSchGoSleepTimeoutS+0x124>)
 8003ae2:	9305      	str	r3, [sp, #20]
 8003ae4:	f858 3f10 	ldr.w	r3, [r8, #16]!
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8003ae8:	4543      	cmp	r3, r8
 8003aea:	b280      	uxth	r0, r0
 8003aec:	d064      	beq.n	8003bb8 <chSchGoSleepTimeoutS+0x108>
  return (sysinterval_t)((systime_t)(end - start));
 8003aee:	8bac      	ldrh	r4, [r5, #28]
    if (delta < vtlp->dlist.next->delta) {
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	1b04      	subs	r4, r0, r4
 8003af4:	b2a4      	uxth	r4, r4
    if (delta < nowdelta) {
 8003af6:	190c      	adds	r4, r1, r4
 8003af8:	bf28      	it	cs
 8003afa:	460c      	movcs	r4, r1
    if (delta < vtlp->dlist.next->delta) {
 8003afc:	42a2      	cmp	r2, r4
 8003afe:	d908      	bls.n	8003b12 <chSchGoSleepTimeoutS+0x62>
 8003b00:	9301      	str	r3, [sp, #4]
      vt_set_alarm(now, delay);
 8003b02:	f7ff fc75 	bl	80033f0 <vt_set_alarm>
 8003b06:	9b01      	ldr	r3, [sp, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
 8003b0a:	e002      	b.n	8003b12 <chSchGoSleepTimeoutS+0x62>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 8003b0c:	681b      	ldr	r3, [r3, #0]
    delta -= dlp->delta;
 8003b0e:	1aa4      	subs	r4, r4, r2
  while (likely(dlp->delta < delta)) {
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	42a2      	cmp	r2, r4
 8003b14:	d3fa      	bcc.n	8003b0c <chSchGoSleepTimeoutS+0x5c>
  dlp->delta      = delta;
 8003b16:	9404      	str	r4, [sp, #16]

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8003b18:	689a      	ldr	r2, [r3, #8]
  dlp->prev       = dlp->next->prev;
 8003b1a:	6859      	ldr	r1, [r3, #4]
  dlp->next       = dlhp;
 8003b1c:	9302      	str	r3, [sp, #8]
  dlp->delta -= delta;
 8003b1e:	1b12      	subs	r2, r2, r4
  dlp->prev->next = dlp;
 8003b20:	ac02      	add	r4, sp, #8
  dlp->prev       = dlp->next->prev;
 8003b22:	9103      	str	r1, [sp, #12]
  dlp->prev->next = dlp;
 8003b24:	600c      	str	r4, [r1, #0]
  dlhp->prev      = dlp;
 8003b26:	e9c3 4201 	strd	r4, r2, [r3, #4]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2e:	61ab      	str	r3, [r5, #24]
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
 8003b30:	4630      	mov	r0, r6
 8003b32:	f7ff ff8d 	bl	8003a50 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003b36:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db22      	blt.n	8003b84 <chSchGoSleepTimeoutS+0xd4>
 8003b3e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dd1e      	ble.n	8003b84 <chSchGoSleepTimeoutS+0xd4>
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8003b46:	9b02      	ldr	r3, [sp, #8]
    if (chVTIsArmedI(&vt)) {
 8003b48:	b163      	cbz	r3, 8003b64 <chSchGoSleepTimeoutS+0xb4>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8003b4a:	692a      	ldr	r2, [r5, #16]
 8003b4c:	42a2      	cmp	r2, r4
 8003b4e:	d01c      	beq.n	8003b8a <chSchGoSleepTimeoutS+0xda>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 8003b50:	e9dd 1003 	ldrd	r1, r0, [sp, #12]

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	4402      	add	r2, r0
 8003b5a:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	61ab      	str	r3, [r5, #24]
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 8003b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b66:	b008      	add	sp, #32
 8003b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchGoSleepS(newstate);
 8003b6c:	f7ff ff70 	bl	8003a50 <chSchGoSleepS>
}
 8003b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b72:	b008      	add	sp, #32
 8003b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8003b78:	4817      	ldr	r0, [pc, #92]	; (8003bd8 <chSchGoSleepTimeoutS+0x128>)
 8003b7a:	f7fd fa09 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#11");
 8003b7e:	4817      	ldr	r0, [pc, #92]	; (8003bdc <chSchGoSleepTimeoutS+0x12c>)
 8003b80:	f7fd fa06 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#10");
 8003b84:	4816      	ldr	r0, [pc, #88]	; (8003be0 <chSchGoSleepTimeoutS+0x130>)
 8003b86:	f7fd fa03 	bl	8000f90 <chSysHalt>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 8003b8a:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8003b8c:	4543      	cmp	r3, r8
  dlhp->next       = dlp->next;
 8003b8e:	612b      	str	r3, [r5, #16]
  vtp->dlist.next = NULL;
 8003b90:	9202      	str	r2, [sp, #8]
  dlhp->next->prev = dlhp;
 8003b92:	f8c3 8004 	str.w	r8, [r3, #4]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8003b96:	d015      	beq.n	8003bc4 <chSchGoSleepTimeoutS+0x114>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8003b98:	6899      	ldr	r1, [r3, #8]
 8003b9a:	9804      	ldr	r0, [sp, #16]
 8003b9c:	8baa      	ldrh	r2, [r5, #28]
 8003b9e:	4401      	add	r1, r0
 8003ba0:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <chSchGoSleepTimeoutS+0x120>)
 8003ba2:	6099      	str	r1, [r3, #8]
 8003ba4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003ba6:	b280      	uxth	r0, r0
 8003ba8:	1a83      	subs	r3, r0, r2
 8003baa:	b29b      	uxth	r3, r3
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8003bac:	4299      	cmp	r1, r3
 8003bae:	d9d9      	bls.n	8003b64 <chSchGoSleepTimeoutS+0xb4>

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 8003bb0:	1ac9      	subs	r1, r1, r3
 8003bb2:	f7ff fc1d 	bl	80033f0 <vt_set_alarm>
 8003bb6:	e7d5      	b.n	8003b64 <chSchGoSleepTimeoutS+0xb4>
      vt_insert_first(vtlp, vtp, now, delay);
 8003bb8:	ac02      	add	r4, sp, #8
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff fd6f 	bl	80036a0 <vt_insert_first.constprop.0>
      return;
 8003bc2:	e7b5      	b.n	8003b30 <chSchGoSleepTimeoutS+0x80>
  STM32_ST_TIM->DIER = 0U;
 8003bc4:	4b02      	ldr	r3, [pc, #8]	; (8003bd0 <chSchGoSleepTimeoutS+0x120>)
 8003bc6:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 8003bc8:	e7cc      	b.n	8003b64 <chSchGoSleepTimeoutS+0xb4>
 8003bca:	bf00      	nop
 8003bcc:	20000de0 	.word	0x20000de0
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	08003461 	.word	0x08003461
 8003bd8:	080076c8 	.word	0x080076c8
 8003bdc:	080074ec 	.word	0x080074ec
 8003be0:	080074d4 	.word	0x080074d4
	...

08003bf0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf4:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 8003bf6:	f8d0 b01c 	ldr.w	fp, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 8003bfa:	9302      	str	r3, [sp, #8]
  size_t max = n;

  osalDbgCheck(n > 0U);
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	f000 8081 	beq.w	8003d04 <oqWriteTimeout+0x114>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c02:	4691      	mov	r9, r2
 8003c04:	4688      	mov	r8, r1
 8003c06:	2230      	movs	r2, #48	; 0x30
 8003c08:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003c0c:	4e3f      	ldr	r6, [pc, #252]	; (8003d0c <oqWriteTimeout+0x11c>)
 8003c0e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8003c12:	430b      	orrs	r3, r1
 8003c14:	d170      	bne.n	8003cf8 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	4604      	mov	r4, r0
 8003c1a:	9201      	str	r2, [sp, #4]
 8003c1c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003c20:	46ca      	mov	sl, r9
  if (n > oqGetEmptyI(oqp)) {
 8003c22:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003c24:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8003c28:	4553      	cmp	r3, sl
    n = oqGetEmptyI(oqp);
 8003c2a:	bf34      	ite	cc
 8003c2c:	68a5      	ldrcc	r5, [r4, #8]
 8003c2e:	4655      	movcs	r5, sl
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8003c30:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8003c32:	42af      	cmp	r7, r5
 8003c34:	d859      	bhi.n	8003cea <oqWriteTimeout+0xfa>
  else if (n > s1) {
 8003c36:	d243      	bcs.n	8003cc0 <oqWriteTimeout+0xd0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003c38:	463a      	mov	r2, r7
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	f7fc fb82 	bl	8000344 <memcpy>
    s2 = n - s1;
 8003c40:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8003c42:	68e0      	ldr	r0, [r4, #12]
 8003c44:	9203      	str	r2, [sp, #12]
 8003c46:	eb08 0107 	add.w	r1, r8, r7
 8003c4a:	f7fc fb7b 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8003c4e:	68e3      	ldr	r3, [r4, #12]
 8003c50:	9a03      	ldr	r2, [sp, #12]
 8003c52:	441a      	add	r2, r3
  oqp->q_counter -= n;
 8003c54:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr += n;
 8003c56:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8003c58:	1b5b      	subs	r3, r3, r5
 8003c5a:	60a3      	str	r3, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8003c5c:	b3b5      	cbz	r5, 8003ccc <oqWriteTimeout+0xdc>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8003c5e:	f1bb 0f00 	cmp.w	fp, #0
 8003c62:	d001      	beq.n	8003c68 <oqWriteTimeout+0x78>
        nfy(oqp);
 8003c64:	4620      	mov	r0, r4
 8003c66:	47d8      	blx	fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003c68:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d146      	bne.n	8003cfe <oqWriteTimeout+0x10e>
 8003c70:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	dd42      	ble.n	8003cfe <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003c78:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	9b01      	ldr	r3, [sp, #4]
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8003c82:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8003c86:	44a8      	add	r8, r5
 8003c88:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003c8c:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 8003c90:	4313      	orrs	r3, r2
 8003c92:	d131      	bne.n	8003cf8 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 8003c9a:	f1ba 0f00 	cmp.w	sl, #0
 8003c9e:	d1c0      	bne.n	8003c22 <oqWriteTimeout+0x32>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003ca0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8003ca4:	bb5a      	cbnz	r2, 8003cfe <oqWriteTimeout+0x10e>
 8003ca6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8003caa:	2900      	cmp	r1, #0
 8003cac:	dd27      	ble.n	8003cfe <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003cae:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8003cb2:	f382 8811 	msr	BASEPRI, r2
    }
  }

  osalSysUnlock();
  return max - n;
}
 8003cb6:	eba9 000a 	sub.w	r0, r9, sl
 8003cba:	b005      	add	sp, #20
 8003cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003cc0:	462a      	mov	r2, r5
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	f7fc fb3e 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8003cc8:	68e2      	ldr	r2, [r4, #12]
 8003cca:	e7c3      	b.n	8003c54 <oqWriteTimeout+0x64>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003ccc:	9902      	ldr	r1, [sp, #8]
  return __sch_get_currthread();
 8003cce:	68f3      	ldr	r3, [r6, #12]
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d0e5      	beq.n	8003ca0 <oqWriteTimeout+0xb0>
  p->prev       = qp->prev;
 8003cd4:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 8003cd6:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 8003cd8:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003cda:	2004      	movs	r0, #4
  p->prev->next = p;
 8003cdc:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8003cde:	6063      	str	r3, [r4, #4]
 8003ce0:	f7ff fee6 	bl	8003ab0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d09c      	beq.n	8003c22 <oqWriteTimeout+0x32>
 8003ce8:	e7da      	b.n	8003ca0 <oqWriteTimeout+0xb0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8003cea:	462a      	mov	r2, r5
 8003cec:	4641      	mov	r1, r8
 8003cee:	f7fc fb29 	bl	8000344 <memcpy>
    oqp->q_wrptr += n;
 8003cf2:	6962      	ldr	r2, [r4, #20]
 8003cf4:	442a      	add	r2, r5
 8003cf6:	e7ad      	b.n	8003c54 <oqWriteTimeout+0x64>
    chSysHalt("SV#4");
 8003cf8:	4805      	ldr	r0, [pc, #20]	; (8003d10 <oqWriteTimeout+0x120>)
 8003cfa:	f7fd f949 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#5");
 8003cfe:	4805      	ldr	r0, [pc, #20]	; (8003d14 <oqWriteTimeout+0x124>)
 8003d00:	f7fd f946 	bl	8000f90 <chSysHalt>
  osalDbgCheck(n > 0U);
 8003d04:	4804      	ldr	r0, [pc, #16]	; (8003d18 <oqWriteTimeout+0x128>)
 8003d06:	f7fd f943 	bl	8000f90 <chSysHalt>
 8003d0a:	bf00      	nop
 8003d0c:	20000de0 	.word	0x20000de0
 8003d10:	080074dc 	.word	0x080074dc
 8003d14:	08007504 	.word	0x08007504
 8003d18:	08007648 	.word	0x08007648
 8003d1c:	00000000 	.word	0x00000000

08003d20 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	3030      	adds	r0, #48	; 0x30
 8003d26:	f7ff bf63 	b.w	8003bf0 <oqWriteTimeout>
 8003d2a:	bf00      	nop
 8003d2c:	0000      	movs	r0, r0
	...

08003d30 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003d30:	3030      	adds	r0, #48	; 0x30
 8003d32:	f7ff bf5d 	b.w	8003bf0 <oqWriteTimeout>
 8003d36:	bf00      	nop
	...

08003d40 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	2330      	movs	r3, #48	; 0x30
 8003d44:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d48:	4e26      	ldr	r6, [pc, #152]	; (8003de4 <iqGetTimeout+0xa4>)
 8003d4a:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d144      	bne.n	8003ddc <iqGetTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	4604      	mov	r4, r0
 8003d56:	460d      	mov	r5, r1
 8003d58:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
}
 8003d5c:	e00a      	b.n	8003d74 <iqGetTimeout+0x34>
  p->prev       = qp->prev;
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	4629      	mov	r1, r5
 8003d62:	e9c3 4200 	strd	r4, r2, [r3]
 8003d66:	2004      	movs	r0, #4
  p->prev->next = p;
 8003d68:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 8003d6a:	6063      	str	r3, [r4, #4]
 8003d6c:	f7ff fea0 	bl	8003ab0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8003d70:	2800      	cmp	r0, #0
 8003d72:	db06      	blt.n	8003d82 <iqGetTimeout+0x42>
  while (iqIsEmptyI(iqp)) {
 8003d74:	68a3      	ldr	r3, [r4, #8]
 8003d76:	b983      	cbnz	r3, 8003d9a <iqGetTimeout+0x5a>
 8003d78:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d1ef      	bne.n	8003d5e <iqGetTimeout+0x1e>
    return MSG_TIMEOUT;
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003d82:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8003d86:	bb33      	cbnz	r3, 8003dd6 <iqGetTimeout+0x96>
 8003d88:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8003d8c:	2a00      	cmp	r2, #0
 8003d8e:	dd22      	ble.n	8003dd6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003d90:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003d94:	f383 8811 	msr	BASEPRI, r3
}
 8003d98:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 8003d9a:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003d9c:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8003da2:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8003da4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8003da6:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8003da8:	bf28      	it	cs
 8003daa:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8003dac:	61a2      	str	r2, [r4, #24]
 8003dae:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8003db0:	bf28      	it	cs
 8003db2:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8003db4:	69e3      	ldr	r3, [r4, #28]
 8003db6:	b10b      	cbz	r3, 8003dbc <iqGetTimeout+0x7c>
    iqp->q_notify(iqp);
 8003db8:	4620      	mov	r0, r4
 8003dba:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003dbc:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8003dc0:	b94b      	cbnz	r3, 8003dd6 <iqGetTimeout+0x96>
 8003dc2:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	dd05      	ble.n	8003dd6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003dca:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003dce:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8003dd2:	4628      	mov	r0, r5
}
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 8003dd6:	4804      	ldr	r0, [pc, #16]	; (8003de8 <iqGetTimeout+0xa8>)
 8003dd8:	f7fd f8da 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#4");
 8003ddc:	4803      	ldr	r0, [pc, #12]	; (8003dec <iqGetTimeout+0xac>)
 8003dde:	f7fd f8d7 	bl	8000f90 <chSysHalt>
 8003de2:	bf00      	nop
 8003de4:	20000de0 	.word	0x20000de0
 8003de8:	08007504 	.word	0x08007504
 8003dec:	080074dc 	.word	0x080074dc

08003df0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	300c      	adds	r0, #12
 8003df6:	f7ff bfa3 	b.w	8003d40 <iqGetTimeout>
 8003dfa:	bf00      	nop
 8003dfc:	0000      	movs	r0, r0
	...

08003e00 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003e00:	300c      	adds	r0, #12
 8003e02:	f7ff bf9d 	b.w	8003d40 <iqGetTimeout>
 8003e06:	bf00      	nop
	...

08003e10 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qnotify_t nfy = iqp->q_notify;
 8003e14:	f8d0 a01c 	ldr.w	sl, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8003e18:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	f000 8089 	beq.w	8003f32 <iqReadTimeout+0x122>
 8003e20:	4690      	mov	r8, r2
 8003e22:	460f      	mov	r7, r1
 8003e24:	4699      	mov	r9, r3
 8003e26:	2230      	movs	r2, #48	; 0x30
 8003e28:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003e2c:	4e42      	ldr	r6, [pc, #264]	; (8003f38 <iqReadTimeout+0x128>)
 8003e2e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8003e32:	430b      	orrs	r3, r1
 8003e34:	d177      	bne.n	8003f26 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	46c3      	mov	fp, r8
 8003e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e3e:	4604      	mov	r4, r0
 8003e40:	9201      	str	r2, [sp, #4]
 8003e42:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003e46:	46b8      	mov	r8, r7
  if (n > iqGetFullI(iqp)) {
 8003e48:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003e4a:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8003e4c:	455a      	cmp	r2, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003e4e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8003e50:	bf34      	ite	cc
 8003e52:	68a5      	ldrcc	r5, [r4, #8]
 8003e54:	465d      	movcs	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8003e56:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8003e58:	42aa      	cmp	r2, r5
 8003e5a:	d85d      	bhi.n	8003f18 <iqReadTimeout+0x108>
  else if (n > s1) {
 8003e5c:	d246      	bcs.n	8003eec <iqReadTimeout+0xdc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003e5e:	4640      	mov	r0, r8
    s2 = n - s1;
 8003e60:	1aaf      	subs	r7, r5, r2
 8003e62:	9202      	str	r2, [sp, #8]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003e64:	f7fc fa6e 	bl	8000344 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8003e68:	9a02      	ldr	r2, [sp, #8]
 8003e6a:	68e1      	ldr	r1, [r4, #12]
 8003e6c:	eb08 0002 	add.w	r0, r8, r2
 8003e70:	463a      	mov	r2, r7
 8003e72:	f7fc fa67 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8003e76:	68e2      	ldr	r2, [r4, #12]
 8003e78:	443a      	add	r2, r7
    iqp->q_rdptr += n;
 8003e7a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8003e7c:	68a2      	ldr	r2, [r4, #8]
 8003e7e:	1b52      	subs	r2, r2, r5
 8003e80:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8003e82:	2d00      	cmp	r5, #0
 8003e84:	d038      	beq.n	8003ef8 <iqReadTimeout+0xe8>
      if (nfy != NULL) {
 8003e86:	f1ba 0f00 	cmp.w	sl, #0
 8003e8a:	d001      	beq.n	8003e90 <iqReadTimeout+0x80>
        nfy(iqp);
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	47d0      	blx	sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003e90:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8003e94:	2a00      	cmp	r2, #0
 8003e96:	d149      	bne.n	8003f2c <iqReadTimeout+0x11c>
 8003e98:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	dd45      	ble.n	8003f2c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003ea0:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8003ea4:	f382 8811 	msr	BASEPRI, r2
 8003ea8:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 8003eaa:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8003eae:	44a8      	add	r8, r5
 8003eb0:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003eb4:	e9d6 2122 	ldrd	r2, r1, [r6, #136]	; 0x88
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	d134      	bne.n	8003f26 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 8003ec2:	f1bb 0f00 	cmp.w	fp, #0
 8003ec6:	d1bf      	bne.n	8003e48 <iqReadTimeout+0x38>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003ec8:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8003ecc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003ed0:	bb62      	cbnz	r2, 8003f2c <iqReadTimeout+0x11c>
 8003ed2:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8003ed6:	2900      	cmp	r1, #0
 8003ed8:	dd28      	ble.n	8003f2c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003eda:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8003ede:	f382 8811 	msr	BASEPRI, r2
}
 8003ee2:	eba8 000b 	sub.w	r0, r8, fp
 8003ee6:	b005      	add	sp, #20
 8003ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003eec:	462a      	mov	r2, r5
 8003eee:	4640      	mov	r0, r8
 8003ef0:	f7fc fa28 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8003ef4:	68e2      	ldr	r2, [r4, #12]
 8003ef6:	e7c0      	b.n	8003e7a <iqReadTimeout+0x6a>
 8003ef8:	68f2      	ldr	r2, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003efa:	f1b9 0f00 	cmp.w	r9, #0
 8003efe:	d0e3      	beq.n	8003ec8 <iqReadTimeout+0xb8>
  p->prev       = qp->prev;
 8003f00:	6861      	ldr	r1, [r4, #4]
 8003f02:	6051      	str	r1, [r2, #4]
  p->next       = qp;
 8003f04:	6014      	str	r4, [r2, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003f06:	2004      	movs	r0, #4
  p->prev->next = p;
 8003f08:	600a      	str	r2, [r1, #0]
  qp->prev      = p;
 8003f0a:	6062      	str	r2, [r4, #4]
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	f7ff fdcf 	bl	8003ab0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d098      	beq.n	8003e48 <iqReadTimeout+0x38>
 8003f16:	e7d7      	b.n	8003ec8 <iqReadTimeout+0xb8>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8003f18:	462a      	mov	r2, r5
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f7fc fa12 	bl	8000344 <memcpy>
    iqp->q_rdptr += n;
 8003f20:	69a2      	ldr	r2, [r4, #24]
 8003f22:	442a      	add	r2, r5
 8003f24:	e7a9      	b.n	8003e7a <iqReadTimeout+0x6a>
    chSysHalt("SV#4");
 8003f26:	4805      	ldr	r0, [pc, #20]	; (8003f3c <iqReadTimeout+0x12c>)
 8003f28:	f7fd f832 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#5");
 8003f2c:	4804      	ldr	r0, [pc, #16]	; (8003f40 <iqReadTimeout+0x130>)
 8003f2e:	f7fd f82f 	bl	8000f90 <chSysHalt>
  osalDbgCheck(n > 0U);
 8003f32:	4804      	ldr	r0, [pc, #16]	; (8003f44 <iqReadTimeout+0x134>)
 8003f34:	f7fd f82c 	bl	8000f90 <chSysHalt>
 8003f38:	20000de0 	.word	0x20000de0
 8003f3c:	080074dc 	.word	0x080074dc
 8003f40:	08007504 	.word	0x08007504
 8003f44:	08007690 	.word	0x08007690
	...

08003f50 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
 8003f54:	300c      	adds	r0, #12
 8003f56:	f7ff bf5b 	b.w	8003e10 <iqReadTimeout>
 8003f5a:	bf00      	nop
 8003f5c:	0000      	movs	r0, r0
	...

08003f60 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003f60:	300c      	adds	r0, #12
 8003f62:	f7ff bf55 	b.w	8003e10 <iqReadTimeout>
 8003f66:	bf00      	nop
	...

08003f70 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	4615      	mov	r5, r2
 8003f74:	2330      	movs	r3, #48	; 0x30
 8003f76:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003f7a:	4f26      	ldr	r7, [pc, #152]	; (8004014 <oqPutTimeout+0xa4>)
 8003f7c:	e9d7 3222 	ldrd	r3, r2, [r7, #136]	; 0x88
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d143      	bne.n	800400c <oqPutTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003f84:	2301      	movs	r3, #1
 8003f86:	4604      	mov	r4, r0
 8003f88:	460e      	mov	r6, r1
 8003f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
}
 8003f8e:	e00a      	b.n	8003fa6 <oqPutTimeout+0x36>
  p->prev       = qp->prev;
 8003f90:	6860      	ldr	r0, [r4, #4]
 8003f92:	4629      	mov	r1, r5
 8003f94:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 8003f98:	6003      	str	r3, [r0, #0]
 8003f9a:	2004      	movs	r0, #4
  qp->prev      = p;
 8003f9c:	6063      	str	r3, [r4, #4]
 8003f9e:	f7ff fd87 	bl	8003ab0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	db06      	blt.n	8003fb4 <oqPutTimeout+0x44>
  while (oqIsFullI(oqp)) {
 8003fa6:	68a3      	ldr	r3, [r4, #8]
 8003fa8:	b983      	cbnz	r3, 8003fcc <oqPutTimeout+0x5c>
 8003faa:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 8003fac:	2d00      	cmp	r5, #0
 8003fae:	d1ef      	bne.n	8003f90 <oqPutTimeout+0x20>
    return MSG_TIMEOUT;
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fb8:	bb2b      	cbnz	r3, 8004006 <oqPutTimeout+0x96>
 8003fba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	dd21      	ble.n	8004006 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003fc6:	f383 8811 	msr	BASEPRI, r3
}
 8003fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  oqp->q_counter--;
 8003fcc:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003fce:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003fd4:	1c53      	adds	r3, r2, #1
 8003fd6:	6163      	str	r3, [r4, #20]
 8003fd8:	7016      	strb	r6, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003fda:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8003fde:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8003fe0:	bf24      	itt	cs
 8003fe2:	68e3      	ldrcs	r3, [r4, #12]
 8003fe4:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8003fe6:	69e3      	ldr	r3, [r4, #28]
 8003fe8:	b10b      	cbz	r3, 8003fee <oqPutTimeout+0x7e>
    oqp->q_notify(oqp);
 8003fea:	4620      	mov	r0, r4
 8003fec:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003fee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003ff2:	b940      	cbnz	r0, 8004006 <oqPutTimeout+0x96>
 8003ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	dd04      	ble.n	8004006 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003ffc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8004000:	f380 8811 	msr	BASEPRI, r0
}
 8004004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 8004006:	4804      	ldr	r0, [pc, #16]	; (8004018 <oqPutTimeout+0xa8>)
 8004008:	f7fc ffc2 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#4");
 800400c:	4803      	ldr	r0, [pc, #12]	; (800401c <oqPutTimeout+0xac>)
 800400e:	f7fc ffbf 	bl	8000f90 <chSysHalt>
 8004012:	bf00      	nop
 8004014:	20000de0 	.word	0x20000de0
 8004018:	08007504 	.word	0x08007504
 800401c:	080074dc 	.word	0x080074dc

08004020 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	3030      	adds	r0, #48	; 0x30
 8004026:	f7ff bfa3 	b.w	8003f70 <oqPutTimeout>
 800402a:	bf00      	nop
 800402c:	0000      	movs	r0, r0
	...

08004030 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8004030:	3030      	adds	r0, #48	; 0x30
 8004032:	f7ff bf9d 	b.w	8003f70 <oqPutTimeout>
 8004036:	bf00      	nop
	...

08004040 <_out_char>:
  if (character) {
 8004040:	4601      	mov	r1, r0
 8004042:	b900      	cbnz	r0, 8004046 <_out_char+0x6>
}
 8004044:	4770      	bx	lr
    chMtxUnlock(&mutex_bsp2);
    return formatted_bytes;
}

void _putchar(char character){
  sdPut(&SD2, character);
 8004046:	4802      	ldr	r0, [pc, #8]	; (8004050 <_out_char+0x10>)
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	f7ff bf90 	b.w	8003f70 <oqPutTimeout>
 8004050:	20000928 	.word	0x20000928
	...

08004060 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8004060:	b510      	push	{r4, lr}
 8004062:	2330      	movs	r3, #48	; 0x30
 8004064:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004068:	4c10      	ldr	r4, [pc, #64]	; (80040ac <chThdSleep+0x4c>)
 800406a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800406e:	4313      	orrs	r3, r2
 8004070:	d113      	bne.n	800409a <chThdSleep+0x3a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004072:	2301      	movs	r3, #1
 8004074:	4601      	mov	r1, r0
 8004076:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 800407a:	b1a0      	cbz	r0, 80040a6 <chThdSleep+0x46>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800407c:	2008      	movs	r0, #8
 800407e:	f7ff fd17 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004082:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004086:	b95b      	cbnz	r3, 80040a0 <chThdSleep+0x40>
 8004088:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800408c:	2a00      	cmp	r2, #0
 800408e:	dd07      	ble.n	80040a0 <chThdSleep+0x40>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004090:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004094:	f383 8811 	msr	BASEPRI, r3
}
 8004098:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 800409a:	4805      	ldr	r0, [pc, #20]	; (80040b0 <chThdSleep+0x50>)
 800409c:	f7fc ff78 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#5");
 80040a0:	4804      	ldr	r0, [pc, #16]	; (80040b4 <chThdSleep+0x54>)
 80040a2:	f7fc ff75 	bl	8000f90 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 80040a6:	4804      	ldr	r0, [pc, #16]	; (80040b8 <chThdSleep+0x58>)
 80040a8:	f7fc ff72 	bl	8000f90 <chSysHalt>
 80040ac:	20000de0 	.word	0x20000de0
 80040b0:	080074dc 	.word	0x080074dc
 80040b4:	08007504 	.word	0x08007504
 80040b8:	08007664 	.word	0x08007664
 80040bc:	00000000 	.word	0x00000000

080040c0 <u8x8_gpio_and_delay_stm32>:
//#warning todo adapt to I2C2 pins
uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  (void)arg_ptr; //to remove unused parameter warning

  switch(msg)
 80040c0:	3928      	subs	r1, #40	; 0x28
{
 80040c2:	b510      	push	{r4, lr}
  switch(msg)
 80040c4:	2925      	cmp	r1, #37	; 0x25
 80040c6:	d819      	bhi.n	80040fc <u8x8_gpio_and_delay_stm32+0x3c>
 80040c8:	e8df f001 	tbb	[pc, r1]
 80040cc:	16161316 	.word	0x16161316
 80040d0:	18181d16 	.word	0x18181d16
 80040d4:	18181818 	.word	0x18181818
 80040d8:	18181818 	.word	0x18181818
 80040dc:	18181818 	.word	0x18181818
 80040e0:	18181818 	.word	0x18181818
 80040e4:	18181818 	.word	0x18181818
 80040e8:	18181818 	.word	0x18181818
 80040ec:	18181818 	.word	0x18181818
 80040f0:	3c33      	.short	0x3c33
  case U8X8_MSG_DELAY_100NANO:
    /* not used at the moment */
    break;

  case U8X8_MSG_DELAY_MILLI:
    chThdSleepMilliseconds(1);
 80040f2:	200a      	movs	r0, #10
 80040f4:	f7ff ffb4 	bl	8004060 <chThdSleep>
  default:
    u8x8_SetGPIOResult(u8x8, 1);
    break;
  }
  return 1;
}
 80040f8:	2001      	movs	r0, #1
 80040fa:	bd10      	pop	{r4, pc}
    u8x8_SetGPIOResult(u8x8, 1);
 80040fc:	2301      	movs	r3, #1
 80040fe:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 8004102:	2001      	movs	r0, #1
 8004104:	bd10      	pop	{r4, pc}
    if(arg_int == 1){
 8004106:	2a01      	cmp	r2, #1
 *
 * @notapi
 */
void gpt_lld_polled_delay(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 8004108:	4822      	ldr	r0, [pc, #136]	; (8004194 <u8x8_gpio_and_delay_stm32+0xd4>)
 800410a:	d030      	beq.n	800416e <u8x8_gpio_and_delay_stm32+0xae>
 800410c:	68c2      	ldr	r2, [r0, #12]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 800410e:	2301      	movs	r3, #1
  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 8004110:	2402      	movs	r4, #2
 8004112:	6014      	str	r4, [r2, #0]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8004114:	2100      	movs	r1, #0
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8004116:	62d3      	str	r3, [r2, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8004118:	6153      	str	r3, [r2, #20]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800411a:	230d      	movs	r3, #13
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 800411c:	6111      	str	r1, [r2, #16]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800411e:	6013      	str	r3, [r2, #0]
  while (!(gptp->tim->SR & STM32_TIM_SR_UIF))
 8004120:	6913      	ldr	r3, [r2, #16]
 8004122:	07db      	lsls	r3, r3, #31
 8004124:	d5fc      	bpl.n	8004120 <u8x8_gpio_and_delay_stm32+0x60>
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
  gpt_lld_polled_delay(gptp, interval);
  gptp->state = GPT_READY;
 8004126:	2302      	movs	r3, #2
    ;
  gptp->tim->SR = 0U;                           /* Clear pending IRQs.      */
 8004128:	2100      	movs	r1, #0
 800412a:	7003      	strb	r3, [r0, #0]
 800412c:	6111      	str	r1, [r2, #16]
}
 800412e:	2001      	movs	r0, #1
 8004130:	bd10      	pop	{r4, pc}
      palClearPad(GPIOB, 8);
 8004132:	4819      	ldr	r0, [pc, #100]	; (8004198 <u8x8_gpio_and_delay_stm32+0xd8>)
    if ( arg_int == 0 )
 8004134:	b97a      	cbnz	r2, 8004156 <u8x8_gpio_and_delay_stm32+0x96>
      palClearPad(GPIOB, 8);
 8004136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800413a:	8341      	strh	r1, [r0, #26]
      palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
 800413c:	2201      	movs	r2, #1
 800413e:	f7fc fea7 	bl	8000e90 <_pal_lld_setgroupmode>
 8004142:	e7d9      	b.n	80040f8 <u8x8_gpio_and_delay_stm32+0x38>
      palClearPad(GPIOB, 9);
 8004144:	4814      	ldr	r0, [pc, #80]	; (8004198 <u8x8_gpio_and_delay_stm32+0xd8>)
    if ( arg_int == 0 )
 8004146:	b962      	cbnz	r2, 8004162 <u8x8_gpio_and_delay_stm32+0xa2>
      palClearPad(GPIOB, 9);
 8004148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800414c:	8341      	strh	r1, [r0, #26]
      palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);
 800414e:	2201      	movs	r2, #1
 8004150:	f7fc fe9e 	bl	8000e90 <_pal_lld_setgroupmode>
 8004154:	e7d0      	b.n	80040f8 <u8x8_gpio_and_delay_stm32+0x38>
      palSetPadMode(GPIOB, 8, PAL_MODE_INPUT);
 8004156:	2200      	movs	r2, #0
 8004158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800415c:	f7fc fe98 	bl	8000e90 <_pal_lld_setgroupmode>
 8004160:	e7ca      	b.n	80040f8 <u8x8_gpio_and_delay_stm32+0x38>
      palSetPadMode(GPIOB, 9, PAL_MODE_INPUT);
 8004162:	2200      	movs	r2, #0
 8004164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004168:	f7fc fe92 	bl	8000e90 <_pal_lld_setgroupmode>
 800416c:	e7c4      	b.n	80040f8 <u8x8_gpio_and_delay_stm32+0x38>
  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 800416e:	68c1      	ldr	r1, [r0, #12]
 8004170:	2402      	movs	r4, #2
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8004172:	2309      	movs	r3, #9
  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 8004174:	600c      	str	r4, [r1, #0]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8004176:	62cb      	str	r3, [r1, #44]	; 0x2c
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8004178:	2400      	movs	r4, #0
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800417a:	230d      	movs	r3, #13
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 800417c:	614a      	str	r2, [r1, #20]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 800417e:	610c      	str	r4, [r1, #16]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8004180:	600b      	str	r3, [r1, #0]
  while (!(gptp->tim->SR & STM32_TIM_SR_UIF))
 8004182:	690b      	ldr	r3, [r1, #16]
 8004184:	07da      	lsls	r2, r3, #31
 8004186:	d5fc      	bpl.n	8004182 <u8x8_gpio_and_delay_stm32+0xc2>
  gptp->tim->SR = 0U;                           /* Clear pending IRQs.      */
 8004188:	2200      	movs	r2, #0
 800418a:	2302      	movs	r3, #2
 800418c:	610a      	str	r2, [r1, #16]
 800418e:	7003      	strb	r3, [r0, #0]
}
 8004190:	e7b2      	b.n	80040f8 <u8x8_gpio_and_delay_stm32+0x38>
 8004192:	bf00      	nop
 8004194:	20000830 	.word	0x20000830
 8004198:	40020400 	.word	0x40020400
 800419c:	00000000 	.word	0x00000000

080041a0 <adf_write_reg>:
 *
 * @api
 */
//void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {

void adf_write_reg(uint32_t data){
 80041a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    spiSend(&SPID2, 1, &temp);
  }
  spiUnselect(&SPID2);            // Slave Select deassertion.
  */
#warning using bitbang SPI
  palClearPad(GPIOB, GPIOB_ADF_DATA);
 80041a4:	4dcd      	ldr	r5, [pc, #820]	; (80044dc <adf_write_reg+0x33c>)
 80041a6:	4cce      	ldr	r4, [pc, #824]	; (80044e0 <adf_write_reg+0x340>)
 80041a8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 80041ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  //myprintf("Bitbang adf_write_reg: 0x%08X\n", data);
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 80041b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  palClearPad(GPIOB, GPIOB_ADF_DATA);
 80041b4:	836f      	strh	r7, [r5, #26]
void adf_write_reg(uint32_t data){
 80041b6:	4606      	mov	r6, r0
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 80041b8:	836a      	strh	r2, [r5, #26]
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 80041ba:	f04f 0a18 	mov.w	sl, #24
 80041be:	836b      	strh	r3, [r5, #26]
 80041c0:	f04f 0830 	mov.w	r8, #48	; 0x30
   for(int i=3; i>=0; --i){
     uint8_t temp = data >> (i * 8);
 80041c4:	fa26 f90a 	lsr.w	r9, r6, sl
     //myprintf("adf_write_ byte: 0x%X\n",temp);

     //MSB first
     if(temp&0x80)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80041c8:	f019 0f80 	tst.w	r9, #128	; 0x80
 80041cc:	bf14      	ite	ne
 80041ce:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 80041d0:	836f      	strheq	r7, [r5, #26]
 80041d2:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80041d6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80041da:	4313      	orrs	r3, r2
 80041dc:	f040 817b 	bne.w	80044d6 <adf_write_reg+0x336>
  oip->dbg.lock_cnt = (cnt_t)1;
 80041e0:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80041e2:	210a      	movs	r1, #10
 80041e4:	2008      	movs	r0, #8
 80041e6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80041ea:	f7ff fc61 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80041ee:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 816c 	bne.w	80044d0 <adf_write_reg+0x330>
 80041f8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	f340 8167 	ble.w	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004202:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004206:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 800420a:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 800420e:	f8a5 b018 	strh.w	fp, [r5, #24]
     chThdSleepMilliseconds(1);
 8004212:	200a      	movs	r0, #10
 8004214:	f7ff ff24 	bl	8004060 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004218:	f019 0f40 	tst.w	r9, #64	; 0x40
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 800421c:	f8a5 b01a 	strh.w	fp, [r5, #26]
     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004220:	fa5f fb89 	uxtb.w	fp, r9
 8004224:	bf14      	ite	ne
 8004226:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004228:	836f      	strheq	r7, [r5, #26]
 800422a:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800422e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004232:	4313      	orrs	r3, r2
 8004234:	f040 814f 	bne.w	80044d6 <adf_write_reg+0x336>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004238:	2301      	movs	r3, #1
 800423a:	210a      	movs	r1, #10
 800423c:	2008      	movs	r0, #8
 800423e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004242:	f7ff fc35 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004246:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 8140 	bne.w	80044d0 <adf_write_reg+0x330>
 8004250:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004254:	2a00      	cmp	r2, #0
 8004256:	f340 813b 	ble.w	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 800425a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800425e:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004262:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 8004266:	f8a5 9018 	strh.w	r9, [r5, #24]
     chThdSleepMilliseconds(1);
 800426a:	200a      	movs	r0, #10
 800426c:	f7ff fef8 	bl	8004060 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004270:	f01b 0f20 	tst.w	fp, #32
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004274:	f8a5 901a 	strh.w	r9, [r5, #26]
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004278:	bf14      	ite	ne
 800427a:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 800427c:	836f      	strheq	r7, [r5, #26]
 800427e:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004282:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004286:	4313      	orrs	r3, r2
 8004288:	f040 8125 	bne.w	80044d6 <adf_write_reg+0x336>
  oip->dbg.lock_cnt = (cnt_t)1;
 800428c:	f04f 0901 	mov.w	r9, #1
 8004290:	210a      	movs	r1, #10
 8004292:	2008      	movs	r0, #8
 8004294:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
 8004298:	f7ff fc0a 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800429c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 8115 	bne.w	80044d0 <adf_write_reg+0x330>
 80042a6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	f340 8110 	ble.w	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 80042b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80042b4:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 80042b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042bc:	832a      	strh	r2, [r5, #24]
 80042be:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80042c2:	e9d4 3122 	ldrd	r3, r1, [r4, #136]	; 0x88
 80042c6:	430b      	orrs	r3, r1
 80042c8:	f040 8105 	bne.w	80044d6 <adf_write_reg+0x336>
 80042cc:	210a      	movs	r1, #10
 80042ce:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 80042d0:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
 80042d4:	f7ff fbec 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80042d8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 80f7 	bne.w	80044d0 <adf_write_reg+0x330>
 80042e2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80042e6:	2900      	cmp	r1, #0
 80042e8:	f340 80f2 	ble.w	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 80042ec:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80042f0:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 80042f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000

     if(temp&0x10)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80042f8:	f01b 0f10 	tst.w	fp, #16
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 80042fc:	836a      	strh	r2, [r5, #26]
     if(temp&0x10)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80042fe:	bf14      	ite	ne
 8004300:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004302:	836f      	strheq	r7, [r5, #26]
 8004304:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004308:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800430c:	4313      	orrs	r3, r2
 800430e:	f040 80e2 	bne.w	80044d6 <adf_write_reg+0x336>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004312:	f04f 0901 	mov.w	r9, #1
 8004316:	210a      	movs	r1, #10
 8004318:	2008      	movs	r0, #8
 800431a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
 800431e:	f7ff fbc7 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004322:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 80d2 	bne.w	80044d0 <adf_write_reg+0x330>
 800432c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004330:	2a00      	cmp	r2, #0
 8004332:	f340 80cd 	ble.w	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004336:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800433a:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 800433e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004342:	832a      	strh	r2, [r5, #24]
 8004344:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004348:	e9d4 3122 	ldrd	r3, r1, [r4, #136]	; 0x88
 800434c:	430b      	orrs	r3, r1
 800434e:	f040 80c2 	bne.w	80044d6 <adf_write_reg+0x336>
 8004352:	210a      	movs	r1, #10
 8004354:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8004356:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
 800435a:	f7ff fba9 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800435e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 80b4 	bne.w	80044d0 <adf_write_reg+0x330>
 8004368:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800436c:	2900      	cmp	r1, #0
 800436e:	f340 80af 	ble.w	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004372:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004376:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 800437a:	f44f 5200 	mov.w	r2, #8192	; 0x2000

     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 800437e:	f01b 0f08 	tst.w	fp, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004382:	836a      	strh	r2, [r5, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004384:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004388:	bf14      	ite	ne
 800438a:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 800438c:	836f      	strheq	r7, [r5, #26]
     chThdSleepMilliseconds(1);
 800438e:	200a      	movs	r0, #10
 8004390:	f7ff fe66 	bl	8004060 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004394:	f8a5 9018 	strh.w	r9, [r5, #24]
     chThdSleepMilliseconds(1);
 8004398:	200a      	movs	r0, #10
 800439a:	f7ff fe61 	bl	8004060 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 800439e:	f01b 0f04 	tst.w	fp, #4
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 80043a2:	f8a5 901a 	strh.w	r9, [r5, #26]
     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80043a6:	bf14      	ite	ne
 80043a8:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 80043aa:	836f      	strheq	r7, [r5, #26]
 80043ac:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80043b0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f040 808e 	bne.w	80044d6 <adf_write_reg+0x336>
  oip->dbg.lock_cnt = (cnt_t)1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	210a      	movs	r1, #10
 80043be:	2008      	movs	r0, #8
 80043c0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80043c4:	f7ff fb74 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80043c8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d17f      	bne.n	80044d0 <adf_write_reg+0x330>
 80043d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80043d4:	2a00      	cmp	r2, #0
 80043d6:	dd7b      	ble.n	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 80043d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80043dc:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 80043e0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 80043e4:	f8a5 9018 	strh.w	r9, [r5, #24]
     chThdSleepMilliseconds(1);
 80043e8:	200a      	movs	r0, #10
 80043ea:	f7ff fe39 	bl	8004060 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80043ee:	f01b 0f02 	tst.w	fp, #2
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 80043f2:	f8a5 901a 	strh.w	r9, [r5, #26]
     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 80043f6:	bf14      	ite	ne
 80043f8:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 80043fa:	836f      	strheq	r7, [r5, #26]
 80043fc:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004400:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8004404:	4313      	orrs	r3, r2
 8004406:	d166      	bne.n	80044d6 <adf_write_reg+0x336>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004408:	f04f 0901 	mov.w	r9, #1
 800440c:	210a      	movs	r1, #10
 800440e:	2008      	movs	r0, #8
 8004410:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
 8004414:	f7ff fb4c 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004418:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800441c:	2b00      	cmp	r3, #0
 800441e:	d157      	bne.n	80044d0 <adf_write_reg+0x330>
 8004420:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004424:	2a00      	cmp	r2, #0
 8004426:	dd53      	ble.n	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004428:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800442c:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004434:	832a      	strh	r2, [r5, #24]
 8004436:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800443a:	e9d4 3122 	ldrd	r3, r1, [r4, #136]	; 0x88
 800443e:	430b      	orrs	r3, r1
 8004440:	d149      	bne.n	80044d6 <adf_write_reg+0x336>
 8004442:	210a      	movs	r1, #10
 8004444:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8004446:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
 800444a:	f7ff fb31 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800444e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004452:	2b00      	cmp	r3, #0
 8004454:	d13c      	bne.n	80044d0 <adf_write_reg+0x330>
 8004456:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800445a:	2900      	cmp	r1, #0
 800445c:	dd38      	ble.n	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 800445e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004462:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004466:	f44f 5200 	mov.w	r2, #8192	; 0x2000

     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 800446a:	f01b 0f01 	tst.w	fp, #1
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 800446e:	836a      	strh	r2, [r5, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8004470:	f04f 000a 	mov.w	r0, #10
     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004474:	bf14      	ite	ne
 8004476:	832f      	strhne	r7, [r5, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004478:	836f      	strheq	r7, [r5, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 800447a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 800447e:	f7ff fdef 	bl	8004060 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004482:	f8a5 9018 	strh.w	r9, [r5, #24]
 8004486:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800448a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800448e:	4313      	orrs	r3, r2
 8004490:	d121      	bne.n	80044d6 <adf_write_reg+0x336>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004492:	2301      	movs	r3, #1
 8004494:	210a      	movs	r1, #10
 8004496:	2008      	movs	r0, #8
 8004498:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800449c:	f7ff fb08 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80044a0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80044a4:	b9a3      	cbnz	r3, 80044d0 <adf_write_reg+0x330>
 80044a6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	dd10      	ble.n	80044d0 <adf_write_reg+0x330>
  oip->dbg.lock_cnt = (cnt_t)0;
 80044ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80044b2:	f383 8811 	msr	BASEPRI, r3
   for(int i=3; i>=0; --i){
 80044b6:	f1aa 0a08 	sub.w	sl, sl, #8
 80044ba:	f11a 0f08 	cmn.w	sl, #8
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 80044be:	f8a5 901a 	strh.w	r9, [r5, #26]
   for(int i=3; i>=0; --i){
 80044c2:	f47f ae7f 	bne.w	80041c4 <adf_write_reg+0x24>
   }
   palSetPad(GPIOB, GPIOB_ADF_LE);             // Slave Select deassertion.
 80044c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ca:	832b      	strh	r3, [r5, #24]
}
 80044cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chSysHalt("SV#5");
 80044d0:	4804      	ldr	r0, [pc, #16]	; (80044e4 <adf_write_reg+0x344>)
 80044d2:	f7fc fd5d 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#4");
 80044d6:	4804      	ldr	r0, [pc, #16]	; (80044e8 <adf_write_reg+0x348>)
 80044d8:	f7fc fd5a 	bl	8000f90 <chSysHalt>
 80044dc:	40020400 	.word	0x40020400
 80044e0:	20000de0 	.word	0x20000de0
 80044e4:	08007504 	.word	0x08007504
 80044e8:	080074dc 	.word	0x080074dc
 80044ec:	00000000 	.word	0x00000000

080044f0 <adf_config.constprop.0>:
//n = 23,24,..,4095 (*2 = 46,48,..,8190)
//muxout/2 is used except when r = 1
//if r = 0: n divider is used (should be usable above 10 MHz input)
//testmode = 1: muxout high, testmode = 2: muxout low

void adf_config(uint32_t div_n, uint32_t div_r, uint8_t testmode) {
 80044f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t ADF4156_reg[5] = {0,1,2,3,4}; //reg addresses

  if(div_n > 8190) div_n = 8190;
  if(div_r > 64) div_r = 64;

  uint32_t n = (div_n/2) & 0x0FFF;
 80044f2:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80044f6:	4298      	cmp	r0, r3
 80044f8:	bf28      	it	cs
 80044fa:	4618      	movcs	r0, r3
 80044fc:	0843      	lsrs	r3, r0, #1

  //R1 -----------------------------------------------------------
  ADF4156_reg[1] |= 1 << 3; // recommended phase value if unused

  //R2 -----------------------------------------------------------
  if(n > 75){
 80044fe:	4a0f      	ldr	r2, [pc, #60]	; (800453c <adf_config.constprop.0+0x4c>)
  ADF4156_reg[0] |= n << 15; //N divider, 12 bit
 8004500:	2b17      	cmp	r3, #23

  //R4 -----------------------------------------------------------
  //default: all 0

  //Programming sequence R4,R3,..,R0 (write to R0 transfers double buffered settings)
  adf_write_reg(ADF4156_reg[4]);
 8004502:	f04f 0004 	mov.w	r0, #4
  if(n > 75){
 8004506:	f248 0512 	movw	r5, #32786	; 0x8012
  ADF4156_reg[0] |= n << 15; //N divider, 12 bit
 800450a:	461c      	mov	r4, r3
 800450c:	bf38      	it	cc
 800450e:	2417      	movcc	r4, #23
  if(n > 75){
 8004510:	2b4b      	cmp	r3, #75	; 0x4b
 8004512:	bf88      	it	hi
 8004514:	4615      	movhi	r5, r2
  adf_write_reg(ADF4156_reg[4]);
 8004516:	f7ff fe43 	bl	80041a0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 800451a:	2013      	movs	r0, #19
 800451c:	f7ff fe40 	bl	80041a0 <adf_write_reg>
  ADF4156_reg[0] |= n << 15; //N divider, 12 bit
 8004520:	03e4      	lsls	r4, r4, #15
  adf_write_reg(ADF4156_reg[2]);
 8004522:	4628      	mov	r0, r5
 8004524:	f7ff fe3c 	bl	80041a0 <adf_write_reg>
  ADF4156_reg[0] |= n << 15; //N divider, 12 bit
 8004528:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
  adf_write_reg(ADF4156_reg[1]);
 800452c:	2009      	movs	r0, #9
 800452e:	f7ff fe37 	bl	80041a0 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 8004532:	4620      	mov	r0, r4
                                     PIN_AFIO_AF(GPIOB_ADF_LE, 0U) |         \
                                     PIN_AFIO_AF(GPIOB_ADF_CLK, 5U) |         \
                                     PIN_AFIO_AF(GPIOB_LED1, 0U) |         \
                                     PIN_AFIO_AF(GPIOB_ADF_DATA, 5U))
   */
}
 8004534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  adf_write_reg(ADF4156_reg[0]);
 8004538:	f7ff be32 	b.w	80041a0 <adf_write_reg>
 800453c:	00108012 	.word	0x00108012

08004540 <__port_irq_epilogue.part.0>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8004540:	b410      	push	{r4}
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8004542:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004546:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 800454a:	3b68      	subs	r3, #104	; 0x68

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 800454c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <__port_irq_epilogue.part.0+0x38>)
    ectxp->xpsr = 0x01000000U;
 8004552:	61d9      	str	r1, [r3, #28]
    ectxp->fpscr = FPU->FPDSCR;
 8004554:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004558:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 800455c:	4907      	ldr	r1, [pc, #28]	; (800457c <__port_irq_epilogue.part.0+0x3c>)

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 800455e:	4a08      	ldr	r2, [pc, #32]	; (8004580 <__port_irq_epilogue.part.0+0x40>)
 8004560:	6808      	ldr	r0, [r1, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8004562:	68c9      	ldr	r1, [r1, #12]
    if (chSchIsPreemptionRequired()) {
 8004564:	6884      	ldr	r4, [r0, #8]
 8004566:	6888      	ldr	r0, [r1, #8]
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8004568:	4906      	ldr	r1, [pc, #24]	; (8004584 <__port_irq_epilogue.part.0+0x44>)
 800456a:	4284      	cmp	r4, r0
 800456c:	bf88      	it	hi
 800456e:	460a      	movhi	r2, r1
 8004570:	619a      	str	r2, [r3, #24]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8004572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000ef00 	.word	0xe000ef00
 800457c:	20000de0 	.word	0x20000de0
 8004580:	0800033e 	.word	0x0800033e
 8004584:	08000333 	.word	0x08000333
	...

08004590 <u8x8_byte_i2c>:
  switch(msg)
 8004590:	3914      	subs	r1, #20
{
 8004592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004596:	4604      	mov	r4, r0
  switch(msg)
 8004598:	290c      	cmp	r1, #12
 800459a:	d80e      	bhi.n	80045ba <u8x8_byte_i2c+0x2a>
 800459c:	e8df f011 	tbh	[pc, r1, lsl #1]
 80045a0:	000d008a 	.word	0x000d008a
 80045a4:	006e000d 	.word	0x006e000d
 80045a8:	00100084 	.word	0x00100084
 80045ac:	000d000d 	.word	0x000d000d
 80045b0:	000d000d 	.word	0x000d000d
 80045b4:	000d000d 	.word	0x000d000d
 80045b8:	0102      	.short	0x0102
    return 0;
 80045ba:	2000      	movs	r0, #0
}
 80045bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    i2cMasterTransmitTimeout(&I2CD2, u8x8_GetI2CAddress(u8x8) >> 1, buffer, buf_idx, NULL, 0, TIME_INFINITE);
 80045c0:	4ba0      	ldr	r3, [pc, #640]	; (8004844 <u8x8_byte_i2c+0x2b4>)
 80045c2:	7819      	ldrb	r1, [r3, #0]
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) &&
 80045c4:	2900      	cmp	r1, #0
 80045c6:	f000 80f0 	beq.w	80047aa <u8x8_byte_i2c+0x21a>
 80045ca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80045ce:	2230      	movs	r2, #48	; 0x30
 80045d0:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80045d4:	4d9c      	ldr	r5, [pc, #624]	; (8004848 <u8x8_byte_i2c+0x2b8>)
 80045d6:	e9d5 3622 	ldrd	r3, r6, [r5, #136]	; 0x88
 80045da:	4333      	orrs	r3, r6
 80045dc:	d14b      	bne.n	8004676 <u8x8_byte_i2c+0xe6>
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 80045de:	4e9b      	ldr	r6, [pc, #620]	; (800484c <u8x8_byte_i2c+0x2bc>)
  oip->dbg.lock_cnt = (cnt_t)0;
 80045e0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 80045e4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80045e8:	8430      	strh	r0, [r6, #32]
  i2cp->state = I2C_ACTIVE_TX;
 80045ea:	2003      	movs	r0, #3
  I2C_TypeDef *dp = i2cp->i2c;
 80045ec:	6b77      	ldr	r7, [r6, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 80045ee:	60b3      	str	r3, [r6, #8]
  i2cp->state = I2C_ACTIVE_TX;
 80045f0:	7030      	strb	r0, [r6, #0]
 80045f2:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80045f6:	6b30      	ldr	r0, [r6, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 80045f8:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8004854 <u8x8_byte_i2c+0x2c4>
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80045fc:	f8d0 e000 	ldr.w	lr, [r0]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8004600:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004602:	f8d0 c000 	ldr.w	ip, [r0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8004606:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8004608:	f8ce 0000 	str.w	r0, [lr]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800460c:	6a70      	ldr	r0, [r6, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 800460e:	f8ce 800c 	str.w	r8, [lr, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8004612:	f8ce 1004 	str.w	r1, [lr, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8004616:	f8cc 0000 	str.w	r0, [ip]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800461a:	f8cc 300c 	str.w	r3, [ip, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 800461e:	f8cc 3004 	str.w	r3, [ip, #4]
  return (systime_t)STM32_ST_TIM->CNT;
 8004622:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8004880 <u8x8_byte_i2c+0x2f0>
 8004626:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
 800462a:	b289      	uxth	r1, r1
 800462c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004630:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 8004634:	b9f8      	cbnz	r0, 8004676 <u8x8_byte_i2c+0xe6>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004636:	f04f 0e01 	mov.w	lr, #1
  oip->dbg.lock_cnt = (cnt_t)0;
 800463a:	4680      	mov	r8, r0
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800463c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004640:	b9cb      	cbnz	r3, 8004676 <u8x8_byte_i2c+0xe6>
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8004642:	69bb      	ldr	r3, [r7, #24]
  oip->dbg.lock_cnt = (cnt_t)1;
 8004644:	f8c5 e08c 	str.w	lr, [r5, #140]	; 0x8c
 8004648:	079b      	lsls	r3, r3, #30
 800464a:	d403      	bmi.n	8004654 <u8x8_byte_i2c+0xc4>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	059b      	lsls	r3, r3, #22
 8004650:	f140 8118 	bpl.w	8004884 <u8x8_byte_i2c+0x2f4>
 8004654:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8004658:	1a5b      	subs	r3, r3, r1
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 800465a:	b29b      	uxth	r3, r3
 800465c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004660:	d271      	bcs.n	8004746 <u8x8_byte_i2c+0x1b6>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004662:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
 8004666:	f388 8811 	msr	BASEPRI, r8
 800466a:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800466e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0e2      	beq.n	800463c <u8x8_byte_i2c+0xac>
    chSysHalt("SV#4");
 8004676:	4876      	ldr	r0, [pc, #472]	; (8004850 <u8x8_byte_i2c+0x2c0>)
 8004678:	f7fc fc8a 	bl	8000f90 <chSysHalt>
    while( arg_int > 0 )
 800467c:	2a00      	cmp	r2, #0
 800467e:	f000 8091 	beq.w	80047a4 <u8x8_byte_i2c+0x214>
 8004682:	4f70      	ldr	r7, [pc, #448]	; (8004844 <u8x8_byte_i2c+0x2b4>)
 8004684:	4d73      	ldr	r5, [pc, #460]	; (8004854 <u8x8_byte_i2c+0x2c4>)
 8004686:	f897 c000 	ldrb.w	ip, [r7]
 800468a:	189e      	adds	r6, r3, r2
 800468c:	ebac 0403 	sub.w	r4, ip, r3
      buffer[buf_idx++] = *data;
 8004690:	1919      	adds	r1, r3, r4
 8004692:	7818      	ldrb	r0, [r3, #0]
 8004694:	b2c9      	uxtb	r1, r1
      data++;
 8004696:	3301      	adds	r3, #1
    while( arg_int > 0 )
 8004698:	429e      	cmp	r6, r3
      buffer[buf_idx++] = *data;
 800469a:	5468      	strb	r0, [r5, r1]
    while( arg_int > 0 )
 800469c:	d1f8      	bne.n	8004690 <u8x8_byte_i2c+0x100>
      buffer[buf_idx++] = *data;
 800469e:	4462      	add	r2, ip
 80046a0:	703a      	strb	r2, [r7, #0]
  return 1;
 80046a2:	2001      	movs	r0, #1
}
 80046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf_idx = 0;
 80046a8:	4b66      	ldr	r3, [pc, #408]	; (8004844 <u8x8_byte_i2c+0x2b4>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
  return 1;
 80046ae:	2001      	movs	r0, #1
}
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b4:	2330      	movs	r3, #48	; 0x30
 80046b6:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80046ba:	4d63      	ldr	r5, [pc, #396]	; (8004848 <u8x8_byte_i2c+0x2b8>)
 80046bc:	e9d5 2322 	ldrd	r2, r3, [r5, #136]	; 0x88
 80046c0:	431a      	orrs	r2, r3
 80046c2:	d1d8      	bne.n	8004676 <u8x8_byte_i2c+0xe6>
  i2cp->config = config;
 80046c4:	4e61      	ldr	r6, [pc, #388]	; (800484c <u8x8_byte_i2c+0x2bc>)
 80046c6:	4964      	ldr	r1, [pc, #400]	; (8004858 <u8x8_byte_i2c+0x2c8>)
  if (i2cp->state == I2C_STOP) {
 80046c8:	7833      	ldrb	r3, [r6, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 80046ca:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80046cc:	6071      	str	r1, [r6, #4]
  oip->dbg.lock_cnt = (cnt_t)1;
 80046ce:	2001      	movs	r0, #1
  if (i2cp->state == I2C_STOP) {
 80046d0:	4283      	cmp	r3, r0
 80046d2:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
 80046d6:	d06b      	beq.n	80047b0 <u8x8_byte_i2c+0x220>
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80046d8:	e9d6 800b 	ldrd	r8, r0, [r6, #44]	; 0x2c
 80046dc:	6801      	ldr	r1, [r0, #0]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80046de:	f8d8 7000 	ldr.w	r7, [r8]
 80046e2:	f104 0310 	add.w	r3, r4, #16
 80046e6:	60bb      	str	r3, [r7, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80046e8:	608b      	str	r3, [r1, #8]
  dp->CR1 = I2C_CR1_SWRST;
 80046ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ee:	6023      	str	r3, [r4, #0]
  dp->CR1 = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	6023      	str	r3, [r4, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80046f4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80046f8:	6063      	str	r3, [r4, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80046fa:	6863      	ldr	r3, [r4, #4]
 80046fc:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8004700:	400b      	ands	r3, r1
 8004702:	6063      	str	r3, [r4, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8004704:	6863      	ldr	r3, [r4, #4]
 8004706:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 800470a:	6063      	str	r3, [r4, #4]
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 800470c:	230f      	movs	r3, #15
 800470e:	6223      	str	r3, [r4, #32]
  dp->CCR = regCCR;
 8004710:	f248 032a 	movw	r3, #32810	; 0x802a
 8004714:	61e3      	str	r3, [r4, #28]
  regCR1 = dp->CR1;
 8004716:	6821      	ldr	r1, [r4, #0]
  dp->CR1 = regCR1;
 8004718:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 800471c:	400b      	ands	r3, r1
 800471e:	6023      	str	r3, [r4, #0]
  dp->CR1 |= I2C_CR1_PE;
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	6023      	str	r3, [r4, #0]
    i2cp->state = I2C_READY;
 8004728:	2302      	movs	r3, #2
 800472a:	7033      	strb	r3, [r6, #0]
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800472c:	2a00      	cmp	r2, #0
 800472e:	f040 8083 	bne.w	8004838 <u8x8_byte_i2c+0x2a8>
 8004732:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004736:	2b00      	cmp	r3, #0
 8004738:	dd7e      	ble.n	8004838 <u8x8_byte_i2c+0x2a8>
  oip->dbg.lock_cnt = (cnt_t)0;
 800473a:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 800473e:	f382 8811 	msr	BASEPRI, r2
  return 1;
 8004742:	2001      	movs	r0, #1
  return msg;
 8004744:	e73a      	b.n	80045bc <u8x8_byte_i2c+0x2c>
      dmaStreamDisable(i2cp->dmatx);
 8004746:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8004748:	680a      	ldr	r2, [r1, #0]
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	f023 031f 	bic.w	r3, r3, #31
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	07d8      	lsls	r0, r3, #31
 8004756:	d4fc      	bmi.n	8004752 <u8x8_byte_i2c+0x1c2>
 8004758:	7a48      	ldrb	r0, [r1, #9]
 800475a:	684a      	ldr	r2, [r1, #4]
      dmaStreamDisable(i2cp->dmarx);
 800475c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 800475e:	233d      	movs	r3, #61	; 0x3d
 8004760:	4083      	lsls	r3, r0
 8004762:	6013      	str	r3, [r2, #0]
      dmaStreamDisable(i2cp->dmarx);
 8004764:	680a      	ldr	r2, [r1, #0]
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	f023 031f 	bic.w	r3, r3, #31
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	07db      	lsls	r3, r3, #31
 8004772:	d4fc      	bmi.n	800476e <u8x8_byte_i2c+0x1de>
 8004774:	684a      	ldr	r2, [r1, #4]
 8004776:	7a49      	ldrb	r1, [r1, #9]
 8004778:	233d      	movs	r3, #61	; 0x3d
 800477a:	408b      	lsls	r3, r1
 800477c:	6013      	str	r3, [r2, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 800477e:	2205      	movs	r2, #5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004780:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004784:	7032      	strb	r2, [r6, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d156      	bne.n	8004838 <u8x8_byte_i2c+0x2a8>
 800478a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800478e:	2a00      	cmp	r2, #0
 8004790:	dd52      	ble.n	8004838 <u8x8_byte_i2c+0x2a8>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004792:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004796:	f383 8811 	msr	BASEPRI, r3
    global = u8x8_GetI2CAddress(u8x8) >> 1;
 800479a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800479e:	4a2f      	ldr	r2, [pc, #188]	; (800485c <u8x8_byte_i2c+0x2cc>)
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	6013      	str	r3, [r2, #0]
  return 1;
 80047a4:	2001      	movs	r0, #1
}
 80047a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgCheck((i2cp != NULL) &&
 80047aa:	482d      	ldr	r0, [pc, #180]	; (8004860 <u8x8_byte_i2c+0x2d0>)
 80047ac:	f7fc fbf0 	bl	8000f90 <chSysHalt>
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80047b0:	f240 4316 	movw	r3, #1046	; 0x416
 80047b4:	f240 4256 	movw	r2, #1110	; 0x456
 80047b8:	e9c6 3209 	strd	r3, r2, [r6, #36]	; 0x24
      rccResetI2C2();
 80047bc:	4f29      	ldr	r7, [pc, #164]	; (8004864 <u8x8_byte_i2c+0x2d4>)
 80047be:	492a      	ldr	r1, [pc, #168]	; (8004868 <u8x8_byte_i2c+0x2d8>)
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	2002      	movs	r0, #2
 80047d2:	6a3b      	ldr	r3, [r7, #32]
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 80047d4:	f7fe f8b4 	bl	8002940 <dmaStreamAllocI.part.0.constprop.0>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80047d8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 80047dc:	62f0      	str	r0, [r6, #44]	; 0x2c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	4680      	mov	r8, r0
 80047e2:	db2c      	blt.n	800483e <u8x8_byte_i2c+0x2ae>
 80047e4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dd28      	ble.n	800483e <u8x8_byte_i2c+0x2ae>
 80047ec:	491f      	ldr	r1, [pc, #124]	; (800486c <u8x8_byte_i2c+0x2dc>)
 80047ee:	2007      	movs	r0, #7
 80047f0:	f7fe f8a6 	bl	8002940 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableI2C2(true);
 80047f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 80047f6:	6330      	str	r0, [r6, #48]	; 0x30
      rccEnableI2C2(true);
 80047f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047fc:	643b      	str	r3, [r7, #64]	; 0x40
 80047fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004804:	663b      	str	r3, [r7, #96]	; 0x60
 8004806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <u8x8_byte_i2c+0x2e0>)
 800480a:	2250      	movs	r2, #80	; 0x50
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800480c:	2102      	movs	r1, #2
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 800480e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004812:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004816:	6059      	str	r1, [r3, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8004818:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800481c:	2204      	movs	r2, #4
 800481e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8004822:	605a      	str	r2, [r3, #4]
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8004824:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <u8x8_byte_i2c+0x2e4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	6273      	str	r3, [r6, #36]	; 0x24
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 800482c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800482e:	4313      	orrs	r3, r2
 8004830:	62b3      	str	r3, [r6, #40]	; 0x28
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004832:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8004836:	e751      	b.n	80046dc <u8x8_byte_i2c+0x14c>
    chSysHalt("SV#5");
 8004838:	480f      	ldr	r0, [pc, #60]	; (8004878 <u8x8_byte_i2c+0x2e8>)
 800483a:	f7fc fba9 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#10");
 800483e:	480f      	ldr	r0, [pc, #60]	; (800487c <u8x8_byte_i2c+0x2ec>)
 8004840:	f7fc fba6 	bl	8000f90 <chSysHalt>
 8004844:	20000db8 	.word	0x20000db8
 8004848:	20000de0 	.word	0x20000de0
 800484c:	20000840 	.word	0x20000840
 8004850:	080074dc 	.word	0x080074dc
 8004854:	20000dbc 	.word	0x20000dbc
 8004858:	080078d0 	.word	0x080078d0
 800485c:	2000116c 	.word	0x2000116c
 8004860:	080076ac 	.word	0x080076ac
 8004864:	40023800 	.word	0x40023800
 8004868:	08003341 	.word	0x08003341
 800486c:	08000fb1 	.word	0x08000fb1
 8004870:	e000e100 	.word	0xe000e100
 8004874:	0e020000 	.word	0x0e020000
 8004878:	08007504 	.word	0x08007504
 800487c:	080074d4 	.word	0x080074d4
 8004880:	40014800 	.word	0x40014800

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800488a:	607b      	str	r3, [r7, #4]
  dp->CR1 |= I2C_CR1_START;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004892:	603b      	str	r3, [r7, #0]
  return __sch_get_currthread();
 8004894:	68ef      	ldr	r7, [r5, #12]
  tp->u.wttrp = trp;
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <u8x8_byte_i2c+0x35c>)
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
    chSchGoSleepS(newstate);
 800489a:	2003      	movs	r0, #3
  *trp = tp;
 800489c:	61f7      	str	r7, [r6, #28]
 800489e:	f7ff f8d7 	bl	8003a50 <chSchGoSleepS>
  return tp->u.rdymsg;
 80048a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28

  /* Waits for the operation completion or a timeout.*/
  msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
  if (msg != MSG_OK) {
 80048a4:	b1e9      	cbz	r1, 80048e2 <u8x8_byte_i2c+0x352>
    dmaStreamDisable(i2cp->dmatx);
 80048a6:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80048a8:	6802      	ldr	r2, [r0, #0]
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	f023 031f 	bic.w	r3, r3, #31
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	07df      	lsls	r7, r3, #31
 80048b6:	d4fc      	bmi.n	80048b2 <u8x8_byte_i2c+0x322>
 80048b8:	7a47      	ldrb	r7, [r0, #9]
 80048ba:	6842      	ldr	r2, [r0, #4]
    dmaStreamDisable(i2cp->dmarx);
 80048bc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 80048be:	233d      	movs	r3, #61	; 0x3d
 80048c0:	40bb      	lsls	r3, r7
 80048c2:	6013      	str	r3, [r2, #0]
    dmaStreamDisable(i2cp->dmarx);
 80048c4:	6802      	ldr	r2, [r0, #0]
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	f023 031f 	bic.w	r3, r3, #31
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	6813      	ldr	r3, [r2, #0]
 80048d0:	07db      	lsls	r3, r3, #31
 80048d2:	d4fc      	bmi.n	80048ce <u8x8_byte_i2c+0x33e>
 80048d4:	7a47      	ldrb	r7, [r0, #9]
 80048d6:	6842      	ldr	r2, [r0, #4]
 80048d8:	233d      	movs	r3, #61	; 0x3d
 80048da:	40bb      	lsls	r3, r7
  if (rdymsg == MSG_TIMEOUT) {
 80048dc:	3101      	adds	r1, #1
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	d001      	beq.n	80048e6 <u8x8_byte_i2c+0x356>
  }
  else {
    i2cp->state = I2C_READY;
 80048e2:	2202      	movs	r2, #2
 80048e4:	e74c      	b.n	8004780 <u8x8_byte_i2c+0x1f0>
    i2cp->state = I2C_LOCKED;
 80048e6:	2205      	movs	r2, #5
 80048e8:	e74a      	b.n	8004780 <u8x8_byte_i2c+0x1f0>
 80048ea:	bf00      	nop
 80048ec:	2000085c 	.word	0x2000085c

080048f0 <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80048f0:	6802      	ldr	r2, [r0, #0]
  cnt *= 8;
 80048f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80048f6:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80048f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
  cnt *= 8;
 80048fa:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80048fe:	2100      	movs	r1, #0
 8004900:	00d2      	lsls	r2, r2, #3
 8004902:	f002 bbf9 	b.w	80070f8 <memset>
 8004906:	bf00      	nop
	...

08004910 <printf_.constprop.0>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
 8004910:	b40f      	push	{r0, r1, r2, r3}
 8004912:	b500      	push	{lr}
 8004914:	b083      	sub	sp, #12
{
  va_list va;
  va_start(va, format);
 8004916:	aa05      	add	r2, sp, #20
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004918:	4904      	ldr	r1, [pc, #16]	; (800492c <printf_.constprop.0+0x1c>)
  va_start(va, format);
 800491a:	9201      	str	r2, [sp, #4]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800491c:	4668      	mov	r0, sp
 800491e:	f7fd fcef 	bl	8002300 <_vsnprintf.constprop.0>
  va_end(va);
  return ret;
}
 8004922:	b003      	add	sp, #12
 8004924:	f85d eb04 	ldr.w	lr, [sp], #4
 8004928:	b004      	add	sp, #16
 800492a:	4770      	bx	lr
 800492c:	0800750c 	.word	0x0800750c

08004930 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
	...

08004940 <__late_init>:
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
	...

08004950 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8004950:	e7fe      	b.n	8004950 <__default_exit>
 8004952:	bf00      	nop
	...

08004960 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	4d15      	ldr	r5, [pc, #84]	; (80049b8 <__init_ram_areas+0x58>)
 8004964:	4f15      	ldr	r7, [pc, #84]	; (80049bc <__init_ram_areas+0x5c>)
 8004966:	4916      	ldr	r1, [pc, #88]	; (80049c0 <__init_ram_areas+0x60>)
 8004968:	4816      	ldr	r0, [pc, #88]	; (80049c4 <__init_ram_areas+0x64>)
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <__init_ram_areas+0x68>)
 800496c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8004970:	4281      	cmp	r1, r0
 8004972:	d90d      	bls.n	8004990 <__init_ram_areas+0x30>
 8004974:	3a04      	subs	r2, #4
 8004976:	4603      	mov	r3, r0
      *p = *tp;
 8004978:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800497c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8004980:	4299      	cmp	r1, r3
 8004982:	d8f9      	bhi.n	8004978 <__init_ram_areas+0x18>
      p++;
 8004984:	1e4b      	subs	r3, r1, #1
 8004986:	1a1b      	subs	r3, r3, r0
 8004988:	f023 0303 	bic.w	r3, r3, #3
 800498c:	3304      	adds	r3, #4
 800498e:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8004990:	4287      	cmp	r7, r0
 8004992:	d907      	bls.n	80049a4 <__init_ram_areas+0x44>
      *p = 0;
 8004994:	1e7a      	subs	r2, r7, #1
 8004996:	1a12      	subs	r2, r2, r0
 8004998:	f022 0203 	bic.w	r2, r2, #3
 800499c:	3204      	adds	r2, #4
 800499e:	2100      	movs	r1, #0
 80049a0:	f002 fbaa 	bl	80070f8 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 80049a4:	42a5      	cmp	r5, r4
 80049a6:	d005      	beq.n	80049b4 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 80049a8:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 80049ac:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 80049b0:	3510      	adds	r5, #16
 80049b2:	e7dd      	b.n	8004970 <__init_ram_areas+0x10>
#endif
}
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b6:	bf00      	nop
 80049b8:	08007930 	.word	0x08007930
 80049bc:	20002638 	.word	0x20002638
 80049c0:	20002638 	.word	0x20002638
 80049c4:	20002638 	.word	0x20002638
 80049c8:	08009760 	.word	0x08009760
 80049cc:	00000000 	.word	0x00000000

080049d0 <__dbg_check_unlock>:
void __dbg_check_unlock(void) {
 80049d0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <__dbg_check_unlock+0x20>)
 80049d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049d8:	b932      	cbnz	r2, 80049e8 <__dbg_check_unlock+0x18>
 80049da:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80049de:	2900      	cmp	r1, #0
 80049e0:	dd02      	ble.n	80049e8 <__dbg_check_unlock+0x18>
  oip->dbg.lock_cnt = (cnt_t)0;
 80049e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80049e6:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <__dbg_check_unlock+0x24>)
 80049ea:	f7fc fad1 	bl	8000f90 <chSysHalt>
 80049ee:	bf00      	nop
 80049f0:	20000de0 	.word	0x20000de0
 80049f4:	08007504 	.word	0x08007504
	...

08004a00 <__dbg_check_lock>:
void __dbg_check_lock(void) {
 8004a00:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <__dbg_check_lock+0x1c>)
 8004a04:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	d103      	bne.n	8004a14 <__dbg_check_lock+0x14>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8004a12:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <__dbg_check_lock+0x20>)
 8004a16:	f7fc fabb 	bl	8000f90 <chSysHalt>
 8004a1a:	bf00      	nop
 8004a1c:	20000de0 	.word	0x20000de0
 8004a20:	080074dc 	.word	0x080074dc
	...

08004a30 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	4606      	mov	r6, r0
 8004a34:	460d      	mov	r5, r1
 8004a36:	4614      	mov	r4, r2
 8004a38:	2330      	movs	r3, #48	; 0x30
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 8004a3e:	f7ff ffdf 	bl	8004a00 <__dbg_check_lock>
  tp = threadref(((uint8_t *)wsp + size -
 8004a42:	f1a5 0c48 	sub.w	ip, r5, #72	; 0x48
 8004a46:	eb06 030c 	add.w	r3, r6, ip
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004a4a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004a4e:	60da      	str	r2, [r3, #12]
 8004a50:	2100      	movs	r1, #0
  tp->refs              = (trefs_t)1;
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004a58:	e943 4109 	strd	r4, r1, [r3, #-36]	; 0x24
  tp->epending          = (eventmask_t)0;
 8004a5c:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
  tp->name              = name;
 8004a60:	4a2d      	ldr	r2, [pc, #180]	; (8004b18 <chThdCreateStatic.constprop.0.isra.0+0xe8>)
 8004a62:	61da      	str	r2, [r3, #28]
  tp->state             = CH_STATE_WTSTART;
 8004a64:	2102      	movs	r1, #2
  tp->owner             = oip;
 8004a66:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <chThdCreateStatic.constprop.0.isra.0+0xec>)
  tp->state             = CH_STATE_WTSTART;
 8004a68:	8499      	strh	r1, [r3, #36]	; 0x24
  tp->hdr.pqueue.prio   = prio;
 8004a6a:	2180      	movs	r1, #128	; 0x80
 8004a6c:	6099      	str	r1, [r3, #8]
  p->prev       = qp->prev;
 8004a6e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004a70:	4f2b      	ldr	r7, [pc, #172]	; (8004b20 <chThdCreateStatic.constprop.0.isra.0+0xf0>)
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004a72:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  tp->realprio          = prio;
 8004a76:	6419      	str	r1, [r3, #64]	; 0x40
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8004a78:	f843 7c04 	str.w	r7, [r3, #-4]
  REG_INSERT(oip, tp);
 8004a7c:	f103 0010 	add.w	r0, r3, #16
  ch_queue_init(&tp->msgqueue);
 8004a80:	f103 0130 	add.w	r1, r3, #48	; 0x30
  p->next       = qp;
 8004a84:	f102 0728 	add.w	r7, r2, #40	; 0x28
  tp->wabase = (stkalign_t *)wsp;
 8004a88:	621e      	str	r6, [r3, #32]
  tp->owner             = oip;
 8004a8a:	619a      	str	r2, [r3, #24]
  p->prev       = qp->prev;
 8004a8c:	615c      	str	r4, [r3, #20]
  p->next       = qp;
 8004a8e:	611f      	str	r7, [r3, #16]
  p->prev->next = p;
 8004a90:	6020      	str	r0, [r4, #0]
  qp->prev = qp;
 8004a92:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
  ch_list_init(&tp->waiting);
 8004a96:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  qp->prev      = p;
 8004a9a:	62d0      	str	r0, [r2, #44]	; 0x2c
  lp->next = lp;
 8004a9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004a9e:	bb45      	cbnz	r5, 8004af2 <chThdCreateStatic.constprop.0.isra.0+0xc2>
 8004aa0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	dd24      	ble.n	8004af2 <chThdCreateStatic.constprop.0.isra.0+0xc2>
  thread_t *otp = __instance_get_currthread(oip);
 8004aa8:	68d1      	ldr	r1, [r2, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8004aaa:	6898      	ldr	r0, [r3, #8]
 8004aac:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 8004aae:	629d      	str	r5, [r3, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8004ab0:	42a0      	cmp	r0, r4
 8004ab2:	d924      	bls.n	8004afe <chThdCreateStatic.constprop.0.isra.0+0xce>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8004ab4:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 8004ab6:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
    pqp = pqp->next;
 8004aba:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio > p->prio));
 8004abc:	6885      	ldr	r5, [r0, #8]
 8004abe:	42ac      	cmp	r4, r5
 8004ac0:	d3fb      	bcc.n	8004aba <chThdCreateStatic.constprop.0.isra.0+0x8a>
  p->prev       = pqp->prev;
 8004ac2:	6844      	ldr	r4, [r0, #4]
 8004ac4:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 8004ac8:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 8004aca:	2401      	movs	r4, #1
  pqp->prev     = p;
 8004acc:	6041      	str	r1, [r0, #4]
 8004ace:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8004ad2:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004ad4:	f3ef 8209 	mrs	r2, PSP
    chSysSwitch(ntp, otp);
 8004ad8:	6a08      	ldr	r0, [r1, #32]
 8004ada:	3a64      	subs	r2, #100	; 0x64
 8004adc:	4290      	cmp	r0, r2
 8004ade:	d80b      	bhi.n	8004af8 <chThdCreateStatic.constprop.0.isra.0+0xc8>
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fb fc0f 	bl	8000304 <__port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  __dbg_check_unlock();
 8004ae6:	f7ff ff73 	bl	80049d0 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004aea:	2300      	movs	r3, #0
 8004aec:	f383 8811 	msr	BASEPRI, r3
}
 8004af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#11");
 8004af2:	480c      	ldr	r0, [pc, #48]	; (8004b24 <chThdCreateStatic.constprop.0.isra.0+0xf4>)
 8004af4:	f7fc fa4c 	bl	8000f90 <chSysHalt>
 8004af8:	480b      	ldr	r0, [pc, #44]	; (8004b28 <chThdCreateStatic.constprop.0.isra.0+0xf8>)
 8004afa:	f7fc fa49 	bl	8000f90 <chSysHalt>
  tp->state = CH_STATE_READY;
 8004afe:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
    pqp = pqp->next;
 8004b02:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8004b04:	6891      	ldr	r1, [r2, #8]
 8004b06:	4288      	cmp	r0, r1
 8004b08:	d9fb      	bls.n	8004b02 <chThdCreateStatic.constprop.0.isra.0+0xd2>
  p->prev       = pqp->prev;
 8004b0a:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 8004b0c:	f846 200c 	str.w	r2, [r6, ip]
  p->prev       = pqp->prev;
 8004b10:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8004b12:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8004b14:	6053      	str	r3, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8004b16:	e7e6      	b.n	8004ae6 <chThdCreateStatic.constprop.0.isra.0+0xb6>
 8004b18:	08007520 	.word	0x08007520
 8004b1c:	20000de0 	.word	0x20000de0
 8004b20:	0800031d 	.word	0x0800031d
 8004b24:	080074ec 	.word	0x080074ec
 8004b28:	080074f4 	.word	0x080074f4
 8004b2c:	00000000 	.word	0x00000000

08004b30 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	2530      	movs	r5, #48	; 0x30
 8004b34:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004b38:	4c18      	ldr	r4, [pc, #96]	; (8004b9c <VectorD4+0x6c>)
 8004b3a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	db22      	blt.n	8004b88 <VectorD4+0x58>
 8004b42:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004b46:	b9fa      	cbnz	r2, 8004b88 <VectorD4+0x58>
  oip->dbg.isr_cnt++;
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004b4e:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
 8004b52:	4813      	ldr	r0, [pc, #76]	; (8004ba0 <VectorD4+0x70>)
 8004b54:	f7fe fe14 	bl	8003780 <sd_lld_serve_interrupt>
 8004b58:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004b5c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	dd14      	ble.n	8004b8e <VectorD4+0x5e>
 8004b64:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004b68:	b98a      	cbnz	r2, 8004b8e <VectorD4+0x5e>
  oip->dbg.isr_cnt--;
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004b70:	f382 8811 	msr	BASEPRI, r2
 8004b74:	f385 8811 	msr	BASEPRI, r5
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <VectorD4+0x74>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004b80:	d108      	bne.n	8004b94 <VectorD4+0x64>
 8004b82:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8004b88:	4807      	ldr	r0, [pc, #28]	; (8004ba8 <VectorD4+0x78>)
 8004b8a:	f7fc fa01 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8004b8e:	4807      	ldr	r0, [pc, #28]	; (8004bac <VectorD4+0x7c>)
 8004b90:	f7fc f9fe 	bl	8000f90 <chSysHalt>
 8004b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b98:	f7ff bcd2 	b.w	8004540 <__port_irq_epilogue.part.0>
 8004b9c:	20000de0 	.word	0x20000de0
 8004ba0:	20000878 	.word	0x20000878
 8004ba4:	e000ed00 	.word	0xe000ed00
 8004ba8:	08007528 	.word	0x08007528
 8004bac:	08007530 	.word	0x08007530

08004bb0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	2530      	movs	r5, #48	; 0x30
 8004bb4:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004bb8:	4c18      	ldr	r4, [pc, #96]	; (8004c1c <VectorD8+0x6c>)
 8004bba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db22      	blt.n	8004c08 <VectorD8+0x58>
 8004bc2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004bc6:	b9fa      	cbnz	r2, 8004c08 <VectorD8+0x58>
  oip->dbg.isr_cnt++;
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004bce:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 8004bd2:	4813      	ldr	r0, [pc, #76]	; (8004c20 <VectorD8+0x70>)
 8004bd4:	f7fe fdd4 	bl	8003780 <sd_lld_serve_interrupt>
 8004bd8:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004bdc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	dd14      	ble.n	8004c0e <VectorD8+0x5e>
 8004be4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004be8:	b98a      	cbnz	r2, 8004c0e <VectorD8+0x5e>
  oip->dbg.isr_cnt--;
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004bf0:	f382 8811 	msr	BASEPRI, r2
 8004bf4:	f385 8811 	msr	BASEPRI, r5
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <VectorD8+0x74>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004c00:	d108      	bne.n	8004c14 <VectorD8+0x64>
 8004c02:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8004c08:	4807      	ldr	r0, [pc, #28]	; (8004c28 <VectorD8+0x78>)
 8004c0a:	f7fc f9c1 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8004c0e:	4807      	ldr	r0, [pc, #28]	; (8004c2c <VectorD8+0x7c>)
 8004c10:	f7fc f9be 	bl	8000f90 <chSysHalt>
 8004c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c18:	f7ff bc92 	b.w	8004540 <__port_irq_epilogue.part.0>
 8004c1c:	20000de0 	.word	0x20000de0
 8004c20:	200008f8 	.word	0x200008f8
 8004c24:	e000ed00 	.word	0xe000ed00
 8004c28:	08007528 	.word	0x08007528
 8004c2c:	08007530 	.word	0x08007530

08004c30 <VectorA8>:
/**
 * @brief   TIM1-TRG-COM, TIM11 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_TRGCO_TIM11_HANDLER) {
 8004c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	2130      	movs	r1, #48	; 0x30
 8004c36:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004c3a:	4c6c      	ldr	r4, [pc, #432]	; (8004dec <VectorA8+0x1bc>)
 8004c3c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f2c0 80a0 	blt.w	8004d86 <VectorA8+0x156>
 8004c46:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	f040 809b 	bne.w	8004d86 <VectorA8+0x156>
  oip->dbg.isr_cnt++;
 8004c50:	3301      	adds	r3, #1
 8004c52:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004c56:	f382 8811 	msr	BASEPRI, r2
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8004c5a:	4d65      	ldr	r5, [pc, #404]	; (8004df0 <VectorA8+0x1c0>)
 8004c5c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004c5e:	68ea      	ldr	r2, [r5, #12]
 8004c60:	4013      	ands	r3, r2
 8004c62:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8004c64:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8004c66:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8004c68:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8004c6a:	d41b      	bmi.n	8004ca4 <VectorA8+0x74>
 8004c6c:	2230      	movs	r2, #48	; 0x30
 8004c6e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004c72:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f340 8082 	ble.w	8004d80 <VectorA8+0x150>
 8004c7c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004c80:	2900      	cmp	r1, #0
 8004c82:	d17d      	bne.n	8004d80 <VectorA8+0x150>
  oip->dbg.isr_cnt--;
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004c8a:	f381 8811 	msr	BASEPRI, r1
 8004c8e:	f382 8811 	msr	BASEPRI, r2
 8004c92:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <VectorA8+0x1c4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004c9a:	d17a      	bne.n	8004d92 <VectorA8+0x162>
 8004c9c:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8004ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca4:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004ca8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dd6d      	ble.n	8004d8c <VectorA8+0x15c>
 8004cb0:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
 8004cb4:	f1ba 0f00 	cmp.w	sl, #0
 8004cb8:	d168      	bne.n	8004d8c <VectorA8+0x15c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004cc0:	f104 0b10 	add.w	fp, r4, #16
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8004cc4:	46d0      	mov	r8, sl
 8004cc6:	f04f 0930 	mov.w	r9, #48	; 0x30
 8004cca:	6a68      	ldr	r0, [r5, #36]	; 0x24
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8004ccc:	6926      	ldr	r6, [r4, #16]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8004cce:	8ba3      	ldrh	r3, [r4, #28]
    if (nowdelta < vtp->dlist.delta) {
 8004cd0:	68b1      	ldr	r1, [r6, #8]
 8004cd2:	b280      	uxth	r0, r0
  return (sysinterval_t)((systime_t)(end - start));
 8004cd4:	1ac2      	subs	r2, r0, r3
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	428a      	cmp	r2, r1
 8004cda:	d361      	bcc.n	8004da0 <VectorA8+0x170>
  return systime + (systime_t)interval;
 8004cdc:	440b      	add	r3, r1
 8004cde:	b29f      	uxth	r7, r3
  dlp->prev->next = dlp->next;
 8004ce0:	e9d6 3200 	ldrd	r3, r2, [r6]
    vtlp->lasttime = lasttime;
 8004ce4:	83a7      	strh	r7, [r4, #28]
 8004ce6:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8004ce8:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 8004cea:	f8c6 a000 	str.w	sl, [r6]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	455b      	cmp	r3, fp
  STM32_ST_TIM->DIER = 0U;
 8004cf2:	bf08      	it	eq
 8004cf4:	f8c5 a00c 	streq.w	sl, [r5, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004cf8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dd4c      	ble.n	8004d9a <VectorA8+0x16a>
 8004d00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	dd48      	ble.n	8004d9a <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004d08:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8004d0c:	f388 8811 	msr	BASEPRI, r8
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 8004d10:	e9d6 3103 	ldrd	r3, r1, [r6, #12]
 8004d14:	4630      	mov	r0, r6
 8004d16:	4798      	blx	r3
 8004d18:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004d1c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	dd33      	ble.n	8004d8c <VectorA8+0x15c>
 8004d24:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004d28:	bb80      	cbnz	r0, 8004d8c <VectorA8+0x15c>

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 8004d2a:	6972      	ldr	r2, [r6, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	d0c9      	beq.n	8004cca <VectorA8+0x9a>
  return (systime_t)STM32_ST_TIM->CNT;
 8004d36:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004d38:	b289      	uxth	r1, r1
  return (sysinterval_t)((systime_t)(end - start));
 8004d3a:	1bcf      	subs	r7, r1, r7
 8004d3c:	b2bf      	uxth	r7, r7
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 8004d3e:	42ba      	cmp	r2, r7
 8004d40:	d343      	bcc.n	8004dca <VectorA8+0x19a>
  return (bool)(dlhp == dlhp->next);
 8004d42:	f8d4 c010 	ldr.w	ip, [r4, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8004d46:	45dc      	cmp	ip, fp
 8004d48:	d049      	beq.n	8004dde <VectorA8+0x1ae>
  while (likely(dlp->delta < delta)) {
 8004d4a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d906      	bls.n	8004d60 <VectorA8+0x130>
    dlp = dlp->next;
 8004d52:	f8dc c000 	ldr.w	ip, [ip]
    delta -= dlp->delta;
 8004d56:	1ad2      	subs	r2, r2, r3
  while (likely(dlp->delta < delta)) {
 8004d58:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d3f8      	bcc.n	8004d52 <VectorA8+0x122>
  dlp->delta      = delta;
 8004d60:	60b2      	str	r2, [r6, #8]
  dlp->delta -= delta;
 8004d62:	f8dc 3008 	ldr.w	r3, [ip, #8]
  dlp->next       = dlhp;
 8004d66:	f8c6 c000 	str.w	ip, [r6]
  dlp->delta -= delta;
 8004d6a:	1a9b      	subs	r3, r3, r2
  dlp->prev       = dlp->next->prev;
 8004d6c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004d70:	6072      	str	r2, [r6, #4]
  dlp->prev->next = dlp;
 8004d72:	6016      	str	r6, [r2, #0]
  dlp->delta -= delta;
 8004d74:	e9cc 6301 	strd	r6, r3, [ip, #4]
  dlhp->delta = (sysinterval_t)-1;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7c:	61a3      	str	r3, [r4, #24]
}
 8004d7e:	e7a2      	b.n	8004cc6 <VectorA8+0x96>
    chSysHalt("SV#9");
 8004d80:	481d      	ldr	r0, [pc, #116]	; (8004df8 <VectorA8+0x1c8>)
 8004d82:	f7fc f905 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#8");
 8004d86:	481d      	ldr	r0, [pc, #116]	; (8004dfc <VectorA8+0x1cc>)
 8004d88:	f7fc f902 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#6");
 8004d8c:	481c      	ldr	r0, [pc, #112]	; (8004e00 <VectorA8+0x1d0>)
 8004d8e:	f7fc f8ff 	bl	8000f90 <chSysHalt>
 8004d92:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d96:	f7ff bbd3 	b.w	8004540 <__port_irq_epilogue.part.0>
    chSysHalt("SV#7");
 8004d9a:	481a      	ldr	r0, [pc, #104]	; (8004e04 <VectorA8+0x1d4>)
 8004d9c:	f7fc f8f8 	bl	8000f90 <chSysHalt>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8004da0:	455e      	cmp	r6, fp
 8004da2:	d004      	beq.n	8004dae <VectorA8+0x17e>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8004da4:	1a89      	subs	r1, r1, r2
  vtlp->lasttime += nowdelta;
 8004da6:	83a0      	strh	r0, [r4, #28]
  vtp->dlist.delta -= nowdelta;
 8004da8:	60b1      	str	r1, [r6, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, vtp->dlist.delta);
 8004daa:	f7fe fb21 	bl	80033f0 <vt_set_alarm>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004dae:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	ddf1      	ble.n	8004d9a <VectorA8+0x16a>
 8004db6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dded      	ble.n	8004d9a <VectorA8+0x16a>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004dc4:	f383 8811 	msr	BASEPRI, r3
}
 8004dc8:	e750      	b.n	8004c6c <VectorA8+0x3c>
 8004dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 8004dcc:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8004dd4:	45dc      	cmp	ip, fp
 8004dd6:	6363      	str	r3, [r4, #52]	; 0x34
 8004dd8:	d006      	beq.n	8004de8 <VectorA8+0x1b8>
 8004dda:	463a      	mov	r2, r7
 8004ddc:	e7b5      	b.n	8004d4a <VectorA8+0x11a>
        delay = vtp->reload - nowdelta;
 8004dde:	1bd2      	subs	r2, r2, r7
        vt_insert_first(vtlp, vtp, now, delay);
 8004de0:	4630      	mov	r0, r6
 8004de2:	f7fe fc5d 	bl	80036a0 <vt_insert_first.constprop.0>
        return;
 8004de6:	e7e2      	b.n	8004dae <VectorA8+0x17e>
        delay = (sysinterval_t)0;
 8004de8:	4602      	mov	r2, r0
 8004dea:	e7f9      	b.n	8004de0 <VectorA8+0x1b0>
 8004dec:	20000de0 	.word	0x20000de0
 8004df0:	40014800 	.word	0x40014800
 8004df4:	e000ed00 	.word	0xe000ed00
 8004df8:	08007530 	.word	0x08007530
 8004dfc:	08007528 	.word	0x08007528
 8004e00:	080074cc 	.word	0x080074cc
 8004e04:	080074e4 	.word	0x080074e4
	...

08004e10 <Vector118>:
/**
 * @brief   TIM6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM6_HANDLER) {
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	2330      	movs	r3, #48	; 0x30
 8004e14:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004e18:	4c26      	ldr	r4, [pc, #152]	; (8004eb4 <Vector118+0xa4>)
 8004e1a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	db3d      	blt.n	8004e9e <Vector118+0x8e>
 8004e22:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d139      	bne.n	8004e9e <Vector118+0x8e>
  oip->dbg.isr_cnt++;
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004e30:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8004e34:	4d20      	ldr	r5, [pc, #128]	; (8004eb8 <Vector118+0xa8>)
 8004e36:	68ea      	ldr	r2, [r5, #12]
 8004e38:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004e3a:	68d1      	ldr	r1, [r2, #12]
 8004e3c:	400b      	ands	r3, r1
 8004e3e:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 8004e40:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8004e42:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8004e44:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8004e46:	d418      	bmi.n	8004e7a <Vector118+0x6a>
 8004e48:	2230      	movs	r2, #48	; 0x30
 8004e4a:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004e4e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dd26      	ble.n	8004ea4 <Vector118+0x94>
 8004e56:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004e5a:	bb19      	cbnz	r1, 8004ea4 <Vector118+0x94>
  oip->dbg.isr_cnt--;
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004e62:	f381 8811 	msr	BASEPRI, r1
 8004e66:	f382 8811 	msr	BASEPRI, r2
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <Vector118+0xac>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004e72:	d11a      	bne.n	8004eaa <Vector118+0x9a>
 8004e74:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
    _gpt_isr_invoke_cb(gptp);
 8004e7a:	782b      	ldrb	r3, [r5, #0]
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d107      	bne.n	8004e90 <Vector118+0x80>
 8004e80:	2302      	movs	r3, #2
 8004e82:	702b      	strb	r3, [r5, #0]
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 8004e84:	6010      	str	r0, [r2, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8004e86:	6110      	str	r0, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8004e88:	68d3      	ldr	r3, [r2, #12]
 8004e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e8e:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 8004e90:	686b      	ldr	r3, [r5, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0d7      	beq.n	8004e48 <Vector118+0x38>
 8004e98:	4807      	ldr	r0, [pc, #28]	; (8004eb8 <Vector118+0xa8>)
 8004e9a:	4798      	blx	r3
 8004e9c:	e7d4      	b.n	8004e48 <Vector118+0x38>
    chSysHalt("SV#8");
 8004e9e:	4808      	ldr	r0, [pc, #32]	; (8004ec0 <Vector118+0xb0>)
 8004ea0:	f7fc f876 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8004ea4:	4807      	ldr	r0, [pc, #28]	; (8004ec4 <Vector118+0xb4>)
 8004ea6:	f7fc f873 	bl	8000f90 <chSysHalt>
 8004eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eae:	f7ff bb47 	b.w	8004540 <__port_irq_epilogue.part.0>
 8004eb2:	bf00      	nop
 8004eb4:	20000de0 	.word	0x20000de0
 8004eb8:	20000830 	.word	0x20000830
 8004ebc:	e000ed00 	.word	0xe000ed00
 8004ec0:	08007528 	.word	0x08007528
 8004ec4:	08007530 	.word	0x08007530
	...

08004ed0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	2330      	movs	r3, #48	; 0x30
 8004ed4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004ed8:	4c1c      	ldr	r4, [pc, #112]	; (8004f4c <Vector6C+0x7c>)
 8004eda:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db2a      	blt.n	8004f38 <Vector6C+0x68>
 8004ee2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004ee6:	bb3a      	cbnz	r2, 8004f38 <Vector6C+0x68>
  oip->dbg.isr_cnt++;
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004eee:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <Vector6C+0x80>)
  if (dma.streams[0].func)
 8004ef4:	4817      	ldr	r0, [pc, #92]	; (8004f54 <Vector6C+0x84>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004ef6:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8004ef8:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004efa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8004efe:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8004f00:	b10a      	cbz	r2, 8004f06 <Vector6C+0x36>
    dma.streams[0].func(dma.streams[0].param, flags);
 8004f02:	6880      	ldr	r0, [r0, #8]
 8004f04:	4790      	blx	r2
 8004f06:	2230      	movs	r2, #48	; 0x30
 8004f08:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004f0c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dd14      	ble.n	8004f3e <Vector6C+0x6e>
 8004f14:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004f18:	b989      	cbnz	r1, 8004f3e <Vector6C+0x6e>
  oip->dbg.isr_cnt--;
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004f20:	f381 8811 	msr	BASEPRI, r1
 8004f24:	f382 8811 	msr	BASEPRI, r2
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <Vector6C+0x88>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004f30:	d108      	bne.n	8004f44 <Vector6C+0x74>
 8004f32:	f383 8811 	msr	BASEPRI, r3
}
 8004f36:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8004f38:	4808      	ldr	r0, [pc, #32]	; (8004f5c <Vector6C+0x8c>)
 8004f3a:	f7fc f829 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8004f3e:	4808      	ldr	r0, [pc, #32]	; (8004f60 <Vector6C+0x90>)
 8004f40:	f7fc f826 	bl	8000f90 <chSysHalt>
 8004f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f48:	f7ff bafa 	b.w	8004540 <__port_irq_epilogue.part.0>
 8004f4c:	20000de0 	.word	0x20000de0
 8004f50:	40026000 	.word	0x40026000
 8004f54:	200010e8 	.word	0x200010e8
 8004f58:	e000ed00 	.word	0xe000ed00
 8004f5c:	08007528 	.word	0x08007528
 8004f60:	08007530 	.word	0x08007530
	...

08004f70 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8004f70:	b510      	push	{r4, lr}
 8004f72:	2330      	movs	r3, #48	; 0x30
 8004f74:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004f78:	4c1d      	ldr	r4, [pc, #116]	; (8004ff0 <Vector70+0x80>)
 8004f7a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db2c      	blt.n	8004fdc <Vector70+0x6c>
 8004f82:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004f86:	bb4a      	cbnz	r2, 8004fdc <Vector70+0x6c>
  oip->dbg.isr_cnt++;
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004f8e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <Vector70+0x84>)
  if (dma.streams[1].func)
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <Vector70+0x88>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004f96:	6819      	ldr	r1, [r3, #0]
 8004f98:	0989      	lsrs	r1, r1, #6
 8004f9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8004f9e:	0188      	lsls	r0, r1, #6
 8004fa0:	6098      	str	r0, [r3, #8]
  if (dma.streams[1].func)
 8004fa2:	68d3      	ldr	r3, [r2, #12]
 8004fa4:	b10b      	cbz	r3, 8004faa <Vector70+0x3a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8004fa6:	6910      	ldr	r0, [r2, #16]
 8004fa8:	4798      	blx	r3
 8004faa:	2230      	movs	r2, #48	; 0x30
 8004fac:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004fb0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dd14      	ble.n	8004fe2 <Vector70+0x72>
 8004fb8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004fbc:	b989      	cbnz	r1, 8004fe2 <Vector70+0x72>
  oip->dbg.isr_cnt--;
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004fc4:	f381 8811 	msr	BASEPRI, r1
 8004fc8:	f382 8811 	msr	BASEPRI, r2
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <Vector70+0x8c>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004fd4:	d108      	bne.n	8004fe8 <Vector70+0x78>
 8004fd6:	f383 8811 	msr	BASEPRI, r3
}
 8004fda:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8004fdc:	4808      	ldr	r0, [pc, #32]	; (8005000 <Vector70+0x90>)
 8004fde:	f7fb ffd7 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8004fe2:	4808      	ldr	r0, [pc, #32]	; (8005004 <Vector70+0x94>)
 8004fe4:	f7fb ffd4 	bl	8000f90 <chSysHalt>
 8004fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fec:	f7ff baa8 	b.w	8004540 <__port_irq_epilogue.part.0>
 8004ff0:	20000de0 	.word	0x20000de0
 8004ff4:	40026000 	.word	0x40026000
 8004ff8:	200010e8 	.word	0x200010e8
 8004ffc:	e000ed00 	.word	0xe000ed00
 8005000:	08007528 	.word	0x08007528
 8005004:	08007530 	.word	0x08007530
	...

08005010 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8005010:	b510      	push	{r4, lr}
 8005012:	2330      	movs	r3, #48	; 0x30
 8005014:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005018:	4c1d      	ldr	r4, [pc, #116]	; (8005090 <Vector74+0x80>)
 800501a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800501e:	2b00      	cmp	r3, #0
 8005020:	db2c      	blt.n	800507c <Vector74+0x6c>
 8005022:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005026:	bb4a      	cbnz	r2, 800507c <Vector74+0x6c>
  oip->dbg.isr_cnt++;
 8005028:	3301      	adds	r3, #1
 800502a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800502e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005032:	4b18      	ldr	r3, [pc, #96]	; (8005094 <Vector74+0x84>)
  if (dma.streams[2].func)
 8005034:	4a18      	ldr	r2, [pc, #96]	; (8005098 <Vector74+0x88>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005036:	6819      	ldr	r1, [r3, #0]
 8005038:	0c09      	lsrs	r1, r1, #16
 800503a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800503e:	0408      	lsls	r0, r1, #16
 8005040:	6098      	str	r0, [r3, #8]
  if (dma.streams[2].func)
 8005042:	6953      	ldr	r3, [r2, #20]
 8005044:	b10b      	cbz	r3, 800504a <Vector74+0x3a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8005046:	6990      	ldr	r0, [r2, #24]
 8005048:	4798      	blx	r3
 800504a:	2230      	movs	r2, #48	; 0x30
 800504c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005050:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005054:	2b00      	cmp	r3, #0
 8005056:	dd14      	ble.n	8005082 <Vector74+0x72>
 8005058:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800505c:	b989      	cbnz	r1, 8005082 <Vector74+0x72>
  oip->dbg.isr_cnt--;
 800505e:	3b01      	subs	r3, #1
 8005060:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005064:	f381 8811 	msr	BASEPRI, r1
 8005068:	f382 8811 	msr	BASEPRI, r2
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <Vector74+0x8c>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005074:	d108      	bne.n	8005088 <Vector74+0x78>
 8005076:	f383 8811 	msr	BASEPRI, r3
}
 800507a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800507c:	4808      	ldr	r0, [pc, #32]	; (80050a0 <Vector74+0x90>)
 800507e:	f7fb ff87 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005082:	4808      	ldr	r0, [pc, #32]	; (80050a4 <Vector74+0x94>)
 8005084:	f7fb ff84 	bl	8000f90 <chSysHalt>
 8005088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800508c:	f7ff ba58 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005090:	20000de0 	.word	0x20000de0
 8005094:	40026000 	.word	0x40026000
 8005098:	200010e8 	.word	0x200010e8
 800509c:	e000ed00 	.word	0xe000ed00
 80050a0:	08007528 	.word	0x08007528
 80050a4:	08007530 	.word	0x08007530
	...

080050b0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80050b0:	b510      	push	{r4, lr}
 80050b2:	2330      	movs	r3, #48	; 0x30
 80050b4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80050b8:	4c1d      	ldr	r4, [pc, #116]	; (8005130 <Vector78+0x80>)
 80050ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80050be:	2b00      	cmp	r3, #0
 80050c0:	db2c      	blt.n	800511c <Vector78+0x6c>
 80050c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80050c6:	bb4a      	cbnz	r2, 800511c <Vector78+0x6c>
  oip->dbg.isr_cnt++;
 80050c8:	3301      	adds	r3, #1
 80050ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80050ce:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80050d2:	4b18      	ldr	r3, [pc, #96]	; (8005134 <Vector78+0x84>)
  if (dma.streams[3].func)
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <Vector78+0x88>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	0d89      	lsrs	r1, r1, #22
 80050da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80050de:	0588      	lsls	r0, r1, #22
 80050e0:	6098      	str	r0, [r3, #8]
  if (dma.streams[3].func)
 80050e2:	69d3      	ldr	r3, [r2, #28]
 80050e4:	b10b      	cbz	r3, 80050ea <Vector78+0x3a>
    dma.streams[3].func(dma.streams[3].param, flags);
 80050e6:	6a10      	ldr	r0, [r2, #32]
 80050e8:	4798      	blx	r3
 80050ea:	2230      	movs	r2, #48	; 0x30
 80050ec:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80050f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dd14      	ble.n	8005122 <Vector78+0x72>
 80050f8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80050fc:	b989      	cbnz	r1, 8005122 <Vector78+0x72>
  oip->dbg.isr_cnt--;
 80050fe:	3b01      	subs	r3, #1
 8005100:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005104:	f381 8811 	msr	BASEPRI, r1
 8005108:	f382 8811 	msr	BASEPRI, r2
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <Vector78+0x8c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005114:	d108      	bne.n	8005128 <Vector78+0x78>
 8005116:	f383 8811 	msr	BASEPRI, r3
}
 800511a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800511c:	4808      	ldr	r0, [pc, #32]	; (8005140 <Vector78+0x90>)
 800511e:	f7fb ff37 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005122:	4808      	ldr	r0, [pc, #32]	; (8005144 <Vector78+0x94>)
 8005124:	f7fb ff34 	bl	8000f90 <chSysHalt>
 8005128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512c:	f7ff ba08 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005130:	20000de0 	.word	0x20000de0
 8005134:	40026000 	.word	0x40026000
 8005138:	200010e8 	.word	0x200010e8
 800513c:	e000ed00 	.word	0xe000ed00
 8005140:	08007528 	.word	0x08007528
 8005144:	08007530 	.word	0x08007530
	...

08005150 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8005150:	b510      	push	{r4, lr}
 8005152:	2330      	movs	r3, #48	; 0x30
 8005154:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005158:	4c1c      	ldr	r4, [pc, #112]	; (80051cc <Vector7C+0x7c>)
 800515a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800515e:	2b00      	cmp	r3, #0
 8005160:	db2a      	blt.n	80051b8 <Vector7C+0x68>
 8005162:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005166:	bb3a      	cbnz	r2, 80051b8 <Vector7C+0x68>
  oip->dbg.isr_cnt++;
 8005168:	3301      	adds	r3, #1
 800516a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800516e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005172:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <Vector7C+0x80>)
  if (dma.streams[4].func)
 8005174:	4817      	ldr	r0, [pc, #92]	; (80051d4 <Vector7C+0x84>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005176:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8005178:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800517a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800517e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8005180:	b10a      	cbz	r2, 8005186 <Vector7C+0x36>
    dma.streams[4].func(dma.streams[4].param, flags);
 8005182:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005184:	4790      	blx	r2
 8005186:	2230      	movs	r2, #48	; 0x30
 8005188:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800518c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005190:	2b00      	cmp	r3, #0
 8005192:	dd14      	ble.n	80051be <Vector7C+0x6e>
 8005194:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005198:	b989      	cbnz	r1, 80051be <Vector7C+0x6e>
  oip->dbg.isr_cnt--;
 800519a:	3b01      	subs	r3, #1
 800519c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80051a0:	f381 8811 	msr	BASEPRI, r1
 80051a4:	f382 8811 	msr	BASEPRI, r2
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <Vector7C+0x88>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80051b0:	d108      	bne.n	80051c4 <Vector7C+0x74>
 80051b2:	f383 8811 	msr	BASEPRI, r3
}
 80051b6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80051b8:	4808      	ldr	r0, [pc, #32]	; (80051dc <Vector7C+0x8c>)
 80051ba:	f7fb fee9 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 80051be:	4808      	ldr	r0, [pc, #32]	; (80051e0 <Vector7C+0x90>)
 80051c0:	f7fb fee6 	bl	8000f90 <chSysHalt>
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	f7ff b9ba 	b.w	8004540 <__port_irq_epilogue.part.0>
 80051cc:	20000de0 	.word	0x20000de0
 80051d0:	40026000 	.word	0x40026000
 80051d4:	200010e8 	.word	0x200010e8
 80051d8:	e000ed00 	.word	0xe000ed00
 80051dc:	08007528 	.word	0x08007528
 80051e0:	08007530 	.word	0x08007530
	...

080051f0 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80051f0:	b510      	push	{r4, lr}
 80051f2:	2330      	movs	r3, #48	; 0x30
 80051f4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80051f8:	4c1d      	ldr	r4, [pc, #116]	; (8005270 <Vector80+0x80>)
 80051fa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80051fe:	2b00      	cmp	r3, #0
 8005200:	db2c      	blt.n	800525c <Vector80+0x6c>
 8005202:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005206:	bb4a      	cbnz	r2, 800525c <Vector80+0x6c>
  oip->dbg.isr_cnt++;
 8005208:	3301      	adds	r3, #1
 800520a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800520e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005212:	4b18      	ldr	r3, [pc, #96]	; (8005274 <Vector80+0x84>)
  if (dma.streams[5].func)
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <Vector80+0x88>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005216:	6859      	ldr	r1, [r3, #4]
 8005218:	0989      	lsrs	r1, r1, #6
 800521a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800521e:	0188      	lsls	r0, r1, #6
 8005220:	60d8      	str	r0, [r3, #12]
  if (dma.streams[5].func)
 8005222:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005224:	b10b      	cbz	r3, 800522a <Vector80+0x3a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8005226:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8005228:	4798      	blx	r3
 800522a:	2230      	movs	r2, #48	; 0x30
 800522c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005230:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005234:	2b00      	cmp	r3, #0
 8005236:	dd14      	ble.n	8005262 <Vector80+0x72>
 8005238:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800523c:	b989      	cbnz	r1, 8005262 <Vector80+0x72>
  oip->dbg.isr_cnt--;
 800523e:	3b01      	subs	r3, #1
 8005240:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005244:	f381 8811 	msr	BASEPRI, r1
 8005248:	f382 8811 	msr	BASEPRI, r2
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <Vector80+0x8c>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005254:	d108      	bne.n	8005268 <Vector80+0x78>
 8005256:	f383 8811 	msr	BASEPRI, r3
}
 800525a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800525c:	4808      	ldr	r0, [pc, #32]	; (8005280 <Vector80+0x90>)
 800525e:	f7fb fe97 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005262:	4808      	ldr	r0, [pc, #32]	; (8005284 <Vector80+0x94>)
 8005264:	f7fb fe94 	bl	8000f90 <chSysHalt>
 8005268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800526c:	f7ff b968 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005270:	20000de0 	.word	0x20000de0
 8005274:	40026000 	.word	0x40026000
 8005278:	200010e8 	.word	0x200010e8
 800527c:	e000ed00 	.word	0xe000ed00
 8005280:	08007528 	.word	0x08007528
 8005284:	08007530 	.word	0x08007530
	...

08005290 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8005290:	b510      	push	{r4, lr}
 8005292:	2330      	movs	r3, #48	; 0x30
 8005294:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005298:	4c1d      	ldr	r4, [pc, #116]	; (8005310 <Vector84+0x80>)
 800529a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800529e:	2b00      	cmp	r3, #0
 80052a0:	db2c      	blt.n	80052fc <Vector84+0x6c>
 80052a2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052a6:	bb4a      	cbnz	r2, 80052fc <Vector84+0x6c>
  oip->dbg.isr_cnt++;
 80052a8:	3301      	adds	r3, #1
 80052aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80052ae:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80052b2:	4b18      	ldr	r3, [pc, #96]	; (8005314 <Vector84+0x84>)
  if (dma.streams[6].func)
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <Vector84+0x88>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	0c09      	lsrs	r1, r1, #16
 80052ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 80052be:	0408      	lsls	r0, r1, #16
 80052c0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[6].func)
 80052c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80052c4:	b10b      	cbz	r3, 80052ca <Vector84+0x3a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80052c6:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80052c8:	4798      	blx	r3
 80052ca:	2230      	movs	r2, #48	; 0x30
 80052cc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80052d0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dd14      	ble.n	8005302 <Vector84+0x72>
 80052d8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80052dc:	b989      	cbnz	r1, 8005302 <Vector84+0x72>
  oip->dbg.isr_cnt--;
 80052de:	3b01      	subs	r3, #1
 80052e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80052e4:	f381 8811 	msr	BASEPRI, r1
 80052e8:	f382 8811 	msr	BASEPRI, r2
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <Vector84+0x8c>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80052f4:	d108      	bne.n	8005308 <Vector84+0x78>
 80052f6:	f383 8811 	msr	BASEPRI, r3
}
 80052fa:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80052fc:	4808      	ldr	r0, [pc, #32]	; (8005320 <Vector84+0x90>)
 80052fe:	f7fb fe47 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005302:	4808      	ldr	r0, [pc, #32]	; (8005324 <Vector84+0x94>)
 8005304:	f7fb fe44 	bl	8000f90 <chSysHalt>
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	f7ff b918 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005310:	20000de0 	.word	0x20000de0
 8005314:	40026000 	.word	0x40026000
 8005318:	200010e8 	.word	0x200010e8
 800531c:	e000ed00 	.word	0xe000ed00
 8005320:	08007528 	.word	0x08007528
 8005324:	08007530 	.word	0x08007530
	...

08005330 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8005330:	b510      	push	{r4, lr}
 8005332:	2330      	movs	r3, #48	; 0x30
 8005334:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005338:	4c1d      	ldr	r4, [pc, #116]	; (80053b0 <VectorFC+0x80>)
 800533a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800533e:	2b00      	cmp	r3, #0
 8005340:	db2c      	blt.n	800539c <VectorFC+0x6c>
 8005342:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005346:	bb4a      	cbnz	r2, 800539c <VectorFC+0x6c>
  oip->dbg.isr_cnt++;
 8005348:	3301      	adds	r3, #1
 800534a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800534e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005352:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <VectorFC+0x84>)
  if (dma.streams[7].func)
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <VectorFC+0x88>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	0d89      	lsrs	r1, r1, #22
 800535a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 800535e:	0588      	lsls	r0, r1, #22
 8005360:	60d8      	str	r0, [r3, #12]
  if (dma.streams[7].func)
 8005362:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005364:	b10b      	cbz	r3, 800536a <VectorFC+0x3a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8005366:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8005368:	4798      	blx	r3
 800536a:	2230      	movs	r2, #48	; 0x30
 800536c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005370:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005374:	2b00      	cmp	r3, #0
 8005376:	dd14      	ble.n	80053a2 <VectorFC+0x72>
 8005378:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800537c:	b989      	cbnz	r1, 80053a2 <VectorFC+0x72>
  oip->dbg.isr_cnt--;
 800537e:	3b01      	subs	r3, #1
 8005380:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005384:	f381 8811 	msr	BASEPRI, r1
 8005388:	f382 8811 	msr	BASEPRI, r2
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <VectorFC+0x8c>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005394:	d108      	bne.n	80053a8 <VectorFC+0x78>
 8005396:	f383 8811 	msr	BASEPRI, r3
}
 800539a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800539c:	4808      	ldr	r0, [pc, #32]	; (80053c0 <VectorFC+0x90>)
 800539e:	f7fb fdf7 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 80053a2:	4808      	ldr	r0, [pc, #32]	; (80053c4 <VectorFC+0x94>)
 80053a4:	f7fb fdf4 	bl	8000f90 <chSysHalt>
 80053a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ac:	f7ff b8c8 	b.w	8004540 <__port_irq_epilogue.part.0>
 80053b0:	20000de0 	.word	0x20000de0
 80053b4:	40026000 	.word	0x40026000
 80053b8:	200010e8 	.word	0x200010e8
 80053bc:	e000ed00 	.word	0xe000ed00
 80053c0:	08007528 	.word	0x08007528
 80053c4:	08007530 	.word	0x08007530
	...

080053d0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80053d0:	b510      	push	{r4, lr}
 80053d2:	2330      	movs	r3, #48	; 0x30
 80053d4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80053d8:	4c1c      	ldr	r4, [pc, #112]	; (800544c <Vector120+0x7c>)
 80053da:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80053de:	2b00      	cmp	r3, #0
 80053e0:	db2a      	blt.n	8005438 <Vector120+0x68>
 80053e2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80053e6:	bb3a      	cbnz	r2, 8005438 <Vector120+0x68>
  oip->dbg.isr_cnt++;
 80053e8:	3301      	adds	r3, #1
 80053ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80053ee:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80053f2:	4b17      	ldr	r3, [pc, #92]	; (8005450 <Vector120+0x80>)
  if (dma.streams[8].func)
 80053f4:	4817      	ldr	r0, [pc, #92]	; (8005454 <Vector120+0x84>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80053f6:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 80053f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80053fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80053fe:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8005400:	b10a      	cbz	r2, 8005406 <Vector120+0x36>
    dma.streams[8].func(dma.streams[8].param, flags);
 8005402:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8005404:	4790      	blx	r2
 8005406:	2230      	movs	r2, #48	; 0x30
 8005408:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800540c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005410:	2b00      	cmp	r3, #0
 8005412:	dd14      	ble.n	800543e <Vector120+0x6e>
 8005414:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005418:	b989      	cbnz	r1, 800543e <Vector120+0x6e>
  oip->dbg.isr_cnt--;
 800541a:	3b01      	subs	r3, #1
 800541c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005420:	f381 8811 	msr	BASEPRI, r1
 8005424:	f382 8811 	msr	BASEPRI, r2
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <Vector120+0x88>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005430:	d108      	bne.n	8005444 <Vector120+0x74>
 8005432:	f383 8811 	msr	BASEPRI, r3
}
 8005436:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8005438:	4808      	ldr	r0, [pc, #32]	; (800545c <Vector120+0x8c>)
 800543a:	f7fb fda9 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 800543e:	4808      	ldr	r0, [pc, #32]	; (8005460 <Vector120+0x90>)
 8005440:	f7fb fda6 	bl	8000f90 <chSysHalt>
 8005444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005448:	f7ff b87a 	b.w	8004540 <__port_irq_epilogue.part.0>
 800544c:	20000de0 	.word	0x20000de0
 8005450:	40026400 	.word	0x40026400
 8005454:	200010e8 	.word	0x200010e8
 8005458:	e000ed00 	.word	0xe000ed00
 800545c:	08007528 	.word	0x08007528
 8005460:	08007530 	.word	0x08007530
	...

08005470 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8005470:	b510      	push	{r4, lr}
 8005472:	2330      	movs	r3, #48	; 0x30
 8005474:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005478:	4c1d      	ldr	r4, [pc, #116]	; (80054f0 <Vector124+0x80>)
 800547a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800547e:	2b00      	cmp	r3, #0
 8005480:	db2c      	blt.n	80054dc <Vector124+0x6c>
 8005482:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005486:	bb4a      	cbnz	r2, 80054dc <Vector124+0x6c>
  oip->dbg.isr_cnt++;
 8005488:	3301      	adds	r3, #1
 800548a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800548e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005492:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <Vector124+0x84>)
  if (dma.streams[9].func)
 8005494:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <Vector124+0x88>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8005496:	6819      	ldr	r1, [r3, #0]
 8005498:	0989      	lsrs	r1, r1, #6
 800549a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800549e:	0188      	lsls	r0, r1, #6
 80054a0:	6098      	str	r0, [r3, #8]
  if (dma.streams[9].func)
 80054a2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80054a4:	b10b      	cbz	r3, 80054aa <Vector124+0x3a>
    dma.streams[9].func(dma.streams[9].param, flags);
 80054a6:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80054a8:	4798      	blx	r3
 80054aa:	2230      	movs	r2, #48	; 0x30
 80054ac:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80054b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	dd14      	ble.n	80054e2 <Vector124+0x72>
 80054b8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80054bc:	b989      	cbnz	r1, 80054e2 <Vector124+0x72>
  oip->dbg.isr_cnt--;
 80054be:	3b01      	subs	r3, #1
 80054c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80054c4:	f381 8811 	msr	BASEPRI, r1
 80054c8:	f382 8811 	msr	BASEPRI, r2
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <Vector124+0x8c>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80054d4:	d108      	bne.n	80054e8 <Vector124+0x78>
 80054d6:	f383 8811 	msr	BASEPRI, r3
}
 80054da:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80054dc:	4808      	ldr	r0, [pc, #32]	; (8005500 <Vector124+0x90>)
 80054de:	f7fb fd57 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 80054e2:	4808      	ldr	r0, [pc, #32]	; (8005504 <Vector124+0x94>)
 80054e4:	f7fb fd54 	bl	8000f90 <chSysHalt>
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	f7ff b828 	b.w	8004540 <__port_irq_epilogue.part.0>
 80054f0:	20000de0 	.word	0x20000de0
 80054f4:	40026400 	.word	0x40026400
 80054f8:	200010e8 	.word	0x200010e8
 80054fc:	e000ed00 	.word	0xe000ed00
 8005500:	08007528 	.word	0x08007528
 8005504:	08007530 	.word	0x08007530
	...

08005510 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8005510:	b510      	push	{r4, lr}
 8005512:	2330      	movs	r3, #48	; 0x30
 8005514:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005518:	4c1d      	ldr	r4, [pc, #116]	; (8005590 <Vector128+0x80>)
 800551a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800551e:	2b00      	cmp	r3, #0
 8005520:	db2c      	blt.n	800557c <Vector128+0x6c>
 8005522:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005526:	bb4a      	cbnz	r2, 800557c <Vector128+0x6c>
  oip->dbg.isr_cnt++;
 8005528:	3301      	adds	r3, #1
 800552a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800552e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <Vector128+0x84>)
  if (dma.streams[10].func)
 8005534:	4a18      	ldr	r2, [pc, #96]	; (8005598 <Vector128+0x88>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8005536:	6819      	ldr	r1, [r3, #0]
 8005538:	0c09      	lsrs	r1, r1, #16
 800553a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800553e:	0408      	lsls	r0, r1, #16
 8005540:	6098      	str	r0, [r3, #8]
  if (dma.streams[10].func)
 8005542:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005544:	b10b      	cbz	r3, 800554a <Vector128+0x3a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8005546:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8005548:	4798      	blx	r3
 800554a:	2230      	movs	r2, #48	; 0x30
 800554c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005550:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005554:	2b00      	cmp	r3, #0
 8005556:	dd14      	ble.n	8005582 <Vector128+0x72>
 8005558:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800555c:	b989      	cbnz	r1, 8005582 <Vector128+0x72>
  oip->dbg.isr_cnt--;
 800555e:	3b01      	subs	r3, #1
 8005560:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005564:	f381 8811 	msr	BASEPRI, r1
 8005568:	f382 8811 	msr	BASEPRI, r2
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <Vector128+0x8c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005574:	d108      	bne.n	8005588 <Vector128+0x78>
 8005576:	f383 8811 	msr	BASEPRI, r3
}
 800557a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800557c:	4808      	ldr	r0, [pc, #32]	; (80055a0 <Vector128+0x90>)
 800557e:	f7fb fd07 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005582:	4808      	ldr	r0, [pc, #32]	; (80055a4 <Vector128+0x94>)
 8005584:	f7fb fd04 	bl	8000f90 <chSysHalt>
 8005588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558c:	f7fe bfd8 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005590:	20000de0 	.word	0x20000de0
 8005594:	40026400 	.word	0x40026400
 8005598:	200010e8 	.word	0x200010e8
 800559c:	e000ed00 	.word	0xe000ed00
 80055a0:	08007528 	.word	0x08007528
 80055a4:	08007530 	.word	0x08007530
	...

080055b0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80055b0:	b510      	push	{r4, lr}
 80055b2:	2330      	movs	r3, #48	; 0x30
 80055b4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80055b8:	4c1d      	ldr	r4, [pc, #116]	; (8005630 <Vector12C+0x80>)
 80055ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db2c      	blt.n	800561c <Vector12C+0x6c>
 80055c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80055c6:	bb4a      	cbnz	r2, 800561c <Vector12C+0x6c>
  oip->dbg.isr_cnt++;
 80055c8:	3301      	adds	r3, #1
 80055ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80055ce:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80055d2:	4b18      	ldr	r3, [pc, #96]	; (8005634 <Vector12C+0x84>)
  if (dma.streams[11].func)
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <Vector12C+0x88>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80055d6:	6819      	ldr	r1, [r3, #0]
 80055d8:	0d89      	lsrs	r1, r1, #22
 80055da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 80055de:	0588      	lsls	r0, r1, #22
 80055e0:	6098      	str	r0, [r3, #8]
  if (dma.streams[11].func)
 80055e2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80055e4:	b10b      	cbz	r3, 80055ea <Vector12C+0x3a>
    dma.streams[11].func(dma.streams[11].param, flags);
 80055e6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80055e8:	4798      	blx	r3
 80055ea:	2230      	movs	r2, #48	; 0x30
 80055ec:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80055f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	dd14      	ble.n	8005622 <Vector12C+0x72>
 80055f8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80055fc:	b989      	cbnz	r1, 8005622 <Vector12C+0x72>
  oip->dbg.isr_cnt--;
 80055fe:	3b01      	subs	r3, #1
 8005600:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005604:	f381 8811 	msr	BASEPRI, r1
 8005608:	f382 8811 	msr	BASEPRI, r2
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <Vector12C+0x8c>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005614:	d108      	bne.n	8005628 <Vector12C+0x78>
 8005616:	f383 8811 	msr	BASEPRI, r3
}
 800561a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800561c:	4808      	ldr	r0, [pc, #32]	; (8005640 <Vector12C+0x90>)
 800561e:	f7fb fcb7 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005622:	4808      	ldr	r0, [pc, #32]	; (8005644 <Vector12C+0x94>)
 8005624:	f7fb fcb4 	bl	8000f90 <chSysHalt>
 8005628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562c:	f7fe bf88 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005630:	20000de0 	.word	0x20000de0
 8005634:	40026400 	.word	0x40026400
 8005638:	200010e8 	.word	0x200010e8
 800563c:	e000ed00 	.word	0xe000ed00
 8005640:	08007528 	.word	0x08007528
 8005644:	08007530 	.word	0x08007530
	...

08005650 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8005650:	b510      	push	{r4, lr}
 8005652:	2330      	movs	r3, #48	; 0x30
 8005654:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005658:	4c1c      	ldr	r4, [pc, #112]	; (80056cc <Vector130+0x7c>)
 800565a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800565e:	2b00      	cmp	r3, #0
 8005660:	db2a      	blt.n	80056b8 <Vector130+0x68>
 8005662:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005666:	bb3a      	cbnz	r2, 80056b8 <Vector130+0x68>
  oip->dbg.isr_cnt++;
 8005668:	3301      	adds	r3, #1
 800566a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800566e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005672:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <Vector130+0x80>)
  if (dma.streams[12].func)
 8005674:	4817      	ldr	r0, [pc, #92]	; (80056d4 <Vector130+0x84>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8005676:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8005678:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800567a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800567e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8005680:	b10a      	cbz	r2, 8005686 <Vector130+0x36>
    dma.streams[12].func(dma.streams[12].param, flags);
 8005682:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8005684:	4790      	blx	r2
 8005686:	2230      	movs	r2, #48	; 0x30
 8005688:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800568c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005690:	2b00      	cmp	r3, #0
 8005692:	dd14      	ble.n	80056be <Vector130+0x6e>
 8005694:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005698:	b989      	cbnz	r1, 80056be <Vector130+0x6e>
  oip->dbg.isr_cnt--;
 800569a:	3b01      	subs	r3, #1
 800569c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80056a0:	f381 8811 	msr	BASEPRI, r1
 80056a4:	f382 8811 	msr	BASEPRI, r2
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <Vector130+0x88>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80056b0:	d108      	bne.n	80056c4 <Vector130+0x74>
 80056b2:	f383 8811 	msr	BASEPRI, r3
}
 80056b6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80056b8:	4808      	ldr	r0, [pc, #32]	; (80056dc <Vector130+0x8c>)
 80056ba:	f7fb fc69 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 80056be:	4808      	ldr	r0, [pc, #32]	; (80056e0 <Vector130+0x90>)
 80056c0:	f7fb fc66 	bl	8000f90 <chSysHalt>
 80056c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c8:	f7fe bf3a 	b.w	8004540 <__port_irq_epilogue.part.0>
 80056cc:	20000de0 	.word	0x20000de0
 80056d0:	40026400 	.word	0x40026400
 80056d4:	200010e8 	.word	0x200010e8
 80056d8:	e000ed00 	.word	0xe000ed00
 80056dc:	08007528 	.word	0x08007528
 80056e0:	08007530 	.word	0x08007530
	...

080056f0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80056f0:	b510      	push	{r4, lr}
 80056f2:	2330      	movs	r3, #48	; 0x30
 80056f4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80056f8:	4c1d      	ldr	r4, [pc, #116]	; (8005770 <Vector150+0x80>)
 80056fa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80056fe:	2b00      	cmp	r3, #0
 8005700:	db2c      	blt.n	800575c <Vector150+0x6c>
 8005702:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005706:	bb4a      	cbnz	r2, 800575c <Vector150+0x6c>
  oip->dbg.isr_cnt++;
 8005708:	3301      	adds	r3, #1
 800570a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800570e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005712:	4b18      	ldr	r3, [pc, #96]	; (8005774 <Vector150+0x84>)
  if (dma.streams[13].func)
 8005714:	4a18      	ldr	r2, [pc, #96]	; (8005778 <Vector150+0x88>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	0989      	lsrs	r1, r1, #6
 800571a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 800571e:	0188      	lsls	r0, r1, #6
 8005720:	60d8      	str	r0, [r3, #12]
  if (dma.streams[13].func)
 8005722:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8005724:	b10b      	cbz	r3, 800572a <Vector150+0x3a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8005726:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8005728:	4798      	blx	r3
 800572a:	2230      	movs	r2, #48	; 0x30
 800572c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005730:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005734:	2b00      	cmp	r3, #0
 8005736:	dd14      	ble.n	8005762 <Vector150+0x72>
 8005738:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800573c:	b989      	cbnz	r1, 8005762 <Vector150+0x72>
  oip->dbg.isr_cnt--;
 800573e:	3b01      	subs	r3, #1
 8005740:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005744:	f381 8811 	msr	BASEPRI, r1
 8005748:	f382 8811 	msr	BASEPRI, r2
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <Vector150+0x8c>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005754:	d108      	bne.n	8005768 <Vector150+0x78>
 8005756:	f383 8811 	msr	BASEPRI, r3
}
 800575a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800575c:	4808      	ldr	r0, [pc, #32]	; (8005780 <Vector150+0x90>)
 800575e:	f7fb fc17 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005762:	4808      	ldr	r0, [pc, #32]	; (8005784 <Vector150+0x94>)
 8005764:	f7fb fc14 	bl	8000f90 <chSysHalt>
 8005768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800576c:	f7fe bee8 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005770:	20000de0 	.word	0x20000de0
 8005774:	40026400 	.word	0x40026400
 8005778:	200010e8 	.word	0x200010e8
 800577c:	e000ed00 	.word	0xe000ed00
 8005780:	08007528 	.word	0x08007528
 8005784:	08007530 	.word	0x08007530
	...

08005790 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8005790:	b510      	push	{r4, lr}
 8005792:	2330      	movs	r3, #48	; 0x30
 8005794:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005798:	4c1d      	ldr	r4, [pc, #116]	; (8005810 <Vector154+0x80>)
 800579a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800579e:	2b00      	cmp	r3, #0
 80057a0:	db2c      	blt.n	80057fc <Vector154+0x6c>
 80057a2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80057a6:	bb4a      	cbnz	r2, 80057fc <Vector154+0x6c>
  oip->dbg.isr_cnt++;
 80057a8:	3301      	adds	r3, #1
 80057aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80057ae:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <Vector154+0x84>)
  if (dma.streams[14].func)
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <Vector154+0x88>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80057b6:	6859      	ldr	r1, [r3, #4]
 80057b8:	0c09      	lsrs	r1, r1, #16
 80057ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 80057be:	0408      	lsls	r0, r1, #16
 80057c0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[14].func)
 80057c2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80057c4:	b10b      	cbz	r3, 80057ca <Vector154+0x3a>
    dma.streams[14].func(dma.streams[14].param, flags);
 80057c6:	6f90      	ldr	r0, [r2, #120]	; 0x78
 80057c8:	4798      	blx	r3
 80057ca:	2230      	movs	r2, #48	; 0x30
 80057cc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80057d0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dd14      	ble.n	8005802 <Vector154+0x72>
 80057d8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80057dc:	b989      	cbnz	r1, 8005802 <Vector154+0x72>
  oip->dbg.isr_cnt--;
 80057de:	3b01      	subs	r3, #1
 80057e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80057e4:	f381 8811 	msr	BASEPRI, r1
 80057e8:	f382 8811 	msr	BASEPRI, r2
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <Vector154+0x8c>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80057f4:	d108      	bne.n	8005808 <Vector154+0x78>
 80057f6:	f383 8811 	msr	BASEPRI, r3
}
 80057fa:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80057fc:	4808      	ldr	r0, [pc, #32]	; (8005820 <Vector154+0x90>)
 80057fe:	f7fb fbc7 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005802:	4808      	ldr	r0, [pc, #32]	; (8005824 <Vector154+0x94>)
 8005804:	f7fb fbc4 	bl	8000f90 <chSysHalt>
 8005808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580c:	f7fe be98 	b.w	8004540 <__port_irq_epilogue.part.0>
 8005810:	20000de0 	.word	0x20000de0
 8005814:	40026400 	.word	0x40026400
 8005818:	200010e8 	.word	0x200010e8
 800581c:	e000ed00 	.word	0xe000ed00
 8005820:	08007528 	.word	0x08007528
 8005824:	08007530 	.word	0x08007530
	...

08005830 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8005830:	b510      	push	{r4, lr}
 8005832:	2330      	movs	r3, #48	; 0x30
 8005834:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005838:	4c1e      	ldr	r4, [pc, #120]	; (80058b4 <Vector158+0x84>)
 800583a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800583e:	2b00      	cmp	r3, #0
 8005840:	db2d      	blt.n	800589e <Vector158+0x6e>
 8005842:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005846:	bb52      	cbnz	r2, 800589e <Vector158+0x6e>
  oip->dbg.isr_cnt++;
 8005848:	3301      	adds	r3, #1
 800584a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800584e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <Vector158+0x88>)
  if (dma.streams[15].func)
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <Vector158+0x8c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	0d89      	lsrs	r1, r1, #22
 800585a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 800585e:	0588      	lsls	r0, r1, #22
 8005860:	60d8      	str	r0, [r3, #12]
  if (dma.streams[15].func)
 8005862:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8005864:	b113      	cbz	r3, 800586c <Vector158+0x3c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8005866:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 800586a:	4798      	blx	r3
 800586c:	2230      	movs	r2, #48	; 0x30
 800586e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005872:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005876:	2b00      	cmp	r3, #0
 8005878:	dd14      	ble.n	80058a4 <Vector158+0x74>
 800587a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800587e:	b989      	cbnz	r1, 80058a4 <Vector158+0x74>
  oip->dbg.isr_cnt--;
 8005880:	3b01      	subs	r3, #1
 8005882:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005886:	f381 8811 	msr	BASEPRI, r1
 800588a:	f382 8811 	msr	BASEPRI, r2
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <Vector158+0x90>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005896:	d108      	bne.n	80058aa <Vector158+0x7a>
 8005898:	f383 8811 	msr	BASEPRI, r3
}
 800589c:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800589e:	4809      	ldr	r0, [pc, #36]	; (80058c4 <Vector158+0x94>)
 80058a0:	f7fb fb76 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 80058a4:	4808      	ldr	r0, [pc, #32]	; (80058c8 <Vector158+0x98>)
 80058a6:	f7fb fb73 	bl	8000f90 <chSysHalt>
 80058aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ae:	f7fe be47 	b.w	8004540 <__port_irq_epilogue.part.0>
 80058b2:	bf00      	nop
 80058b4:	20000de0 	.word	0x20000de0
 80058b8:	40026400 	.word	0x40026400
 80058bc:	200010e8 	.word	0x200010e8
 80058c0:	e000ed00 	.word	0xe000ed00
 80058c4:	08007528 	.word	0x08007528
 80058c8:	08007530 	.word	0x08007530
 80058cc:	00000000 	.word	0x00000000

080058d0 <VectorC4>:
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	2130      	movs	r1, #48	; 0x30
 80058d4:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80058d8:	4c7d      	ldr	r4, [pc, #500]	; (8005ad0 <VectorC4+0x200>)
 80058da:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f2c0 80e5 	blt.w	8005aae <VectorC4+0x1de>
 80058e4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	f040 80e0 	bne.w	8005aae <VectorC4+0x1de>
  oip->dbg.isr_cnt++;
 80058ee:	3301      	adds	r3, #1
 80058f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80058f4:	f382 8811 	msr	BASEPRI, r2
  I2C_TypeDef *dp = i2cp->i2c;
 80058f8:	4a76      	ldr	r2, [pc, #472]	; (8005ad4 <VectorC4+0x204>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80058fa:	4877      	ldr	r0, [pc, #476]	; (8005ad8 <VectorC4+0x208>)
  I2C_TypeDef *dp = i2cp->i2c;
 80058fc:	6b55      	ldr	r5, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 80058fe:	69ab      	ldr	r3, [r5, #24]
  uint32_t event = dp->SR1;
 8005900:	696e      	ldr	r6, [r5, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8005902:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8005906:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800590a:	4283      	cmp	r3, r0
 800590c:	d836      	bhi.n	800597c <VectorC4+0xac>
 800590e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005912:	d90f      	bls.n	8005934 <VectorC4+0x64>
 8005914:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005918:	3b01      	subs	r3, #1
 800591a:	2b10      	cmp	r3, #16
 800591c:	d80d      	bhi.n	800593a <VectorC4+0x6a>
 800591e:	e8df f003 	tbb	[pc, r3]
 8005922:	5942      	.short	0x5942
 8005924:	0c0c0c0c 	.word	0x0c0c0c0c
 8005928:	0c0c6f0c 	.word	0x0c0c6f0c
 800592c:	0c0c0c0c 	.word	0x0c0c0c0c
 8005930:	0c0c      	.short	0x0c0c
 8005932:	74          	.byte	0x74
 8005933:	00          	.byte	0x00
 8005934:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005938:	d035      	beq.n	80059a6 <VectorC4+0xd6>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800593a:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 800593e:	bf18      	it	ne
 8005940:	69ab      	ldrne	r3, [r5, #24]
 8005942:	2230      	movs	r2, #48	; 0x30
 8005944:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005948:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800594c:	2b00      	cmp	r3, #0
 800594e:	f340 80b1 	ble.w	8005ab4 <VectorC4+0x1e4>
 8005952:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005956:	2900      	cmp	r1, #0
 8005958:	f040 80ac 	bne.w	8005ab4 <VectorC4+0x1e4>
  oip->dbg.isr_cnt--;
 800595c:	3b01      	subs	r3, #1
 800595e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005962:	f381 8811 	msr	BASEPRI, r1
 8005966:	f382 8811 	msr	BASEPRI, r2
 800596a:	4b5c      	ldr	r3, [pc, #368]	; (8005adc <VectorC4+0x20c>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005972:	f040 80a2 	bne.w	8005aba <VectorC4+0x1ea>
 8005976:	f383 8811 	msr	BASEPRI, r3
}
 800597a:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800597c:	4858      	ldr	r0, [pc, #352]	; (8005ae0 <VectorC4+0x210>)
 800597e:	4283      	cmp	r3, r0
 8005980:	d01d      	beq.n	80059be <VectorC4+0xee>
 8005982:	3002      	adds	r0, #2
 8005984:	4283      	cmp	r3, r0
 8005986:	d1d8      	bne.n	800593a <VectorC4+0x6a>
    (void)dp->DR; /* Clear BTF.*/
 8005988:	692b      	ldr	r3, [r5, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800598a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d064      	beq.n	8005a5e <VectorC4+0x18e>
      i2cp->addr |= 0x01;
 8005994:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8005996:	682b      	ldr	r3, [r5, #0]
      i2cp->addr |= 0x01;
 8005998:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800599c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 80059a0:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80059a2:	602b      	str	r3, [r5, #0]
      return;
 80059a4:	e7cd      	b.n	8005942 <VectorC4+0x72>
    if ((i2cp->addr >> 8) > 0) {
 80059a6:	8c13      	ldrh	r3, [r2, #32]
 80059a8:	0a1a      	lsrs	r2, r3, #8
 80059aa:	d02c      	beq.n	8005a06 <VectorC4+0x136>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80059ac:	f002 0206 	and.w	r2, r2, #6
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80059ba:	612b      	str	r3, [r5, #16]
 80059bc:	e7bd      	b.n	800593a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80059be:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 80059c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80059c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 80059c6:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80059c8:	606b      	str	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 80059ca:	6813      	ldr	r3, [r2, #0]
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	6013      	str	r3, [r2, #0]
    break;
 80059d2:	e7b2      	b.n	800593a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80059d4:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 80059d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80059d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 80059dc:	680b      	ldr	r3, [r1, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80059de:	606a      	str	r2, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80059e8:	686a      	ldr	r2, [r5, #4]
 80059ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059ee:	606a      	str	r2, [r5, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d8a1      	bhi.n	800593a <VectorC4+0x6a>
      dp->CR1 &= ~I2C_CR1_ACK;
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	e79c      	b.n	800593a <VectorC4+0x6a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8005a00:	8c13      	ldrh	r3, [r2, #32]
 8005a02:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8005a06:	612b      	str	r3, [r5, #16]
    break;
 8005a08:	e797      	b.n	800593a <VectorC4+0x6a>
  dmaStreamDisable(i2cp->dmatx);
 8005a0a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  dp->CR1 = I2C_CR1_SWRST;
 8005a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a10:	602b      	str	r3, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 8005a12:	6801      	ldr	r1, [r0, #0]
  dp->CR1 = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	602b      	str	r3, [r5, #0]
  dp->CR2 = 0;
 8005a18:	606b      	str	r3, [r5, #4]
  dp->SR1 = 0;
 8005a1a:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8005a1c:	680b      	ldr	r3, [r1, #0]
 8005a1e:	f023 031f 	bic.w	r3, r3, #31
 8005a22:	600b      	str	r3, [r1, #0]
 8005a24:	680b      	ldr	r3, [r1, #0]
 8005a26:	07db      	lsls	r3, r3, #31
 8005a28:	d4fc      	bmi.n	8005a24 <VectorC4+0x154>
 8005a2a:	f890 c009 	ldrb.w	ip, [r0, #9]
  dmaStreamDisable(i2cp->dmarx);
 8005a2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8005a30:	6842      	ldr	r2, [r0, #4]
 8005a32:	233d      	movs	r3, #61	; 0x3d
 8005a34:	fa03 f30c 	lsl.w	r3, r3, ip
 8005a38:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8005a3a:	680a      	ldr	r2, [r1, #0]
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	f023 031f 	bic.w	r3, r3, #31
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	6813      	ldr	r3, [r2, #0]
 8005a46:	07db      	lsls	r3, r3, #31
 8005a48:	d4fc      	bmi.n	8005a44 <VectorC4+0x174>
 8005a4a:	684a      	ldr	r2, [r1, #4]
 8005a4c:	7a49      	ldrb	r1, [r1, #9]
 8005a4e:	233d      	movs	r3, #61	; 0x3d
 8005a50:	408b      	lsls	r3, r1
 8005a52:	6013      	str	r3, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005a54:	686b      	ldr	r3, [r5, #4]
 8005a56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a5a:	606b      	str	r3, [r5, #4]
    break;
 8005a5c:	e76d      	b.n	800593a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8005a5e:	686b      	ldr	r3, [r5, #4]
 8005a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a64:	606b      	str	r3, [r5, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a6c:	602b      	str	r3, [r5, #0]
 8005a6e:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005a72:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	dd23      	ble.n	8005ac2 <VectorC4+0x1f2>
 8005a7a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a7e:	bb03      	cbnz	r3, 8005ac2 <VectorC4+0x1f2>
  if (*trp != NULL) {
 8005a80:	69d0      	ldr	r0, [r2, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 8005a82:	2101      	movs	r1, #1
 8005a84:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8005a88:	b158      	cbz	r0, 8005aa2 <VectorC4+0x1d2>
    *trp = NULL;
 8005a8a:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8005a8c:	6283      	str	r3, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 8005a8e:	f7fd fe4f 	bl	8003730 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005a92:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd16      	ble.n	8005ac8 <VectorC4+0x1f8>
 8005a9a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	dd12      	ble.n	8005ac8 <VectorC4+0x1f8>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	e745      	b.n	800593a <VectorC4+0x6a>
    chSysHalt("SV#8");
 8005aae:	480d      	ldr	r0, [pc, #52]	; (8005ae4 <VectorC4+0x214>)
 8005ab0:	f7fb fa6e 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005ab4:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <VectorC4+0x218>)
 8005ab6:	f7fb fa6b 	bl	8000f90 <chSysHalt>
}
 8005aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005abe:	f7fe bd3f 	b.w	8004540 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 8005ac2:	480a      	ldr	r0, [pc, #40]	; (8005aec <VectorC4+0x21c>)
 8005ac4:	f7fb fa64 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#7");
 8005ac8:	4809      	ldr	r0, [pc, #36]	; (8005af0 <VectorC4+0x220>)
 8005aca:	f7fb fa61 	bl	8000f90 <chSysHalt>
 8005ace:	bf00      	nop
 8005ad0:	20000de0 	.word	0x20000de0
 8005ad4:	20000840 	.word	0x20000840
 8005ad8:	00030011 	.word	0x00030011
 8005adc:	e000ed00 	.word	0xe000ed00
 8005ae0:	00070082 	.word	0x00070082
 8005ae4:	08007528 	.word	0x08007528
 8005ae8:	08007530 	.word	0x08007530
 8005aec:	080074cc 	.word	0x080074cc
 8005af0:	080074e4 	.word	0x080074e4
	...

08005b00 <VectorC8>:
  uint16_t sr = I2CD2.i2c->SR1;
 8005b00:	495a      	ldr	r1, [pc, #360]	; (8005c6c <VectorC8+0x16c>)
 8005b02:	6b4a      	ldr	r2, [r1, #52]	; 0x34
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 8005b06:	6955      	ldr	r5, [r2, #20]
 8005b08:	2330      	movs	r3, #48	; 0x30
 8005b0a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8005b0e:	4c58      	ldr	r4, [pc, #352]	; (8005c70 <VectorC8+0x170>)
 8005b10:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f2c0 8098 	blt.w	8005c4a <VectorC8+0x14a>
 8005b1a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	f040 8093 	bne.w	8005c4a <VectorC8+0x14a>
  oip->dbg.isr_cnt++;
 8005b24:	3301      	adds	r3, #1
 8005b26:	b2a8      	uxth	r0, r5
 8005b28:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005b2c:	f382 8811 	msr	BASEPRI, r2
  dmaStreamDisable(i2cp->dmatx);
 8005b30:	e9d1 760c 	ldrd	r7, r6, [r1, #48]	; 0x30
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8005b34:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 8005b38:	683a      	ldr	r2, [r7, #0]
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	6173      	str	r3, [r6, #20]
  dmaStreamDisable(i2cp->dmatx);
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	f023 031f 	bic.w	r3, r3, #31
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	07db      	lsls	r3, r3, #31
 8005b4a:	d4fc      	bmi.n	8005b46 <VectorC8+0x46>
 8005b4c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8005b50:	687a      	ldr	r2, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8005b52:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8005b54:	233d      	movs	r3, #61	; 0x3d
 8005b56:	fa03 f30c 	lsl.w	r3, r3, ip
 8005b5a:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	f023 031f 	bic.w	r3, r3, #31
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	07db      	lsls	r3, r3, #31
 8005b6a:	d4fc      	bmi.n	8005b66 <VectorC8+0x66>
 8005b6c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	233d      	movs	r3, #61	; 0x3d
 8005b74:	fa03 f30c 	lsl.w	r3, r3, ip
 8005b78:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8005b7a:	f3c0 2300 	ubfx	r3, r0, #8, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8005b7e:	0582      	lsls	r2, r0, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8005b80:	bf48      	it	mi
 8005b82:	f043 0302 	orrmi.w	r3, r3, #2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8005b86:	0547      	lsls	r7, r0, #21
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8005b88:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8005b8a:	d50a      	bpl.n	8005ba2 <VectorC8+0xa2>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8005b8c:	6872      	ldr	r2, [r6, #4]
 8005b8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b92:	6072      	str	r2, [r6, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8005b94:	6832      	ldr	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8005b96:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8005b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9e:	6032      	str	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8005ba0:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8005ba2:	0502      	lsls	r2, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8005ba4:	bf44      	itt	mi
 8005ba6:	f043 0308 	orrmi.w	r3, r3, #8
 8005baa:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8005bac:	0447      	lsls	r7, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 8005bae:	bf44      	itt	mi
 8005bb0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb4:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8005bb6:	04c6      	lsls	r6, r0, #19
 8005bb8:	d41c      	bmi.n	8005bf4 <VectorC8+0xf4>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8005bba:	042a      	lsls	r2, r5, #16
 8005bbc:	d41f      	bmi.n	8005bfe <VectorC8+0xfe>
  if (i2cp->errors != I2C_NO_ERROR)
 8005bbe:	bb0b      	cbnz	r3, 8005c04 <VectorC8+0x104>
 8005bc0:	2230      	movs	r2, #48	; 0x30
 8005bc2:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005bc6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dd40      	ble.n	8005c50 <VectorC8+0x150>
 8005bce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	d13c      	bne.n	8005c50 <VectorC8+0x150>
  oip->dbg.isr_cnt--;
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005bdc:	f381 8811 	msr	BASEPRI, r1
 8005be0:	f382 8811 	msr	BASEPRI, r2
 8005be4:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <VectorC8+0x174>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8005bec:	d133      	bne.n	8005c56 <VectorC8+0x156>
 8005bee:	f383 8811 	msr	BASEPRI, r3
}
 8005bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->errors |= I2C_PEC_ERROR;
 8005bf4:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8005bf8:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8005bfa:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8005bfc:	d502      	bpl.n	8005c04 <VectorC8+0x104>
    i2cp->errors |= I2C_SMB_ALERT;
 8005bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c02:	608b      	str	r3, [r1, #8]
 8005c04:	2330      	movs	r3, #48	; 0x30
 8005c06:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005c0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dd25      	ble.n	8005c5e <VectorC8+0x15e>
 8005c12:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005c16:	bb13      	cbnz	r3, 8005c5e <VectorC8+0x15e>
  if (*trp != NULL) {
 8005c18:	69c8      	ldr	r0, [r1, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8005c20:	b168      	cbz	r0, 8005c3e <VectorC8+0x13e>
    tp->u.rdymsg = msg;
 8005c22:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 8005c26:	61cb      	str	r3, [r1, #28]
    tp->u.rdymsg = msg;
 8005c28:	6282      	str	r2, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 8005c2a:	f7fd fd81 	bl	8003730 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8005c2e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dd16      	ble.n	8005c64 <VectorC8+0x164>
 8005c36:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	dd12      	ble.n	8005c64 <VectorC8+0x164>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	e7ba      	b.n	8005bc0 <VectorC8+0xc0>
    chSysHalt("SV#8");
 8005c4a:	480b      	ldr	r0, [pc, #44]	; (8005c78 <VectorC8+0x178>)
 8005c4c:	f7fb f9a0 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#9");
 8005c50:	480a      	ldr	r0, [pc, #40]	; (8005c7c <VectorC8+0x17c>)
 8005c52:	f7fb f99d 	bl	8000f90 <chSysHalt>
}
 8005c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c5a:	f7fe bc71 	b.w	8004540 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 8005c5e:	4808      	ldr	r0, [pc, #32]	; (8005c80 <VectorC8+0x180>)
 8005c60:	f7fb f996 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#7");
 8005c64:	4807      	ldr	r0, [pc, #28]	; (8005c84 <VectorC8+0x184>)
 8005c66:	f7fb f993 	bl	8000f90 <chSysHalt>
 8005c6a:	bf00      	nop
 8005c6c:	20000840 	.word	0x20000840
 8005c70:	20000de0 	.word	0x20000de0
 8005c74:	e000ed00 	.word	0xe000ed00
 8005c78:	08007528 	.word	0x08007528
 8005c7c:	08007530 	.word	0x08007530
 8005c80:	080074cc 	.word	0x080074cc
 8005c84:	080074e4 	.word	0x080074e4
	...

08005c90 <chSchDoPreemption>:
  thread_t *otp = __instance_get_currthread(oip);
 8005c90:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <chSchDoPreemption+0x4c>)
  ch_priority_queue_t *p = pqp->next;
 8005c92:	6810      	ldr	r0, [r2, #0]
 8005c94:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 8005c96:	6803      	ldr	r3, [r0, #0]
static void __sch_reschedule_ahead(void) {
 8005c98:	b510      	push	{r4, lr}
  ntp->state = CH_STATE_CURRENT;
 8005c9a:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8005ca2:	2400      	movs	r4, #0
  pqp->next       = p->next;
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8005caa:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio > p->prio));
 8005cac:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 8005cae:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 8005cb0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	42a2      	cmp	r2, r4
 8005cb6:	d8fb      	bhi.n	8005cb0 <chSchDoPreemption+0x20>
  p->prev       = pqp->prev;
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8005cbe:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8005cc0:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005cc2:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(ntp, otp);
 8005cc6:	6a0a      	ldr	r2, [r1, #32]
 8005cc8:	3b64      	subs	r3, #100	; 0x64
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d803      	bhi.n	8005cd6 <chSchDoPreemption+0x46>
}
 8005cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSysSwitch(ntp, otp);
 8005cd2:	f7fa bb17 	b.w	8000304 <__port_switch>
 8005cd6:	4802      	ldr	r0, [pc, #8]	; (8005ce0 <chSchDoPreemption+0x50>)
 8005cd8:	f7fb f95a 	bl	8000f90 <chSysHalt>
 8005cdc:	20000de0 	.word	0x20000de0
 8005ce0:	080074f4 	.word	0x080074f4
	...

08005cf0 <myprintf>:
int myprintf(const char *fmt, ...) {
 8005cf0:	b40f      	push	{r0, r1, r2, r3}
 8005cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005cf4:	2330      	movs	r3, #48	; 0x30
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005cfc:	4c69      	ldr	r4, [pc, #420]	; (8005ea4 <myprintf+0x1b4>)
 8005cfe:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f040 8088 	bne.w	8005e18 <myprintf+0x128>

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8005d08:	4d67      	ldr	r5, [pc, #412]	; (8005ea8 <myprintf+0x1b8>)
 8005d0a:	68e6      	ldr	r6, [r4, #12]
 8005d0c:	68a8      	ldr	r0, [r5, #8]
  oip->dbg.lock_cnt = (cnt_t)1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f000 80ba 	beq.w	8005e8e <myprintf+0x19e>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8005d1a:	68b3      	ldr	r3, [r6, #8]
 8005d1c:	6882      	ldr	r2, [r0, #8]
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d909      	bls.n	8005d36 <myprintf+0x46>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8005d22:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8005d24:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005d28:	2b06      	cmp	r3, #6
 8005d2a:	f000 8093 	beq.w	8005e54 <myprintf+0x164>
 8005d2e:	2b07      	cmp	r3, #7
 8005d30:	d07c      	beq.n	8005e2c <myprintf+0x13c>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d073      	beq.n	8005e1e <myprintf+0x12e>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 8005d36:	4b5c      	ldr	r3, [pc, #368]	; (8005ea8 <myprintf+0x1b8>)
 8005d38:	e003      	b.n	8005d42 <myprintf+0x52>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 8005d3a:	6899      	ldr	r1, [r3, #8]
 8005d3c:	68b2      	ldr	r2, [r6, #8]
 8005d3e:	4291      	cmp	r1, r2
 8005d40:	d302      	bcc.n	8005d48 <myprintf+0x58>
    cp = cp->next;
 8005d42:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	d1f8      	bne.n	8005d3a <myprintf+0x4a>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 8005d48:	685a      	ldr	r2, [r3, #4]
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
      currtp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8005d4a:	2006      	movs	r0, #6
 8005d4c:	e9c6 3200 	strd	r3, r2, [r6]
  tp->prev->next = tp;
 8005d50:	6016      	str	r6, [r2, #0]
  cp->prev       = tp;
 8005d52:	605e      	str	r6, [r3, #4]
      currtp->u.wtmtxp = mp;
 8005d54:	62b5      	str	r5, [r6, #40]	; 0x28
      chSchGoSleepS(CH_STATE_WTMTX);
 8005d56:	f7fd fe7b 	bl	8003a50 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005d5a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 8092 	bne.w	8005e88 <myprintf+0x198>
 8005d64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f340 808d 	ble.w	8005e88 <myprintf+0x198>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005d74:	f383 8811 	msr	BASEPRI, r3


int vprintf_(const char* format, va_list va)
{
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005d78:	9908      	ldr	r1, [sp, #32]
    va_start(ap, fmt);
 8005d7a:	aa09      	add	r2, sp, #36	; 0x24
 8005d7c:	4668      	mov	r0, sp
 8005d7e:	9201      	str	r2, [sp, #4]
 8005d80:	f7fc fabe 	bl	8002300 <_vsnprintf.constprop.0>
 8005d84:	68e1      	ldr	r1, [r4, #12]
 8005d86:	4606      	mov	r6, r0
 8005d88:	2330      	movs	r3, #48	; 0x30
 8005d8a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005d8e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005d92:	431a      	orrs	r2, r3
 8005d94:	d140      	bne.n	8005e18 <myprintf+0x128>
  return (bool)(qp->next != qp);
 8005d96:	6828      	ldr	r0, [r5, #0]
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8005d98:	68eb      	ldr	r3, [r5, #12]
  oip->dbg.lock_cnt = (cnt_t)1;
 8005d9a:	2701      	movs	r7, #1

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8005d9c:	42a8      	cmp	r0, r5
 8005d9e:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    currtp->mtxlist = mp->next;
 8005da2:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 8005da4:	d078      	beq.n	8005e98 <myprintf+0x1a8>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8005da6:	6c0f      	ldr	r7, [r1, #64]	; 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 8005da8:	b14b      	cbz	r3, 8005dbe <myprintf+0xce>
 8005daa:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <myprintf+0xc8>
 8005db0:	6892      	ldr	r2, [r2, #8]
 8005db2:	4297      	cmp	r7, r2
 8005db4:	bf38      	it	cc
 8005db6:	4617      	movcc	r7, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 8005db8:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f5      	bne.n	8005daa <myprintf+0xba>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8005dbe:	608f      	str	r7, [r1, #8]
  qp->next       = p->next;
 8005dc0:	6803      	ldr	r3, [r0, #0]
 8005dc2:	602b      	str	r3, [r5, #0]
  qp->next->prev = qp;
 8005dc4:	605d      	str	r5, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8005dc6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      tp->mtxlist = mp;
 8005dc8:	63c5      	str	r5, [r0, #60]	; 0x3c
      mp->next = tp->mtxlist;
 8005dca:	e9c5 0302 	strd	r0, r3, [r5, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8005dce:	f7fd fcaf 	bl	8003730 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005dd2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d160      	bne.n	8005e9c <myprintf+0x1ac>
 8005dda:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	dd5c      	ble.n	8005e9c <myprintf+0x1ac>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	68e3      	ldr	r3, [r4, #12]
 8005de6:	6892      	ldr	r2, [r2, #8]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d909      	bls.n	8005e02 <myprintf+0x112>
    __sch_reschedule_ahead();
 8005dee:	f7ff ff4f 	bl	8005c90 <chSchDoPreemption>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005df2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d146      	bne.n	8005e88 <myprintf+0x198>
 8005dfa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	dd42      	ble.n	8005e88 <myprintf+0x198>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005e08:	f383 8811 	msr	BASEPRI, r3
}
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	b003      	add	sp, #12
 8005e10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005e14:	b004      	add	sp, #16
 8005e16:	4770      	bx	lr
    chSysHalt("SV#4");
 8005e18:	4824      	ldr	r0, [pc, #144]	; (8005eac <myprintf+0x1bc>)
 8005e1a:	f7fb f8b9 	bl	8000f90 <chSysHalt>
  p->prev->next = p->next;
 8005e1e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005e22:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8005e24:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 8005e26:	f7fd fc83 	bl	8003730 <chSchReadyI.isra.0>
          break;
 8005e2a:	e784      	b.n	8005d36 <myprintf+0x46>
  p->prev->next = p->next;
 8005e2c:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8005e30:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8005e32:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8005e34:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 8005e36:	463b      	mov	r3, r7
 8005e38:	e003      	b.n	8005e42 <myprintf+0x152>
  } while ((cp != qp) &&
 8005e3a:	6899      	ldr	r1, [r3, #8]
 8005e3c:	6882      	ldr	r2, [r0, #8]
 8005e3e:	4291      	cmp	r1, r2
 8005e40:	d302      	bcc.n	8005e48 <myprintf+0x158>
    cp = cp->next;
 8005e42:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8005e44:	429f      	cmp	r7, r3
 8005e46:	d1f8      	bne.n	8005e3a <myprintf+0x14a>
  tp->prev       = cp->prev;
 8005e48:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 8005e4a:	6003      	str	r3, [r0, #0]
  tp->prev       = cp->prev;
 8005e4c:	6042      	str	r2, [r0, #4]
  tp->prev->next = tp;
 8005e4e:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8005e50:	6058      	str	r0, [r3, #4]
}
 8005e52:	e770      	b.n	8005d36 <myprintf+0x46>
  p->prev->next = p->next;
 8005e54:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8005e58:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8005e5a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8005e5c:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 8005e5e:	463b      	mov	r3, r7
 8005e60:	e003      	b.n	8005e6a <myprintf+0x17a>
  } while ((cp != qp) &&
 8005e62:	6899      	ldr	r1, [r3, #8]
 8005e64:	6882      	ldr	r2, [r0, #8]
 8005e66:	4291      	cmp	r1, r2
 8005e68:	d302      	bcc.n	8005e70 <myprintf+0x180>
    cp = cp->next;
 8005e6a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8005e6c:	429f      	cmp	r7, r3
 8005e6e:	d1f8      	bne.n	8005e62 <myprintf+0x172>
  tp->prev       = cp->prev;
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	6042      	str	r2, [r0, #4]
  tp->next       = cp;
 8005e74:	6003      	str	r3, [r0, #0]
  tp->prev->next = tp;
 8005e76:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8005e78:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8005e7a:	68b8      	ldr	r0, [r7, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8005e7c:	68b3      	ldr	r3, [r6, #8]
 8005e7e:	6882      	ldr	r2, [r0, #8]
 8005e80:	4293      	cmp	r3, r2
 8005e82:	f63f af4e 	bhi.w	8005d22 <myprintf+0x32>
 8005e86:	e756      	b.n	8005d36 <myprintf+0x46>
    chSysHalt("SV#5");
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <myprintf+0x1c0>)
 8005e8a:	f7fb f881 	bl	8000f90 <chSysHalt>
    mp->next = currtp->mtxlist;
 8005e8e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    currtp->mtxlist = mp;
 8005e90:	63f5      	str	r5, [r6, #60]	; 0x3c
    mp->next = currtp->mtxlist;
 8005e92:	e9c5 6302 	strd	r6, r3, [r5, #8]
 8005e96:	e76a      	b.n	8005d6e <myprintf+0x7e>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8005e98:	60aa      	str	r2, [r5, #8]
void __dbg_check_unlock(void) {
 8005e9a:	e7b2      	b.n	8005e02 <myprintf+0x112>
    chSysHalt("SV#11");
 8005e9c:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <myprintf+0x1c4>)
 8005e9e:	f7fb f877 	bl	8000f90 <chSysHalt>
 8005ea2:	bf00      	nop
 8005ea4:	20000de0 	.word	0x20000de0
 8005ea8:	20001174 	.word	0x20001174
 8005eac:	080074dc 	.word	0x080074dc
 8005eb0:	08007504 	.word	0x08007504
 8005eb4:	080074ec 	.word	0x080074ec
	...

08005ec0 <ThdSerial>:



/* Serial Manager thread. */
static THD_WORKING_AREA(waThdSerial, 2000); //256
static THD_FUNCTION(ThdSerial, arg) {
 8005ec0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <ThdSerial+0x94>)
 8005ec4:	4924      	ldr	r1, [pc, #144]	; (8005f58 <ThdSerial+0x98>)
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	2330      	movs	r3, #48	; 0x30
 8005eca:	61d1      	str	r1, [r2, #28]
 8005ecc:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 8005ed0:	f7fe fd96 	bl	8004a00 <__dbg_check_lock>
  if (sdp->state == SD_STOP) {
 8005ed4:	4921      	ldr	r1, [pc, #132]	; (8005f5c <ThdSerial+0x9c>)
 8005ed6:	7a0b      	ldrb	r3, [r1, #8]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d02f      	beq.n	8005f3c <ThdSerial+0x7c>
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8005edc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8005ede:	4820      	ldr	r0, [pc, #128]	; (8005f60 <ThdSerial+0xa0>)
 8005ee0:	f503 32e1 	add.w	r2, r3, #115200	; 0x1c200
 8005ee4:	fba0 0202 	umull	r0, r2, r0, r2
  USART_TypeDef *u = sdp->usart;
 8005ee8:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8005eea:	0c52      	lsrs	r2, r2, #17
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005eec:	2440      	movs	r4, #64	; 0x40
  u->BRR = brr;
 8005eee:	609a      	str	r2, [r3, #8]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005ef0:	2001      	movs	r0, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005ef2:	611c      	str	r4, [r3, #16]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8005ef4:	f242 122c 	movw	r2, #8492	; 0x212c
  u->SR = 0;
 8005ef8:	2400      	movs	r4, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005efa:	6158      	str	r0, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8005efc:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 8005efe:	20ff      	movs	r0, #255	; 0xff
  u->SR = 0;
 8005f00:	601c      	str	r4, [r3, #0]
    sdp->state = SD_READY;
 8005f02:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 8005f04:	681d      	ldr	r5, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8005f06:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8005f08:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
 8005f0c:	720a      	strb	r2, [r1, #8]
  __dbg_check_unlock();
 8005f0e:	f7fe fd5f 	bl	80049d0 <__dbg_check_unlock>
 8005f12:	f384 8811 	msr	BASEPRI, r4
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD2, &my_config);

  myprintf("ThdSerial\n");
 8005f16:	4813      	ldr	r0, [pc, #76]	; (8005f64 <ThdSerial+0xa4>)

  while(true) {


    // Getting data from Serial Driver with a timeout.
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(100));
 8005f18:	4d13      	ldr	r5, [pc, #76]	; (8005f68 <ThdSerial+0xa8>)
    // Checking if a timeout has occurred.
    if(tkn != MSG_TIMEOUT)
      sdPut(&SD1, tkn);    // Not a timeout-> forward to GNSS
 8005f1a:	4c14      	ldr	r4, [pc, #80]	; (8005f6c <ThdSerial+0xac>)
  myprintf("ThdSerial\n");
 8005f1c:	f7ff fee8 	bl	8005cf0 <myprintf>
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(100));
 8005f20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f24:	4628      	mov	r0, r5
 8005f26:	f7fd ff0b 	bl	8003d40 <iqGetTimeout>
    if(tkn != MSG_TIMEOUT)
 8005f2a:	1c43      	adds	r3, r0, #1
      sdPut(&SD1, tkn);    // Not a timeout-> forward to GNSS
 8005f2c:	b2c1      	uxtb	r1, r0
 8005f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f32:	4620      	mov	r0, r4
    if(tkn != MSG_TIMEOUT)
 8005f34:	d0f4      	beq.n	8005f20 <ThdSerial+0x60>
      sdPut(&SD1, tkn);    // Not a timeout-> forward to GNSS
 8005f36:	f7fe f81b 	bl	8003f70 <oqPutTimeout>
 8005f3a:	e7f1      	b.n	8005f20 <ThdSerial+0x60>
      rccEnableUSART2(true);
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <ThdSerial+0xb0>)
 8005f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
 8005f46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f4c:	661a      	str	r2, [r3, #96]	; 0x60
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	e7c4      	b.n	8005edc <ThdSerial+0x1c>
 8005f52:	bf00      	nop
 8005f54:	20000de0 	.word	0x20000de0
 8005f58:	08007538 	.word	0x08007538
 8005f5c:	200008f8 	.word	0x200008f8
 8005f60:	91a2b3c5 	.word	0x91a2b3c5
 8005f64:	08007548 	.word	0x08007548
 8005f68:	20000904 	.word	0x20000904
 8005f6c:	200008a8 	.word	0x200008a8
 8005f70:	40023800 	.word	0x40023800
	...

08005f80 <ThdGNSS>:

/*
 * GNSS (UART1) receive and forward
 */
static THD_WORKING_AREA(waThdGNSS, 256);
static THD_FUNCTION(ThdGNSS, arg) {
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4c14      	ldr	r4, [pc, #80]	; (8005fd4 <ThdGNSS+0x54>)
 8005f84:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <ThdGNSS+0x58>)
 8005f86:	68e3      	ldr	r3, [r4, #12]
  (void)arg;
  chRegSetThreadName("GNSS");
  myprintf("ThdGNSS\n");
 8005f88:	4814      	ldr	r0, [pc, #80]	; (8005fdc <ThdGNSS+0x5c>)
 8005f8a:	61da      	str	r2, [r3, #28]
 8005f8c:	f7ff feb0 	bl	8005cf0 <myprintf>
 8005f90:	2330      	movs	r3, #48	; 0x30
 8005f92:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005f96:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	d113      	bne.n	8005fc6 <ThdGNSS+0x46>
  oip->dbg.lock_cnt = (cnt_t)1;
 8005f9e:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005fa0:	f242 7110 	movw	r1, #10000	; 0x2710
 8005fa4:	2008      	movs	r0, #8
 8005fa6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005faa:	f7fd fd81 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005fae:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005fb2:	b95b      	cbnz	r3, 8005fcc <ThdGNSS+0x4c>
 8005fb4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	dd07      	ble.n	8005fcc <ThdGNSS+0x4c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005fbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005fc0:	f383 8811 	msr	BASEPRI, r3
    }
  }
*/

  chThdSleepMilliseconds(1000); //for debugging when disabled
}
 8005fc4:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 8005fc6:	4806      	ldr	r0, [pc, #24]	; (8005fe0 <ThdGNSS+0x60>)
 8005fc8:	f7fa ffe2 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#5");
 8005fcc:	4805      	ldr	r0, [pc, #20]	; (8005fe4 <ThdGNSS+0x64>)
 8005fce:	f7fa ffdf 	bl	8000f90 <chSysHalt>
 8005fd2:	bf00      	nop
 8005fd4:	20000de0 	.word	0x20000de0
 8005fd8:	08007554 	.word	0x08007554
 8005fdc:	0800755c 	.word	0x0800755c
 8005fe0:	080074dc 	.word	0x080074dc
 8005fe4:	08007504 	.word	0x08007504
	...

08005ff0 <ThdBeeper>:
/*
 * Piezo beeper
 */

static THD_WORKING_AREA(waThdBeeper, 128);
static THD_FUNCTION(ThdBeeper, arg) {
 8005ff0:	b580      	push	{r7, lr}
  (void)arg;
  myprintf("ThdBeeper\n");
 8005ff2:	483b      	ldr	r0, [pc, #236]	; (80060e0 <ThdBeeper+0xf0>)
 8005ff4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80060f8 <ThdBeeper+0x108>
 8005ff8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80060fc <ThdBeeper+0x10c>
void heater_disable(void){
  palClearPad(GPIOA, GPIOA_heater_enable);
}

void piezo_toggle(void){
  palTogglePad(GPIOC, GPIOC_PIEZO_A);
 8005ffc:	4d39      	ldr	r5, [pc, #228]	; (80060e4 <ThdBeeper+0xf4>)
 8005ffe:	f7ff fe77 	bl	8005cf0 <myprintf>

  while(true){

    if(beep_ms){
 8006002:	f8d9 3000 	ldr.w	r3, [r9]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d046      	beq.n	8006098 <ThdBeeper+0xa8>
      systime_t start = chVTGetSystemTimeX();
      systime_t end = chTimeAddX(start, TIME_MS2I(beep_ms));
 800600a:	f242 7210 	movw	r2, #10000	; 0x2710
 800600e:	f240 30e7 	movw	r0, #999	; 0x3e7
 8006012:	2100      	movs	r1, #0
 8006014:	fbe3 0102 	umlal	r0, r1, r3, r2
 8006018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800601c:	2300      	movs	r3, #0
 800601e:	f7fa ff19 	bl	8000e54 <__aeabi_uldivmod>
 8006022:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 8006026:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800602a:	b2bf      	uxth	r7, r7
 800602c:	d255      	bcs.n	80060da <ThdBeeper+0xea>
 800602e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006032:	4c2d      	ldr	r4, [pc, #180]	; (80060e8 <ThdBeeper+0xf8>)
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8006034:	1bdb      	subs	r3, r3, r7
  return systime + (systime_t)interval;
 8006036:	b286      	uxth	r6, r0
      while (chTimeIsInRangeX(chVTGetSystemTimeX(), start, end)) {
 8006038:	b29b      	uxth	r3, r3
 800603a:	42b3      	cmp	r3, r6
 800603c:	bf38      	it	cc
 800603e:	f04f 0a30 	movcc.w	sl, #48	; 0x30
 8006042:	d225      	bcs.n	8006090 <ThdBeeper+0xa0>
 8006044:	696b      	ldr	r3, [r5, #20]
 8006046:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 800604a:	616b      	str	r3, [r5, #20]
  palTogglePad(GPIOC, GPIOC_PIEZO_B);
 800604c:	696b      	ldr	r3, [r5, #20]
 800604e:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 8006052:	616b      	str	r3, [r5, #20]
 8006054:	f38a 8811 	msr	BASEPRI, sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006058:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800605c:	4313      	orrs	r3, r2
 800605e:	d136      	bne.n	80060ce <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 8006060:	2301      	movs	r3, #1
 8006062:	210a      	movs	r1, #10
 8006064:	2008      	movs	r0, #8
 8006066:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800606a:	f7fd fd21 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800606e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006072:	bb7b      	cbnz	r3, 80060d4 <ThdBeeper+0xe4>
 8006074:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006078:	2a00      	cmp	r2, #0
 800607a:	dd2b      	ble.n	80060d4 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 800607c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8006088:	1bdb      	subs	r3, r3, r7
 800608a:	b29b      	uxth	r3, r3
 800608c:	429e      	cmp	r6, r3
 800608e:	d8d9      	bhi.n	8006044 <ThdBeeper+0x54>
        piezo_toggle();
        chThdSleepMilliseconds(1);
      }
      beep_ms = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	f8c9 3000 	str.w	r3, [r9]
 8006096:	e000      	b.n	800609a <ThdBeeper+0xaa>
 8006098:	4c13      	ldr	r4, [pc, #76]	; (80060e8 <ThdBeeper+0xf8>)
 800609a:	2330      	movs	r3, #48	; 0x30
 800609c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80060a0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d112      	bne.n	80060ce <ThdBeeper+0xde>
  oip->dbg.lock_cnt = (cnt_t)1;
 80060a8:	2301      	movs	r3, #1
 80060aa:	2164      	movs	r1, #100	; 0x64
 80060ac:	2008      	movs	r0, #8
 80060ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80060b2:	f7fd fcfd 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80060b6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80060ba:	b95b      	cbnz	r3, 80060d4 <ThdBeeper+0xe4>
 80060bc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	dd07      	ble.n	80060d4 <ThdBeeper+0xe4>
  oip->dbg.lock_cnt = (cnt_t)0;
 80060c4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80060c8:	f383 8811 	msr	BASEPRI, r3
}
 80060cc:	e799      	b.n	8006002 <ThdBeeper+0x12>
    chSysHalt("SV#4");
 80060ce:	4807      	ldr	r0, [pc, #28]	; (80060ec <ThdBeeper+0xfc>)
 80060d0:	f7fa ff5e 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#5");
 80060d4:	4806      	ldr	r0, [pc, #24]	; (80060f0 <ThdBeeper+0x100>)
 80060d6:	f7fa ff5b 	bl	8000f90 <chSysHalt>
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80060da:	4806      	ldr	r0, [pc, #24]	; (80060f4 <ThdBeeper+0x104>)
 80060dc:	f7fa ff58 	bl	8000f90 <chSysHalt>
 80060e0:	08007568 	.word	0x08007568
 80060e4:	40020800 	.word	0x40020800
 80060e8:	20000de0 	.word	0x20000de0
 80060ec:	080074dc 	.word	0x080074dc
 80060f0:	08007504 	.word	0x08007504
 80060f4:	08007684 	.word	0x08007684
 80060f8:	200009b4 	.word	0x200009b4
 80060fc:	40014800 	.word	0x40014800

08006100 <ThdCntr>:
    chThdSleepMilliseconds(10);
  }
}

static THD_WORKING_AREA(waThdCntr, 256);
static THD_FUNCTION(ThdCntr, arg) {
 8006100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc_TAC_end_cb_counter = 0;
  adc_TAC_error_cb_counter = 0;

  //ADC1->CR2 |= ADC_CR2_SWSTART;

  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN); //enable peripheral clock
 8006104:	4c88      	ldr	r4, [pc, #544]	; (8006328 <ThdCntr+0x228>)
}



void ThdCntrFunc(void) {
  myprintf("ThdCntr\n");
 8006106:	4889      	ldr	r0, [pc, #548]	; (800632c <ThdCntr+0x22c>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006108:	4f89      	ldr	r7, [pc, #548]	; (8006330 <ThdCntr+0x230>)
//Generate TRGO on capture event to trigger adc injected conversion
//adapted from AN4776
//32bit counter, running at 100MHz
void TIM5_init(void){
#warning GPIOA_CNT_IN pin mode alternate wasnt set in board.h! try again with board.h
  palSetPadMode(GPIOA, GPIOA_CNT_IN, PAL_MODE_ALTERNATE(2) | PAL_MODE_INPUT); //setting alternate function in board.h didn't work
 800610a:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8006360 <ThdCntr+0x260>
 800610e:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8006364 <ThdCntr+0x264>
 8006112:	4d88      	ldr	r5, [pc, #544]	; (8006334 <ThdCntr+0x234>)
  while(div > 0){
    adf_config_div_n(div);
    adc_isr_count = 0;
    chThdSleepMilliseconds(1);
    count = adc_isr_count;
    myprintf("div_autoset div: %5u, count: %7u\n", div, count);
 8006114:	f8df a250 	ldr.w	sl, [pc, #592]	; 8006368 <ThdCntr+0x268>
  myprintf("ThdCntr\n");
 8006118:	f7ff fdea 	bl	8005cf0 <myprintf>
 800611c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADCRST); //assert reset
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADCRST); //deassert reset -> registers should be at power up defaults


  //Defaults: Single conversion, 12bit, right aligned
  ADC1->SMPR1 = (1 << ADC_SMPR1_SMP10_Pos); //010: 15 cycles = 600ns
 800611e:	4b86      	ldr	r3, [pc, #536]	; (8006338 <ThdCntr+0x238>)
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN); //enable peripheral clock
 8006120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006124:	6462      	str	r2, [r4, #68]	; 0x44
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADCRST); //assert reset
 8006126:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612c:	6262      	str	r2, [r4, #36]	; 0x24
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADCRST); //deassert reset -> registers should be at power up defaults
 800612e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  ADC1->SMPR1 = (1 << ADC_SMPR1_SMP10_Pos); //010: 15 cycles = 600ns
 8006130:	2101      	movs	r1, #1
  ADC1->JSQR = 10 << ADC_JSQR_JSQ4_Pos; //single injected conversion, CH10, result in JDR1!
 8006132:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_ADCRST); //deassert reset -> registers should be at power up defaults
 8006136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800613a:	6262      	str	r2, [r4, #36]	; 0x24
  ADC1->SMPR1 = (1 << ADC_SMPR1_SMP10_Pos); //010: 15 cycles = 600ns
 800613c:	60d9      	str	r1, [r3, #12]
  ADC1->CR1 = ADC_CR1_JEOCIE; //JEOC interrupt enabled (injected end of conversion)
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_JEXTEN_0 | (11 << ADC_CR2_JEXTSEL_Pos); //Enable ADC (needs 3us after this for stable conversions)
 800613e:	4a7f      	ldr	r2, [pc, #508]	; (800633c <ThdCntr+0x23c>)
  ADC1->JSQR = 10 << ADC_JSQR_JSQ4_Pos; //single injected conversion, CH10, result in JDR1!
 8006140:	6398      	str	r0, [r3, #56]	; 0x38
  ADC1->CR1 = ADC_CR1_JEOCIE; //JEOC interrupt enabled (injected end of conversion)
 8006142:	2080      	movs	r0, #128	; 0x80
 8006144:	6058      	str	r0, [r3, #4]
 8006146:	f04f 0b70 	mov.w	fp, #112	; 0x70
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_JEXTEN_0 | (11 << ADC_CR2_JEXTSEL_Pos); //Enable ADC (needs 3us after this for stable conversions)
 800614a:	609a      	str	r2, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800614c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006150:	f887 b312 	strb.w	fp, [r7, #786]	; 0x312
 8006154:	f44f 7281 	mov.w	r2, #258	; 0x102
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	4648      	mov	r0, r9
 800615c:	f7fa fe98 	bl	8000e90 <_pal_lld_setgroupmode>
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM5EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system)
 8006160:	6c23      	ldr	r3, [r4, #64]	; 0x40
  timepulse_capt_curr = 0;
 8006162:	f8df c208 	ldr.w	ip, [pc, #520]	; 800636c <ThdCntr+0x26c>
  myprintf("calModeIntRef100M\n");
 8006166:	4876      	ldr	r0, [pc, #472]	; (8006340 <ThdCntr+0x240>)
 8006168:	f043 0308 	orr.w	r3, r3, #8
 800616c:	6423      	str	r3, [r4, #64]	; 0x40

  TIM5->CR2 = TIM_CR2_MMS_1 | TIM_CR2_MMS_0; //Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be
 800616e:	4b75      	ldr	r3, [pc, #468]	; (8006344 <ThdCntr+0x244>)
 8006170:	2230      	movs	r2, #48	; 0x30
 8006172:	605a      	str	r2, [r3, #4]
                                              //set (even if it was already high), as soon as a capture or a compare match occurred
  TIM5->SMCR = 0; // Reset the SMCR register
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
  TIM5->PSC = 0; //prescaler 1
  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8006174:	2101      	movs	r1, #1
  TIM5->SMCR = 0; // Reset the SMCR register
 8006176:	2600      	movs	r6, #0
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
  TIM5->SMCR = 0; // Reset the SMCR register
 800617c:	609e      	str	r6, [r3, #8]
  TIM5->ARR = 0xFFFFFFFF; //auto reload (period) set to max
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->PSC = 0; //prescaler 1
 8006180:	629e      	str	r6, [r3, #40]	; 0x28
  TIM5->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 8006182:	6159      	str	r1, [r3, #20]
  TIM5->CCER = 0; //all CC channels off
 8006184:	621e      	str	r6, [r3, #32]
  TIM5->CCMR1 = 0;
 8006186:	619e      	str	r6, [r3, #24]
  TIM5->CCMR1 |= TIM_CCMR1_CC1S_0; //CC1 channel is configured as input, IC1 is mapped on TI1
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	430a      	orrs	r2, r1
 800618c:	619a      	str	r2, [r3, #24]
                                   //CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).

#warning should probably set to falling edge
  //(TIM5->CCER |= TIM_CCER_CC1P; //Circuit is sensitive to TIxFP1 falling edge (capture..)
  //CC1P = 0 -> //Circuit is sensitive to TIxFP1 rising edge (capture..
  TIM5->CCER |= TIM_CCER_CC1E; //CC1 enabled
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	430a      	orrs	r2, r1
 8006192:	621a      	str	r2, [r3, #32]
  TIM5->CR1 = 0;//upcounter, continuous
 8006194:	601e      	str	r6, [r3, #0]
  TIM5->CR1 |= TIM_CR1_CEN; //enable
 8006196:	681a      	ldr	r2, [r3, #0]
  timepulse_capt_curr = 0;
 8006198:	ed9f 7b61 	vldr	d7, [pc, #388]	; 8006320 <ThdCntr+0x220>
 800619c:	430a      	orrs	r2, r1
 800619e:	601a      	str	r2, [r3, #0]
  TIM5->SR = ~TIM_SR_CC1IF; //Clear event flag
 80061a0:	f06f 0202 	mvn.w	r2, #2
 80061a4:	611a      	str	r2, [r3, #16]
 80061a6:	ed8c 7b00 	vstr	d7, [ip]
//continuous up-counter. overflow -> update event -> update interrupt
//input capture
void TIM1_init(void){
//#warning GPIOA_CNT_IN pin mode alternate wasn't set in board.h! try again with board.h
//  palSetPadMode(GPIOA, GPIOA_CNT_IN, PAL_MODE_ALTERNATE(2) | PAL_MODE_INPUT); //setting alternate function in board.h didn't work
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system?)
 80061aa:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN); //enable peripheral clock
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //assert reset
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //deassert reset -> registers should be at power up defaults

  //trigger input
  TIM9->CCMR1 = TIM_CCMR1_CC2S_0 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0; //channel 2 is input, PWM mode 2: positive pulse after delay
 80061ae:	4a66      	ldr	r2, [pc, #408]	; (8006348 <ThdCntr+0x248>)
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM1EN); //enable peripheral clock (should be handled by mcuconf in chibi hal system?)
 80061b0:	ea4c 0c01 	orr.w	ip, ip, r1
 80061b4:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST); //assert reset
 80061b8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 80061bc:	ea4c 0c01 	orr.w	ip, ip, r1
 80061c0:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST); //deassert reset -> registers should be at power up defaults
 80061c4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
  TIM1->DIER = TIM_DIER_UIE; //Update interrupt enable
 80061c8:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
  TIM1->ARR = 0xFFFF; //auto reload (period) set to max (16bit)
 80061cc:	f64f 7eff 	movw	lr, #65535	; 0xffff
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM1RST); //deassert reset -> registers should be at power up defaults
 80061d0:	f02c 0c01 	bic.w	ip, ip, #1
 80061d4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  TIM1->DIER = TIM_DIER_UIE; //Update interrupt enable
 80061d8:	60d9      	str	r1, [r3, #12]
  TIM1->ARR = 0xFFFF; //auto reload (period) set to max (16bit)
 80061da:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  TIM1->EGR = TIM_EGR_UG; //update (load ARR, prescaler)
 80061de:	6159      	str	r1, [r3, #20]
  TIM1->CCMR2 |= TIM_CCMR2_CC4S_0; //CC4 channel is configured as input, IC4 is mapped on TI4
 80061e0:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80061e4:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80061e8:	f8c3 c01c 	str.w	ip, [r3, #28]
  TIM1->CCER |= TIM_CCER_CC4E; //CC4 enabled
 80061ec:	f8d3 c020 	ldr.w	ip, [r3, #32]
 80061f0:	f44c 5c80 	orr.w	ip, ip, #4096	; 0x1000
 80061f4:	f8c3 c020 	str.w	ip, [r3, #32]
  TIM1->CR1 = TIM_CR1_CEN; //enable
 80061f8:	6019      	str	r1, [r3, #0]
  TIM1->SR = ~TIM_SR_CC4IF; //Clear event flag
 80061fa:	f06f 0110 	mvn.w	r1, #16
 80061fe:	6119      	str	r1, [r3, #16]
  tim1_overflows = 0;
 8006200:	4b52      	ldr	r3, [pc, #328]	; (800634c <ThdCntr+0x24c>)
 8006202:	601e      	str	r6, [r3, #0]
 8006204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006208:	f887 b319 	strb.w	fp, [r7, #793]	; 0x319
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800620c:	603b      	str	r3, [r7, #0]
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM9EN); //enable peripheral clock
 800620e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006214:	6463      	str	r3, [r4, #68]	; 0x44
  SET_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //assert reset
 8006216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621c:	6263      	str	r3, [r4, #36]	; 0x24
  CLEAR_BIT(RCC->APB2RSTR, RCC_APB2RSTR_TIM9RST); //deassert reset -> registers should be at power up defaults
 800621e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006224:	6263      	str	r3, [r4, #36]	; 0x24
  TIM9->CCMR1 = TIM_CCMR1_CC2S_0 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0; //channel 2 is input, PWM mode 2: positive pulse after delay
 8006226:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800622a:	6193      	str	r3, [r2, #24]
  TIM9->CCER = TIM_CCER_CC2P | TIM_CCER_CC1E; //falling edge, CC1 output enabled
 800622c:	2321      	movs	r3, #33	; 0x21
 800622e:	6213      	str	r3, [r2, #32]
  TIM9->SMCR = TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1; //trigger input = Filtered Timer Input 2 (TI2FP2)
 8006230:	2366      	movs	r3, #102	; 0x66
 8006232:	6093      	str	r3, [r2, #8]
                                                                                //Slave mode = trigger (counter starts on trigger)
  //output
  TIM9->CCR1 = delay; //delay after trigger
 8006234:	235a      	movs	r3, #90	; 0x5a
 8006236:	6353      	str	r3, [r2, #52]	; 0x34
  TIM9->ARR = delay + width; //pulse width
 8006238:	2364      	movs	r3, #100	; 0x64
 800623a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM9->CR1 = TIM_CR1_OPM; //stop after one pulse (CEN cleared by hw)
 800623c:	2308      	movs	r3, #8
 800623e:	6013      	str	r3, [r2, #0]
  myprintf("calModeIntRef100M\n");
 8006240:	f7ff fd56 	bl	8005cf0 <myprintf>
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 8006244:	4b42      	ldr	r3, [pc, #264]	; (8006350 <ThdCntr+0x250>)
 8006246:	2220      	movs	r2, #32
 8006248:	831a      	strh	r2, [r3, #24]
  palClearPad(GPIOB, GPIOB_REF_INT_SEL);
 800624a:	2101      	movs	r1, #1
  palSetPad(GPIOA, GPIOA_CAL_EN);
 800624c:	2240      	movs	r2, #64	; 0x40
  palClearPad(GPIOB, GPIOB_REF_INT_SEL);
 800624e:	8359      	strh	r1, [r3, #26]
  palSetPad(GPIOA, GPIOA_CAL_EN);
 8006250:	f8a9 2018 	strh.w	r2, [r9, #24]
  palSetPad(GPIOB, GPIOB_CAL_SOUR_SEL);
 8006254:	2210      	movs	r2, #16
 8006256:	831a      	strh	r2, [r3, #24]

void adf_config_spi_test(void) {
  adf_write_reg(0xAAAAAAAA);
}

void adf_config_div_n(uint32_t div_n) { adf_config(div_n, 0, 0);}
 8006258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800625c:	f7fe f948 	bl	80044f0 <adf_config.constprop.0>
 8006260:	270d      	movs	r7, #13
  uint32_t div = 8190;
 8006262:	f641 74fe 	movw	r4, #8190	; 0x1ffe
 8006266:	f04f 0930 	mov.w	r9, #48	; 0x30
 800626a:	4620      	mov	r0, r4
 800626c:	f7fe f940 	bl	80044f0 <adf_config.constprop.0>
    adc_isr_count = 0;
 8006270:	f8c8 6000 	str.w	r6, [r8]
 8006274:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006278:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 800627c:	4313      	orrs	r3, r2
 800627e:	d147      	bne.n	8006310 <ThdCntr+0x210>
  oip->dbg.lock_cnt = (cnt_t)1;
 8006280:	2301      	movs	r3, #1
 8006282:	210a      	movs	r1, #10
 8006284:	2008      	movs	r0, #8
 8006286:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800628a:	f7fd fc11 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800628e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8006292:	2b00      	cmp	r3, #0
 8006294:	d13f      	bne.n	8006316 <ThdCntr+0x216>
 8006296:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800629a:	2a00      	cmp	r2, #0
 800629c:	dd3b      	ble.n	8006316 <ThdCntr+0x216>
  oip->dbg.lock_cnt = (cnt_t)0;
 800629e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80062a2:	f383 8811 	msr	BASEPRI, r3
    count = adc_isr_count;
 80062a6:	f8d8 b000 	ldr.w	fp, [r8]
    myprintf("div_autoset div: %5u, count: %7u\n", div, count);
 80062aa:	4621      	mov	r1, r4
 80062ac:	465a      	mov	r2, fp
 80062ae:	4650      	mov	r0, sl
 80062b0:	f7ff fd1e 	bl	8005cf0 <myprintf>
    if(count < 1000){
 80062b4:	f5bb 7f7a 	cmp.w	fp, #1000	; 0x3e8
 80062b8:	d204      	bcs.n	80062c4 <ThdCntr+0x1c4>
  while(div > 0){
 80062ba:	3f01      	subs	r7, #1
      div /= 2;
 80062bc:	ea4f 0454 	mov.w	r4, r4, lsr #1
  while(div > 0){
 80062c0:	d1d3      	bne.n	800626a <ThdCntr+0x16a>
 80062c2:	463c      	mov	r4, r7
    } else {
      break;
    }
  }

  adc_isr_count = 0;
 80062c4:	f8c8 6000 	str.w	r6, [r8]
 80062c8:	2330      	movs	r3, #48	; 0x30
 80062ca:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80062ce:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 80062d2:	4313      	orrs	r3, r2
 80062d4:	d11c      	bne.n	8006310 <ThdCntr+0x210>
  oip->dbg.lock_cnt = (cnt_t)1;
 80062d6:	2301      	movs	r3, #1
 80062d8:	210a      	movs	r1, #10
 80062da:	2008      	movs	r0, #8
 80062dc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80062e0:	f7fd fbe6 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80062e4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80062e8:	b9ab      	cbnz	r3, 8006316 <ThdCntr+0x216>
 80062ea:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	dd11      	ble.n	8006316 <ThdCntr+0x216>
  oip->dbg.lock_cnt = (cnt_t)0;
 80062f2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80062f6:	f383 8811 	msr	BASEPRI, r3
  chThdSleepMilliseconds(1);
  count = adc_isr_count;
  myprintf("div_autoset div: %5u, count: %7u\n", div, count);
 80062fa:	4621      	mov	r1, r4
 80062fc:	f8d8 2000 	ldr.w	r2, [r8]
 8006300:	4650      	mov	r0, sl
 8006302:	f7ff fcf5 	bl	8005cf0 <myprintf>
    printf("div_autoset: %u\n", div_autoset());
 8006306:	4621      	mov	r1, r4
 8006308:	4812      	ldr	r0, [pc, #72]	; (8006354 <ThdCntr+0x254>)
 800630a:	f7fe fb01 	bl	8004910 <printf_.constprop.0>
  while(1){
 800630e:	e7a7      	b.n	8006260 <ThdCntr+0x160>
    chSysHalt("SV#4");
 8006310:	4811      	ldr	r0, [pc, #68]	; (8006358 <ThdCntr+0x258>)
 8006312:	f7fa fe3d 	bl	8000f90 <chSysHalt>
    chSysHalt("SV#5");
 8006316:	4811      	ldr	r0, [pc, #68]	; (800635c <ThdCntr+0x25c>)
 8006318:	f7fa fe3a 	bl	8000f90 <chSysHalt>
 800631c:	f3af 8000 	nop.w
	...
 8006328:	40023800 	.word	0x40023800
 800632c:	08007574 	.word	0x08007574
 8006330:	e000e100 	.word	0xe000e100
 8006334:	20000de0 	.word	0x20000de0
 8006338:	40012000 	.word	0x40012000
 800633c:	001b0001 	.word	0x001b0001
 8006340:	08007580 	.word	0x08007580
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40014000 	.word	0x40014000
 800634c:	20001184 	.word	0x20001184
 8006350:	40020400 	.word	0x40020400
 8006354:	0800750c 	.word	0x0800750c
 8006358:	080074dc 	.word	0x080074dc
 800635c:	08007504 	.word	0x08007504
 8006360:	40020000 	.word	0x40020000
 8006364:	200009b0 	.word	0x200009b0
 8006368:	08007594 	.word	0x08007594
 800636c:	20001188 	.word	0x20001188

08006370 <ThdDisp>:
  (void)arg;
  ThdCntrFunc();
}

static THD_WORKING_AREA(waThdDisp, 256);
static THD_FUNCTION(ThdDisp, arg) {
 8006370:	b500      	push	{lr}

  return global;
}

void ThdDispFunc(void) {
  myprintf("ThdDisp\n");
 8006372:	4897      	ldr	r0, [pc, #604]	; (80065d0 <ThdDisp+0x260>)
 8006374:	b083      	sub	sp, #12
 8006376:	f7ff fcbb 	bl	8005cf0 <myprintf>
 800637a:	2430      	movs	r4, #48	; 0x30
 800637c:	f384 8811 	msr	BASEPRI, r4
  __dbg_check_lock();
 8006380:	f7fe fb3e 	bl	8004a00 <__dbg_check_lock>
  gptp->config = config;
 8006384:	4b93      	ldr	r3, [pc, #588]	; (80065d4 <ThdDisp+0x264>)
 8006386:	4994      	ldr	r1, [pc, #592]	; (80065d8 <ThdDisp+0x268>)
  if (gptp->state == GPT_STOP) {
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	6059      	str	r1, [r3, #4]
 800638c:	2a01      	cmp	r2, #1
 800638e:	f000 8105 	beq.w	800659c <ThdDisp+0x22c>
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8006392:	689c      	ldr	r4, [r3, #8]
 8006394:	4a91      	ldr	r2, [pc, #580]	; (80065dc <ThdDisp+0x26c>)
 8006396:	fbb4 f4f2 	udiv	r4, r4, r2
 800639a:	3c01      	subs	r4, #1
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 800639c:	b2a4      	uxth	r4, r4
  gptp->tim->CR1  = 0U;                         /* Initially stopped.       */
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	2500      	movs	r5, #0
 80063a2:	6015      	str	r5, [r2, #0]
    gptp->state = GPT_READY;
 80063a4:	2102      	movs	r1, #2
  gptp->tim->CR2  = gptp->config->cr2;
 80063a6:	6055      	str	r5, [r2, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80063a8:	6294      	str	r4, [r2, #40]	; 0x28
  gptp->tim->SR   = 0U;                         /* Clear pending IRQs.      */
 80063aa:	6115      	str	r5, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80063ac:	60d5      	str	r5, [r2, #12]
 80063ae:	7019      	strb	r1, [r3, #0]
  __dbg_check_unlock();
 80063b0:	f7fe fb0e 	bl	80049d0 <__dbg_check_unlock>
 80063b4:	f385 8811 	msr	BASEPRI, r5
  palSetPadMode(GPIOB,  9, PAL_MODE_ALTERNATE(9) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN); //I2C2 SDA
 80063b8:	4889      	ldr	r0, [pc, #548]	; (80065e0 <ThdDisp+0x270>)
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 80063ba:	4c8a      	ldr	r4, [pc, #552]	; (80065e4 <ThdDisp+0x274>)
 80063bc:	f240 429e 	movw	r2, #1182	; 0x49e
 80063c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063c4:	f7fa fd64 	bl	8000e90 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 10, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN); //I2C2 SCL
 80063c8:	f240 221e 	movw	r2, #542	; 0x21e
 80063cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063d0:	f7fa fd5e 	bl	8000e90 <_pal_lld_setgroupmode>
  chThdSleepMilliseconds(500);
 80063d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80063d8:	f7fd fe42 	bl	8004060 <chThdSleep>
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    u8x8->bus_clock = 0;		/* issue 769 */
    u8x8->i2c_address = 255;
 80063dc:	20ff      	movs	r0, #255	; 0xff
 80063de:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80063e2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
{
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80063e6:	4880      	ldr	r0, [pc, #512]	; (80065e8 <ThdDisp+0x278>)
 80063e8:	60a0      	str	r0, [r4, #8]
  u8x8->cad_cb = cad_cb;
 80063ea:	4880      	ldr	r0, [pc, #512]	; (80065ec <ThdDisp+0x27c>)
 80063ec:	60e0      	str	r0, [r4, #12]
  u8x8->byte_cb = byte_cb;
 80063ee:	4880      	ldr	r0, [pc, #512]	; (80065f0 <ThdDisp+0x280>)
 80063f0:	6120      	str	r0, [r4, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80063f2:	4880      	ldr	r0, [pc, #512]	; (80065f4 <ThdDisp+0x284>)
    u8x8->display_info = NULL;
 80063f4:	6025      	str	r5, [r4, #0]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80063f6:	2109      	movs	r1, #9
 80063f8:	462b      	mov	r3, r5
 80063fa:	462a      	mov	r2, r5
    u8x8->is_font_inverse_mode = 0;
 80063fc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8006400:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8006404:	61a5      	str	r5, [r4, #24]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8006406:	6160      	str	r0, [r4, #20]
 8006408:	4620      	mov	r0, r4
 800640a:	f7fc fbe1 	bl	8002bd0 <u8x8_d_sh1107_64x128>
  u8g2->ll_hvline = ll_hvline_cb;
 800640e:	4a7a      	ldr	r2, [pc, #488]	; (80065f8 <ThdDisp+0x288>)
 8006410:	62e2      	str	r2, [r4, #44]	; 0x2c
  u8g2->tile_buf_height = tile_buf_height;
 8006412:	2210      	movs	r2, #16
 8006414:	8722      	strh	r2, [r4, #56]	; 0x38
  u8g2->tile_buf_ptr = buf;
 8006416:	4b79      	ldr	r3, [pc, #484]	; (80065fc <ThdDisp+0x28c>)
 8006418:	6363      	str	r3, [r4, #52]	; 0x34
  u8g2->draw_color = 1;
 800641a:	f240 1201 	movw	r2, #257	; 0x101
  u8g2->cb->update_dimension(u8g2);
 800641e:	4620      	mov	r0, r4
  u8g2->draw_color = 1;
 8006420:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
  u8g2->cb = u8g2_cb;
 8006424:	4b76      	ldr	r3, [pc, #472]	; (8006600 <ThdDisp+0x290>)
  u8g2->font = NULL;
 8006426:	65a5      	str	r5, [r4, #88]	; 0x58
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8006428:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
  u8g2->font_height_mode = 0; /* issue 2046 */
 800642c:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
  u8g2->bitmap_transparency = 0;
 8006430:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
  u8g2->cb = u8g2_cb;
 8006434:	6323      	str	r3, [r4, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8006436:	f7fb f8eb 	bl	8001610 <u8g2_update_dimension_r1>
  u8g2->clip_x0 = 0;
 800643a:	4b72      	ldr	r3, [pc, #456]	; (8006604 <ThdDisp+0x294>)
  u8g2->clip_y0 = 0;
 800643c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  u8g2->cb->update_page_win(u8g2);
 8006440:	f7fb f90e 	bl	8001660 <u8g2_update_page_win_r1>
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8006444:	4a70      	ldr	r2, [pc, #448]	; (8006608 <ThdDisp+0x298>)
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8006446:	68a6      	ldr	r6, [r4, #8]
 8006448:	65e2      	str	r2, [r4, #92]	; 0x5c
 800644a:	462b      	mov	r3, r5
  u8g2->font_decode.dir = 0;
 800644c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
 8006450:	462a      	mov	r2, r5
 8006452:	210a      	movs	r1, #10
 8006454:	47b0      	blx	r6
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006456:	462b      	mov	r3, r5
 8006458:	462a      	mov	r2, r5
 800645a:	68a6      	ldr	r6, [r4, #8]
 800645c:	210b      	movs	r1, #11
 800645e:	4620      	mov	r0, r4
 8006460:	47b0      	blx	r6
  u8g2_SetFont(u8g2, u8g2_font_6x12_tf);
 8006462:	496a      	ldr	r1, [pc, #424]	; (800660c <ThdDisp+0x29c>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8006464:	4e6a      	ldr	r6, [pc, #424]	; (8006610 <ThdDisp+0x2a0>)
 8006466:	4620      	mov	r0, r4
 8006468:	f7fa fe7a 	bl	8001160 <u8g2_SetFont>
  u8g2_ClearBuffer(u8g2);
 800646c:	4620      	mov	r0, r4
 800646e:	f7fe fa3f 	bl	80048f0 <u8g2_ClearBuffer>
  return u8g2_draw_string(u8g2, x, y, str);
 8006472:	4629      	mov	r1, r5
 8006474:	4b67      	ldr	r3, [pc, #412]	; (8006614 <ThdDisp+0x2a4>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8006476:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8006478:	2208      	movs	r2, #8
 800647a:	4620      	mov	r0, r4
 800647c:	f7fc fd10 	bl	8002ea0 <u8g2_draw_string.isra.0>
  u8g2_SendBuffer(u8g2);
 8006480:	4620      	mov	r0, r4
 8006482:	f7fa fe1d 	bl	80010c0 <u8g2_SendBuffer>
 8006486:	4b64      	ldr	r3, [pc, #400]	; (8006618 <ThdDisp+0x2a8>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8006488:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800648a:	2208      	movs	r2, #8
 800648c:	4629      	mov	r1, r5
 800648e:	4620      	mov	r0, r4
 8006490:	f7fc fd06 	bl	8002ea0 <u8g2_draw_string.isra.0>
  u8g2_SendBuffer(u8g2);
 8006494:	4620      	mov	r0, r4
 8006496:	f7fa fe13 	bl	80010c0 <u8g2_SendBuffer>
  u8g2_ClearBuffer(u8g2);
 800649a:	4620      	mov	r0, r4
 800649c:	f7fe fa28 	bl	80048f0 <u8g2_ClearBuffer>
  u8g2_SetFont(u8g2, u8g2_font_helvR12_tr);
 80064a0:	4620      	mov	r0, r4
 80064a2:	495e      	ldr	r1, [pc, #376]	; (800661c <ThdDisp+0x2ac>)
 80064a4:	f7fa fe5c 	bl	8001160 <u8g2_SetFont>
 80064a8:	4b5d      	ldr	r3, [pc, #372]	; (8006620 <ThdDisp+0x2b0>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80064aa:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80064ac:	221e      	movs	r2, #30
 80064ae:	4629      	mov	r1, r5
 80064b0:	4620      	mov	r0, r4
 80064b2:	f7fc fcf5 	bl	8002ea0 <u8g2_draw_string.isra.0>
  u8g2_SetFont(u8g2, u8g2_font_helvB10_tr);
 80064b6:	4620      	mov	r0, r4
 80064b8:	495a      	ldr	r1, [pc, #360]	; (8006624 <ThdDisp+0x2b4>)
 80064ba:	f7fa fe51 	bl	8001160 <u8g2_SetFont>
 80064be:	4b5a      	ldr	r3, [pc, #360]	; (8006628 <ThdDisp+0x2b8>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80064c0:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80064c2:	2232      	movs	r2, #50	; 0x32
 80064c4:	4629      	mov	r1, r5
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7fc fcea 	bl	8002ea0 <u8g2_draw_string.isra.0>
  u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 80064cc:	4620      	mov	r0, r4
 80064ce:	4957      	ldr	r1, [pc, #348]	; (800662c <ThdDisp+0x2bc>)
 80064d0:	f7fa fe46 	bl	8001160 <u8g2_SetFont>
 80064d4:	4b56      	ldr	r3, [pc, #344]	; (8006630 <ThdDisp+0x2c0>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80064d6:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80064d8:	2232      	movs	r2, #50	; 0x32
 80064da:	2178      	movs	r1, #120	; 0x78
 80064dc:	4620      	mov	r0, r4
 80064de:	f7fc fcdf 	bl	8002ea0 <u8g2_draw_string.isra.0>
  u8g2_DrawXBMP(u8g2, 0, 0, 128, 64, windows_logo);
 80064e2:	4e54      	ldr	r6, [pc, #336]	; (8006634 <ThdDisp+0x2c4>)
  u8g2_SendBuffer(u8g2);
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7fa fdeb 	bl	80010c0 <u8g2_SendBuffer>
  u8g2_DrawXBMP(u8g2, 0, 0, 128, 64, windows_logo);
 80064ea:	2040      	movs	r0, #64	; 0x40
 80064ec:	462a      	mov	r2, r5
 80064ee:	4629      	mov	r1, r5
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	e9cd 0600 	strd	r0, r6, [sp]
 80064f6:	4620      	mov	r0, r4
 80064f8:	f7fa ffba 	bl	8001470 <u8g2_DrawXBMP>
  u8g2_SendBuffer(u8g2);
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7fa fddf 	bl	80010c0 <u8g2_SendBuffer>
  chThdSleepMilliseconds(600);
 8006502:	f241 7070 	movw	r0, #6000	; 0x1770
 8006506:	f7fd fdab 	bl	8004060 <chThdSleep>
  u8g2_DrawXBMP(u8g2, 21, 56, 87, 8, bitmap_loading_bar_2_87x8);
 800650a:	494b      	ldr	r1, [pc, #300]	; (8006638 <ThdDisp+0x2c8>)
 800650c:	2508      	movs	r5, #8
 800650e:	2357      	movs	r3, #87	; 0x57
 8006510:	2238      	movs	r2, #56	; 0x38
 8006512:	e9cd 5100 	strd	r5, r1, [sp]
 8006516:	4620      	mov	r0, r4
 8006518:	2115      	movs	r1, #21
 800651a:	f7fa ffa9 	bl	8001470 <u8g2_DrawXBMP>
  u8g2_SendBuffer(u8g2);
 800651e:	4620      	mov	r0, r4
 8006520:	f7fa fdce 	bl	80010c0 <u8g2_SendBuffer>
  chThdSleepMilliseconds(800);
 8006524:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8006528:	f7fd fd9a 	bl	8004060 <chThdSleep>
  u8g2_DrawXBMP(u8g2, 21, 56, 87, 8, bitmap_loading_bar_3_87x8);
 800652c:	4943      	ldr	r1, [pc, #268]	; (800663c <ThdDisp+0x2cc>)
 800652e:	2238      	movs	r2, #56	; 0x38
 8006530:	e9cd 5100 	strd	r5, r1, [sp]
 8006534:	2357      	movs	r3, #87	; 0x57
 8006536:	2115      	movs	r1, #21
 8006538:	4620      	mov	r0, r4
 800653a:	f7fa ff99 	bl	8001470 <u8g2_DrawXBMP>
  u8g2_SendBuffer(u8g2);
 800653e:	4620      	mov	r0, r4
 8006540:	f7fa fdbe 	bl	80010c0 <u8g2_SendBuffer>
  return global;
 8006544:	4b3e      	ldr	r3, [pc, #248]	; (8006640 <ThdDisp+0x2d0>)
  myprintf("display initialized. I2C_addr = %d\n", display_init());
 8006546:	483f      	ldr	r0, [pc, #252]	; (8006644 <ThdDisp+0x2d4>)
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	f7ff fbd1 	bl	8005cf0 <myprintf>
 800654e:	2330      	movs	r3, #48	; 0x30
 8006550:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006554:	4c3c      	ldr	r4, [pc, #240]	; (8006648 <ThdDisp+0x2d8>)
 8006556:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800655a:	b9e3      	cbnz	r3, 8006596 <ThdDisp+0x226>
  oip->dbg.lock_cnt = (cnt_t)1;
 800655c:	2501      	movs	r5, #1
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800655e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006562:	b9c3      	cbnz	r3, 8006596 <ThdDisp+0x226>
 8006564:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006568:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 800656a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800656e:	f7fd fa9f 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006572:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006576:	bb3b      	cbnz	r3, 80065c8 <ThdDisp+0x258>
 8006578:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800657c:	2a00      	cmp	r2, #0
 800657e:	dd23      	ble.n	80065c8 <ThdDisp+0x258>
  oip->dbg.lock_cnt = (cnt_t)0;
 8006580:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	2330      	movs	r3, #48	; 0x30
 800658a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800658e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0e3      	beq.n	800655e <ThdDisp+0x1ee>
    chSysHalt("SV#4");
 8006596:	482d      	ldr	r0, [pc, #180]	; (800664c <ThdDisp+0x2dc>)
 8006598:	f7fa fcfa 	bl	8000f90 <chSysHalt>
      rccEnableTIM6(true);
 800659c:	4a2c      	ldr	r2, [pc, #176]	; (8006650 <ThdDisp+0x2e0>)
      gptp->clock = STM32_TIMCLK1;
 800659e:	482d      	ldr	r0, [pc, #180]	; (8006654 <ThdDisp+0x2e4>)
      rccEnableTIM6(true);
 80065a0:	6c11      	ldr	r1, [r2, #64]	; 0x40
      gptp->clock = STM32_TIMCLK1;
 80065a2:	6098      	str	r0, [r3, #8]
      rccEnableTIM6(true);
 80065a4:	f041 0110 	orr.w	r1, r1, #16
 80065a8:	6411      	str	r1, [r2, #64]	; 0x40
 80065aa:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80065ac:	f041 0110 	orr.w	r1, r1, #16
 80065b0:	6611      	str	r1, [r2, #96]	; 0x60
 80065b2:	6e11      	ldr	r1, [r2, #96]	; 0x60
      rccResetTIM6();
 80065b4:	6a11      	ldr	r1, [r2, #32]
 80065b6:	f041 0110 	orr.w	r1, r1, #16
 80065ba:	6211      	str	r1, [r2, #32]
 80065bc:	6a11      	ldr	r1, [r2, #32]
 80065be:	f021 0110 	bic.w	r1, r1, #16
 80065c2:	6211      	str	r1, [r2, #32]
 80065c4:	6a12      	ldr	r2, [r2, #32]
 80065c6:	e6ea      	b.n	800639e <ThdDisp+0x2e>
    chSysHalt("SV#5");
 80065c8:	4823      	ldr	r0, [pc, #140]	; (8006658 <ThdDisp+0x2e8>)
 80065ca:	f7fa fce1 	bl	8000f90 <chSysHalt>
 80065ce:	bf00      	nop
 80065d0:	080075b8 	.word	0x080075b8
 80065d4:	20000830 	.word	0x20000830
 80065d8:	080078c0 	.word	0x080078c0
 80065dc:	001e8480 	.word	0x001e8480
 80065e0:	40020400 	.word	0x40020400
 80065e4:	20001190 	.word	0x20001190
 80065e8:	08002bd1 	.word	0x08002bd1
 80065ec:	08002da1 	.word	0x08002da1
 80065f0:	08004591 	.word	0x08004591
 80065f4:	080040c1 	.word	0x080040c1
 80065f8:	08001551 	.word	0x08001551
 80065fc:	200009b8 	.word	0x200009b8
 8006600:	080079b0 	.word	0x080079b0
 8006604:	ffff0000 	.word	0xffff0000
 8006608:	08001151 	.word	0x08001151
 800660c:	08008008 	.word	0x08008008
 8006610:	08001741 	.word	0x08001741
 8006614:	080075c4 	.word	0x080075c4
 8006618:	080075d4 	.word	0x080075d4
 800661c:	08008d08 	.word	0x08008d08
 8006620:	080075e4 	.word	0x080075e4
 8006624:	080087d0 	.word	0x080087d0
 8006628:	080075f4 	.word	0x080075f4
 800662c:	080079bc 	.word	0x080079bc
 8006630:	08007608 	.word	0x08007608
 8006634:	08009358 	.word	0x08009358
 8006638:	080077ac 	.word	0x080077ac
 800663c:	08007804 	.word	0x08007804
 8006640:	2000116c 	.word	0x2000116c
 8006644:	0800760c 	.word	0x0800760c
 8006648:	20000de0 	.word	0x20000de0
 800664c:	080074dc 	.word	0x080074dc
 8006650:	40023800 	.word	0x40023800
 8006654:	05f5e0f0 	.word	0x05f5e0f0
 8006658:	08007504 	.word	0x08007504
 800665c:	00000000 	.word	0x00000000

08006660 <chThdExit>:
void chThdExit(msg_t msg) {
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	2330      	movs	r3, #48	; 0x30
 8006664:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <chThdExit+0x60>)
 800666a:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 800666e:	430a      	orrs	r2, r1
 8006670:	d11a      	bne.n	80066a8 <chThdExit+0x48>
  return __sch_get_currthread();
 8006672:	68dc      	ldr	r4, [r3, #12]
  return (bool)(lp->next != lp);
 8006674:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8006676:	f104 052c 	add.w	r5, r4, #44	; 0x2c
  oip->dbg.lock_cnt = (cnt_t)1;
 800667a:	2101      	movs	r1, #1
 800667c:	4295      	cmp	r5, r2
 800667e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  currtp->u.exitcode = msg;
 8006682:	62a0      	str	r0, [r4, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8006684:	d107      	bne.n	8006696 <chThdExit+0x36>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8006686:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800668a:	b183      	cbz	r3, 80066ae <chThdExit+0x4e>
}
 800668c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8006690:	200f      	movs	r0, #15
 8006692:	f7fd b9dd 	b.w	8003a50 <chSchGoSleepS>
  lp->next = p->next;
 8006696:	6813      	ldr	r3, [r2, #0]
 8006698:	62e3      	str	r3, [r4, #44]	; 0x2c
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 800669a:	4610      	mov	r0, r2
 800669c:	f7fd f848 	bl	8003730 <chSchReadyI.isra.0>
  return (bool)(lp->next != lp);
 80066a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 80066a2:	42aa      	cmp	r2, r5
 80066a4:	d0ef      	beq.n	8006686 <chThdExit+0x26>
 80066a6:	e7f6      	b.n	8006696 <chThdExit+0x36>
    chSysHalt("SV#4");
 80066a8:	4806      	ldr	r0, [pc, #24]	; (80066c4 <chThdExit+0x64>)
 80066aa:	f7fa fc71 	bl	8000f90 <chSysHalt>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 80066ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80066b2:	079b      	lsls	r3, r3, #30
 80066b4:	d1ea      	bne.n	800668c <chThdExit+0x2c>
  p->prev->next = p->next;
 80066b6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80066ba:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80066bc:	605a      	str	r2, [r3, #4]
  return p;
 80066be:	e7e5      	b.n	800668c <chThdExit+0x2c>
 80066c0:	20000de0 	.word	0x20000de0
 80066c4:	080074dc 	.word	0x080074dc
	...

080066d0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80066d0:	f3ef 8309 	mrs	r3, PSP
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80066d4:	4905      	ldr	r1, [pc, #20]	; (80066ec <SVC_Handler+0x1c>)
 80066d6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80066d8:	f022 0201 	bic.w	r2, r2, #1
    psp += sizeof (struct port_extctx);
 80066dc:	3368      	adds	r3, #104	; 0x68
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80066de:	634a      	str	r2, [r1, #52]	; 0x34
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80066e0:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80066e4:	2300      	movs	r3, #0
 80066e6:	f383 8811 	msr	BASEPRI, r3
}
 80066ea:	4770      	bx	lr
 80066ec:	e000ef00 	.word	0xe000ef00

080066f0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80066f0:	4b5d      	ldr	r3, [pc, #372]	; (8006868 <__early_init+0x178>)
  gpiop->OTYPER  = config->otyper;
 80066f2:	495e      	ldr	r1, [pc, #376]	; (800686c <__early_init+0x17c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80066f4:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 80066f6:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80068b4 <__early_init+0x1c4>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80066fa:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80066fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8006702:	611a      	str	r2, [r3, #16]
 8006704:	6918      	ldr	r0, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8006706:	4c5a      	ldr	r4, [pc, #360]	; (8006870 <__early_init+0x180>)
  gpiop->PUPDR   = config->pupdr;
 8006708:	4f5a      	ldr	r7, [pc, #360]	; (8006874 <__early_init+0x184>)
  gpiop->MODER   = config->moder;
 800670a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80068b8 <__early_init+0x1c8>
  gpiop->PUPDR   = config->pupdr;
 800670e:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80068bc <__early_init+0x1cc>
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8006712:	4e59      	ldr	r6, [pc, #356]	; (8006878 <__early_init+0x188>)
  gpiop->MODER   = config->moder;
 8006714:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80068c0 <__early_init+0x1d0>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8006718:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 800671c:	6118      	str	r0, [r3, #16]
 800671e:	6918      	ldr	r0, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8006720:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006722:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 8006726:	6318      	str	r0, [r3, #48]	; 0x30
 8006728:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800672a:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 800672e:	6518      	str	r0, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8006730:	2200      	movs	r2, #0
  gpiop->OSPEEDR = config->ospeedr;
 8006732:	4852      	ldr	r0, [pc, #328]	; (800687c <__early_init+0x18c>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8006734:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8006736:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006738:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800673a:	4851      	ldr	r0, [pc, #324]	; (8006880 <__early_init+0x190>)
 800673c:	60c8      	str	r0, [r1, #12]
  gpiop->ODR     = config->odr;
 800673e:	2002      	movs	r0, #2
 8006740:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8006742:	f247 7002 	movw	r0, #30466	; 0x7702
 8006746:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8006748:	f241 7070 	movw	r0, #6000	; 0x1770
 800674c:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800674e:	484d      	ldr	r0, [pc, #308]	; (8006884 <__early_init+0x194>)
 8006750:	6008      	str	r0, [r1, #0]
  gpiop->ODR     = config->odr;
 8006752:	f44f 5a81 	mov.w	sl, #4128	; 0x1020
  gpiop->OTYPER  = config->otyper;
 8006756:	484c      	ldr	r0, [pc, #304]	; (8006888 <__early_init+0x198>)
  gpiop->OSPEEDR = config->ospeedr;
 8006758:	494c      	ldr	r1, [pc, #304]	; (800688c <__early_init+0x19c>)
  gpiop->OTYPER  = config->otyper;
 800675a:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800675c:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
 8006760:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8006762:	60e7      	str	r7, [r4, #12]
  gpiop->OTYPER  = config->otyper;
 8006764:	494a      	ldr	r1, [pc, #296]	; (8006890 <__early_init+0x1a0>)
  gpiop->ODR     = config->odr;
 8006766:	f8c4 a014 	str.w	sl, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800676a:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800676c:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800676e:	f8c4 9000 	str.w	r9, [r4]
  gpiop->ODR     = config->odr;
 8006772:	f44f 6400 	mov.w	r4, #2048	; 0x800
  gpiop->OTYPER  = config->otyper;
 8006776:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006778:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 800677a:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->ODR     = config->odr;
 800677e:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8006780:	f44f 144c 	mov.w	r4, #3342336	; 0x330000
 8006784:	6204      	str	r4, [r0, #32]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8006786:	4f43      	ldr	r7, [pc, #268]	; (8006894 <__early_init+0x1a4>)
  gpiop->AFRH    = config->afrh;
 8006788:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800678a:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 800678e:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8006790:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8006792:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8006796:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8006798:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 800679a:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800679c:	600a      	str	r2, [r1, #0]
  PWR->CR = STM32_VOS;
 800679e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 80067a2:	641f      	str	r7, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80067a4:	6032      	str	r2, [r6, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	f042 0201 	orr.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	0794      	lsls	r4, r2, #30
 80067b2:	d5fc      	bpl.n	80067ae <__early_init+0xbe>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80067b4:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80067b6:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <__early_init+0x178>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80067b8:	f021 0103 	bic.w	r1, r1, #3
 80067bc:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80067be:	6893      	ldr	r3, [r2, #8]
 80067c0:	f013 030c 	ands.w	r3, r3, #12
 80067c4:	d1fb      	bne.n	80067be <__early_init+0xce>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80067c6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80067c8:	4927      	ldr	r1, [pc, #156]	; (8006868 <__early_init+0x178>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80067ca:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80067ce:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80067d0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80067d8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80067da:	680b      	ldr	r3, [r1, #0]
 80067dc:	0398      	lsls	r0, r3, #14
 80067de:	d5fc      	bpl.n	80067da <__early_init+0xea>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <__early_init+0x1a8>)
 80067e2:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80067e4:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80067e6:	4a24      	ldr	r2, [pc, #144]	; (8006878 <__early_init+0x188>)
  RCC->CR |= RCC_CR_PLLON;
 80067e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ec:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80067ee:	6853      	ldr	r3, [r2, #4]
 80067f0:	0459      	lsls	r1, r3, #17
 80067f2:	d5fc      	bpl.n	80067ee <__early_init+0xfe>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80067f4:	4a1c      	ldr	r2, [pc, #112]	; (8006868 <__early_init+0x178>)
 80067f6:	6813      	ldr	r3, [r2, #0]
 80067f8:	019b      	lsls	r3, r3, #6
 80067fa:	d5fc      	bpl.n	80067f6 <__early_init+0x106>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80067fc:	4b27      	ldr	r3, [pc, #156]	; (800689c <__early_init+0x1ac>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80067fe:	4c28      	ldr	r4, [pc, #160]	; (80068a0 <__early_init+0x1b0>)
 8006800:	6094      	str	r4, [r2, #8]
    RCC->DCKCFGR = dckcfgr |
 8006802:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8006804:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 8006806:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 800680a:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <__early_init+0x1b4>)
 8006812:	429a      	cmp	r2, r3
 8006814:	d01e      	beq.n	8006854 <__early_init+0x164>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <__early_init+0x1b8>)
 8006818:	f240 7203 	movw	r2, #1795	; 0x703
 800681c:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800681e:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <__early_init+0x1b8>)
 8006820:	6813      	ldr	r3, [r2, #0]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	2b03      	cmp	r3, #3
 8006828:	d1fa      	bne.n	8006820 <__early_init+0x130>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800682a:	4a0f      	ldr	r2, [pc, #60]	; (8006868 <__early_init+0x178>)
 800682c:	6893      	ldr	r3, [r2, #8]
 800682e:	f043 0302 	orr.w	r3, r3, #2
 8006832:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8006834:	6893      	ldr	r3, [r2, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	2b08      	cmp	r3, #8
 800683c:	d1fa      	bne.n	8006834 <__early_init+0x144>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 800683e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006844:	6453      	str	r3, [r2, #68]	; 0x44
 8006846:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800684c:	6653      	str	r3, [r2, #100]	; 0x64
 800684e:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <__early_init+0x1bc>)
 8006856:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <__early_init+0x1c0>)
 8006858:	6812      	ldr	r2, [r2, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d1db      	bne.n	8006816 <__early_init+0x126>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <__early_init+0x1b8>)
 8006860:	f240 1203 	movw	r2, #259	; 0x103
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e7da      	b.n	800681e <__early_init+0x12e>
 8006868:	40023800 	.word	0x40023800
 800686c:	40020000 	.word	0x40020000
 8006870:	40020400 	.word	0x40020400
 8006874:	00aaa0a8 	.word	0x00aaa0a8
 8006878:	40007000 	.word	0x40007000
 800687c:	556b75a5 	.word	0x556b75a5
 8006880:	a8000a02 	.word	0xa8000a02
 8006884:	29a8d0a4 	.word	0x29a8d0a4
 8006888:	40020800 	.word	0x40020800
 800688c:	9a555555 	.word	0x9a555555
 8006890:	40021c00 	.word	0x40021c00
 8006894:	10000400 	.word	0x10000400
 8006898:	04401818 	.word	0x04401818
 800689c:	e0042000 	.word	0xe0042000
 80068a0:	38881000 	.word	0x38881000
 80068a4:	20006411 	.word	0x20006411
 80068a8:	40023c00 	.word	0x40023c00
 80068ac:	e000ed00 	.word	0xe000ed00
 80068b0:	410fc241 	.word	0x410fc241
 80068b4:	aaaaaaa0 	.word	0xaaaaaaa0
 80068b8:	55000581 	.word	0x55000581
 80068bc:	890aa080 	.word	0x890aa080
 80068c0:	10500a37 	.word	0x10500a37
	...

080068d0 <Vector88>:
  ADC1->SR = 0; //clear all
 80068d0:	4905      	ldr	r1, [pc, #20]	; (80068e8 <Vector88+0x18>)
  if(adc_isr_count == 0){
 80068d2:	4a06      	ldr	r2, [pc, #24]	; (80068ec <Vector88+0x1c>)
  ADC1->SR = 0; //clear all
 80068d4:	2300      	movs	r3, #0
 80068d6:	600b      	str	r3, [r1, #0]
  if(adc_isr_count == 0){
 80068d8:	6813      	ldr	r3, [r2, #0]
 80068da:	b913      	cbnz	r3, 80068e2 <Vector88+0x12>
    tim5_ccr1 = TIM5->CCR1;
 80068dc:	4804      	ldr	r0, [pc, #16]	; (80068f0 <Vector88+0x20>)
 80068de:	6b40      	ldr	r0, [r0, #52]	; 0x34
    adc_jdr1 = ADC1->JDR1;
 80068e0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
  adc_isr_count++;
 80068e2:	3301      	adds	r3, #1
 80068e4:	6013      	str	r3, [r2, #0]
}
 80068e6:	4770      	bx	lr
 80068e8:	40012000 	.word	0x40012000
 80068ec:	200009b0 	.word	0x200009b0
 80068f0:	40000c00 	.word	0x40000c00
	...

08006900 <VectorA4>:
  uint32_t sr = TIM1->SR;
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <VectorA4+0x2c>)
 8006902:	691a      	ldr	r2, [r3, #16]
  TIM1->SR = 0; //clear all
 8006904:	2100      	movs	r1, #0
 8006906:	6119      	str	r1, [r3, #16]
  if(sr & TIM_SR_CC4IF){ //capture event
 8006908:	f012 0f10 	tst.w	r2, #16
  uint16_t ccr = TIM1->CCR4;
 800690c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    timepulse_capt_curr = ((uint64_t)ccr << 16) + ((uint64_t)tim1_overflows << 32);
 800690e:	4a08      	ldr	r2, [pc, #32]	; (8006930 <VectorA4+0x30>)
  if(sr & TIM_SR_CC4IF){ //capture event
 8006910:	d103      	bne.n	800691a <VectorA4+0x1a>
    timepulse_capt_curr = ((uint64_t)ccr << 16) + ((uint64_t)tim1_overflows << 32);
 8006912:	6813      	ldr	r3, [r2, #0]
  tim1_overflows++;
 8006914:	3301      	adds	r3, #1
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	4770      	bx	lr
    timepulse_capt_curr = ((uint64_t)ccr << 16) + ((uint64_t)tim1_overflows << 32);
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	4805      	ldr	r0, [pc, #20]	; (8006934 <VectorA4+0x34>)
 800691e:	0409      	lsls	r1, r1, #16
 8006920:	e9c0 1300 	strd	r1, r3, [r0]
  tim1_overflows++;
 8006924:	3301      	adds	r3, #1
 8006926:	6013      	str	r3, [r2, #0]
}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010000 	.word	0x40010000
 8006930:	20001184 	.word	0x20001184
 8006934:	20001188 	.word	0x20001188
	...

08006940 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8006940:	4b21      	ldr	r3, [pc, #132]	; (80069c8 <main+0x88>)
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	f062 0287 	orn	r2, r2, #135	; 0x87


/*
 * Application entry point.
 */
int main(void) {
 8006948:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800694c:	611a      	str	r2, [r3, #16]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	f002 0287 	and.w	r2, r2, #135	; 0x87
 8006954:	611a      	str	r2, [r3, #16]
 8006956:	691a      	ldr	r2, [r3, #16]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8006958:	6a1a      	ldr	r2, [r3, #32]
 800695a:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 800695e:	621a      	str	r2, [r3, #32]
 8006960:	6a1a      	ldr	r2, [r3, #32]
 8006962:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006966:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800696c:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 800696e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006970:	6258      	str	r0, [r3, #36]	; 0x24
 8006972:	2100      	movs	r1, #0
 8006974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006976:	6259      	str	r1, [r3, #36]	; 0x24
 8006978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 800697a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 800697c:	4813      	ldr	r0, [pc, #76]	; (80069cc <main+0x8c>)
  rccEnablePWRInterface(true);
 800697e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006982:	641a      	str	r2, [r3, #64]	; 0x40
 8006984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006986:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800698a:	661a      	str	r2, [r3, #96]	; 0x60
 800698c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800698e:	6802      	ldr	r2, [r0, #0]
 8006990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006994:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8006996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006998:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800699c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80069a0:	b089      	sub	sp, #36	; 0x24
 80069a2:	d003      	beq.n	80069ac <main+0x6c>
    RCC->BDCR = RCC_BDCR_BDRST;
 80069a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069a8:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80069aa:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80069ac:	4807      	ldr	r0, [pc, #28]	; (80069cc <main+0x8c>)
  dma.allocated_mask = 0U;
 80069ae:	4a08      	ldr	r2, [pc, #32]	; (80069d0 <main+0x90>)
 80069b0:	6841      	ldr	r1, [r0, #4]
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <main+0x94>)
 80069b4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80069b8:	2400      	movs	r4, #0
 80069ba:	6041      	str	r1, [r0, #4]
 80069bc:	4906      	ldr	r1, [pc, #24]	; (80069d8 <main+0x98>)
 80069be:	6014      	str	r4, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80069c0:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80069c4:	e00c      	b.n	80069e0 <main+0xa0>
 80069c6:	bf00      	nop
 80069c8:	40023800 	.word	0x40023800
 80069cc:	40007000 	.word	0x40007000
 80069d0:	200010e8 	.word	0x200010e8
 80069d4:	080076f8 	.word	0x080076f8
 80069d8:	40026010 	.word	0x40026010
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80069dc:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80069e0:	600c      	str	r4, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80069e2:	330c      	adds	r3, #12
 80069e4:	4283      	cmp	r3, r0
 80069e6:	f102 0208 	add.w	r2, r2, #8
    dma.streams[i].func = NULL;
 80069ea:	f842 4c04 	str.w	r4, [r2, #-4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80069ee:	d1f5      	bne.n	80069dc <main+0x9c>
  DMA1->LIFCR = 0xFFFFFFFFU;
 80069f0:	4ac0      	ldr	r2, [pc, #768]	; (8006cf4 <main+0x3b4>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 80069f2:	49c1      	ldr	r1, [pc, #772]	; (8006cf8 <main+0x3b8>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80069f4:	4bc1      	ldr	r3, [pc, #772]	; (8006cfc <main+0x3bc>)
 *
 * @init
 */
void dacObjectInit(DACDriver *dacp) {

  dacp->state = DAC_STOP;
 80069f6:	4ec2      	ldr	r6, [pc, #776]	; (8006d00 <main+0x3c0>)
  sdObjectInit(&SD1, NULL, notify1);
 80069f8:	4fc2      	ldr	r7, [pc, #776]	; (8006d04 <main+0x3c4>)
  sdObjectInit(&SD2, NULL, notify2);
 80069fa:	f8df a3a4 	ldr.w	sl, [pc, #932]	; 8006da0 <main+0x460>
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state           = SPI_STOP;
 80069fe:	f8df 83a4 	ldr.w	r8, [pc, #932]	; 8006da4 <main+0x464>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8006a02:	f04f 35ff 	mov.w	r5, #4294967295
 8006a06:	6095      	str	r5, [r2, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8006a08:	60d5      	str	r5, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8006a0a:	608d      	str	r5, [r1, #8]
 8006a0c:	2270      	movs	r2, #112	; 0x70
  DMA2->HIFCR = 0xFFFFFFFFU;
 8006a0e:	60cd      	str	r5, [r1, #12]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006a10:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006a14:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  dacp->config = NULL;
#if DAC_USE_WAIT
  dacp->thread = NULL;
 8006a18:	e9c6 4404 	strd	r4, r4, [r6, #16]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006a1c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006a20:	6019      	str	r1, [r3, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006a22:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006a26:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006a2a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8006a2e:	2120      	movs	r1, #32
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006a30:	605a      	str	r2, [r3, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006a32:	22c0      	movs	r2, #192	; 0xc0
 8006a34:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006a38:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006a3c:	6059      	str	r1, [r3, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8006a3e:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006a42:	2240      	movs	r2, #64	; 0x40
  dacp->state = DAC_STOP;
 8006a44:	f04f 0901 	mov.w	r9, #1
 8006a48:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8006a4c:	f106 0018 	add.w	r0, r6, #24
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006a50:	605a      	str	r2, [r3, #4]
  i2cp->state  = I2C_STOP;
 8006a52:	4aad      	ldr	r2, [pc, #692]	; (8006d08 <main+0x3c8>)
 8006a54:	f886 9000 	strb.w	r9, [r6]
 8006a58:	f7fc fd52 	bl	8003500 <chMtxObjectInit>
  DACD1.params  = &dac1_ch1_params;
 8006a5c:	4bab      	ldr	r3, [pc, #684]	; (8006d0c <main+0x3cc>)
 8006a5e:	62b3      	str	r3, [r6, #40]	; 0x28
  GPTD6.tim = STM32_TIM6;
 8006a60:	4bab      	ldr	r3, [pc, #684]	; (8006d10 <main+0x3d0>)
 8006a62:	49ac      	ldr	r1, [pc, #688]	; (8006d14 <main+0x3d4>)
 8006a64:	f882 9000 	strb.w	r9, [r2]
 8006a68:	f102 000c 	add.w	r0, r2, #12
  i2cp->config = NULL;
 8006a6c:	6054      	str	r4, [r2, #4]
 8006a6e:	60d9      	str	r1, [r3, #12]
  gptp->state  = GPT_STOP;
 8006a70:	f883 9000 	strb.w	r9, [r3]
  sdObjectInit(&SD1, NULL, notify1);
 8006a74:	49a8      	ldr	r1, [pc, #672]	; (8006d18 <main+0x3d8>)
  gptp->config = NULL;
 8006a76:	605c      	str	r4, [r3, #4]
  DACD1.dma = NULL;
 8006a78:	62f4      	str	r4, [r6, #44]	; 0x2c
 8006a7a:	f7fc fd41 	bl	8003500 <chMtxObjectInit>
  I2CD2.i2c    = I2C2;
 8006a7e:	4ba7      	ldr	r3, [pc, #668]	; (8006d1c <main+0x3dc>)
 8006a80:	6353      	str	r3, [r2, #52]	; 0x34
 8006a82:	4638      	mov	r0, r7
  I2CD2.dmatx  = NULL;
 8006a84:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
  I2CD2.thread = NULL;
 8006a88:	61d4      	str	r4, [r2, #28]
 8006a8a:	f7fb ffd1 	bl	8002a30 <sdObjectInit.constprop.0>
  SD1.clock = STM32_PCLK2;
 8006a8e:	4ba4      	ldr	r3, [pc, #656]	; (8006d20 <main+0x3e0>)
 8006a90:	49a4      	ldr	r1, [pc, #656]	; (8006d24 <main+0x3e4>)
  sdObjectInit(&SD2, NULL, notify2);
 8006a92:	4650      	mov	r0, sl
  SD1.clock = STM32_PCLK2;
 8006a94:	e9c7 131d 	strd	r1, r3, [r7, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
 8006a98:	49a3      	ldr	r1, [pc, #652]	; (8006d28 <main+0x3e8>)
  SD2.clock = STM32_PCLK1;
 8006a9a:	4fa4      	ldr	r7, [pc, #656]	; (8006d2c <main+0x3ec>)
  sdObjectInit(&SD2, NULL, notify2);
 8006a9c:	f7fb ffc8 	bl	8002a30 <sdObjectInit.constprop.0>
  SD2.clock = STM32_PCLK1;
 8006aa0:	4ba3      	ldr	r3, [pc, #652]	; (8006d30 <main+0x3f0>)
 8006aa2:	f888 9000 	strb.w	r9, [r8]
 8006aa6:	f108 000c 	add.w	r0, r8, #12
 8006aaa:	e9ca 731d 	strd	r7, r3, [sl, #116]	; 0x74
  spip->config          = NULL;
#if SPI_USE_SYNCHRONIZATION == TRUE
  spip->sync_transfer   = NULL;
 8006aae:	e9c8 4401 	strd	r4, r4, [r8, #4]
 8006ab2:	f7fc fd25 	bl	8003500 <chMtxObjectInit>
  ST_ENABLE_CLOCK();
 8006ab6:	4b9f      	ldr	r3, [pc, #636]	; (8006d34 <main+0x3f4>)
  ST_ENABLE_STOP();
 8006ab8:	499f      	ldr	r1, [pc, #636]	; (8006d38 <main+0x3f8>)
  ST_ENABLE_CLOCK();
 8006aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  ch_system.state = ch_sys_initializing;
 8006abc:	4f9f      	ldr	r7, [pc, #636]	; (8006d3c <main+0x3fc>)
 8006abe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
 8006ac2:	e9c8 4408 	strd	r4, r4, [r8, #32]
 8006ac6:	645a      	str	r2, [r3, #68]	; 0x44
 8006ac8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006aca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006ace:	665a      	str	r2, [r3, #100]	; 0x64
 8006ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ST_ENABLE_STOP();
 8006ad2:	68cb      	ldr	r3, [r1, #12]
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad8:	60cb      	str	r3, [r1, #12]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8006ada:	4b99      	ldr	r3, [pc, #612]	; (8006d40 <main+0x400>)
 8006adc:	f242 720e 	movw	r2, #9998	; 0x270e
 8006ae0:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8006ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8006ae8:	619c      	str	r4, [r3, #24]
  tmp->cumulative = (rttime_t)0;
 8006aea:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = 0;
 8006aec:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8006aee:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8006af0:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8006af2:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8006af6:	f8c3 9000 	str.w	r9, [r3]
 8006afa:	2300      	movs	r3, #0
 8006afc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  SPID2.spi       = SPI2;
 8006b00:	4b90      	ldr	r3, [pc, #576]	; (8006d44 <main+0x404>)
 8006b02:	f8c8 301c 	str.w	r3, [r8, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8006b06:	4b90      	ldr	r3, [pc, #576]	; (8006d48 <main+0x408>)
 8006b08:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  tmp->n          = (ucnt_t)0;
 8006b0c:	e9cd 4404 	strd	r4, r4, [sp, #16]
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8006b10:	3330      	adds	r3, #48	; 0x30
  tmp->worst      = (rtcnt_t)0;
 8006b12:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8006b16:	f887 9000 	strb.w	r9, [r7]
}
 8006b1a:	2504      	movs	r5, #4
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8006b1c:	60bc      	str	r4, [r7, #8]
 8006b1e:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 8006b22:	a802      	add	r0, sp, #8
 8006b24:	f7fa fa6c 	bl	8001000 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8006b28:	f7fa fa72 	bl	8001010 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 8006b2c:	3d01      	subs	r5, #1
 8006b2e:	d1f8      	bne.n	8006b22 <main+0x1e2>
  tcp->offset = tm.best;
 8006b30:	9a02      	ldr	r2, [sp, #8]
  ch_memcore.basemem = __heap_base__;
 8006b32:	4b86      	ldr	r3, [pc, #536]	; (8006d4c <main+0x40c>)
 8006b34:	60ba      	str	r2, [r7, #8]
 8006b36:	4a86      	ldr	r2, [pc, #536]	; (8006d50 <main+0x410>)
 8006b38:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8006b3a:	4a86      	ldr	r2, [pc, #536]	; (8006d54 <main+0x414>)
 8006b3c:	605a      	str	r2, [r3, #4]
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8006b3e:	4b86      	ldr	r3, [pc, #536]	; (8006d58 <main+0x418>)
 8006b40:	4a86      	ldr	r2, [pc, #536]	; (8006d5c <main+0x41c>)
 8006b42:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8006b44:	f103 000c 	add.w	r0, r3, #12
  H_PAGES(&default_heap.header) = 0;
 8006b48:	e9c3 5501 	strd	r5, r5, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 8006b4c:	f7fc fcd8 	bl	8003500 <chMtxObjectInit>
 * @init
 */
void __factory_init(void) {

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8006b50:	4883      	ldr	r0, [pc, #524]	; (8006d60 <main+0x420>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8006b52:	4c84      	ldr	r4, [pc, #528]	; (8006d64 <main+0x424>)
 8006b54:	f7fc fcd4 	bl	8003500 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8006b58:	f100 0310 	add.w	r3, r0, #16
 8006b5c:	6103      	str	r3, [r0, #16]
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 8006b5e:	2214      	movs	r2, #20
 8006b60:	2304      	movs	r3, #4
 8006b62:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8006b66:	6343      	str	r3, [r0, #52]	; 0x34
 8006b68:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8006b6c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006b6e:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8006b72:	6403      	str	r3, [r0, #64]	; 0x40
 8006b74:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8006b78:	6443      	str	r3, [r0, #68]	; 0x44
  mp->provider = provider;
 8006b7a:	4b7b      	ldr	r3, [pc, #492]	; (8006d68 <main+0x428>)
 8006b7c:	6203      	str	r3, [r0, #32]
 8006b7e:	6383      	str	r3, [r0, #56]	; 0x38

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8006b80:	4b7a      	ldr	r3, [pc, #488]	; (8006d6c <main+0x42c>)
 8006b82:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b84:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8006b88:	6243      	str	r3, [r0, #36]	; 0x24
 8006b8a:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8006b8e:	6283      	str	r3, [r0, #40]	; 0x28
  mp->object_size = size;
 8006b90:	231c      	movs	r3, #28
  mp->next = NULL;
 8006b92:	6145      	str	r5, [r0, #20]
 8006b94:	62c5      	str	r5, [r0, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 8006b96:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 8006b98:	6325      	str	r5, [r4, #48]	; 0x30
  mp->object_size = size;
 8006b9a:	6303      	str	r3, [r0, #48]	; 0x30
 8006b9c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8006ba0:	f38a 8811 	msr	BASEPRI, sl
  __ASM volatile ("cpsie i" : : : "memory");
 8006ba4:	b662      	cpsie	i
  pqp->prio = (tprio_t)0;
 8006ba6:	e9c4 4501 	strd	r4, r5, [r4, #4]
  tp->epending          = (eventmask_t)0;
 8006baa:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bae:	4b70      	ldr	r3, [pc, #448]	; (8006d70 <main+0x430>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 8006bb0:	6365      	str	r5, [r4, #52]	; 0x34

  sdp->panic_msg = NULL;

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 8006bb2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8006bb6:	68d9      	ldr	r1, [r3, #12]

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8006bb8:	83a5      	strh	r5, [r4, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bba:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8006bbe:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 8006bc0:	4a6c      	ldr	r2, [pc, #432]	; (8006d74 <main+0x434>)
  tp->owner             = oip;
 8006bc2:	6564      	str	r4, [r4, #84]	; 0x54
 8006bc4:	430a      	orrs	r2, r1
  SCB->AIRCR =  reg_value;
 8006bc6:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006bc8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006bcc:	496a      	ldr	r1, [pc, #424]	; (8006d78 <main+0x438>)
 8006bce:	485c      	ldr	r0, [pc, #368]	; (8006d40 <main+0x400>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006bd0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006bd4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006bd8:	680a      	ldr	r2, [r1, #0]
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bda:	f04f 0b20 	mov.w	fp, #32
 8006bde:	f042 0201 	orr.w	r2, r2, #1
 8006be2:	600a      	str	r2, [r1, #0]
 8006be4:	f883 b01f 	strb.w	fp, [r3, #31]
  dlhp->next  = dlhp;
 8006be8:	f104 0110 	add.w	r1, r4, #16
 8006bec:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
 8006bf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006bf2:	9300      	str	r3, [sp, #0]
  dlhp->prev  = dlhp;
 8006bf4:	e9c4 1104 	strd	r1, r1, [r4, #16]
  tp->hdr.pqueue.prio   = prio;
 8006bf8:	2180      	movs	r1, #128	; 0x80
 8006bfa:	6461      	str	r1, [r4, #68]	; 0x44
  tp->realprio          = prio;
 8006bfc:	67e1      	str	r1, [r4, #124]	; 0x7c
  p->prev       = qp->prev;
 8006bfe:	f104 0128 	add.w	r1, r4, #40	; 0x28
  tp->wabase = tdp->wbase;
 8006c02:	4b5e      	ldr	r3, [pc, #376]	; (8006d7c <main+0x43c>)
 8006c04:	6521      	str	r1, [r4, #80]	; 0x50
  qp->next = qp;
 8006c06:	f104 016c 	add.w	r1, r4, #108	; 0x6c
  qp->prev = qp;
 8006c0a:	e9c4 111b 	strd	r1, r1, [r4, #108]	; 0x6c
  p->prev->next = p;
 8006c0e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
  tp->name              = name;
 8006c12:	495b      	ldr	r1, [pc, #364]	; (8006d80 <main+0x440>)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8006c14:	f8bd 8000 	ldrh.w	r8, [sp]
 8006c18:	62a0      	str	r0, [r4, #40]	; 0x28
  dlhp->delta = (sysinterval_t)-1;
 8006c1a:	f04f 3cff 	mov.w	ip, #4294967295
  sdp->lock_cnt = (cnt_t)1;
 8006c1e:	2201      	movs	r2, #1
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8006c20:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
  tp->name              = name;
 8006c24:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c26:	f8c4 c018 	str.w	ip, [r4, #24]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8006c2a:	4956      	ldr	r1, [pc, #344]	; (8006d84 <main+0x444>)
 8006c2c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  lp->next = lp;
 8006c30:	f104 0c68 	add.w	ip, r4, #104	; 0x68
 8006c34:	46a9      	mov	r9, r5
 8006c36:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  pqp->next = pqp;
 8006c3a:	6024      	str	r4, [r4, #0]
 8006c3c:	e9c4 8908 	strd	r8, r9, [r4, #32]
 8006c40:	65e1      	str	r1, [r4, #92]	; 0x5c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8006c42:	f1a0 0164 	sub.w	r1, r0, #100	; 0x64
 8006c46:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
 8006c4a:	494f      	ldr	r1, [pc, #316]	; (8006d88 <main+0x448>)
 8006c4c:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 8006c50:	494e      	ldr	r1, [pc, #312]	; (8006d8c <main+0x44c>)
 8006c52:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
  tp->name              = name;
 8006c56:	494e      	ldr	r1, [pc, #312]	; (8006d90 <main+0x450>)
 8006c58:	f8c3 11d4 	str.w	r1, [r3, #468]	; 0x1d4
  p->next       = qp;
 8006c5c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006c60:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8006c64:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  p->prev       = qp->prev;
 8006c68:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  tp->refs              = (trefs_t)1;
 8006c6c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  tp->hdr.pqueue.prio   = prio;
 8006c70:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tp->realprio          = prio;
 8006c74:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  tp->refs              = (trefs_t)1;
 8006c78:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
  tp->state             = CH_STATE_WTSTART;
 8006c7c:	f04f 0202 	mov.w	r2, #2
  qp->next = qp;
 8006c80:	f503 7ef4 	add.w	lr, r3, #488	; 0x1e8
  p->prev       = qp->prev;
 8006c84:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
 8006c88:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
  lp->next = lp;
 8006c8c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  p->prev->next = p;
 8006c90:	f100 0210 	add.w	r2, r0, #16
  qp->prev = qp;
 8006c94:	e9c3 ee7a 	strd	lr, lr, [r3, #488]	; 0x1e8
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8006c98:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
  lp->next = lp;
 8006c9c:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
  tp->epending          = (eventmask_t)0;
 8006ca0:	e9c3 557c 	strd	r5, r5, [r3, #496]	; 0x1f0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8006ca4:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
  tp->owner             = oip;
 8006ca8:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  p->prev->next = p;
 8006cac:	64e2      	str	r2, [r4, #76]	; 0x4c
  qp->prev      = p;
 8006cae:	62e2      	str	r2, [r4, #44]	; 0x2c
  sdp->panic_msg = NULL;
 8006cb0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tp->wabase = tdp->wbase;
 8006cb4:	f8c3 31d8 	str.w	r3, [r3, #472]	; 0x1d8
 8006cb8:	f8c4 c00c 	str.w	ip, [r4, #12]
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8006cbc:	f7fc fd38 	bl	8003730 <chSchReadyI.isra.0>
  ch_system.state = ch_sys_running;
 8006cc0:	f04f 0302 	mov.w	r3, #2
 8006cc4:	703b      	strb	r3, [r7, #0]
 8006cc6:	f7fd fe83 	bl	80049d0 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006cca:	f385 8811 	msr	BASEPRI, r5
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  chMtxObjectInit(&mutex_bsp2);
 8006cce:	4831      	ldr	r0, [pc, #196]	; (8006d94 <main+0x454>)
 8006cd0:	f7fc fc16 	bl	8003500 <chMtxObjectInit>
  palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	4830      	ldr	r0, [pc, #192]	; (8006d98 <main+0x458>)
 8006cd8:	4659      	mov	r1, fp
 8006cda:	f7fa f8d9 	bl	8000e90 <_pal_lld_setgroupmode>
 8006cde:	f38a 8811 	msr	BASEPRI, sl
  __dbg_check_lock();
 8006ce2:	f7fd fe8d 	bl	8004a00 <__dbg_check_lock>
  if (dacp->state == DAC_STOP) {
 8006ce6:	7833      	ldrb	r3, [r6, #0]
  osalSysLock();

  osalDbgAssert((dacp->state == DAC_STOP) || (dacp->state == DAC_READY),
                "invalid state");

  dacp->config = config;
 8006ce8:	4a2c      	ldr	r2, [pc, #176]	; (8006d9c <main+0x45c>)
 8006cea:	6132      	str	r2, [r6, #16]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	f000 81b3 	beq.w	8007058 <main+0x718>
 8006cf2:	e059      	b.n	8006da8 <main+0x468>
 8006cf4:	40026000 	.word	0x40026000
 8006cf8:	40026400 	.word	0x40026400
 8006cfc:	e000e100 	.word	0xe000e100
 8006d00:	20000800 	.word	0x20000800
 8006d04:	20000878 	.word	0x20000878
 8006d08:	20000840 	.word	0x20000840
 8006d0c:	0800789c 	.word	0x0800789c
 8006d10:	20000830 	.word	0x20000830
 8006d14:	40001000 	.word	0x40001000
 8006d18:	08000f71 	.word	0x08000f71
 8006d1c:	40005800 	.word	0x40005800
 8006d20:	05f5e0f0 	.word	0x05f5e0f0
 8006d24:	40011000 	.word	0x40011000
 8006d28:	08000f81 	.word	0x08000f81
 8006d2c:	40004400 	.word	0x40004400
 8006d30:	02faf078 	.word	0x02faf078
 8006d34:	40023800 	.word	0x40023800
 8006d38:	e0042000 	.word	0xe0042000
 8006d3c:	200010c0 	.word	0x200010c0
 8006d40:	40014800 	.word	0x40014800
 8006d44:	40003800 	.word	0x40003800
 8006d48:	00010016 	.word	0x00010016
 8006d4c:	200010b8 	.word	0x200010b8
 8006d50:	20002638 	.word	0x20002638
 8006d54:	20008000 	.word	0x20008000
 8006d58:	200010cc 	.word	0x200010cc
 8006d5c:	080035c1 	.word	0x080035c1
 8006d60:	20001070 	.word	0x20001070
 8006d64:	20000de0 	.word	0x20000de0
 8006d68:	08003641 	.word	0x08003641
 8006d6c:	0800785c 	.word	0x0800785c
 8006d70:	e000ed00 	.word	0xe000ed00
 8006d74:	05fa0300 	.word	0x05fa0300
 8006d78:	e0001000 	.word	0xe0001000
 8006d7c:	20000e70 	.word	0x20000e70
 8006d80:	08007870 	.word	0x08007870
 8006d84:	20000400 	.word	0x20000400
 8006d88:	08000ff1 	.word	0x08000ff1
 8006d8c:	0800031d 	.word	0x0800031d
 8006d90:	08007630 	.word	0x08007630
 8006d94:	20001174 	.word	0x20001174
 8006d98:	40020000 	.word	0x40020000
 8006d9c:	080078b8 	.word	0x080078b8
 8006da0:	200008f8 	.word	0x200008f8
 8006da4:	20000978 	.word	0x20000978
#else
  dac_lld_start(dacp);
  msg = HAL_RET_SUCCESS;
#endif
  if (msg == HAL_RET_SUCCESS) {
    dacp->state = DAC_READY;
 8006da8:	2302      	movs	r3, #2
 8006daa:	7033      	strb	r3, [r6, #0]
  __dbg_check_unlock();
 8006dac:	f7fd fe10 	bl	80049d0 <__dbg_check_unlock>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f383 8811 	msr	BASEPRI, r3
void dacPutChannelX(DACDriver *dacp, dacchannel_t channel, dacsample_t sample) {

  osalDbgCheck(channel < (dacchannel_t)DAC_MAX_CHANNELS);
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");

  dac_lld_put_channel(dacp, channel, sample);
 8006db6:	f640 7031 	movw	r0, #3889	; 0xf31
 8006dba:	f7fb fe19 	bl	80029f0 <dac_lld_put_channel.constprop.0>
  chThdSleepMilliseconds(100); //wait for opamp input to settle
 8006dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dc2:	f7fd f94d 	bl	8004060 <chThdSleep>
  palSetPad(GPIOA, GPIOA_heater_enable);
 8006dc6:	4bb8      	ldr	r3, [pc, #736]	; (80070a8 <main+0x768>)

  heater_init();

  //Create threads
  chThdCreateStatic(waThdSerial, sizeof(waThdSerial), NORMALPRIO, ThdSerial, NULL);
 8006dc8:	4ab8      	ldr	r2, [pc, #736]	; (80070ac <main+0x76c>)
  chThdCreateStatic(waThdDisp, sizeof(waThdDisp), NORMALPRIO, ThdDisp, NULL);

  myprintf("Thdmain\n");

  while (true) {
    for(float i=150; i>30; i=i*0.9){ //Blinker
 8006dca:	4eb9      	ldr	r6, [pc, #740]	; (80070b0 <main+0x770>)
      palSetPad(GPIOB, GPIOB_LED1);
 8006dcc:	f8df b310 	ldr.w	fp, [pc, #784]	; 80070e0 <main+0x7a0>
      palClearPad(GPIOC, GPIOC_LED2);
 8006dd0:	f8df a310 	ldr.w	sl, [pc, #784]	; 80070e4 <main+0x7a4>
 8006dd4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006dd8:	8318      	strh	r0, [r3, #24]
  chThdCreateStatic(waThdSerial, sizeof(waThdSerial), NORMALPRIO, ThdSerial, NULL);
 8006dda:	f44f 6119 	mov.w	r1, #2448	; 0x990
 8006dde:	48b5      	ldr	r0, [pc, #724]	; (80070b4 <main+0x774>)
 8006de0:	f7fd fe26 	bl	8004a30 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdBeeper, sizeof(waThdBeeper), NORMALPRIO, ThdBeeper, NULL);
 8006de4:	4ab4      	ldr	r2, [pc, #720]	; (80070b8 <main+0x778>)
 8006de6:	48b5      	ldr	r0, [pc, #724]	; (80070bc <main+0x77c>)
 8006de8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006dec:	f7fd fe20 	bl	8004a30 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdGNSS, sizeof(waThdGNSS), NORMALPRIO, ThdGNSS, NULL);
 8006df0:	4ab3      	ldr	r2, [pc, #716]	; (80070c0 <main+0x780>)
 8006df2:	48b4      	ldr	r0, [pc, #720]	; (80070c4 <main+0x784>)
 8006df4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8006df8:	f7fd fe1a 	bl	8004a30 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdCntr, sizeof(waThdCntr), NORMALPRIO, ThdCntr, NULL);
 8006dfc:	4ab2      	ldr	r2, [pc, #712]	; (80070c8 <main+0x788>)
 8006dfe:	48b3      	ldr	r0, [pc, #716]	; (80070cc <main+0x78c>)
 8006e00:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8006e04:	f7fd fe14 	bl	8004a30 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdDisp, sizeof(waThdDisp), NORMALPRIO, ThdDisp, NULL);
 8006e08:	4ab1      	ldr	r2, [pc, #708]	; (80070d0 <main+0x790>)
 8006e0a:	48b2      	ldr	r0, [pc, #712]	; (80070d4 <main+0x794>)
 8006e0c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8006e10:	f7fd fe0e 	bl	8004a30 <chThdCreateStatic.constprop.0.isra.0>
  myprintf("Thdmain\n");
 8006e14:	48b0      	ldr	r0, [pc, #704]	; (80070d8 <main+0x798>)
 8006e16:	f7fe ff6b 	bl	8005cf0 <myprintf>
      palSetPad(GPIOB, GPIOB_LED1);
 8006e1a:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  myprintf("Thdmain\n");
 8006e1e:	2310      	movs	r3, #16
 8006e20:	9300      	str	r3, [sp, #0]
      palSetPad(GPIOB, GPIOB_LED1);
 8006e22:	4647      	mov	r7, r8
      chThdSleepMilliseconds(i);
 8006e24:	f242 7510 	movw	r5, #10000	; 0x2710
      palSetPad(GPIOB, GPIOB_LED1);
 8006e28:	f8ab 7018 	strh.w	r7, [fp, #24]
      chThdSleepMilliseconds(i);
 8006e2c:	4630      	mov	r0, r6
      palClearPad(GPIOC, GPIOC_LED2);
 8006e2e:	f8aa 701a 	strh.w	r7, [sl, #26]
      chThdSleepMilliseconds(i);
 8006e32:	f000 f9b3 	bl	800719c <__aeabi_f2ulz>
 8006e36:	fba0 3205 	umull	r3, r2, r0, r5
 8006e3a:	fb05 2101 	mla	r1, r5, r1, r2
 8006e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006e42:	1898      	adds	r0, r3, r2
 8006e44:	f141 0100 	adc.w	r1, r1, #0
 8006e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f7fa f801 	bl	8000e54 <__aeabi_uldivmod>
 8006e52:	f04f 0930 	mov.w	r9, #48	; 0x30
 8006e56:	4601      	mov	r1, r0
 8006e58:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006e5c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f040 80f6 	bne.w	8007052 <main+0x712>
  oip->dbg.lock_cnt = (cnt_t)1;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f000 810e 	beq.w	800708e <main+0x74e>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8006e72:	9001      	str	r0, [sp, #4]
 8006e74:	2008      	movs	r0, #8
 8006e76:	f7fc fe1b 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006e7a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8006e7e:	9901      	ldr	r1, [sp, #4]
 8006e80:	2301      	movs	r3, #1
 8006e82:	2a00      	cmp	r2, #0
 8006e84:	f040 8100 	bne.w	8007088 <main+0x748>
 8006e88:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f340 80fb 	ble.w	8007088 <main+0x748>
  oip->dbg.lock_cnt = (cnt_t)0;
 8006e92:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8006e96:	f382 8811 	msr	BASEPRI, r2
      palClearPad(GPIOB, GPIOB_LED1);
 8006e9a:	f8ab 801a 	strh.w	r8, [fp, #26]
      palSetPad(GPIOC, GPIOC_LED2);
 8006e9e:	f8aa 8018 	strh.w	r8, [sl, #24]
 8006ea2:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006ea6:	e9d4 2022 	ldrd	r2, r0, [r4, #136]	; 0x88
 8006eaa:	4302      	orrs	r2, r0
 8006eac:	f040 80d1 	bne.w	8007052 <main+0x712>
 8006eb0:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8006eb2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006eb6:	f7fc fdfb 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006eba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 80e2 	bne.w	8007088 <main+0x748>
 8006ec4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	f340 80dd 	ble.w	8007088 <main+0x748>
  oip->dbg.lock_cnt = (cnt_t)0;
 8006ece:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006ed2:	f383 8811 	msr	BASEPRI, r3
    for(float i=150; i>30; i=i*0.9){ //Blinker
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7f9 fc32 	bl	8000740 <__aeabi_f2d>
 8006edc:	a36e      	add	r3, pc, #440	; (adr r3, 8007098 <main+0x758>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f7f9 fc85 	bl	80007f0 <__aeabi_dmul>
 8006ee6:	f7f9 ff65 	bl	8000db4 <__aeabi_d2f>
 8006eea:	9b00      	ldr	r3, [sp, #0]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	4606      	mov	r6, r0
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	d199      	bne.n	8006e28 <main+0x4e8>
      chThdSleepMilliseconds(i);
    }
    for(float i=30; i<150; i=i*1.1){
      palSetPad(GPIOB, GPIOB_LED1);
 8006ef4:	f44f 4880 	mov.w	r8, #16384	; 0x4000
    for(float i=30; i<150; i=i*1.1){
 8006ef8:	4e78      	ldr	r6, [pc, #480]	; (80070dc <main+0x79c>)
 8006efa:	f04f 0911 	mov.w	r9, #17
      palSetPad(GPIOB, GPIOB_LED1);
 8006efe:	46c3      	mov	fp, r8
      palClearPad(GPIOC, GPIOC_LED2);
      chThdSleepMilliseconds(i);
 8006f00:	f242 7a10 	movw	sl, #10000	; 0x2710
      palSetPad(GPIOB, GPIOB_LED1);
 8006f04:	4b76      	ldr	r3, [pc, #472]	; (80070e0 <main+0x7a0>)
      palClearPad(GPIOC, GPIOC_LED2);
 8006f06:	4a77      	ldr	r2, [pc, #476]	; (80070e4 <main+0x7a4>)
      palSetPad(GPIOB, GPIOB_LED1);
 8006f08:	f8a3 b018 	strh.w	fp, [r3, #24]
      chThdSleepMilliseconds(i);
 8006f0c:	4630      	mov	r0, r6
      palClearPad(GPIOC, GPIOC_LED2);
 8006f0e:	f8a2 b01a 	strh.w	fp, [r2, #26]
      chThdSleepMilliseconds(i);
 8006f12:	f000 f943 	bl	800719c <__aeabi_f2ulz>
 8006f16:	fba0 320a 	umull	r3, r2, r0, sl
 8006f1a:	fb0a 2101 	mla	r1, sl, r1, r2
 8006f1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f22:	1898      	adds	r0, r3, r2
 8006f24:	f141 0100 	adc.w	r1, r1, #0
 8006f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f7f9 ff91 	bl	8000e54 <__aeabi_uldivmod>
 8006f32:	2530      	movs	r5, #48	; 0x30
 8006f34:	4601      	mov	r1, r0
 8006f36:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006f3a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f040 8087 	bne.w	8007052 <main+0x712>
  oip->dbg.lock_cnt = (cnt_t)1;
 8006f44:	2701      	movs	r7, #1
 8006f46:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	f000 809f 	beq.w	800708e <main+0x74e>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8006f50:	9000      	str	r0, [sp, #0]
 8006f52:	2008      	movs	r0, #8
 8006f54:	f7fc fdac 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006f58:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f040 8093 	bne.w	8007088 <main+0x748>
 8006f62:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	f340 808e 	ble.w	8007088 <main+0x748>
  oip->dbg.lock_cnt = (cnt_t)0;
 8006f6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006f70:	f383 8811 	msr	BASEPRI, r3
      palClearPad(GPIOB, GPIOB_LED1);
 8006f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      palSetPad(GPIOC, GPIOC_LED2);
 8006f78:	4a5a      	ldr	r2, [pc, #360]	; (80070e4 <main+0x7a4>)
      palClearPad(GPIOB, GPIOB_LED1);
 8006f7a:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8006f7e:	f8a3 801a 	strh.w	r8, [r3, #26]
      palSetPad(GPIOC, GPIOC_LED2);
 8006f82:	f8a2 8018 	strh.w	r8, [r2, #24]
 8006f86:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006f8a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d15f      	bne.n	8007052 <main+0x712>
 8006f92:	9900      	ldr	r1, [sp, #0]
  oip->dbg.lock_cnt = (cnt_t)1;
 8006f94:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
 8006f98:	2008      	movs	r0, #8
 8006f9a:	f7fc fd89 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006f9e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d170      	bne.n	8007088 <main+0x748>
 8006fa6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	dd6c      	ble.n	8007088 <main+0x748>
  oip->dbg.lock_cnt = (cnt_t)0;
 8006fae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006fb2:	f383 8811 	msr	BASEPRI, r3
    for(float i=30; i<150; i=i*1.1){
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7f9 fbc2 	bl	8000740 <__aeabi_f2d>
 8006fbc:	a338      	add	r3, pc, #224	; (adr r3, 80070a0 <main+0x760>)
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 fc15 	bl	80007f0 <__aeabi_dmul>
 8006fc6:	f7f9 fef5 	bl	8000db4 <__aeabi_d2f>
 8006fca:	f1b9 0901 	subs.w	r9, r9, #1
 8006fce:	4606      	mov	r6, r0
 8006fd0:	d198      	bne.n	8006f04 <main+0x5c4>
      chThdSleepMilliseconds(i);
    }

    while (true) {
      palSetPad(GPIOB, GPIOB_LED1);
 8006fd2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8006fd6:	46aa      	mov	sl, r5
 8006fd8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80070e0 <main+0x7a0>
      palClearPad(GPIOC, GPIOC_LED2);
 8006fdc:	4d41      	ldr	r5, [pc, #260]	; (80070e4 <main+0x7a4>)
      palSetPad(GPIOB, GPIOB_LED1);
 8006fde:	46b0      	mov	r8, r6
 8006fe0:	f8a9 8018 	strh.w	r8, [r9, #24]
      palClearPad(GPIOC, GPIOC_LED2);
 8006fe4:	f8a5 801a 	strh.w	r8, [r5, #26]
 8006fe8:	f38a 8811 	msr	BASEPRI, sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8006fec:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	d12e      	bne.n	8007052 <main+0x712>
 8006ff4:	f242 7110 	movw	r1, #10000	; 0x2710
 8006ff8:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8006ffa:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
 8006ffe:	f7fc fd57 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8007002:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007006:	2b00      	cmp	r3, #0
 8007008:	d13e      	bne.n	8007088 <main+0x748>
 800700a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800700e:	2a00      	cmp	r2, #0
 8007010:	dd3a      	ble.n	8007088 <main+0x748>
  oip->dbg.lock_cnt = (cnt_t)0;
 8007012:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007016:	f383 8811 	msr	BASEPRI, r3
      chThdSleepMilliseconds(1000);
      palClearPad(GPIOB, GPIOC_LED2);
 800701a:	f8a9 601a 	strh.w	r6, [r9, #26]
      palSetPad(GPIOC, GPIOB_LED1);
 800701e:	832e      	strh	r6, [r5, #24]
 8007020:	f38a 8811 	msr	BASEPRI, sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8007024:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8007028:	4313      	orrs	r3, r2
 800702a:	d112      	bne.n	8007052 <main+0x712>
 800702c:	f242 7110 	movw	r1, #10000	; 0x2710
 8007030:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8007032:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
 8007036:	f7fc fd3b 	bl	8003ab0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800703a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800703e:	bb1b      	cbnz	r3, 8007088 <main+0x748>
 8007040:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007044:	2a00      	cmp	r2, #0
 8007046:	dd1f      	ble.n	8007088 <main+0x748>
  oip->dbg.lock_cnt = (cnt_t)0;
 8007048:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800704c:	f383 8811 	msr	BASEPRI, r3
}
 8007050:	e7c6      	b.n	8006fe0 <main+0x6a0>
    chSysHalt("SV#4");
 8007052:	4825      	ldr	r0, [pc, #148]	; (80070e8 <main+0x7a8>)
 8007054:	f7f9 ff9c 	bl	8000f90 <chSysHalt>
      rccEnableDAC1(true);
 8007058:	4a24      	ldr	r2, [pc, #144]	; (80070ec <main+0x7ac>)
 800705a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800705c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007060:	6411      	str	r1, [r2, #64]	; 0x40
 8007062:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8007064:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007068:	6611      	str	r1, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 800706a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
      rccEnableDAC1(true);
 800706c:	6e12      	ldr	r2, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 800706e:	6808      	ldr	r0, [r1, #0]
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8007070:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007074:	4093      	lsls	r3, r2
      cr = dacp->params->dac->CR;
 8007076:	6802      	ldr	r2, [r0, #0]
      cr &= dacp->params->regmask;
 8007078:	402a      	ands	r2, r5
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 800707a:	4313      	orrs	r3, r2
      dacp->params->dac->CR = cr;
 800707c:	6003      	str	r3, [r0, #0]
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 800707e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007082:	f7fb fcb5 	bl	80029f0 <dac_lld_put_channel.constprop.0>
 8007086:	e68f      	b.n	8006da8 <main+0x468>
    chSysHalt("SV#5");
 8007088:	4819      	ldr	r0, [pc, #100]	; (80070f0 <main+0x7b0>)
 800708a:	f7f9 ff81 	bl	8000f90 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 800708e:	4819      	ldr	r0, [pc, #100]	; (80070f4 <main+0x7b4>)
 8007090:	f7f9 ff7e 	bl	8000f90 <chSysHalt>
 8007094:	f3af 8000 	nop.w
 8007098:	cccccccd 	.word	0xcccccccd
 800709c:	3feccccc 	.word	0x3feccccc
 80070a0:	9999999a 	.word	0x9999999a
 80070a4:	3ff19999 	.word	0x3ff19999
 80070a8:	40020000 	.word	0x40020000
 80070ac:	08005ec1 	.word	0x08005ec1
 80070b0:	43160000 	.word	0x43160000
 80070b4:	20001ca8 	.word	0x20001ca8
 80070b8:	08005ff1 	.word	0x08005ff1
 80070bc:	20001228 	.word	0x20001228
 80070c0:	08005f81 	.word	0x08005f81
 80070c4:	200019e8 	.word	0x200019e8
 80070c8:	08006101 	.word	0x08006101
 80070cc:	20001468 	.word	0x20001468
 80070d0:	08006371 	.word	0x08006371
 80070d4:	20001728 	.word	0x20001728
 80070d8:	08007638 	.word	0x08007638
 80070dc:	41f00000 	.word	0x41f00000
 80070e0:	40020400 	.word	0x40020400
 80070e4:	40020800 	.word	0x40020800
 80070e8:	080074dc 	.word	0x080074dc
 80070ec:	40023800 	.word	0x40023800
 80070f0:	08007504 	.word	0x08007504
 80070f4:	08007664 	.word	0x08007664

080070f8 <memset>:
 80070f8:	0783      	lsls	r3, r0, #30
 80070fa:	b530      	push	{r4, r5, lr}
 80070fc:	d048      	beq.n	8007190 <memset+0x98>
 80070fe:	1e54      	subs	r4, r2, #1
 8007100:	2a00      	cmp	r2, #0
 8007102:	d03f      	beq.n	8007184 <memset+0x8c>
 8007104:	b2ca      	uxtb	r2, r1
 8007106:	4603      	mov	r3, r0
 8007108:	e001      	b.n	800710e <memset+0x16>
 800710a:	3c01      	subs	r4, #1
 800710c:	d33a      	bcc.n	8007184 <memset+0x8c>
 800710e:	f803 2b01 	strb.w	r2, [r3], #1
 8007112:	079d      	lsls	r5, r3, #30
 8007114:	d1f9      	bne.n	800710a <memset+0x12>
 8007116:	2c03      	cmp	r4, #3
 8007118:	d92d      	bls.n	8007176 <memset+0x7e>
 800711a:	b2cd      	uxtb	r5, r1
 800711c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007120:	2c0f      	cmp	r4, #15
 8007122:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007126:	d936      	bls.n	8007196 <memset+0x9e>
 8007128:	f1a4 0210 	sub.w	r2, r4, #16
 800712c:	f022 0c0f 	bic.w	ip, r2, #15
 8007130:	f103 0e20 	add.w	lr, r3, #32
 8007134:	44e6      	add	lr, ip
 8007136:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800713a:	f103 0210 	add.w	r2, r3, #16
 800713e:	e942 5504 	strd	r5, r5, [r2, #-16]
 8007142:	e942 5502 	strd	r5, r5, [r2, #-8]
 8007146:	3210      	adds	r2, #16
 8007148:	4572      	cmp	r2, lr
 800714a:	d1f8      	bne.n	800713e <memset+0x46>
 800714c:	f10c 0201 	add.w	r2, ip, #1
 8007150:	f014 0f0c 	tst.w	r4, #12
 8007154:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007158:	f004 0c0f 	and.w	ip, r4, #15
 800715c:	d013      	beq.n	8007186 <memset+0x8e>
 800715e:	f1ac 0304 	sub.w	r3, ip, #4
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	3304      	adds	r3, #4
 8007168:	4413      	add	r3, r2
 800716a:	f842 5b04 	str.w	r5, [r2], #4
 800716e:	4293      	cmp	r3, r2
 8007170:	d1fb      	bne.n	800716a <memset+0x72>
 8007172:	f00c 0403 	and.w	r4, ip, #3
 8007176:	b12c      	cbz	r4, 8007184 <memset+0x8c>
 8007178:	b2c9      	uxtb	r1, r1
 800717a:	441c      	add	r4, r3
 800717c:	f803 1b01 	strb.w	r1, [r3], #1
 8007180:	429c      	cmp	r4, r3
 8007182:	d1fb      	bne.n	800717c <memset+0x84>
 8007184:	bd30      	pop	{r4, r5, pc}
 8007186:	4664      	mov	r4, ip
 8007188:	4613      	mov	r3, r2
 800718a:	2c00      	cmp	r4, #0
 800718c:	d1f4      	bne.n	8007178 <memset+0x80>
 800718e:	e7f9      	b.n	8007184 <memset+0x8c>
 8007190:	4603      	mov	r3, r0
 8007192:	4614      	mov	r4, r2
 8007194:	e7bf      	b.n	8007116 <memset+0x1e>
 8007196:	461a      	mov	r2, r3
 8007198:	46a4      	mov	ip, r4
 800719a:	e7e0      	b.n	800715e <memset+0x66>

0800719c <__aeabi_f2ulz>:
 800719c:	b5d0      	push	{r4, r6, r7, lr}
 800719e:	f7f9 facf 	bl	8000740 <__aeabi_f2d>
 80071a2:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <__aeabi_f2ulz+0x38>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	4606      	mov	r6, r0
 80071a8:	460f      	mov	r7, r1
 80071aa:	f7f9 fb21 	bl	80007f0 <__aeabi_dmul>
 80071ae:	f7f9 fde1 	bl	8000d74 <__aeabi_d2uiz>
 80071b2:	4604      	mov	r4, r0
 80071b4:	f7f9 faa2 	bl	80006fc <__aeabi_ui2d>
 80071b8:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <__aeabi_f2ulz+0x3c>)
 80071ba:	2200      	movs	r2, #0
 80071bc:	f7f9 fb18 	bl	80007f0 <__aeabi_dmul>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4630      	mov	r0, r6
 80071c6:	4639      	mov	r1, r7
 80071c8:	f7f9 f95a 	bl	8000480 <__aeabi_dsub>
 80071cc:	f7f9 fdd2 	bl	8000d74 <__aeabi_d2uiz>
 80071d0:	4621      	mov	r1, r4
 80071d2:	bdd0      	pop	{r4, r6, r7, pc}
 80071d4:	3df00000 	.word	0x3df00000
 80071d8:	41f00000 	.word	0x41f00000

080071dc <__udivmoddi4>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	9e08      	ldr	r6, [sp, #32]
 80071e2:	460d      	mov	r5, r1
 80071e4:	4604      	mov	r4, r0
 80071e6:	460f      	mov	r7, r1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d14a      	bne.n	8007282 <__udivmoddi4+0xa6>
 80071ec:	428a      	cmp	r2, r1
 80071ee:	4694      	mov	ip, r2
 80071f0:	d965      	bls.n	80072be <__udivmoddi4+0xe2>
 80071f2:	fab2 f382 	clz	r3, r2
 80071f6:	b143      	cbz	r3, 800720a <__udivmoddi4+0x2e>
 80071f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80071fc:	f1c3 0220 	rsb	r2, r3, #32
 8007200:	409f      	lsls	r7, r3
 8007202:	fa20 f202 	lsr.w	r2, r0, r2
 8007206:	4317      	orrs	r7, r2
 8007208:	409c      	lsls	r4, r3
 800720a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800720e:	fa1f f58c 	uxth.w	r5, ip
 8007212:	fbb7 f1fe 	udiv	r1, r7, lr
 8007216:	0c22      	lsrs	r2, r4, #16
 8007218:	fb0e 7711 	mls	r7, lr, r1, r7
 800721c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8007220:	fb01 f005 	mul.w	r0, r1, r5
 8007224:	4290      	cmp	r0, r2
 8007226:	d90a      	bls.n	800723e <__udivmoddi4+0x62>
 8007228:	eb1c 0202 	adds.w	r2, ip, r2
 800722c:	f101 37ff 	add.w	r7, r1, #4294967295
 8007230:	f080 811c 	bcs.w	800746c <__udivmoddi4+0x290>
 8007234:	4290      	cmp	r0, r2
 8007236:	f240 8119 	bls.w	800746c <__udivmoddi4+0x290>
 800723a:	3902      	subs	r1, #2
 800723c:	4462      	add	r2, ip
 800723e:	1a12      	subs	r2, r2, r0
 8007240:	b2a4      	uxth	r4, r4
 8007242:	fbb2 f0fe 	udiv	r0, r2, lr
 8007246:	fb0e 2210 	mls	r2, lr, r0, r2
 800724a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800724e:	fb00 f505 	mul.w	r5, r0, r5
 8007252:	42a5      	cmp	r5, r4
 8007254:	d90a      	bls.n	800726c <__udivmoddi4+0x90>
 8007256:	eb1c 0404 	adds.w	r4, ip, r4
 800725a:	f100 32ff 	add.w	r2, r0, #4294967295
 800725e:	f080 8107 	bcs.w	8007470 <__udivmoddi4+0x294>
 8007262:	42a5      	cmp	r5, r4
 8007264:	f240 8104 	bls.w	8007470 <__udivmoddi4+0x294>
 8007268:	4464      	add	r4, ip
 800726a:	3802      	subs	r0, #2
 800726c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	2100      	movs	r1, #0
 8007274:	b11e      	cbz	r6, 800727e <__udivmoddi4+0xa2>
 8007276:	40dc      	lsrs	r4, r3
 8007278:	2300      	movs	r3, #0
 800727a:	e9c6 4300 	strd	r4, r3, [r6]
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	428b      	cmp	r3, r1
 8007284:	d908      	bls.n	8007298 <__udivmoddi4+0xbc>
 8007286:	2e00      	cmp	r6, #0
 8007288:	f000 80ed 	beq.w	8007466 <__udivmoddi4+0x28a>
 800728c:	2100      	movs	r1, #0
 800728e:	e9c6 0500 	strd	r0, r5, [r6]
 8007292:	4608      	mov	r0, r1
 8007294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007298:	fab3 f183 	clz	r1, r3
 800729c:	2900      	cmp	r1, #0
 800729e:	d149      	bne.n	8007334 <__udivmoddi4+0x158>
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	d302      	bcc.n	80072aa <__udivmoddi4+0xce>
 80072a4:	4282      	cmp	r2, r0
 80072a6:	f200 80f8 	bhi.w	800749a <__udivmoddi4+0x2be>
 80072aa:	1a84      	subs	r4, r0, r2
 80072ac:	eb65 0203 	sbc.w	r2, r5, r3
 80072b0:	2001      	movs	r0, #1
 80072b2:	4617      	mov	r7, r2
 80072b4:	2e00      	cmp	r6, #0
 80072b6:	d0e2      	beq.n	800727e <__udivmoddi4+0xa2>
 80072b8:	e9c6 4700 	strd	r4, r7, [r6]
 80072bc:	e7df      	b.n	800727e <__udivmoddi4+0xa2>
 80072be:	b902      	cbnz	r2, 80072c2 <__udivmoddi4+0xe6>
 80072c0:	deff      	udf	#255	; 0xff
 80072c2:	fab2 f382 	clz	r3, r2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f040 8090 	bne.w	80073ec <__udivmoddi4+0x210>
 80072cc:	1a8a      	subs	r2, r1, r2
 80072ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80072d2:	fa1f fe8c 	uxth.w	lr, ip
 80072d6:	2101      	movs	r1, #1
 80072d8:	fbb2 f5f7 	udiv	r5, r2, r7
 80072dc:	fb07 2015 	mls	r0, r7, r5, r2
 80072e0:	0c22      	lsrs	r2, r4, #16
 80072e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80072e6:	fb0e f005 	mul.w	r0, lr, r5
 80072ea:	4290      	cmp	r0, r2
 80072ec:	d908      	bls.n	8007300 <__udivmoddi4+0x124>
 80072ee:	eb1c 0202 	adds.w	r2, ip, r2
 80072f2:	f105 38ff 	add.w	r8, r5, #4294967295
 80072f6:	d202      	bcs.n	80072fe <__udivmoddi4+0x122>
 80072f8:	4290      	cmp	r0, r2
 80072fa:	f200 80cb 	bhi.w	8007494 <__udivmoddi4+0x2b8>
 80072fe:	4645      	mov	r5, r8
 8007300:	1a12      	subs	r2, r2, r0
 8007302:	b2a4      	uxth	r4, r4
 8007304:	fbb2 f0f7 	udiv	r0, r2, r7
 8007308:	fb07 2210 	mls	r2, r7, r0, r2
 800730c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007310:	fb0e fe00 	mul.w	lr, lr, r0
 8007314:	45a6      	cmp	lr, r4
 8007316:	d908      	bls.n	800732a <__udivmoddi4+0x14e>
 8007318:	eb1c 0404 	adds.w	r4, ip, r4
 800731c:	f100 32ff 	add.w	r2, r0, #4294967295
 8007320:	d202      	bcs.n	8007328 <__udivmoddi4+0x14c>
 8007322:	45a6      	cmp	lr, r4
 8007324:	f200 80bb 	bhi.w	800749e <__udivmoddi4+0x2c2>
 8007328:	4610      	mov	r0, r2
 800732a:	eba4 040e 	sub.w	r4, r4, lr
 800732e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8007332:	e79f      	b.n	8007274 <__udivmoddi4+0x98>
 8007334:	f1c1 0720 	rsb	r7, r1, #32
 8007338:	408b      	lsls	r3, r1
 800733a:	fa22 fc07 	lsr.w	ip, r2, r7
 800733e:	ea4c 0c03 	orr.w	ip, ip, r3
 8007342:	fa05 f401 	lsl.w	r4, r5, r1
 8007346:	fa20 f307 	lsr.w	r3, r0, r7
 800734a:	40fd      	lsrs	r5, r7
 800734c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007350:	4323      	orrs	r3, r4
 8007352:	fbb5 f8f9 	udiv	r8, r5, r9
 8007356:	fa1f fe8c 	uxth.w	lr, ip
 800735a:	fb09 5518 	mls	r5, r9, r8, r5
 800735e:	0c1c      	lsrs	r4, r3, #16
 8007360:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007364:	fb08 f50e 	mul.w	r5, r8, lr
 8007368:	42a5      	cmp	r5, r4
 800736a:	fa02 f201 	lsl.w	r2, r2, r1
 800736e:	fa00 f001 	lsl.w	r0, r0, r1
 8007372:	d90b      	bls.n	800738c <__udivmoddi4+0x1b0>
 8007374:	eb1c 0404 	adds.w	r4, ip, r4
 8007378:	f108 3aff 	add.w	sl, r8, #4294967295
 800737c:	f080 8088 	bcs.w	8007490 <__udivmoddi4+0x2b4>
 8007380:	42a5      	cmp	r5, r4
 8007382:	f240 8085 	bls.w	8007490 <__udivmoddi4+0x2b4>
 8007386:	f1a8 0802 	sub.w	r8, r8, #2
 800738a:	4464      	add	r4, ip
 800738c:	1b64      	subs	r4, r4, r5
 800738e:	b29d      	uxth	r5, r3
 8007390:	fbb4 f3f9 	udiv	r3, r4, r9
 8007394:	fb09 4413 	mls	r4, r9, r3, r4
 8007398:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800739c:	fb03 fe0e 	mul.w	lr, r3, lr
 80073a0:	45a6      	cmp	lr, r4
 80073a2:	d908      	bls.n	80073b6 <__udivmoddi4+0x1da>
 80073a4:	eb1c 0404 	adds.w	r4, ip, r4
 80073a8:	f103 35ff 	add.w	r5, r3, #4294967295
 80073ac:	d26c      	bcs.n	8007488 <__udivmoddi4+0x2ac>
 80073ae:	45a6      	cmp	lr, r4
 80073b0:	d96a      	bls.n	8007488 <__udivmoddi4+0x2ac>
 80073b2:	3b02      	subs	r3, #2
 80073b4:	4464      	add	r4, ip
 80073b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80073ba:	fba3 9502 	umull	r9, r5, r3, r2
 80073be:	eba4 040e 	sub.w	r4, r4, lr
 80073c2:	42ac      	cmp	r4, r5
 80073c4:	46c8      	mov	r8, r9
 80073c6:	46ae      	mov	lr, r5
 80073c8:	d356      	bcc.n	8007478 <__udivmoddi4+0x29c>
 80073ca:	d053      	beq.n	8007474 <__udivmoddi4+0x298>
 80073cc:	b156      	cbz	r6, 80073e4 <__udivmoddi4+0x208>
 80073ce:	ebb0 0208 	subs.w	r2, r0, r8
 80073d2:	eb64 040e 	sbc.w	r4, r4, lr
 80073d6:	fa04 f707 	lsl.w	r7, r4, r7
 80073da:	40ca      	lsrs	r2, r1
 80073dc:	40cc      	lsrs	r4, r1
 80073de:	4317      	orrs	r7, r2
 80073e0:	e9c6 7400 	strd	r7, r4, [r6]
 80073e4:	4618      	mov	r0, r3
 80073e6:	2100      	movs	r1, #0
 80073e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ec:	f1c3 0120 	rsb	r1, r3, #32
 80073f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80073f4:	fa20 f201 	lsr.w	r2, r0, r1
 80073f8:	fa25 f101 	lsr.w	r1, r5, r1
 80073fc:	409d      	lsls	r5, r3
 80073fe:	432a      	orrs	r2, r5
 8007400:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007404:	fa1f fe8c 	uxth.w	lr, ip
 8007408:	fbb1 f0f7 	udiv	r0, r1, r7
 800740c:	fb07 1510 	mls	r5, r7, r0, r1
 8007410:	0c11      	lsrs	r1, r2, #16
 8007412:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8007416:	fb00 f50e 	mul.w	r5, r0, lr
 800741a:	428d      	cmp	r5, r1
 800741c:	fa04 f403 	lsl.w	r4, r4, r3
 8007420:	d908      	bls.n	8007434 <__udivmoddi4+0x258>
 8007422:	eb1c 0101 	adds.w	r1, ip, r1
 8007426:	f100 38ff 	add.w	r8, r0, #4294967295
 800742a:	d22f      	bcs.n	800748c <__udivmoddi4+0x2b0>
 800742c:	428d      	cmp	r5, r1
 800742e:	d92d      	bls.n	800748c <__udivmoddi4+0x2b0>
 8007430:	3802      	subs	r0, #2
 8007432:	4461      	add	r1, ip
 8007434:	1b49      	subs	r1, r1, r5
 8007436:	b292      	uxth	r2, r2
 8007438:	fbb1 f5f7 	udiv	r5, r1, r7
 800743c:	fb07 1115 	mls	r1, r7, r5, r1
 8007440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007444:	fb05 f10e 	mul.w	r1, r5, lr
 8007448:	4291      	cmp	r1, r2
 800744a:	d908      	bls.n	800745e <__udivmoddi4+0x282>
 800744c:	eb1c 0202 	adds.w	r2, ip, r2
 8007450:	f105 38ff 	add.w	r8, r5, #4294967295
 8007454:	d216      	bcs.n	8007484 <__udivmoddi4+0x2a8>
 8007456:	4291      	cmp	r1, r2
 8007458:	d914      	bls.n	8007484 <__udivmoddi4+0x2a8>
 800745a:	3d02      	subs	r5, #2
 800745c:	4462      	add	r2, ip
 800745e:	1a52      	subs	r2, r2, r1
 8007460:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8007464:	e738      	b.n	80072d8 <__udivmoddi4+0xfc>
 8007466:	4631      	mov	r1, r6
 8007468:	4630      	mov	r0, r6
 800746a:	e708      	b.n	800727e <__udivmoddi4+0xa2>
 800746c:	4639      	mov	r1, r7
 800746e:	e6e6      	b.n	800723e <__udivmoddi4+0x62>
 8007470:	4610      	mov	r0, r2
 8007472:	e6fb      	b.n	800726c <__udivmoddi4+0x90>
 8007474:	4548      	cmp	r0, r9
 8007476:	d2a9      	bcs.n	80073cc <__udivmoddi4+0x1f0>
 8007478:	ebb9 0802 	subs.w	r8, r9, r2
 800747c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8007480:	3b01      	subs	r3, #1
 8007482:	e7a3      	b.n	80073cc <__udivmoddi4+0x1f0>
 8007484:	4645      	mov	r5, r8
 8007486:	e7ea      	b.n	800745e <__udivmoddi4+0x282>
 8007488:	462b      	mov	r3, r5
 800748a:	e794      	b.n	80073b6 <__udivmoddi4+0x1da>
 800748c:	4640      	mov	r0, r8
 800748e:	e7d1      	b.n	8007434 <__udivmoddi4+0x258>
 8007490:	46d0      	mov	r8, sl
 8007492:	e77b      	b.n	800738c <__udivmoddi4+0x1b0>
 8007494:	3d02      	subs	r5, #2
 8007496:	4462      	add	r2, ip
 8007498:	e732      	b.n	8007300 <__udivmoddi4+0x124>
 800749a:	4608      	mov	r0, r1
 800749c:	e70a      	b.n	80072b4 <__udivmoddi4+0xd8>
 800749e:	4464      	add	r4, ip
 80074a0:	3802      	subs	r0, #2
 80074a2:	e742      	b.n	800732a <__udivmoddi4+0x14e>
