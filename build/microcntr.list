
build/microcntr.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002fd 	.word	0x080002fd
 8000008:	080002ff 	.word	0x080002ff
 800000c:	080002ff 	.word	0x080002ff
 8000010:	080002ff 	.word	0x080002ff
 8000014:	080002ff 	.word	0x080002ff
 8000018:	080002ff 	.word	0x080002ff
 800001c:	080002ff 	.word	0x080002ff
 8000020:	080002ff 	.word	0x080002ff
 8000024:	080002ff 	.word	0x080002ff
 8000028:	080002ff 	.word	0x080002ff
 800002c:	080058b1 	.word	0x080058b1
 8000030:	080002ff 	.word	0x080002ff
 8000034:	080002ff 	.word	0x080002ff
 8000038:	080002ff 	.word	0x080002ff
 800003c:	080002ff 	.word	0x080002ff
 8000040:	080002ff 	.word	0x080002ff
 8000044:	080002ff 	.word	0x080002ff
 8000048:	080002ff 	.word	0x080002ff
 800004c:	080002ff 	.word	0x080002ff
 8000050:	080002ff 	.word	0x080002ff
 8000054:	080002ff 	.word	0x080002ff
 8000058:	080002ff 	.word	0x080002ff
 800005c:	080002ff 	.word	0x080002ff
 8000060:	080002ff 	.word	0x080002ff
 8000064:	080002ff 	.word	0x080002ff
 8000068:	080002ff 	.word	0x080002ff
 800006c:	08003741 	.word	0x08003741
 8000070:	080037e1 	.word	0x080037e1
 8000074:	08003881 	.word	0x08003881
 8000078:	08003921 	.word	0x08003921
 800007c:	080039c1 	.word	0x080039c1
 8000080:	08003a61 	.word	0x08003a61
 8000084:	08003b01 	.word	0x08003b01
 8000088:	080035e1 	.word	0x080035e1
 800008c:	080002ff 	.word	0x080002ff
 8000090:	080002ff 	.word	0x080002ff
 8000094:	080002ff 	.word	0x080002ff
 8000098:	080002ff 	.word	0x080002ff
 800009c:	080002ff 	.word	0x080002ff
 80000a0:	080002ff 	.word	0x080002ff
 80000a4:	080002ff 	.word	0x080002ff
 80000a8:	08003331 	.word	0x08003331
 80000ac:	080002ff 	.word	0x080002ff
 80000b0:	080002ff 	.word	0x080002ff
 80000b4:	080002ff 	.word	0x080002ff
 80000b8:	080002ff 	.word	0x080002ff
 80000bc:	080002ff 	.word	0x080002ff
 80000c0:	080002ff 	.word	0x080002ff
 80000c4:	08004141 	.word	0x08004141
 80000c8:	08004371 	.word	0x08004371
 80000cc:	080002ff 	.word	0x080002ff
 80000d0:	080002ff 	.word	0x080002ff
 80000d4:	08003231 	.word	0x08003231
 80000d8:	080032b1 	.word	0x080032b1
 80000dc:	080002ff 	.word	0x080002ff
 80000e0:	080002ff 	.word	0x080002ff
 80000e4:	080002ff 	.word	0x080002ff
 80000e8:	080002ff 	.word	0x080002ff
 80000ec:	080002ff 	.word	0x080002ff
 80000f0:	080002ff 	.word	0x080002ff
 80000f4:	080002ff 	.word	0x080002ff
 80000f8:	080002ff 	.word	0x080002ff
 80000fc:	08003ba1 	.word	0x08003ba1
 8000100:	080002ff 	.word	0x080002ff
 8000104:	080002ff 	.word	0x080002ff
 8000108:	080033f1 	.word	0x080033f1
 800010c:	080002ff 	.word	0x080002ff
 8000110:	080002ff 	.word	0x080002ff
 8000114:	080002ff 	.word	0x080002ff
 8000118:	080002ff 	.word	0x080002ff
 800011c:	080002ff 	.word	0x080002ff
 8000120:	08003c41 	.word	0x08003c41
 8000124:	08003ce1 	.word	0x08003ce1
 8000128:	08003d81 	.word	0x08003d81
 800012c:	08003e21 	.word	0x08003e21
 8000130:	08003ec1 	.word	0x08003ec1
 8000134:	080002ff 	.word	0x080002ff
 8000138:	080002ff 	.word	0x080002ff
 800013c:	080002ff 	.word	0x080002ff
 8000140:	080002ff 	.word	0x080002ff
 8000144:	080002ff 	.word	0x080002ff
 8000148:	080002ff 	.word	0x080002ff
 800014c:	080002ff 	.word	0x080002ff
 8000150:	08003f61 	.word	0x08003f61
 8000154:	08004001 	.word	0x08004001
 8000158:	080040a1 	.word	0x080040a1
 800015c:	080002ff 	.word	0x080002ff
 8000160:	080002ff 	.word	0x080002ff
 8000164:	080002ff 	.word	0x080002ff
 8000168:	080002ff 	.word	0x080002ff
 800016c:	080002ff 	.word	0x080002ff
 8000170:	080002ff 	.word	0x080002ff
 8000174:	080002ff 	.word	0x080002ff
 8000178:	080002ff 	.word	0x080002ff
 800017c:	080002ff 	.word	0x080002ff
 8000180:	080002ff 	.word	0x080002ff
 8000184:	080002ff 	.word	0x080002ff
 8000188:	080002ff 	.word	0x080002ff
 800018c:	080002ff 	.word	0x080002ff
 8000190:	080002ff 	.word	0x080002ff
 8000194:	080002ff 	.word	0x080002ff
 8000198:	080002ff 	.word	0x080002ff
 800019c:	080002ff 	.word	0x080002ff
 80001a0:	080002ff 	.word	0x080002ff
 80001a4:	080002ff 	.word	0x080002ff
 80001a8:	080002ff 	.word	0x080002ff
 80001ac:	080002ff 	.word	0x080002ff
 80001b0:	080002ff 	.word	0x080002ff
 80001b4:	080002ff 	.word	0x080002ff
 80001b8:	080002ff 	.word	0x080002ff
 80001bc:	080002ff 	.word	0x080002ff
 80001c0:	080002ff 	.word	0x080002ff
 80001c4:	080002ff 	.word	0x080002ff
 80001c8:	080002ff 	.word	0x080002ff
 80001cc:	080002ff 	.word	0x080002ff
 80001d0:	080002ff 	.word	0x080002ff
 80001d4:	080002ff 	.word	0x080002ff
 80001d8:	080002ff 	.word	0x080002ff
 80001dc:	080002ff 	.word	0x080002ff

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4837      	ldr	r0, [pc, #220]	; (80002c0 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4836      	ldr	r0, [pc, #216]	; (80002c4 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4836      	ldr	r0, [pc, #216]	; (80002c8 <endfiniloop+0xc>)
                ldr     r1, =SCB_VTOR
 80001f0:	4936      	ldr	r1, [pc, #216]	; (80002cc <endfiniloop+0x10>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001f4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001f8:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001fc:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000200:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000204:	6008      	str	r0, [r1, #0]
                dsb
 8000206:	f3bf 8f4f 	dsb	sy
                isb
 800020a:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800020e:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000212:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000216:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 800021a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021e:	6008      	str	r0, [r1, #0]
                dsb
 8000220:	f3bf 8f4f 	dsb	sy
                isb
 8000224:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000228:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800022c:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000230:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000234:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000238:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800023a:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800023c:	f380 8814 	msr	CONTROL, r0
                isb
 8000240:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000244:	f002 fe8c 	bl	8002f60 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000248:	f005 fb42 	bl	80058d0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800024c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000250:	491f      	ldr	r1, [pc, #124]	; (80002d0 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8000252:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <endfiniloop+0x4>)

08000254 <msloop>:
msloop:
                cmp     r1, r2
 8000254:	4291      	cmp	r1, r2
                itt     lo
 8000256:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000258:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800025c:	e7fa      	bcc.n	8000254 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800025e:	491d      	ldr	r1, [pc, #116]	; (80002d4 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <endfiniloop+0x8>)

08000262 <psloop>:
psloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800026a:	e7fa      	bcc.n	8000262 <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 800026c:	491a      	ldr	r1, [pc, #104]	; (80002d8 <endfiniloop+0x1c>)
                ldr     r2, =__data_base__
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <endfiniloop+0x20>)
                ldr     r3, =__data_end__
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <endfiniloop+0x24>)

08000272 <dloop>:
dloop:
                cmp     r2, r3
 8000272:	429a      	cmp	r2, r3
                ittt    lo
 8000274:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000276:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800027a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800027e:	e7f8      	bcc.n	8000272 <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 8000280:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000282:	4918      	ldr	r1, [pc, #96]	; (80002e4 <endfiniloop+0x28>)
                ldr     r2, =__bss_end__
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <endfiniloop+0x2c>)

08000286 <bloop>:
bloop:
                cmp     r1, r2
 8000286:	4291      	cmp	r1, r2
                itt     lo
 8000288:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800028a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800028e:	e7fa      	bcc.n	8000286 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000290:	f002 fe7e 	bl	8002f90 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000294:	f002 fe6c 	bl	8002f70 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000298:	4c14      	ldr	r4, [pc, #80]	; (80002ec <endfiniloop+0x30>)
                ldr     r5, =__init_array_end__
 800029a:	4d15      	ldr	r5, [pc, #84]	; (80002f0 <endfiniloop+0x34>)

0800029c <initloop>:
initloop:
                cmp     r4, r5
 800029c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800029e:	da03      	bge.n	80002a8 <endinitloop>
                ldr     r1, [r4], #4
 80002a0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002a4:	4788      	blx	r1
                b       initloop
 80002a6:	e7f9      	b.n	800029c <initloop>

080002a8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002a8:	f005 fbfa 	bl	8005aa0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002ac:	4c11      	ldr	r4, [pc, #68]	; (80002f4 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end__
 80002ae:	4d12      	ldr	r5, [pc, #72]	; (80002f8 <endfiniloop+0x3c>)

080002b0 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b2:	da03      	bge.n	80002bc <endfiniloop>
                ldr     r1, [r4], #4
 80002b4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b8:	4788      	blx	r1
                b       finiloop
 80002ba:	e7f9      	b.n	80002b0 <finiloop>

080002bc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002bc:	f002 be60 	b.w	8002f80 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002c0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002c4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002c8:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 80002cc:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 80002d0:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d4:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002d8:	08008284 	.word	0x08008284
                ldr     r2, =__data_base__
 80002dc:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002e0:	20000804 	.word	0x20000804
                ldr     r1, =__bss_base__
 80002e4:	20000808 	.word	0x20000808
                ldr     r2, =__bss_end__
 80002e8:	20002718 	.word	0x20002718
                ldr     r4, =__init_array_base__
 80002ec:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002f8:	080001e0 	.word	0x080001e0

080002fc <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002fc:	e770      	b.n	80001e0 <_crt0_entry>

080002fe <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002fe:	f000 f800 	bl	8000302 <_unhandled_exception>

08000302 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000302:	e7fe      	b.n	8000302 <_unhandled_exception>

08000304 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
 8000308:	ed2d 8a10 	vpush	{s16-s31}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 800030c:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000310:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000312:	469d      	mov	sp, r3
#endif
#endif

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
 8000314:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800031c <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800031c:	f002 fe70 	bl	8003000 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f005 fa88 	bl	8005840 <chThdExit>

08000330 <.zombies>:
.zombies:       b       .zombies
 8000330:	e7fe      	b.n	8000330 <.zombies>

08000332 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 8000332:	f002 fe7d 	bl	8003030 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 8000336:	f004 f8e3 	bl	8004500 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800033a:	f002 fe61 	bl	8003000 <__dbg_check_unlock>

0800033e <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033e:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000340:	e7fe      	b.n	8000340 <__port_exit_from_isr+0x2>
	...

08000344 <memcpy>:
 8000344:	4684      	mov	ip, r0
 8000346:	ea41 0300 	orr.w	r3, r1, r0
 800034a:	f013 0303 	ands.w	r3, r3, #3
 800034e:	d16d      	bne.n	800042c <memcpy+0xe8>
 8000350:	3a40      	subs	r2, #64	; 0x40
 8000352:	d341      	bcc.n	80003d8 <memcpy+0x94>
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a40      	subs	r2, #64	; 0x40
 80003d6:	d2bd      	bcs.n	8000354 <memcpy+0x10>
 80003d8:	3230      	adds	r2, #48	; 0x30
 80003da:	d311      	bcc.n	8000400 <memcpy+0xbc>
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	3a10      	subs	r2, #16
 80003fe:	d2ed      	bcs.n	80003dc <memcpy+0x98>
 8000400:	320c      	adds	r2, #12
 8000402:	d305      	bcc.n	8000410 <memcpy+0xcc>
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	3a04      	subs	r2, #4
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0xc0>
 8000410:	3204      	adds	r2, #4
 8000412:	d008      	beq.n	8000426 <memcpy+0xe2>
 8000414:	07d2      	lsls	r2, r2, #31
 8000416:	bf1c      	itt	ne
 8000418:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800041c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000420:	d301      	bcc.n	8000426 <memcpy+0xe2>
 8000422:	880b      	ldrh	r3, [r1, #0]
 8000424:	8003      	strh	r3, [r0, #0]
 8000426:	4660      	mov	r0, ip
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2a08      	cmp	r2, #8
 800042e:	d313      	bcc.n	8000458 <memcpy+0x114>
 8000430:	078b      	lsls	r3, r1, #30
 8000432:	d08d      	beq.n	8000350 <memcpy+0xc>
 8000434:	f010 0303 	ands.w	r3, r0, #3
 8000438:	d08a      	beq.n	8000350 <memcpy+0xc>
 800043a:	f1c3 0304 	rsb	r3, r3, #4
 800043e:	1ad2      	subs	r2, r2, r3
 8000440:	07db      	lsls	r3, r3, #31
 8000442:	bf1c      	itt	ne
 8000444:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000448:	f800 3b01 	strbne.w	r3, [r0], #1
 800044c:	d380      	bcc.n	8000350 <memcpy+0xc>
 800044e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000452:	f820 3b02 	strh.w	r3, [r0], #2
 8000456:	e77b      	b.n	8000350 <memcpy+0xc>
 8000458:	3a04      	subs	r2, #4
 800045a:	d3d9      	bcc.n	8000410 <memcpy+0xcc>
 800045c:	3a01      	subs	r2, #1
 800045e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000462:	f800 3b01 	strb.w	r3, [r0], #1
 8000466:	d2f9      	bcs.n	800045c <memcpy+0x118>
 8000468:	780b      	ldrb	r3, [r1, #0]
 800046a:	7003      	strb	r3, [r0, #0]
 800046c:	784b      	ldrb	r3, [r1, #1]
 800046e:	7043      	strb	r3, [r0, #1]
 8000470:	788b      	ldrb	r3, [r1, #2]
 8000472:	7083      	strb	r3, [r0, #2]
 8000474:	4660      	mov	r0, ip
 8000476:	4770      	bx	lr

08000478 <__aeabi_dmul>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800047e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000486:	bf1d      	ittte	ne
 8000488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800048c:	ea94 0f0c 	teqne	r4, ip
 8000490:	ea95 0f0c 	teqne	r5, ip
 8000494:	f000 f8de 	bleq	8000654 <__aeabi_dmul+0x1dc>
 8000498:	442c      	add	r4, r5
 800049a:	ea81 0603 	eor.w	r6, r1, r3
 800049e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004aa:	bf18      	it	ne
 80004ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004b8:	d038      	beq.n	800052c <__aeabi_dmul+0xb4>
 80004ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80004be:	f04f 0500 	mov.w	r5, #0
 80004c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004ce:	f04f 0600 	mov.w	r6, #0
 80004d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004d6:	f09c 0f00 	teq	ip, #0
 80004da:	bf18      	it	ne
 80004dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80004e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004ec:	d204      	bcs.n	80004f8 <__aeabi_dmul+0x80>
 80004ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80004f2:	416d      	adcs	r5, r5
 80004f4:	eb46 0606 	adc.w	r6, r6, r6
 80004f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80004fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800050c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000510:	bf88      	it	hi
 8000512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000516:	d81e      	bhi.n	8000556 <__aeabi_dmul+0xde>
 8000518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800051c:	bf08      	it	eq
 800051e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000522:	f150 0000 	adcs.w	r0, r0, #0
 8000526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000530:	ea46 0101 	orr.w	r1, r6, r1
 8000534:	ea40 0002 	orr.w	r0, r0, r2
 8000538:	ea81 0103 	eor.w	r1, r1, r3
 800053c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000540:	bfc2      	ittt	gt
 8000542:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800054a:	bd70      	popgt	{r4, r5, r6, pc}
 800054c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000550:	f04f 0e00 	mov.w	lr, #0
 8000554:	3c01      	subs	r4, #1
 8000556:	f300 80ab 	bgt.w	80006b0 <__aeabi_dmul+0x238>
 800055a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800055e:	bfde      	ittt	le
 8000560:	2000      	movle	r0, #0
 8000562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000566:	bd70      	pople	{r4, r5, r6, pc}
 8000568:	f1c4 0400 	rsb	r4, r4, #0
 800056c:	3c20      	subs	r4, #32
 800056e:	da35      	bge.n	80005dc <__aeabi_dmul+0x164>
 8000570:	340c      	adds	r4, #12
 8000572:	dc1b      	bgt.n	80005ac <__aeabi_dmul+0x134>
 8000574:	f104 0414 	add.w	r4, r4, #20
 8000578:	f1c4 0520 	rsb	r5, r4, #32
 800057c:	fa00 f305 	lsl.w	r3, r0, r5
 8000580:	fa20 f004 	lsr.w	r0, r0, r4
 8000584:	fa01 f205 	lsl.w	r2, r1, r5
 8000588:	ea40 0002 	orr.w	r0, r0, r2
 800058c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000598:	fa21 f604 	lsr.w	r6, r1, r4
 800059c:	eb42 0106 	adc.w	r1, r2, r6
 80005a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f1c4 040c 	rsb	r4, r4, #12
 80005b0:	f1c4 0520 	rsb	r5, r4, #32
 80005b4:	fa00 f304 	lsl.w	r3, r0, r4
 80005b8:	fa20 f005 	lsr.w	r0, r0, r5
 80005bc:	fa01 f204 	lsl.w	r2, r1, r4
 80005c0:	ea40 0002 	orr.w	r0, r0, r2
 80005c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005cc:	f141 0100 	adc.w	r1, r1, #0
 80005d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005d4:	bf08      	it	eq
 80005d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f205 	lsl.w	r2, r0, r5
 80005e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005e8:	fa20 f304 	lsr.w	r3, r0, r4
 80005ec:	fa01 f205 	lsl.w	r2, r1, r5
 80005f0:	ea43 0302 	orr.w	r3, r3, r2
 80005f4:	fa21 f004 	lsr.w	r0, r1, r4
 80005f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000600:	ea20 0002 	bic.w	r0, r0, r2
 8000604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800060c:	bf08      	it	eq
 800060e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f094 0f00 	teq	r4, #0
 8000618:	d10f      	bne.n	800063a <__aeabi_dmul+0x1c2>
 800061a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800061e:	0040      	lsls	r0, r0, #1
 8000620:	eb41 0101 	adc.w	r1, r1, r1
 8000624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000628:	bf08      	it	eq
 800062a:	3c01      	subeq	r4, #1
 800062c:	d0f7      	beq.n	800061e <__aeabi_dmul+0x1a6>
 800062e:	ea41 0106 	orr.w	r1, r1, r6
 8000632:	f095 0f00 	teq	r5, #0
 8000636:	bf18      	it	ne
 8000638:	4770      	bxne	lr
 800063a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	eb43 0303 	adc.w	r3, r3, r3
 8000644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000648:	bf08      	it	eq
 800064a:	3d01      	subeq	r5, #1
 800064c:	d0f7      	beq.n	800063e <__aeabi_dmul+0x1c6>
 800064e:	ea43 0306 	orr.w	r3, r3, r6
 8000652:	4770      	bx	lr
 8000654:	ea94 0f0c 	teq	r4, ip
 8000658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800065c:	bf18      	it	ne
 800065e:	ea95 0f0c 	teqne	r5, ip
 8000662:	d00c      	beq.n	800067e <__aeabi_dmul+0x206>
 8000664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000668:	bf18      	it	ne
 800066a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800066e:	d1d1      	bne.n	8000614 <__aeabi_dmul+0x19c>
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000682:	bf06      	itte	eq
 8000684:	4610      	moveq	r0, r2
 8000686:	4619      	moveq	r1, r3
 8000688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800068c:	d019      	beq.n	80006c2 <__aeabi_dmul+0x24a>
 800068e:	ea94 0f0c 	teq	r4, ip
 8000692:	d102      	bne.n	800069a <__aeabi_dmul+0x222>
 8000694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000698:	d113      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 800069a:	ea95 0f0c 	teq	r5, ip
 800069e:	d105      	bne.n	80006ac <__aeabi_dmul+0x234>
 80006a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006a4:	bf1c      	itt	ne
 80006a6:	4610      	movne	r0, r2
 80006a8:	4619      	movne	r1, r3
 80006aa:	d10a      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006ca:	bd70      	pop	{r4, r5, r6, pc}

080006cc <__aeabi_drsub>:
 80006cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e002      	b.n	80006d8 <__adddf3>
 80006d2:	bf00      	nop

080006d4 <__aeabi_dsub>:
 80006d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080006d8 <__adddf3>:
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006e2:	ea94 0f05 	teq	r4, r5
 80006e6:	bf08      	it	eq
 80006e8:	ea90 0f02 	teqeq	r0, r2
 80006ec:	bf1f      	itttt	ne
 80006ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006fe:	f000 80e2 	beq.w	80008c6 <__adddf3+0x1ee>
 8000702:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000706:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800070a:	bfb8      	it	lt
 800070c:	426d      	neglt	r5, r5
 800070e:	dd0c      	ble.n	800072a <__adddf3+0x52>
 8000710:	442c      	add	r4, r5
 8000712:	ea80 0202 	eor.w	r2, r0, r2
 8000716:	ea81 0303 	eor.w	r3, r1, r3
 800071a:	ea82 0000 	eor.w	r0, r2, r0
 800071e:	ea83 0101 	eor.w	r1, r3, r1
 8000722:	ea80 0202 	eor.w	r2, r0, r2
 8000726:	ea81 0303 	eor.w	r3, r1, r3
 800072a:	2d36      	cmp	r5, #54	; 0x36
 800072c:	bf88      	it	hi
 800072e:	bd30      	pophi	{r4, r5, pc}
 8000730:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000734:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000738:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800073c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000740:	d002      	beq.n	8000748 <__adddf3+0x70>
 8000742:	4240      	negs	r0, r0
 8000744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000748:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000754:	d002      	beq.n	800075c <__adddf3+0x84>
 8000756:	4252      	negs	r2, r2
 8000758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075c:	ea94 0f05 	teq	r4, r5
 8000760:	f000 80a7 	beq.w	80008b2 <__adddf3+0x1da>
 8000764:	f1a4 0401 	sub.w	r4, r4, #1
 8000768:	f1d5 0e20 	rsbs	lr, r5, #32
 800076c:	db0d      	blt.n	800078a <__adddf3+0xb2>
 800076e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000772:	fa22 f205 	lsr.w	r2, r2, r5
 8000776:	1880      	adds	r0, r0, r2
 8000778:	f141 0100 	adc.w	r1, r1, #0
 800077c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000780:	1880      	adds	r0, r0, r2
 8000782:	fa43 f305 	asr.w	r3, r3, r5
 8000786:	4159      	adcs	r1, r3
 8000788:	e00e      	b.n	80007a8 <__adddf3+0xd0>
 800078a:	f1a5 0520 	sub.w	r5, r5, #32
 800078e:	f10e 0e20 	add.w	lr, lr, #32
 8000792:	2a01      	cmp	r2, #1
 8000794:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000798:	bf28      	it	cs
 800079a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800079e:	fa43 f305 	asr.w	r3, r3, r5
 80007a2:	18c0      	adds	r0, r0, r3
 80007a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80007a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ac:	d507      	bpl.n	80007be <__adddf3+0xe6>
 80007ae:	f04f 0e00 	mov.w	lr, #0
 80007b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80007b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80007ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80007be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80007c2:	d31b      	bcc.n	80007fc <__adddf3+0x124>
 80007c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80007c8:	d30c      	bcc.n	80007e4 <__adddf3+0x10c>
 80007ca:	0849      	lsrs	r1, r1, #1
 80007cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80007d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007d4:	f104 0401 	add.w	r4, r4, #1
 80007d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80007e0:	f080 809a 	bcs.w	8000918 <__adddf3+0x240>
 80007e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007e8:	bf08      	it	eq
 80007ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007ee:	f150 0000 	adcs.w	r0, r0, #0
 80007f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007f6:	ea41 0105 	orr.w	r1, r1, r5
 80007fa:	bd30      	pop	{r4, r5, pc}
 80007fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000800:	4140      	adcs	r0, r0
 8000802:	eb41 0101 	adc.w	r1, r1, r1
 8000806:	3c01      	subs	r4, #1
 8000808:	bf28      	it	cs
 800080a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800080e:	d2e9      	bcs.n	80007e4 <__adddf3+0x10c>
 8000810:	f091 0f00 	teq	r1, #0
 8000814:	bf04      	itt	eq
 8000816:	4601      	moveq	r1, r0
 8000818:	2000      	moveq	r0, #0
 800081a:	fab1 f381 	clz	r3, r1
 800081e:	bf08      	it	eq
 8000820:	3320      	addeq	r3, #32
 8000822:	f1a3 030b 	sub.w	r3, r3, #11
 8000826:	f1b3 0220 	subs.w	r2, r3, #32
 800082a:	da0c      	bge.n	8000846 <__adddf3+0x16e>
 800082c:	320c      	adds	r2, #12
 800082e:	dd08      	ble.n	8000842 <__adddf3+0x16a>
 8000830:	f102 0c14 	add.w	ip, r2, #20
 8000834:	f1c2 020c 	rsb	r2, r2, #12
 8000838:	fa01 f00c 	lsl.w	r0, r1, ip
 800083c:	fa21 f102 	lsr.w	r1, r1, r2
 8000840:	e00c      	b.n	800085c <__adddf3+0x184>
 8000842:	f102 0214 	add.w	r2, r2, #20
 8000846:	bfd8      	it	le
 8000848:	f1c2 0c20 	rsble	ip, r2, #32
 800084c:	fa01 f102 	lsl.w	r1, r1, r2
 8000850:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000854:	bfdc      	itt	le
 8000856:	ea41 010c 	orrle.w	r1, r1, ip
 800085a:	4090      	lslle	r0, r2
 800085c:	1ae4      	subs	r4, r4, r3
 800085e:	bfa2      	ittt	ge
 8000860:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000864:	4329      	orrge	r1, r5
 8000866:	bd30      	popge	{r4, r5, pc}
 8000868:	ea6f 0404 	mvn.w	r4, r4
 800086c:	3c1f      	subs	r4, #31
 800086e:	da1c      	bge.n	80008aa <__adddf3+0x1d2>
 8000870:	340c      	adds	r4, #12
 8000872:	dc0e      	bgt.n	8000892 <__adddf3+0x1ba>
 8000874:	f104 0414 	add.w	r4, r4, #20
 8000878:	f1c4 0220 	rsb	r2, r4, #32
 800087c:	fa20 f004 	lsr.w	r0, r0, r4
 8000880:	fa01 f302 	lsl.w	r3, r1, r2
 8000884:	ea40 0003 	orr.w	r0, r0, r3
 8000888:	fa21 f304 	lsr.w	r3, r1, r4
 800088c:	ea45 0103 	orr.w	r1, r5, r3
 8000890:	bd30      	pop	{r4, r5, pc}
 8000892:	f1c4 040c 	rsb	r4, r4, #12
 8000896:	f1c4 0220 	rsb	r2, r4, #32
 800089a:	fa20 f002 	lsr.w	r0, r0, r2
 800089e:	fa01 f304 	lsl.w	r3, r1, r4
 80008a2:	ea40 0003 	orr.w	r0, r0, r3
 80008a6:	4629      	mov	r1, r5
 80008a8:	bd30      	pop	{r4, r5, pc}
 80008aa:	fa21 f004 	lsr.w	r0, r1, r4
 80008ae:	4629      	mov	r1, r5
 80008b0:	bd30      	pop	{r4, r5, pc}
 80008b2:	f094 0f00 	teq	r4, #0
 80008b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80008ba:	bf06      	itte	eq
 80008bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80008c0:	3401      	addeq	r4, #1
 80008c2:	3d01      	subne	r5, #1
 80008c4:	e74e      	b.n	8000764 <__adddf3+0x8c>
 80008c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008ca:	bf18      	it	ne
 80008cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008d0:	d029      	beq.n	8000926 <__adddf3+0x24e>
 80008d2:	ea94 0f05 	teq	r4, r5
 80008d6:	bf08      	it	eq
 80008d8:	ea90 0f02 	teqeq	r0, r2
 80008dc:	d005      	beq.n	80008ea <__adddf3+0x212>
 80008de:	ea54 0c00 	orrs.w	ip, r4, r0
 80008e2:	bf04      	itt	eq
 80008e4:	4619      	moveq	r1, r3
 80008e6:	4610      	moveq	r0, r2
 80008e8:	bd30      	pop	{r4, r5, pc}
 80008ea:	ea91 0f03 	teq	r1, r3
 80008ee:	bf1e      	ittt	ne
 80008f0:	2100      	movne	r1, #0
 80008f2:	2000      	movne	r0, #0
 80008f4:	bd30      	popne	{r4, r5, pc}
 80008f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008fa:	d105      	bne.n	8000908 <__adddf3+0x230>
 80008fc:	0040      	lsls	r0, r0, #1
 80008fe:	4149      	adcs	r1, r1
 8000900:	bf28      	it	cs
 8000902:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000906:	bd30      	pop	{r4, r5, pc}
 8000908:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800090c:	bf3c      	itt	cc
 800090e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000912:	bd30      	popcc	{r4, r5, pc}
 8000914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000918:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800091c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	bd30      	pop	{r4, r5, pc}
 8000926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800092a:	bf1a      	itte	ne
 800092c:	4619      	movne	r1, r3
 800092e:	4610      	movne	r0, r2
 8000930:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000934:	bf1c      	itt	ne
 8000936:	460b      	movne	r3, r1
 8000938:	4602      	movne	r2, r0
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	bf06      	itte	eq
 8000940:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000944:	ea91 0f03 	teqeq	r1, r3
 8000948:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	bf00      	nop

08000950 <__aeabi_ui2d>:
 8000950:	f090 0f00 	teq	r0, #0
 8000954:	bf04      	itt	eq
 8000956:	2100      	moveq	r1, #0
 8000958:	4770      	bxeq	lr
 800095a:	b530      	push	{r4, r5, lr}
 800095c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000960:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000964:	f04f 0500 	mov.w	r5, #0
 8000968:	f04f 0100 	mov.w	r1, #0
 800096c:	e750      	b.n	8000810 <__adddf3+0x138>
 800096e:	bf00      	nop

08000970 <__aeabi_i2d>:
 8000970:	f090 0f00 	teq	r0, #0
 8000974:	bf04      	itt	eq
 8000976:	2100      	moveq	r1, #0
 8000978:	4770      	bxeq	lr
 800097a:	b530      	push	{r4, r5, lr}
 800097c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000980:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000984:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000988:	bf48      	it	mi
 800098a:	4240      	negmi	r0, r0
 800098c:	f04f 0100 	mov.w	r1, #0
 8000990:	e73e      	b.n	8000810 <__adddf3+0x138>
 8000992:	bf00      	nop

08000994 <__aeabi_f2d>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800099a:	ea4f 0131 	mov.w	r1, r1, rrx
 800099e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80009a2:	bf1f      	itttt	ne
 80009a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80009a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80009b0:	4770      	bxne	lr
 80009b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80009b6:	bf08      	it	eq
 80009b8:	4770      	bxeq	lr
 80009ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80009be:	bf04      	itt	eq
 80009c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80009c4:	4770      	bxeq	lr
 80009c6:	b530      	push	{r4, r5, lr}
 80009c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80009cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009d4:	e71c      	b.n	8000810 <__adddf3+0x138>
 80009d6:	bf00      	nop

080009d8 <__aeabi_ul2d>:
 80009d8:	ea50 0201 	orrs.w	r2, r0, r1
 80009dc:	bf08      	it	eq
 80009de:	4770      	bxeq	lr
 80009e0:	b530      	push	{r4, r5, lr}
 80009e2:	f04f 0500 	mov.w	r5, #0
 80009e6:	e00a      	b.n	80009fe <__aeabi_l2d+0x16>

080009e8 <__aeabi_l2d>:
 80009e8:	ea50 0201 	orrs.w	r2, r0, r1
 80009ec:	bf08      	it	eq
 80009ee:	4770      	bxeq	lr
 80009f0:	b530      	push	{r4, r5, lr}
 80009f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009f6:	d502      	bpl.n	80009fe <__aeabi_l2d+0x16>
 80009f8:	4240      	negs	r0, r0
 80009fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a02:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a0a:	f43f aed8 	beq.w	80007be <__adddf3+0xe6>
 8000a0e:	f04f 0203 	mov.w	r2, #3
 8000a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a16:	bf18      	it	ne
 8000a18:	3203      	addne	r2, #3
 8000a1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a1e:	bf18      	it	ne
 8000a20:	3203      	addne	r2, #3
 8000a22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a32:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a36:	ea40 000e 	orr.w	r0, r0, lr
 8000a3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a3e:	4414      	add	r4, r2
 8000a40:	e6bd      	b.n	80007be <__adddf3+0xe6>
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_uldivmod>:
 8000b34:	b953      	cbnz	r3, 8000b4c <__aeabi_uldivmod+0x18>
 8000b36:	b94a      	cbnz	r2, 8000b4c <__aeabi_uldivmod+0x18>
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	2800      	cmpeq	r0, #0
 8000b3e:	bf1c      	itt	ne
 8000b40:	f04f 31ff 	movne.w	r1, #4294967295
 8000b44:	f04f 30ff 	movne.w	r0, #4294967295
 8000b48:	f000 b80c 	b.w	8000b64 <__aeabi_idiv0>
 8000b4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b54:	f005 fb06 	bl	8006164 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_idiv0>:
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr
	...

08000bb0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000bb4:	f002 0803 	and.w	r8, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000bb8:	f3c2 04c1 	ubfx	r4, r2, #3, #2
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000bbc:	f3c2 0580 	ubfx	r5, r2, #2, #1
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000bc0:	09d6      	lsrs	r6, r2, #7
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000bc2:	46c6      	mov	lr, r8
  uint32_t bit     = 0;
 8000bc4:	2200      	movs	r2, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000bc6:	f04f 0b0f 	mov.w	fp, #15
      m1 = 1 << bit;
 8000bca:	f04f 0a01 	mov.w	sl, #1
      m2 = 3 << (bit * 2);
 8000bce:	46a1      	mov	r9, r4
 8000bd0:	e015      	b.n	8000bfe <_pal_lld_setgroupmode+0x4e>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000bd2:	f8d0 c000 	ldr.w	ip, [r0]
 8000bd6:	ea03 030c 	and.w	r3, r3, ip
 8000bda:	ea43 030e 	orr.w	r3, r3, lr
        if (bit < 8)
 8000bde:	2a07      	cmp	r2, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 8000be0:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8000be2:	d841      	bhi.n	8000c68 <_pal_lld_setgroupmode+0xb8>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000be4:	6a03      	ldr	r3, [r0, #32]
 8000be6:	ea23 0307 	bic.w	r3, r3, r7
 8000bea:	4323      	orrs	r3, r4
 8000bec:	6203      	str	r3, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000bee:	0849      	lsrs	r1, r1, #1
 8000bf0:	d038      	beq.n	8000c64 <_pal_lld_setgroupmode+0xb4>
      return;
    otyper <<= 1;
 8000bf2:	006d      	lsls	r5, r5, #1
    ospeedr <<= 2;
 8000bf4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    pupdr <<= 2;
    moder <<= 2;
 8000bf8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8000bfc:	3201      	adds	r2, #1
    if ((mask & 1) != 0) {
 8000bfe:	07cb      	lsls	r3, r1, #31
 8000c00:	d5f5      	bpl.n	8000bee <_pal_lld_setgroupmode+0x3e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000c02:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000c04:	fa0a f402 	lsl.w	r4, sl, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000c08:	ea23 0304 	bic.w	r3, r3, r4
 8000c0c:	432b      	orrs	r3, r5
 8000c0e:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000c10:	6884      	ldr	r4, [r0, #8]
      m2 = 3 << (bit * 2);
 8000c12:	f04f 0c03 	mov.w	ip, #3
 8000c16:	0053      	lsls	r3, r2, #1
 8000c18:	fa0c f303 	lsl.w	r3, ip, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000c1c:	ea24 0c03 	bic.w	ip, r4, r3
 8000c20:	ea4c 0409 	orr.w	r4, ip, r9
 8000c24:	6084      	str	r4, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c26:	68c4      	ldr	r4, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000c28:	f002 0707 	and.w	r7, r2, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c2c:	ea24 0403 	bic.w	r4, r4, r3
      altrmask = altr << ((bit & 7) * 4);
 8000c30:	00bf      	lsls	r7, r7, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000c32:	f1b8 0f02 	cmp.w	r8, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000c36:	60c4      	str	r4, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000c38:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000c3c:	fa06 f407 	lsl.w	r4, r6, r7
      m4 = 15 << ((bit & 7) * 4);
 8000c40:	fa0b f707 	lsl.w	r7, fp, r7
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000c44:	d1c5      	bne.n	8000bd2 <_pal_lld_setgroupmode+0x22>
        if (bit < 8)
 8000c46:	2a07      	cmp	r2, #7
 8000c48:	d814      	bhi.n	8000c74 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000c4a:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8000c4e:	ea2c 0707 	bic.w	r7, ip, r7
 8000c52:	433c      	orrs	r4, r7
 8000c54:	6204      	str	r4, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c56:	6804      	ldr	r4, [r0, #0]
 8000c58:	4023      	ands	r3, r4
 8000c5a:	ea43 030e 	orr.w	r3, r3, lr
    if (!mask)
 8000c5e:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000c60:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000c62:	d1c6      	bne.n	8000bf2 <_pal_lld_setgroupmode+0x42>
  }
}
 8000c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000c68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c6a:	ea23 0307 	bic.w	r3, r3, r7
 8000c6e:	4323      	orrs	r3, r4
 8000c70:	6243      	str	r3, [r0, #36]	; 0x24
 8000c72:	e7bc      	b.n	8000bee <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000c74:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8000c78:	ea2c 0707 	bic.w	r7, ip, r7
 8000c7c:	433c      	orrs	r4, r7
 8000c7e:	6244      	str	r4, [r0, #36]	; 0x24
 8000c80:	e7e9      	b.n	8000c56 <_pal_lld_setgroupmode+0xa6>
 8000c82:	bf00      	nop
	...

08000c90 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000c90:	4a02      	ldr	r2, [pc, #8]	; (8000c9c <notify1+0xc>)
 8000c92:	68d3      	ldr	r3, [r2, #12]
 8000c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c98:	60d3      	str	r3, [r2, #12]
}
 8000c9a:	4770      	bx	lr
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000ca0:	4a02      	ldr	r2, [pc, #8]	; (8000cac <notify2+0xc>)
 8000ca2:	68d3      	ldr	r3, [r2, #12]
 8000ca4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ca8:	60d3      	str	r3, [r2, #12]
}
 8000caa:	4770      	bx	lr
 8000cac:	40004400 	.word	0x40004400

08000cb0 <chSysHalt>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8000cb2:	4903      	ldr	r1, [pc, #12]	; (8000cc0 <chSysHalt+0x10>)
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <chSysHalt+0x14>)
  currcore->dbg.panic_msg = reason;
 8000cb6:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 8000cba:	2203      	movs	r2, #3
 8000cbc:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 8000cbe:	e7fe      	b.n	8000cbe <chSysHalt+0xe>
 8000cc0:	20000e10 	.word	0x20000e10
 8000cc4:	200010f0 	.word	0x200010f0
	...

08000cd0 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000cd0:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000cd4:	b510      	push	{r4, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8000cd6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000cd8:	d112      	bne.n	8000d00 <i2c_lld_serve_tx_end_irq+0x30>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000cda:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000cdc:	680a      	ldr	r2, [r1, #0]
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f023 031f 	bic.w	r3, r3, #31
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	6813      	ldr	r3, [r2, #0]
 8000ce8:	07db      	lsls	r3, r3, #31
 8000cea:	d4fc      	bmi.n	8000ce6 <i2c_lld_serve_tx_end_irq+0x16>
 8000cec:	7a48      	ldrb	r0, [r1, #9]
 8000cee:	684a      	ldr	r2, [r1, #4]
 8000cf0:	233d      	movs	r3, #61	; 0x3d
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000cf6:	6863      	ldr	r3, [r4, #4]
 8000cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfc:	6063      	str	r3, [r4, #4]
}
 8000cfe:	bd10      	pop	{r4, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8000d00:	4801      	ldr	r0, [pc, #4]	; (8000d08 <i2c_lld_serve_tx_end_irq+0x38>)
 8000d02:	f7ff ffd5 	bl	8000cb0 <chSysHalt>
 8000d06:	bf00      	nop
 8000d08:	0800642c 	.word	0x0800642c
 8000d0c:	00000000 	.word	0x00000000

08000d10 <__idle_thread>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8000d10:	e7fe      	b.n	8000d10 <__idle_thread>
 8000d12:	bf00      	nop
	...

08000d20 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000d20:	4b01      	ldr	r3, [pc, #4]	; (8000d28 <chTMStartMeasurementX+0x8>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000d24:	6083      	str	r3, [r0, #8]
}
 8000d26:	4770      	bx	lr
 8000d28:	e0001000 	.word	0xe0001000
 8000d2c:	00000000 	.word	0x00000000

08000d30 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <chTMStopMeasurementX+0x3c>)
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8000d34:	6881      	ldr	r1, [r0, #8]
 8000d36:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000d38:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000d3a:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000d3c:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000d3e:	1b1b      	subs	r3, r3, r4
 8000d40:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8000d42:	18d2      	adds	r2, r2, r3
 8000d44:	6941      	ldr	r1, [r0, #20]
 8000d46:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000d48:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8000d4a:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000d4c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000d50:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000d52:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000d54:	bf88      	it	hi
 8000d56:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000d58:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 8000d5a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 8000d5c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000d60:	6141      	str	r1, [r0, #20]
}
 8000d62:	f85d 4b04 	ldr.w	r4, [sp], #4
    tmp->best = tmp->last;
 8000d66:	bf38      	it	cc
 8000d68:	6003      	strcc	r3, [r0, #0]
}
 8000d6a:	4770      	bx	lr
 8000d6c:	200010f0 	.word	0x200010f0
 8000d70:	e0001000 	.word	0xe0001000
	...

08000d80 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000d84:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 8000d86:	f890 8038 	ldrb.w	r8, [r0, #56]	; 0x38
  dest_row = u8g2->tile_curr_row;
 8000d8a:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000d8e:	f893 9011 	ldrb.w	r9, [r3, #17]
 8000d92:	2400      	movs	r4, #0
{
 8000d94:	b082      	sub	sp, #8
 8000d96:	4606      	mov	r6, r0
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
  u8x8_tile_t tile;
  tile.x_pos = x;
 8000d98:	46a2      	mov	sl, r4
 8000d9a:	e002      	b.n	8000da2 <u8g2_send_buffer+0x22>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8000d9c:	45a9      	cmp	r9, r5
 8000d9e:	d91a      	bls.n	8000dd6 <u8g2_send_buffer+0x56>
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000da0:	6833      	ldr	r3, [r6, #0]
 8000da2:	7c19      	ldrb	r1, [r3, #16]
  ptr = u8g2->tile_buf_ptr;
 8000da4:	6b72      	ldr	r2, [r6, #52]	; 0x34
  tile.y_pos = y;
 8000da6:	f88d 5006 	strb.w	r5, [sp, #6]
  offset *= 8;
 8000daa:	fb11 f304 	smulbb	r3, r1, r4
 8000dae:	00db      	lsls	r3, r3, #3
  ptr += offset;
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	441a      	add	r2, r3
  tile.cnt = cnt;
 8000db4:	f88d 1004 	strb.w	r1, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8000db8:	9200      	str	r2, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8000dba:	466b      	mov	r3, sp
 8000dbc:	68b7      	ldr	r7, [r6, #8]
  tile.x_pos = x;
 8000dbe:	f88d a005 	strb.w	sl, [sp, #5]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	4630      	mov	r0, r6
  } while( src_row < src_max && dest_row < dest_max );
 8000dc8:	3401      	adds	r4, #1
 8000dca:	47b8      	blx	r7
 8000dcc:	b2e3      	uxtb	r3, r4
    dest_row++;
 8000dce:	3501      	adds	r5, #1
  } while( src_row < src_max && dest_row < dest_max );
 8000dd0:	4598      	cmp	r8, r3
    dest_row++;
 8000dd2:	b2ed      	uxtb	r5, r5
  } while( src_row < src_max && dest_row < dest_max );
 8000dd4:	d8e2      	bhi.n	8000d9c <u8g2_send_buffer+0x1c>
}
 8000dd6:	b002      	add	sp, #8
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	0000      	movs	r0, r0
	...

08000de0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 8000de4:	f7ff ffcc 	bl	8000d80 <u8g2_send_buffer>
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8000de8:	68a5      	ldr	r5, [r4, #8]
 8000dea:	2300      	movs	r3, #0
 8000dec:	4620      	mov	r0, r4
 8000dee:	46ac      	mov	ip, r5
 8000df0:	461a      	mov	r2, r3
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}
 8000df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000df6:	2110      	movs	r1, #16
 8000df8:	4760      	bx	ip
 8000dfa:	bf00      	nop
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8000e00:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 8000e02:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8000e04:	7850      	ldrb	r0, [r2, #1]
 8000e06:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 8000e0a:	b280      	uxth	r0, r0
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <u8g2_add_vector_y+0x10>
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d009      	beq.n	8000e2c <u8g2_add_vector_y+0x1c>
 8000e18:	b12b      	cbz	r3, 8000e26 <u8g2_add_vector_y+0x16>
      break;
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
 8000e1a:	1a41      	subs	r1, r0, r1
 8000e1c:	b288      	uxth	r0, r1
      break;      
  }
  return dy;
}
 8000e1e:	4770      	bx	lr
      dy += x;
 8000e20:	4401      	add	r1, r0
 8000e22:	b288      	uxth	r0, r1
      break;
 8000e24:	4770      	bx	lr
      dy += y;
 8000e26:	4402      	add	r2, r0
 8000e28:	b290      	uxth	r0, r2
      break;
 8000e2a:	4770      	bx	lr
      dy -= y;
 8000e2c:	1a82      	subs	r2, r0, r2
 8000e2e:	b290      	uxth	r0, r2
      break;
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
	...

08000e40 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d005      	beq.n	8000e50 <u8g2_add_vector_x+0x10>
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d009      	beq.n	8000e5c <u8g2_add_vector_x+0x1c>
 8000e48:	b12b      	cbz	r3, 8000e56 <u8g2_add_vector_x+0x16>
      break;
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
 8000e4a:	4402      	add	r2, r0
 8000e4c:	b290      	uxth	r0, r2
      break;      
  }
  return dx;
}
 8000e4e:	4770      	bx	lr
      dx -= y;
 8000e50:	1a82      	subs	r2, r0, r2
 8000e52:	b290      	uxth	r0, r2
      break;
 8000e54:	4770      	bx	lr
      dx += x;
 8000e56:	4401      	add	r1, r0
 8000e58:	b288      	uxth	r0, r1
      break;
 8000e5a:	4770      	bx	lr
      dx -= x;
 8000e5c:	1a41      	subs	r1, r0, r1
 8000e5e:	b288      	uxth	r0, r1
      break;
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
	...

08000e70 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8000e70:	2000      	movs	r0, #0
 8000e72:	4770      	bx	lr
	...

08000e80 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8000e80:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d06d      	beq.n	8000f62 <u8g2_SetFont+0xe2>
{
 8000e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8000e8a:	6581      	str	r1, [r0, #88]	; 0x58
  return u8x8_pgm_read( font );  
 8000e8c:	780b      	ldrb	r3, [r1, #0]
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000e8e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  return u8x8_pgm_read( font );  
 8000e92:	784b      	ldrb	r3, [r1, #1]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000e94:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
  return u8x8_pgm_read( font );  
 8000e98:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000e9a:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  return u8x8_pgm_read( font );  
 8000e9e:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000ea0:	f880 3077 	strb.w	r3, [r0, #119]	; 0x77
  return u8x8_pgm_read( font );  
 8000ea4:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000ea6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  return u8x8_pgm_read( font );  
 8000eaa:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000eac:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
  return u8x8_pgm_read( font );  
 8000eb0:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000eb2:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
  return u8x8_pgm_read( font );  
 8000eb6:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000eb8:	f880 307b 	strb.w	r3, [r0, #123]	; 0x7b
  return u8x8_pgm_read( font );  
 8000ebc:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000ebe:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000ec2:	7a4b      	ldrb	r3, [r1, #9]
 8000ec4:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000ec8:	f991 800a 	ldrsb.w	r8, [r1, #10]
  return u8x8_pgm_read( font );  
 8000ecc:	7a8b      	ldrb	r3, [r1, #10]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000ece:	f880 807e 	strb.w	r8, [r0, #126]	; 0x7e
{
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	460d      	mov	r5, r1
  return u8x8_pgm_read( font );  
 8000ed6:	9300      	str	r3, [sp, #0]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000ed8:	7acb      	ldrb	r3, [r1, #11]
 8000eda:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000ede:	f991 b00c 	ldrsb.w	fp, [r1, #12]
  return u8x8_pgm_read( font );  
 8000ee2:	7b0b      	ldrb	r3, [r1, #12]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000ee4:	f880 b080 	strb.w	fp, [r0, #128]	; 0x80
  return u8x8_pgm_read( font );  
 8000ee8:	9301      	str	r3, [sp, #4]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000eea:	f991 700d 	ldrsb.w	r7, [r1, #13]
 8000eee:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000ef2:	f991 600e 	ldrsb.w	r6, [r1, #14]
 8000ef6:	f880 6082 	strb.w	r6, [r0, #130]	; 0x82
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000efa:	f991 900f 	ldrsb.w	r9, [r1, #15]
 8000efe:	f880 9083 	strb.w	r9, [r0, #131]	; 0x83
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000f02:	f991 a010 	ldrsb.w	sl, [r1, #16]
 8000f06:	f880 a084 	strb.w	sl, [r0, #132]	; 0x84
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	2111      	movs	r1, #17
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f7ff ff76 	bl	8000e00 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000f14:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000f16:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	f7ff ff70 	bl	8000e00 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000f20:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000f22:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff ff6a 	bl	8000e00 <u8g2_font_get_word>
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8000f2c:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000f30:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8000f34:	f884 708e 	strb.w	r7, [r4, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8000f38:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8000f3c:	b911      	cbnz	r1, 8000f44 <u8g2_SetFont+0xc4>
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8000f3e:	b003      	add	sp, #12
 8000f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8000f44:	2901      	cmp	r1, #1
 8000f46:	d00d      	beq.n	8000f64 <u8g2_SetFont+0xe4>
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8000f48:	44d8      	add	r8, fp
 8000f4a:	4547      	cmp	r7, r8
 8000f4c:	da04      	bge.n	8000f58 <u8g2_SetFont+0xd8>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8000f4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8000f52:	4413      	add	r3, r2
 8000f54:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8000f58:	45b3      	cmp	fp, r6
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8000f5a:	bfb8      	it	lt
 8000f5c:	f884 b08f 	strblt.w	fp, [r4, #143]	; 0x8f
}
 8000f60:	e7ed      	b.n	8000f3e <u8g2_SetFont+0xbe>
 8000f62:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8000f64:	454f      	cmp	r7, r9
 8000f66:	463b      	mov	r3, r7
 8000f68:	bfb8      	it	lt
 8000f6a:	464b      	movlt	r3, r9
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8000f6c:	4556      	cmp	r6, sl
 8000f6e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
 8000f72:	dde4      	ble.n	8000f3e <u8g2_SetFont+0xbe>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8000f74:	f884 a08f 	strb.w	sl, [r4, #143]	; 0x8f
 8000f78:	e7e1      	b.n	8000f3e <u8g2_SetFont+0xbe>
 8000f7a:	bf00      	nop
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8000f80:	b410      	push	{r4}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8000f82:	f890 408c 	ldrb.w	r4, [r0, #140]	; 0x8c
{
 8000f86:	f89d c004 	ldrb.w	ip, [sp, #4]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8000f8a:	b19c      	cbz	r4, 8000fb4 <u8g2_DrawHVLine+0x34>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8000f8c:	b193      	cbz	r3, 8000fb4 <u8g2_DrawHVLine+0x34>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d005      	beq.n	8000f9e <u8g2_DrawHVLine+0x1e>
      {
	if ( dir == 2 )
 8000f92:	f1bc 0f02 	cmp.w	ip, #2
 8000f96:	d010      	beq.n	8000fba <u8g2_DrawHVLine+0x3a>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
 8000f98:	f1bc 0f03 	cmp.w	ip, #3
 8000f9c:	d058      	beq.n	8001050 <u8g2_DrawHVLine+0xd0>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 8000f9e:	f01c 0f01 	tst.w	ip, #1
 8000fa2:	d00d      	beq.n	8000fc0 <u8g2_DrawHVLine+0x40>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8000fa4:	f8b0 4048 	ldrh.w	r4, [r0, #72]	; 0x48
 8000fa8:	428c      	cmp	r4, r1
 8000faa:	d803      	bhi.n	8000fb4 <u8g2_DrawHVLine+0x34>
	  return;
	if ( x >= u8g2->user_x1 )
 8000fac:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
 8000fb0:	428c      	cmp	r4, r1
 8000fb2:	d830      	bhi.n	8001016 <u8g2_DrawHVLine+0x96>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
 8000fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fb8:	4770      	bx	lr
	  x++;
 8000fba:	3101      	adds	r1, #1
 8000fbc:	1ac9      	subs	r1, r1, r3
 8000fbe:	b289      	uxth	r1, r1
	if ( y < u8g2->user_y0 )
 8000fc0:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
 8000fc4:	4294      	cmp	r4, r2
 8000fc6:	d8f5      	bhi.n	8000fb4 <u8g2_DrawHVLine+0x34>
	if ( y >= u8g2->user_y1 )
 8000fc8:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8000fcc:	4294      	cmp	r4, r2
 8000fce:	d9f1      	bls.n	8000fb4 <u8g2_DrawHVLine+0x34>
  b += *len;
 8000fd0:	440b      	add	r3, r1
 8000fd2:	fa1f fc83 	uxth.w	ip, r3
  if ( a > b )
 8000fd6:	4561      	cmp	r1, ip
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8000fd8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 8000fdc:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
  if ( a > b )
 8000fe0:	d93f      	bls.n	8001062 <u8g2_DrawHVLine+0xe2>
    if ( a < d )
 8000fe2:	428c      	cmp	r4, r1
 8000fe4:	d93c      	bls.n	8001060 <u8g2_DrawHVLine+0xe0>
      b--;
 8000fe6:	f104 3cff 	add.w	ip, r4, #4294967295
 8000fea:	fa1f fc8c 	uxth.w	ip, ip
  if ( b <= c )
 8000fee:	4563      	cmp	r3, ip
 8000ff0:	d2e0      	bcs.n	8000fb4 <u8g2_DrawHVLine+0x34>
  if ( a < c )		
 8000ff2:	4299      	cmp	r1, r3
 8000ff4:	bf38      	it	cc
 8000ff6:	4619      	movcc	r1, r3
  b -= a;
 8000ff8:	4564      	cmp	r4, ip
 8000ffa:	bf94      	ite	ls
 8000ffc:	ebc1 0304 	rsbls	r3, r1, r4
 8001000:	ebc1 030c 	rsbhi	r3, r1, ip
 8001004:	b29b      	uxth	r3, r3
 8001006:	2400      	movs	r4, #0
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001008:	9401      	str	r4, [sp, #4]
 800100a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800100c:	68a4      	ldr	r4, [r4, #8]
 800100e:	46a4      	mov	ip, r4
}
 8001010:	f85d 4b04 	ldr.w	r4, [sp], #4
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001014:	4760      	bx	ip
  b += *len;
 8001016:	4413      	add	r3, r2
 8001018:	fa1f fc83 	uxth.w	ip, r3
  if ( a > b )
 800101c:	4594      	cmp	ip, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800101e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
 8001022:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
  if ( a > b )
 8001026:	d218      	bcs.n	800105a <u8g2_DrawHVLine+0xda>
    if ( a < d )
 8001028:	4294      	cmp	r4, r2
 800102a:	d915      	bls.n	8001058 <u8g2_DrawHVLine+0xd8>
      b--;
 800102c:	f104 3cff 	add.w	ip, r4, #4294967295
 8001030:	fa1f fc8c 	uxth.w	ip, ip
  if ( b <= c )
 8001034:	4563      	cmp	r3, ip
 8001036:	d2bd      	bcs.n	8000fb4 <u8g2_DrawHVLine+0x34>
  if ( a < c )		
 8001038:	429a      	cmp	r2, r3
 800103a:	bf38      	it	cc
 800103c:	461a      	movcc	r2, r3
  b -= a;
 800103e:	4564      	cmp	r4, ip
 8001040:	bf94      	ite	ls
 8001042:	ebc2 0304 	rsbls	r3, r2, r4
 8001046:	ebc2 030c 	rsbhi	r3, r2, ip
 800104a:	b29b      	uxth	r3, r3
 800104c:	2401      	movs	r4, #1
 800104e:	e7db      	b.n	8001008 <u8g2_DrawHVLine+0x88>
	  y++;
 8001050:	3201      	adds	r2, #1
 8001052:	1ad2      	subs	r2, r2, r3
 8001054:	b292      	uxth	r2, r2
      if ( dir == 0 )
 8001056:	e7a5      	b.n	8000fa4 <u8g2_DrawHVLine+0x24>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001058:	461a      	mov	r2, r3
  if ( a >= d )
 800105a:	4294      	cmp	r4, r2
 800105c:	d8ea      	bhi.n	8001034 <u8g2_DrawHVLine+0xb4>
 800105e:	e7a9      	b.n	8000fb4 <u8g2_DrawHVLine+0x34>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001060:	4619      	mov	r1, r3
  if ( a >= d )
 8001062:	428c      	cmp	r4, r1
 8001064:	d8c3      	bhi.n	8000fee <u8g2_DrawHVLine+0x6e>
 8001066:	e7a5      	b.n	8000fb4 <u8g2_DrawHVLine+0x34>
	...

08001070 <u8g2_font_decode_len>:
{
 8001070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001074:	b087      	sub	sp, #28
  lx = decode->x;
 8001076:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
  ly = decode->y;
 800107a:	f890 b069 	ldrb.w	fp, [r0, #105]	; 0x69
{
 800107e:	9205      	str	r2, [sp, #20]
 8001080:	4604      	mov	r4, r0
 8001082:	460e      	mov	r6, r1
  ly = decode->y;
 8001084:	e00f      	b.n	80010a6 <u8g2_font_decode_len+0x36>
    else if ( decode->is_transparent == 0 )    
 8001086:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 800108a:	2900      	cmp	r1, #0
 800108c:	d046      	beq.n	800111c <u8g2_font_decode_len+0xac>
    cnt -= rem;
 800108e:	19f3      	adds	r3, r6, r7
    if ( cnt < rem )
 8001090:	42ae      	cmp	r6, r5
    cnt -= rem;
 8001092:	eba3 030a 	sub.w	r3, r3, sl
    ly++;
 8001096:	f10b 0b01 	add.w	fp, fp, #1
    if ( cnt < rem )
 800109a:	d337      	bcc.n	800110c <u8g2_font_decode_len+0x9c>
    cnt -= rem;
 800109c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    ly++;
 80010a0:	fa5f fb8b 	uxtb.w	fp, fp
    lx = 0;
 80010a4:	2700      	movs	r7, #0
    rem = decode->glyph_width;
 80010a6:	f894 a06a 	ldrb.w	sl, [r4, #106]	; 0x6a
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80010aa:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80010ae:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
    y = decode->target_y;
 80010b2:	f8b4 8066 	ldrh.w	r8, [r4, #102]	; 0x66
    rem -= lx;
 80010b6:	ebaa 0507 	sub.w	r5, sl, r7
 80010ba:	b2ed      	uxtb	r5, r5
    if ( cnt < rem )
 80010bc:	42ae      	cmp	r6, r5
 80010be:	4632      	mov	r2, r6
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80010c0:	fa4f f98b 	sxtb.w	r9, fp
 80010c4:	bf28      	it	cs
 80010c6:	462a      	movcs	r2, r5
 80010c8:	b279      	sxtb	r1, r7
 80010ca:	9204      	str	r2, [sp, #16]
 80010cc:	464a      	mov	r2, r9
 80010ce:	9103      	str	r1, [sp, #12]
 80010d0:	f7ff feb6 	bl	8000e40 <u8g2_add_vector_x>
 80010d4:	4602      	mov	r2, r0
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80010d6:	9903      	ldr	r1, [sp, #12]
 80010d8:	4640      	mov	r0, r8
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80010da:	4690      	mov	r8, r2
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80010dc:	464a      	mov	r2, r9
 80010de:	f7ff fe97 	bl	8000e10 <u8g2_add_vector_y>
    if ( is_foreground )
 80010e2:	9905      	ldr	r1, [sp, #20]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80010e4:	4602      	mov	r2, r0
    if ( is_foreground )
 80010e6:	2900      	cmp	r1, #0
 80010e8:	d0cd      	beq.n	8001086 <u8g2_font_decode_len+0x16>
      u8g2_DrawHVLine(u8g2, 
 80010ea:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80010ec:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
      u8g2_DrawHVLine(u8g2, 
 80010f0:	9b04      	ldr	r3, [sp, #16]
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80010f2:	f884 c092 	strb.w	ip, [r4, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80010f6:	4641      	mov	r1, r8
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff ff41 	bl	8000f80 <u8g2_DrawHVLine>
    cnt -= rem;
 80010fe:	19f3      	adds	r3, r6, r7
    if ( cnt < rem )
 8001100:	42ae      	cmp	r6, r5
    cnt -= rem;
 8001102:	eba3 030a 	sub.w	r3, r3, sl
    ly++;
 8001106:	f10b 0b01 	add.w	fp, fp, #1
    if ( cnt < rem )
 800110a:	d2c7      	bcs.n	800109c <u8g2_font_decode_len+0x2c>
  lx += cnt;
 800110c:	443e      	add	r6, r7
  decode->x = lx;
 800110e:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  decode->y = ly;  
 8001112:	f884 9069 	strb.w	r9, [r4, #105]	; 0x69
}
 8001116:	b007      	add	sp, #28
 8001118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u8g2_DrawHVLine(u8g2, 
 800111c:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800111e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
 8001122:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001126:	9b04      	ldr	r3, [sp, #16]
 8001128:	4641      	mov	r1, r8
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff ff28 	bl	8000f80 <u8g2_DrawHVLine>
 8001130:	e7ad      	b.n	800108e <u8g2_font_decode_len+0x1e>
 8001132:	bf00      	nop
	...

08001140 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001140:	b570      	push	{r4, r5, r6, lr}
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8001142:	f890 5092 	ldrb.w	r5, [r0, #146]	; 0x92
{
 8001146:	f89d 6010 	ldrb.w	r6, [sp, #16]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800114a:	f002 0407 	and.w	r4, r2, #7
  mask <<= bit_pos;
 800114e:	f04f 0c01 	mov.w	ip, #1
 8001152:	fa0c fc04 	lsl.w	ip, ip, r4
  if ( u8g2->draw_color <= 1 )
 8001156:	2d01      	cmp	r5, #1
  mask <<= bit_pos;
 8001158:	fa5f fc8c 	uxtb.w	ip, ip
  if ( u8g2->draw_color <= 1 )
 800115c:	d942      	bls.n	80011e4 <u8g2_ll_hvline_vertical_top_lsb+0xa4>
  or_mask = 0;
 800115e:	f04f 0e00 	mov.w	lr, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001162:	6805      	ldr	r5, [r0, #0]
 8001164:	7c2d      	ldrb	r5, [r5, #16]
  offset &= ~7;
 8001166:	f022 0207 	bic.w	r2, r2, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800116a:	fb02 f505 	mul.w	r5, r2, r5
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 800116e:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8001172:	402a      	ands	r2, r5
  ptr += x;
 8001174:	4411      	add	r1, r2
  ptr = u8g2->tile_buf_ptr;
 8001176:	6b42      	ldr	r2, [r0, #52]	; 0x34
  ptr += x;
 8001178:	4411      	add	r1, r2
  
  if ( dir == 0 )
 800117a:	b99e      	cbnz	r6, 80011a4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	b292      	uxth	r2, r2
 8001180:	3201      	adds	r2, #1
 8001182:	440a      	add	r2, r1
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001184:	780b      	ldrb	r3, [r1, #0]
 8001186:	ea4e 0303 	orr.w	r3, lr, r3
	*ptr ^= xor_mask;
 800118a:	ea8c 0303 	eor.w	r3, ip, r3
 800118e:	f801 3b01 	strb.w	r3, [r1], #1
	ptr++;
	len--;
      } while( len != 0 );
 8001192:	4291      	cmp	r1, r2
 8001194:	d1f6      	bne.n	8001184 <u8g2_ll_hvline_vertical_top_lsb+0x44>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001196:	bd70      	pop	{r4, r5, r6, pc}
	or_mask <<= 1;
 8001198:	fa5f fe85 	uxtb.w	lr, r5
	xor_mask <<= 1;
 800119c:	fa5f fc82 	uxtb.w	ip, r2
    } while( len != 0 );
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f8      	beq.n	8001196 <u8g2_ll_hvline_vertical_top_lsb+0x56>
      *ptr |= or_mask;
 80011a4:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 80011a6:	3401      	adds	r4, #1
      *ptr |= or_mask;
 80011a8:	ea4e 0202 	orr.w	r2, lr, r2
      *ptr ^= xor_mask;
 80011ac:	ea8c 0202 	eor.w	r2, ip, r2
      len--;
 80011b0:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 80011b2:	f014 0407 	ands.w	r4, r4, #7
      *ptr ^= xor_mask;
 80011b6:	700a      	strb	r2, [r1, #0]
      len--;
 80011b8:	b29b      	uxth	r3, r3
	or_mask <<= 1;
 80011ba:	ea4f 054e 	mov.w	r5, lr, lsl #1
	xor_mask <<= 1;
 80011be:	ea4f 024c 	mov.w	r2, ip, lsl #1
      if ( bit_pos == 0 )
 80011c2:	d1e9      	bne.n	8001198 <u8g2_ll_hvline_vertical_top_lsb+0x58>
	if ( u8g2->draw_color <= 1 )
 80011c4:	f890 2092 	ldrb.w	r2, [r0, #146]	; 0x92
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80011c8:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
	if ( u8g2->draw_color <= 1 )
 80011ca:	2a01      	cmp	r2, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80011cc:	4429      	add	r1, r5
	if ( u8g2->draw_color <= 1 )
 80011ce:	d904      	bls.n	80011da <u8g2_ll_hvline_vertical_top_lsb+0x9a>
	  xor_mask = 1;
 80011d0:	f04f 0c01 	mov.w	ip, #1
    } while( len != 0 );
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e5      	bne.n	80011a4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 80011d8:	e7dd      	b.n	8001196 <u8g2_ll_hvline_vertical_top_lsb+0x56>
	if ( u8g2->draw_color != 1 )
 80011da:	d108      	bne.n	80011ee <u8g2_ll_hvline_vertical_top_lsb+0xae>
	  or_mask  = 1;
 80011dc:	4696      	mov	lr, r2
    } while( len != 0 );
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e0      	bne.n	80011a4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 80011e2:	e7d8      	b.n	8001196 <u8g2_ll_hvline_vertical_top_lsb+0x56>
    or_mask  = mask;
 80011e4:	46e6      	mov	lr, ip
  if ( u8g2->draw_color != 1 )
 80011e6:	d1bc      	bne.n	8001162 <u8g2_ll_hvline_vertical_top_lsb+0x22>
  xor_mask = 0;
 80011e8:	f04f 0c00 	mov.w	ip, #0
 80011ec:	e7b9      	b.n	8001162 <u8g2_ll_hvline_vertical_top_lsb+0x22>
	  xor_mask = 1;
 80011ee:	f04f 0c01 	mov.w	ip, #1
	  or_mask  = 1;
 80011f2:	46e6      	mov	lr, ip
    } while( len != 0 );
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1d5      	bne.n	80011a4 <u8g2_ll_hvline_vertical_top_lsb+0x64>
 80011f8:	e7cd      	b.n	8001196 <u8g2_ll_hvline_vertical_top_lsb+0x56>
 80011fa:	bf00      	nop
 80011fc:	0000      	movs	r0, r0
	...

08001200 <u8g2_update_dimension_r1>:
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8001200:	b510      	push	{r4, lr}
  t = u8g2->tile_buf_height;
 8001202:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001206:	6801      	ldr	r1, [r0, #0]
  t *= 8;
 8001208:	ea4f 03cc 	mov.w	r3, ip, lsl #3
  u8g2->pixel_buf_height = t;
 800120c:	8783      	strh	r3, [r0, #60]	; 0x3c
  t = display_info->tile_width;
 800120e:	7c0a      	ldrb	r2, [r1, #16]
  t *= 8;
 8001210:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_buf_width = t;
 8001212:	8742      	strh	r2, [r0, #58]	; 0x3a
  t = u8g2->tile_curr_row;
 8001214:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  t *= 8;
 8001218:	00d4      	lsls	r4, r2, #3
  u8g2->pixel_curr_row = t;
 800121a:	87c4      	strh	r4, [r0, #62]	; 0x3e
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800121c:	f891 e011 	ldrb.w	lr, [r1, #17]
 8001220:	4494      	add	ip, r2
 8001222:	45f4      	cmp	ip, lr
 8001224:	dd06      	ble.n	8001234 <u8g2_update_dimension_r1+0x34>
 8001226:	b292      	uxth	r2, r2
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001228:	ebae 0e02 	sub.w	lr, lr, r2
  t *= 8;
 800122c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8001230:	fa1f f38e 	uxth.w	r3, lr
  u8g2->height = display_info->pixel_height;
 8001234:	8aca      	ldrh	r2, [r1, #22]
  u8g2_update_dimension_common(u8g2);
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8001236:	8a89      	ldrh	r1, [r1, #20]
 8001238:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
  u8g2->buf_y1 += t;
 800123c:	4423      	add	r3, r4
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800123e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
  u8g2->buf_y1 += t;
 8001242:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8001246:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  
}
 800124a:	bd10      	pop	{r4, pc}
 800124c:	0000      	movs	r0, r0
	...

08001250 <u8g2_update_page_win_r1>:
{
  u8g2->user_x0 = u8g2->buf_y0;
  u8g2->user_x1 = u8g2->buf_y1;
  
  u8g2->user_y0 = 0;
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8001250:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001254:	f8b0 c054 	ldrh.w	ip, [r0, #84]	; 0x54
  u8g2->user_x0 = u8g2->buf_y0;
 8001258:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800125c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  u8g2->user_y0 = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 8001266:	4561      	cmp	r1, ip
  u8g2->user_x1 = u8g2->buf_y1;
 8001268:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 800126c:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
{
 8001270:	b570      	push	{r4, r5, r6, lr}
  u8g2->user_x1 = u8g2->buf_y1;
 8001272:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001276:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800127a:	f8b0 e052 	ldrh.w	lr, [r0, #82]	; 0x52
 800127e:	f8b0 4056 	ldrh.w	r4, [r0, #86]	; 0x56
 8001282:	d906      	bls.n	8001292 <u8g2_update_page_win_r1+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001284:	ea5c 0604 	orrs.w	r6, ip, r4
 8001288:	d107      	bne.n	800129a <u8g2_update_page_win_r1+0x4a>
    u8g2->is_page_clip_window_intersection = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001290:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001292:	2c00      	cmp	r4, #0
 8001294:	d0f9      	beq.n	800128a <u8g2_update_page_win_r1+0x3a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001296:	45a4      	cmp	ip, r4
 8001298:	d9f7      	bls.n	800128a <u8g2_update_page_win_r1+0x3a>
  if ( v0 < a1 )		// v0 <= a1
 800129a:	42ab      	cmp	r3, r5
 800129c:	d918      	bls.n	80012d0 <u8g2_update_page_win_r1+0x80>
    if ( v1 > a0 )	// v1 >= a0
 800129e:	4572      	cmp	r2, lr
 80012a0:	d301      	bcc.n	80012a6 <u8g2_update_page_win_r1+0x56>
      if ( v0 > v1 )	// v0 > v1
 80012a2:	4575      	cmp	r5, lr
 80012a4:	d9f1      	bls.n	800128a <u8g2_update_page_win_r1+0x3a>
    u8g2->is_page_clip_window_intersection = 1;
 80012a6:	42aa      	cmp	r2, r5
 80012a8:	bf38      	it	cc
 80012aa:	462a      	movcc	r2, r5
 80012ac:	4573      	cmp	r3, lr
 80012ae:	bf28      	it	cs
 80012b0:	4673      	movcs	r3, lr
 80012b2:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80012b6:	42a1      	cmp	r1, r4
    u8g2->is_page_clip_window_intersection = 1;
 80012b8:	f04f 0301 	mov.w	r3, #1
 80012bc:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80012c0:	f8a0 c04c 	strh.w	ip, [r0, #76]	; 0x4c
 80012c4:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
      u8g2->user_y1 = u8g2->clip_y1;
 80012c8:	bf88      	it	hi
 80012ca:	f8a0 404e 	strhhi.w	r4, [r0, #78]	; 0x4e
}
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
    if ( v1 > a0 )	// v1 >= a0
 80012d0:	4572      	cmp	r2, lr
 80012d2:	d2da      	bcs.n	800128a <u8g2_update_page_win_r1+0x3a>
      if ( v0 > v1 )	// v0 > v1
 80012d4:	4575      	cmp	r5, lr
 80012d6:	d8e6      	bhi.n	80012a6 <u8g2_update_page_win_r1+0x56>
 80012d8:	e7d7      	b.n	800128a <u8g2_update_page_win_r1+0x3a>
 80012da:	bf00      	nop
 80012dc:	0000      	movs	r0, r0
	...

080012e0 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, x, yy, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80012e0:	b510      	push	{r4, lr}
 80012e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80012e6:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
  
  xx = u8g2->height;
  xx -= y;
  xx--;
  
  dir ++;
 80012ea:	3401      	adds	r4, #1
 80012ec:	b2e4      	uxtb	r4, r4
 80012ee:	ebac 0c02 	sub.w	ip, ip, r2
  xx--;
 80012f2:	f10c 3cff 	add.w	ip, ip, #4294967295
  if ( dir == 2 )
 80012f6:	2c02      	cmp	r4, #2
{
 80012f8:	468e      	mov	lr, r1
  xx--;
 80012fa:	fa1f f18c 	uxth.w	r1, ip
  if ( dir == 2 )
 80012fe:	d106      	bne.n	800130e <u8g2_draw_l90_r1+0x2e>
  {
    xx -= len;
    xx++;
 8001300:	f1c3 0201 	rsb	r2, r3, #1
 8001304:	eb01 0c02 	add.w	ip, r1, r2
 8001308:	fa1f f18c 	uxth.w	r1, ip
    dir = 0;
 800130c:	2400      	movs	r4, #0
  y -= u8g2->pixel_curr_row;
 800130e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001310:	9402      	str	r4, [sp, #8]
 8001312:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  y -= u8g2->pixel_curr_row;
 8001314:	ebae 0202 	sub.w	r2, lr, r2
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001318:	46a4      	mov	ip, r4
 800131a:	b292      	uxth	r2, r2
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}
 800131c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001320:	4760      	bx	ip
 8001322:	bf00      	nop
	...

08001330 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001330:	b119      	cbz	r1, 800133a <u8x8_ascii_next+0xa>
 8001332:	290a      	cmp	r1, #10
 8001334:	d001      	beq.n	800133a <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8001336:	b288      	uxth	r0, r1
 8001338:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 800133a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800133e:	4770      	bx	lr

08001340 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8001340:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8001342:	6944      	ldr	r4, [r0, #20]
 8001344:	2300      	movs	r3, #0
 8001346:	46a4      	mov	ip, r4
}
 8001348:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800134c:	4760      	bx	ip
 800134e:	bf00      	nop

08001350 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8001350:	b570      	push	{r4, r5, r6, lr}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8001352:	4c27      	ldr	r4, [pc, #156]	; (80013f0 <dmaStreamAllocI.part.0.constprop.0+0xa0>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8001354:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8001356:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8001358:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800135a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800135c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800135e:	bf18      	it	ne
 8001360:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8001362:	d000      	beq.n	8001366 <dmaStreamAllocI.part.0.constprop.0+0x16>
}
 8001364:	bd70      	pop	{r4, r5, r6, pc}
      dma.allocated_mask  |= mask;
 8001366:	4302      	orrs	r2, r0
 8001368:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 800136a:	4822      	ldr	r0, [pc, #136]	; (80013f4 <dmaStreamAllocI.part.0.constprop.0+0xa4>)
      dma.streams[i].param = param;
 800136c:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <dmaStreamAllocI.part.0.constprop.0+0xa8>)
      dma.streams[i].func  = func;
 800136e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001372:	005d      	lsls	r5, r3, #1
      dma.streams[i].param = param;
 8001374:	60a2      	str	r2, [r4, #8]
        rccEnableDMA1(true);
 8001376:	6b02      	ldr	r2, [r0, #48]	; 0x30
      dma.streams[i].func  = func;
 8001378:	6061      	str	r1, [r4, #4]
        rccEnableDMA1(true);
 800137a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800137e:	6302      	str	r2, [r0, #48]	; 0x30
 8001380:	6d02      	ldr	r2, [r0, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001382:	4c1e      	ldr	r4, [pc, #120]	; (80013fc <dmaStreamAllocI.part.0.constprop.0+0xac>)
        rccEnableDMA1(true);
 8001384:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001388:	6502      	str	r2, [r0, #80]	; 0x50
 800138a:	6d02      	ldr	r2, [r0, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800138c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001390:	eb04 0082 	add.w	r0, r4, r2, lsl #2
      dmaStreamDisable(dmastp);
 8001394:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8001398:	680a      	ldr	r2, [r1, #0]
 800139a:	f022 021f 	bic.w	r2, r2, #31
 800139e:	600a      	str	r2, [r1, #0]
 80013a0:	680a      	ldr	r2, [r1, #0]
 80013a2:	f012 0201 	ands.w	r2, r2, #1
 80013a6:	d1fb      	bne.n	80013a0 <dmaStreamAllocI.part.0.constprop.0+0x50>
 80013a8:	442b      	add	r3, r5
 80013aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80013ae:	253d      	movs	r5, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 80013b0:	7adc      	ldrb	r4, [r3, #11]
      dmaStreamDisable(dmastp);
 80013b2:	f893 e009 	ldrb.w	lr, [r3, #9]
 80013b6:	685e      	ldr	r6, [r3, #4]
 80013b8:	fa05 f50e 	lsl.w	r5, r5, lr
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013bc:	0963      	lsrs	r3, r4, #5
 80013be:	6035      	str	r5, [r6, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80013c0:	f104 4c60 	add.w	ip, r4, #3758096384	; 0xe0000000
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80013c4:	600a      	str	r2, [r1, #0]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013c6:	f004 041f 	and.w	r4, r4, #31
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	2201      	movs	r2, #1
 80013ce:	40a2      	lsls	r2, r4
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 80013d0:	f50c 4c61 	add.w	ip, ip, #57600	; 0xe100
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80013d4:	2421      	movs	r4, #33	; 0x21
 80013d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80013da:	614c      	str	r4, [r1, #20]
 80013dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80013e0:	2150      	movs	r1, #80	; 0x50
 80013e2:	f88c 1300 	strb.w	r1, [ip, #768]	; 0x300
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
 80013ee:	bf00      	nop
 80013f0:	20001118 	.word	0x20001118
 80013f4:	40023800 	.word	0x40023800
 80013f8:	2000087c 	.word	0x2000087c
 80013fc:	080066d8 	.word	0x080066d8

08001400 <dac_lld_put_channel.constprop.0>:
 */
void dac_lld_put_channel(DACDriver *dacp,
                         dacchannel_t channel,
                         dacsample_t sample) {

  switch (dacp->config->datamode) {
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <dac_lld_put_channel.constprop.0+0x3c>)
 8001402:	6913      	ldr	r3, [r2, #16]
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d003      	beq.n	8001412 <dac_lld_put_channel.constprop.0+0x12>
 800140a:	2b02      	cmp	r3, #2
 800140c:	d008      	beq.n	8001420 <dac_lld_put_channel.constprop.0+0x20>
 800140e:	b173      	cbz	r3, 800142e <dac_lld_put_channel.constprop.0+0x2e>
    break;
  default:
    osalDbgAssert(false, "unexpected DAC mode");
    break;
  }
}
 8001410:	4770      	bx	lr
      *(&dacp->params->dac->DHR12L1 + dacp->params->dataoffset) = (uint32_t)sample;
 8001412:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001414:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001418:	330c      	adds	r3, #12
 800141a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800141e:	4770      	bx	lr
      *(&dacp->params->dac->DHR8R1 + dacp->params->dataoffset) = (uint32_t)sample;
 8001420:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001422:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001426:	3310      	adds	r3, #16
 8001428:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
 800142c:	4770      	bx	lr
      *(&dacp->params->dac->DHR12R1 + dacp->params->dataoffset) = (uint32_t)sample;
 800142e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001430:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001434:	3308      	adds	r3, #8
 8001436:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800143a:	4770      	bx	lr
 800143c:	2000083c 	.word	0x2000083c

08001440 <sdObjectInit.constprop.0>:
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8001440:	4603      	mov	r3, r0
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <sdObjectInit.constprop.0+0x58>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001444:	b410      	push	{r4}
  sdp->vmt = &vmt;
 8001446:	f843 2b04 	str.w	r2, [r3], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800144a:	f100 040c 	add.w	r4, r0, #12
 800144e:	f100 0254 	add.w	r2, r0, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001452:	64c1      	str	r1, [r0, #76]	; 0x4c
  iqp->q_counter = 0;
 8001454:	2100      	movs	r1, #0
 8001456:	6141      	str	r1, [r0, #20]
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
  qp->prev = qp;
 8001458:	e9c0 4403 	strd	r4, r4, [r0, #12]
  iqp->q_wrptr   = bp;
 800145c:	e9c0 2208 	strd	r2, r2, [r0, #32]
  oqp->q_counter = size;
 8001460:	2410      	movs	r4, #16
  sdp->state = SD_STOP;
 8001462:	f04f 0c01 	mov.w	ip, #1
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001466:	6043      	str	r3, [r0, #4]
  iqp->q_notify  = infy;
 8001468:	6281      	str	r1, [r0, #40]	; 0x28
  iqp->q_top     = bp + size;
 800146a:	f100 0364 	add.w	r3, r0, #100	; 0x64
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 800146e:	f100 0130 	add.w	r1, r0, #48	; 0x30
  iqp->q_buffer  = bp;
 8001472:	6182      	str	r2, [r0, #24]
  oqp->q_top     = bp + size;
 8001474:	f100 0274 	add.w	r2, r0, #116	; 0x74
  oqp->q_counter = size;
 8001478:	6384      	str	r4, [r0, #56]	; 0x38
  qp->next = qp;
 800147a:	e9c0 010b 	strd	r0, r1, [r0, #44]	; 0x2c
  oqp->q_wrptr   = bp;
 800147e:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
}
 8001482:	f85d 4b04 	ldr.w	r4, [sp], #4
  sdp->state = SD_STOP;
 8001486:	f880 c008 	strb.w	ip, [r0, #8]
  iqp->q_top     = bp + size;
 800148a:	61c3      	str	r3, [r0, #28]
  qp->prev = qp;
 800148c:	6341      	str	r1, [r0, #52]	; 0x34
  oqp->q_buffer  = bp;
 800148e:	63c3      	str	r3, [r0, #60]	; 0x3c
  oqp->q_top     = bp + size;
 8001490:	6402      	str	r2, [r0, #64]	; 0x40
  oqp->q_link    = link;
 8001492:	6500      	str	r0, [r0, #80]	; 0x50
}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	08008254 	.word	0x08008254
 800149c:	00000000 	.word	0x00000000

080014a0 <u8x8_byte_SendBytes.constprop.0.isra.0>:
uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 80014a0:	b410      	push	{r4}
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80014a2:	6904      	ldr	r4, [r0, #16]
uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 80014a4:	460b      	mov	r3, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80014a6:	46a4      	mov	ip, r4
 80014a8:	2201      	movs	r2, #1
}
 80014aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80014ae:	2117      	movs	r1, #23
 80014b0:	4760      	bx	ip
 80014b2:	bf00      	nop
	...

080014c0 <u8x8_cad_EndTransfer.isra.0>:
uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
}

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
 80014c0:	b410      	push	{r4}
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80014c2:	68c4      	ldr	r4, [r0, #12]
 80014c4:	2300      	movs	r3, #0
 80014c6:	46a4      	mov	ip, r4
 80014c8:	461a      	mov	r2, r3
}
 80014ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80014ce:	2119      	movs	r1, #25
 80014d0:	4760      	bx	ip
 80014d2:	bf00      	nop
	...

080014e0 <u8x8_cad_StartTransfer.isra.0>:
uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
 80014e0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80014e2:	68c4      	ldr	r4, [r0, #12]
 80014e4:	2300      	movs	r3, #0
 80014e6:	46a4      	mov	ip, r4
 80014e8:	461a      	mov	r2, r3
}
 80014ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80014ee:	2118      	movs	r1, #24
 80014f0:	4760      	bx	ip
 80014f2:	bf00      	nop
	...

08001500 <u8x8_cad_SendData.isra.0>:
uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 8001500:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001502:	68c4      	ldr	r4, [r0, #12]
uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
 8001504:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001506:	46a4      	mov	ip, r4
 8001508:	460a      	mov	r2, r1
}
 800150a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800150e:	2117      	movs	r1, #23
 8001510:	4760      	bx	ip
 8001512:	bf00      	nop
	...

08001520 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	4605      	mov	r5, r0
 8001524:	b082      	sub	sp, #8
 8001526:	460c      	mov	r4, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001528:	f894 c000 	ldrb.w	ip, [r4]
    data++;
    switch( cmd )
 800152c:	f1bc 0f19 	cmp.w	ip, #25
 8001530:	d813      	bhi.n	800155a <u8x8_cad_SendSequence+0x3a>
 8001532:	f1bc 0f17 	cmp.w	ip, #23
 8001536:	d82b      	bhi.n	8001590 <u8x8_cad_SendSequence+0x70>
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001538:	f10d 0207 	add.w	r2, sp, #7
 800153c:	f04f 0101 	mov.w	r1, #1
 8001540:	4628      	mov	r0, r5
    switch( cmd )
 8001542:	d117      	bne.n	8001574 <u8x8_cad_SendSequence+0x54>
	  v = *data;
 8001544:	7863      	ldrb	r3, [r4, #1]
 8001546:	f88d 3007 	strb.w	r3, [sp, #7]
	  data++;
 800154a:	3402      	adds	r4, #2
	  u8x8_cad_SendData(u8x8, 1, &v);
 800154c:	f7ff ffd8 	bl	8001500 <u8x8_cad_SendData.isra.0>
    cmd = *data;
 8001550:	f894 c000 	ldrb.w	ip, [r4]
    switch( cmd )
 8001554:	f1bc 0f19 	cmp.w	ip, #25
 8001558:	d9eb      	bls.n	8001532 <u8x8_cad_SendSequence+0x12>
 800155a:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800155e:	f04f 0129 	mov.w	r1, #41	; 0x29
 8001562:	4628      	mov	r0, r5
    switch( cmd )
 8001564:	d109      	bne.n	800157a <u8x8_cad_SendSequence+0x5a>
	  v = *data;
 8001566:	7862      	ldrb	r2, [r4, #1]
 8001568:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 800156c:	3402      	adds	r4, #2
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800156e:	f7ff fee7 	bl	8001340 <u8x8_gpio_call>
	  break;
 8001572:	e7d9      	b.n	8001528 <u8x8_cad_SendSequence+0x8>
    switch( cmd )
 8001574:	f1bc 0f14 	cmp.w	ip, #20
 8001578:	d801      	bhi.n	800157e <u8x8_cad_SendSequence+0x5e>
      default:
	return;
    }
  }
}
 800157a:	b002      	add	sp, #8
 800157c:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 800157e:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001580:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8001582:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001586:	2300      	movs	r3, #0
 8001588:	4661      	mov	r1, ip
	  data++;
 800158a:	3402      	adds	r4, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800158c:	47b0      	blx	r6
	  break;
 800158e:	e7cb      	b.n	8001528 <u8x8_cad_SendSequence+0x8>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001590:	2300      	movs	r3, #0
 8001592:	68ee      	ldr	r6, [r5, #12]
 8001594:	461a      	mov	r2, r3
 8001596:	4661      	mov	r1, ip
 8001598:	4628      	mov	r0, r5
    data++;
 800159a:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800159c:	47b0      	blx	r6
	  break;
 800159e:	e7c3      	b.n	8001528 <u8x8_cad_SendSequence+0x8>

080015a0 <u8x8_cad_SendArg.isra.0>:
uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
 80015a0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80015a2:	68c4      	ldr	r4, [r0, #12]
uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
 80015a4:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80015a6:	46a4      	mov	ip, r4
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80015ae:	2116      	movs	r1, #22
 80015b0:	4760      	bx	ip
 80015b2:	bf00      	nop
	...

080015c0 <u8x8_cad_SendCmd.isra.0>:
uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
 80015c0:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80015c2:	68c4      	ldr	r4, [r0, #12]
uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
 80015c4:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80015c6:	46a4      	mov	ip, r4
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80015ce:	2115      	movs	r1, #21
 80015d0:	4760      	bx	ip
 80015d2:	bf00      	nop
	...

080015e0 <u8x8_d_sh1107_64x128>:

static uint8_t u8x8_d_sh1107_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80015e0:	f1a1 0c0b 	sub.w	ip, r1, #11
  /* pixel_width = */ 64,
  /* pixel_height = */ 128
};

uint8_t u8x8_d_sh1107_64x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e6:	4606      	mov	r6, r0
 80015e8:	4615      	mov	r5, r2
 80015ea:	461c      	mov	r4, r3
  switch(msg)
 80015ec:	f1bc 0f04 	cmp.w	ip, #4
 80015f0:	d804      	bhi.n	80015fc <u8x8_d_sh1107_64x128+0x1c>
 80015f2:	e8df f00c 	tbb	[pc, ip]
 80015f6:	033c      	.short	0x033c
 80015f8:	6f7e      	.short	0x6f7e
 80015fa:	43          	.byte	0x43
 80015fb:	00          	.byte	0x00
    
  if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
  
  switch(msg)
 80015fc:	2909      	cmp	r1, #9
 80015fe:	f000 8082 	beq.w	8001706 <u8x8_d_sh1107_64x128+0x126>
 8001602:	290a      	cmp	r1, #10
 8001604:	d001      	beq.n	800160a <u8x8_d_sh1107_64x128+0x2a>
 8001606:	2000      	movs	r0, #0
      break;
    default:
      return 0;
  }
  return 1;
}
 8001608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_gpio_Init(u8x8);
 800160a:	2300      	movs	r3, #0
 800160c:	461a      	mov	r2, r3
 800160e:	6944      	ldr	r4, [r0, #20]
 8001610:	2128      	movs	r1, #40	; 0x28
 8001612:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8001614:	2300      	movs	r3, #0
 8001616:	461a      	mov	r2, r3
 8001618:	68f4      	ldr	r4, [r6, #12]
 800161a:	2114      	movs	r1, #20
 800161c:	4630      	mov	r0, r6
 800161e:	47a0      	blx	r4
      u8x8_gpio_SetReset(u8x8, 1);
 8001620:	4630      	mov	r0, r6
 8001622:	2201      	movs	r2, #1
 8001624:	214b      	movs	r1, #75	; 0x4b
 8001626:	f7ff fe8b 	bl	8001340 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800162a:	6833      	ldr	r3, [r6, #0]
 800162c:	4630      	mov	r0, r6
 800162e:	791a      	ldrb	r2, [r3, #4]
 8001630:	2129      	movs	r1, #41	; 0x29
 8001632:	f7ff fe85 	bl	8001340 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8001636:	4630      	mov	r0, r6
 8001638:	2200      	movs	r2, #0
 800163a:	214b      	movs	r1, #75	; 0x4b
 800163c:	f7ff fe80 	bl	8001340 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001640:	6833      	ldr	r3, [r6, #0]
 8001642:	4630      	mov	r0, r6
 8001644:	791a      	ldrb	r2, [r3, #4]
 8001646:	2129      	movs	r1, #41	; 0x29
 8001648:	f7ff fe7a 	bl	8001340 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800164c:	4630      	mov	r0, r6
 800164e:	2201      	movs	r2, #1
 8001650:	214b      	movs	r1, #75	; 0x4b
 8001652:	f7ff fe75 	bl	8001340 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8001656:	6833      	ldr	r3, [r6, #0]
 8001658:	4630      	mov	r0, r6
 800165a:	795a      	ldrb	r2, [r3, #5]
 800165c:	2129      	movs	r1, #41	; 0x29
 800165e:	f7ff fe6f 	bl	8001340 <u8x8_gpio_call>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
 8001662:	4630      	mov	r0, r6
 8001664:	4932      	ldr	r1, [pc, #200]	; (8001730 <u8x8_d_sh1107_64x128+0x150>)
 8001666:	f7ff ff5b 	bl	8001520 <u8x8_cad_SendSequence>
 800166a:	2001      	movs	r0, #1
}
 800166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 800166e:	2a00      	cmp	r2, #0
 8001670:	d159      	bne.n	8001726 <u8x8_d_sh1107_64x128+0x146>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave0_seq);
 8001672:	4930      	ldr	r1, [pc, #192]	; (8001734 <u8x8_d_sh1107_64x128+0x154>)
 8001674:	f7ff ff54 	bl	8001520 <u8x8_cad_SendSequence>
    return 1;
 8001678:	2001      	movs	r0, #1
}
 800167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_cad_StartTransfer(u8x8);
 800167c:	f7ff ff30 	bl	80014e0 <u8x8_cad_StartTransfer.isra.0>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8001680:	7963      	ldrb	r3, [r4, #5]
      x += u8x8->x_offset;
 8001682:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
 8001686:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800168a:	f001 07ff 	and.w	r7, r1, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 800168e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8001692:	f041 0110 	orr.w	r1, r1, #16
 8001696:	4630      	mov	r0, r6
 8001698:	f7ff ff92 	bl	80015c0 <u8x8_cad_SendCmd.isra.0>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 800169c:	f007 010f 	and.w	r1, r7, #15
 80016a0:	4630      	mov	r0, r6
 80016a2:	f7ff ff8d 	bl	80015c0 <u8x8_cad_SendCmd.isra.0>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be SendCmd */
 80016a6:	79a1      	ldrb	r1, [r4, #6]
 80016a8:	4630      	mov	r0, r6
 80016aa:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 80016ae:	f7ff ff87 	bl	80015c0 <u8x8_cad_SendCmd.isra.0>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80016b2:	7921      	ldrb	r1, [r4, #4]
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	00c9      	lsls	r1, r1, #3
 80016b8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80016bc:	4630      	mov	r0, r6
 80016be:	f7ff ff1f 	bl	8001500 <u8x8_cad_SendData.isra.0>
	arg_int--;
 80016c2:	1e6a      	subs	r2, r5, #1
      } while( arg_int > 0 );
 80016c4:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 80016c8:	d1f3      	bne.n	80016b2 <u8x8_d_sh1107_64x128+0xd2>
      u8x8_cad_EndTransfer(u8x8);
 80016ca:	4630      	mov	r0, r6
 80016cc:	f7ff fef8 	bl	80014c0 <u8x8_cad_EndTransfer.isra.0>
    return 1;
 80016d0:	2001      	movs	r0, #1
}
 80016d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_cad_StartTransfer(u8x8);
 80016d4:	f7ff ff04 	bl	80014e0 <u8x8_cad_StartTransfer.isra.0>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80016d8:	4630      	mov	r0, r6
 80016da:	2181      	movs	r1, #129	; 0x81
 80016dc:	f7ff ff70 	bl	80015c0 <u8x8_cad_SendCmd.isra.0>
      u8x8_cad_SendArg(u8x8, arg_int );	/* sh1107 has range from 0 to 255 */
 80016e0:	4629      	mov	r1, r5
 80016e2:	4630      	mov	r0, r6
 80016e4:	f7ff ff5c 	bl	80015a0 <u8x8_cad_SendArg.isra.0>
      u8x8_cad_EndTransfer(u8x8);
 80016e8:	4630      	mov	r0, r6
 80016ea:	f7ff fee9 	bl	80014c0 <u8x8_cad_EndTransfer.isra.0>
    return 1;
 80016ee:	2001      	movs	r0, #1
}
 80016f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 80016f2:	b97a      	cbnz	r2, 8001714 <u8x8_d_sh1107_64x128+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip0_seq);
 80016f4:	4910      	ldr	r1, [pc, #64]	; (8001738 <u8x8_d_sh1107_64x128+0x158>)
 80016f6:	f7ff ff13 	bl	8001520 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80016fa:	6833      	ldr	r3, [r6, #0]
 80016fc:	7c9b      	ldrb	r3, [r3, #18]
 80016fe:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    return 1;
 8001702:	2001      	movs	r0, #1
}
 8001704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001706:	2300      	movs	r3, #0
      u8x8->display_info = display_info;
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <u8x8_d_sh1107_64x128+0x15c>)
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800170a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
      u8x8->display_info = display_info;
 800170e:	6002      	str	r2, [r0, #0]
  return 1;
 8001710:	2001      	movs	r0, #1
}
 8001712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
 8001714:	490a      	ldr	r1, [pc, #40]	; (8001740 <u8x8_d_sh1107_64x128+0x160>)
 8001716:	f7ff ff03 	bl	8001520 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800171a:	6833      	ldr	r3, [r6, #0]
 800171c:	7cdb      	ldrb	r3, [r3, #19]
 800171e:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    return 1;
 8001722:	2001      	movs	r0, #1
}
 8001724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
 8001726:	4907      	ldr	r1, [pc, #28]	; (8001744 <u8x8_d_sh1107_64x128+0x164>)
 8001728:	f7ff fefa 	bl	8001520 <u8x8_cad_SendSequence>
    return 1;
 800172c:	2001      	movs	r0, #1
}
 800172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001730:	080081f8 	.word	0x080081f8
 8001734:	0800822c 	.word	0x0800822c
 8001738:	080081e8 	.word	0x080081e8
 800173c:	0800823c 	.word	0x0800823c
 8001740:	080081f0 	.word	0x080081f0
 8001744:	08008234 	.word	0x08008234
	...

08001750 <u8x8_byte_SendByte.isra.0>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
 8001750:	b500      	push	{lr}
 8001752:	b083      	sub	sp, #12
 8001754:	460b      	mov	r3, r1
{
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001756:	f10d 0107 	add.w	r1, sp, #7
uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
 800175a:	f88d 3007 	strb.w	r3, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800175e:	f7ff fe9f 	bl	80014a0 <u8x8_byte_SendBytes.constprop.0.isra.0>
}
 8001762:	b003      	add	sp, #12
 8001764:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001770 <u8x8_i2c_data_transfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8001770:	2300      	movs	r3, #0
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8001772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001776:	4604      	mov	r4, r0
 8001778:	460d      	mov	r5, r1
 800177a:	4616      	mov	r6, r2
 800177c:	6907      	ldr	r7, [r0, #16]
 800177e:	461a      	mov	r2, r3
 8001780:	2118      	movs	r1, #24
 8001782:	47b8      	blx	r7
    u8x8_byte_StartTransfer(u8x8);    
    u8x8_byte_SendByte(u8x8, 0x040);
 8001784:	4620      	mov	r0, r4
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	f7ff ffe2 	bl	8001750 <u8x8_byte_SendByte.isra.0>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800178c:	4633      	mov	r3, r6
 800178e:	462a      	mov	r2, r5
 8001790:	2117      	movs	r1, #23
 8001792:	6925      	ldr	r5, [r4, #16]
 8001794:	4620      	mov	r0, r4
 8001796:	47a8      	blx	r5
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8001798:	6925      	ldr	r5, [r4, #16]
 800179a:	2300      	movs	r3, #0
 800179c:	4620      	mov	r0, r4
 800179e:	46ac      	mov	ip, r5
 80017a0:	461a      	mov	r2, r3
    u8x8_byte_EndTransfer(u8x8);
}
 80017a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017a6:	2119      	movs	r1, #25
 80017a8:	4760      	bx	ip
 80017aa:	bf00      	nop
 80017ac:	0000      	movs	r0, r0
	...

080017b0 <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80017b0:	3914      	subs	r1, #20
{
 80017b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b6:	4606      	mov	r6, r0
 80017b8:	4614      	mov	r4, r2
 80017ba:	461d      	mov	r5, r3
  switch(msg)
 80017bc:	2905      	cmp	r1, #5
 80017be:	d86f      	bhi.n	80018a0 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
 80017c0:	e8df f001 	tbb	[pc, r1]
 80017c4:	3c361d0f 	.word	0x3c361d0f
 80017c8:	0356      	.short	0x0356
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80017ca:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80018a4 <u8x8_cad_ssd13xx_fast_i2c+0xf4>
 80017ce:	f898 3000 	ldrb.w	r3, [r8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d152      	bne.n	800187c <u8x8_cad_ssd13xx_fast_i2c+0xcc>
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f888 3000 	strb.w	r3, [r8]
      break;
    default:
      return 0;
  }
  return 1;
 80017dc:	2001      	movs	r0, #1
}
 80017de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( u8x8->i2c_address == 255 )
 80017e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80017e6:	6907      	ldr	r7, [r0, #16]
      if ( u8x8->i2c_address == 255 )
 80017e8:	2bff      	cmp	r3, #255	; 0xff
	u8x8->i2c_address = 0x078;
 80017ea:	bf04      	itt	eq
 80017ec:	2378      	moveq	r3, #120	; 0x78
 80017ee:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80017f2:	46bc      	mov	ip, r7
 80017f4:	462b      	mov	r3, r5
 80017f6:	2114      	movs	r1, #20
}
 80017f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80017fc:	4760      	bx	ip
      if ( in_transfer != 0 )
 80017fe:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80018a4 <u8x8_cad_ssd13xx_fast_i2c+0xf4>
 8001802:	f898 3000 	ldrb.w	r3, [r8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d144      	bne.n	8001894 <u8x8_cad_ssd13xx_fast_i2c+0xe4>
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800180a:	2300      	movs	r3, #0
 800180c:	461a      	mov	r2, r3
 800180e:	6935      	ldr	r5, [r6, #16]
 8001810:	2118      	movs	r1, #24
 8001812:	4630      	mov	r0, r6
 8001814:	47a8      	blx	r5
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8001816:	4630      	mov	r0, r6
 8001818:	2100      	movs	r1, #0
 800181a:	f7ff ff99 	bl	8001750 <u8x8_byte_SendByte.isra.0>
      u8x8_byte_SendByte(u8x8, arg_int);
 800181e:	4630      	mov	r0, r6
 8001820:	4621      	mov	r1, r4
 8001822:	f7ff ff95 	bl	8001750 <u8x8_byte_SendByte.isra.0>
      in_transfer = 1;
 8001826:	2001      	movs	r0, #1
 8001828:	f888 0000 	strb.w	r0, [r8]
}
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SendByte(u8x8, arg_int);
 8001830:	4611      	mov	r1, r2
 8001832:	f7ff ff8d 	bl	8001750 <u8x8_byte_SendByte.isra.0>
  return 1;
 8001836:	2001      	movs	r0, #1
}
 8001838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ( in_transfer != 0 )
 800183c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80018a4 <u8x8_cad_ssd13xx_fast_i2c+0xf4>
 8001840:	f898 3000 	ldrb.w	r3, [r8]
 8001844:	b13b      	cbz	r3, 8001856 <u8x8_cad_ssd13xx_fast_i2c+0xa6>
 8001846:	e01f      	b.n	8001888 <u8x8_cad_ssd13xx_fast_i2c+0xd8>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8001848:	2118      	movs	r1, #24
 800184a:	4630      	mov	r0, r6
 800184c:	f7ff ff90 	bl	8001770 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8001850:	3c18      	subs	r4, #24
 8001852:	b2e4      	uxtb	r4, r4
	p+=24;
 8001854:	3518      	adds	r5, #24
       while( arg_int > 24 )
 8001856:	2c18      	cmp	r4, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8001858:	462a      	mov	r2, r5
       while( arg_int > 24 )
 800185a:	d8f5      	bhi.n	8001848 <u8x8_cad_ssd13xx_fast_i2c+0x98>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800185c:	4630      	mov	r0, r6
 800185e:	4621      	mov	r1, r4
 8001860:	f7ff ff86 	bl	8001770 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	f888 3000 	strb.w	r3, [r8]
  return 1;
 800186a:	2001      	movs	r0, #1
}
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      in_transfer = 0;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <u8x8_cad_ssd13xx_fast_i2c+0xf4>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
  return 1;
 8001876:	2001      	movs	r0, #1
}
 8001878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800187c:	2300      	movs	r3, #0
 800187e:	6904      	ldr	r4, [r0, #16]
 8001880:	461a      	mov	r2, r3
 8001882:	2119      	movs	r1, #25
 8001884:	47a0      	blx	r4
 8001886:	e7a6      	b.n	80017d6 <u8x8_cad_ssd13xx_fast_i2c+0x26>
 8001888:	2300      	movs	r3, #0
 800188a:	6907      	ldr	r7, [r0, #16]
 800188c:	461a      	mov	r2, r3
 800188e:	2119      	movs	r1, #25
 8001890:	47b8      	blx	r7
 8001892:	e7e0      	b.n	8001856 <u8x8_cad_ssd13xx_fast_i2c+0xa6>
 8001894:	2300      	movs	r3, #0
 8001896:	6905      	ldr	r5, [r0, #16]
 8001898:	461a      	mov	r2, r3
 800189a:	2119      	movs	r1, #25
 800189c:	47a8      	blx	r5
 800189e:	e7b4      	b.n	800180a <u8x8_cad_ssd13xx_fast_i2c+0x5a>
  switch(msg)
 80018a0:	2000      	movs	r0, #0
 80018a2:	e79c      	b.n	80017de <u8x8_cad_ssd13xx_fast_i2c+0x2e>
 80018a4:	200011a0 	.word	0x200011a0
	...

080018b0 <u8g2_draw_string.isra.0>:
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
 80018b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b4:	b089      	sub	sp, #36	; 0x24
 80018b6:	4681      	mov	r9, r0
 80018b8:	e9cd 1201 	strd	r1, r2, [sp, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80018bc:	2000      	movs	r0, #0
 80018be:	f889 0026 	strb.w	r0, [r9, #38]	; 0x26
 80018c2:	f103 3bff 	add.w	fp, r3, #4294967295
  val &= (1U<<cnt)-1;
 80018c6:	f04f 3aff 	mov.w	sl, #4294967295
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80018ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018ce:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80018d2:	4648      	mov	r0, r9
 80018d4:	4798      	blx	r3
    if ( e == 0x0ffff )
 80018d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018da:	4298      	cmp	r0, r3
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80018dc:	4604      	mov	r4, r0
    if ( e == 0x0ffff )
 80018de:	f000 808b 	beq.w	80019f8 <u8g2_draw_string.isra.0+0x148>
    if ( e != 0x0fffe )
 80018e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80018e6:	4298      	cmp	r0, r3
 80018e8:	d0ef      	beq.n	80018ca <u8g2_draw_string.isra.0+0x1a>
  switch(u8g2->font_decode.dir)
 80018ea:	f899 3070 	ldrb.w	r3, [r9, #112]	; 0x70
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	f200 822b 	bhi.w	8001d4a <u8g2_draw_string.isra.0+0x49a>
 80018f4:	e8df f003 	tbb	[pc, r3]
 80018f8:	023d464f 	.word	0x023d464f
      x += u8g2->font_calc_vref(u8g2);
 80018fc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8001900:	4648      	mov	r0, r9
 8001902:	4798      	blx	r3
 8001904:	9b01      	ldr	r3, [sp, #4]
      break;
 8001906:	9e02      	ldr	r6, [sp, #8]
      x += u8g2->font_calc_vref(u8g2);
 8001908:	4418      	add	r0, r3
 800190a:	b287      	uxth	r7, r0
  const uint8_t *font = u8g2->font;
 800190c:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
  u8g2->font_decode.target_x = x;
 8001910:	f8a9 7064 	strh.w	r7, [r9, #100]	; 0x64
  if ( encoding <= 255 )
 8001914:	2cff      	cmp	r4, #255	; 0xff
  u8g2->font_decode.target_y = y;
 8001916:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800191a:	f103 0317 	add.w	r3, r3, #23
  if ( encoding <= 255 )
 800191e:	d843      	bhi.n	80019a8 <u8g2_draw_string.isra.0+0xf8>
    if ( encoding >= 'a' )
 8001920:	2c60      	cmp	r4, #96	; 0x60
 8001922:	d96c      	bls.n	80019fe <u8g2_draw_string.isra.0+0x14e>
      font += u8g2->font_info.start_pos_lower_a;
 8001924:	f8b9 2088 	ldrh.w	r2, [r9, #136]	; 0x88
 8001928:	4413      	add	r3, r2
 800192a:	e003      	b.n	8001934 <u8g2_draw_string.isra.0+0x84>
      if ( u8x8_pgm_read( font ) == encoding )
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	42a2      	cmp	r2, r4
 8001930:	d06b      	beq.n	8001a0a <u8g2_draw_string.isra.0+0x15a>
      font += u8x8_pgm_read( font + 1 );
 8001932:	442b      	add	r3, r5
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001934:	785d      	ldrb	r5, [r3, #1]
 8001936:	2d00      	cmp	r5, #0
 8001938:	d1f8      	bne.n	800192c <u8g2_draw_string.isra.0+0x7c>
      switch(u8g2->font_decode.dir)
 800193a:	f899 3070 	ldrb.w	r3, [r9, #112]	; 0x70
 800193e:	2b03      	cmp	r3, #3
 8001940:	d8c3      	bhi.n	80018ca <u8g2_draw_string.isra.0+0x1a>
 8001942:	e8df f003 	tbb	[pc, r3]
 8001946:	0c11      	.short	0x0c11
 8001948:	0207      	.short	0x0207
	  y -= delta;
 800194a:	9b02      	ldr	r3, [sp, #8]
 800194c:	1b5d      	subs	r5, r3, r5
 800194e:	b2ab      	uxth	r3, r5
 8001950:	9302      	str	r3, [sp, #8]
	  break;
 8001952:	e7ba      	b.n	80018ca <u8g2_draw_string.isra.0+0x1a>
	  x -= delta;
 8001954:	9b01      	ldr	r3, [sp, #4]
 8001956:	1b5d      	subs	r5, r3, r5
 8001958:	b2ab      	uxth	r3, r5
 800195a:	9301      	str	r3, [sp, #4]
	  break;
 800195c:	e7b5      	b.n	80018ca <u8g2_draw_string.isra.0+0x1a>
	  y += delta;
 800195e:	9b02      	ldr	r3, [sp, #8]
 8001960:	442b      	add	r3, r5
 8001962:	b29b      	uxth	r3, r3
 8001964:	9302      	str	r3, [sp, #8]
	  break;
 8001966:	e7b0      	b.n	80018ca <u8g2_draw_string.isra.0+0x1a>
	  x += delta;
 8001968:	9b01      	ldr	r3, [sp, #4]
 800196a:	442b      	add	r3, r5
 800196c:	b29b      	uxth	r3, r3
 800196e:	9301      	str	r3, [sp, #4]
	  break;
 8001970:	e7ab      	b.n	80018ca <u8g2_draw_string.isra.0+0x1a>
      y -= u8g2->font_calc_vref(u8g2);
 8001972:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8001976:	4648      	mov	r0, r9
 8001978:	4798      	blx	r3
 800197a:	9b02      	ldr	r3, [sp, #8]
      break;
 800197c:	9f01      	ldr	r7, [sp, #4]
      y -= u8g2->font_calc_vref(u8g2);
 800197e:	1a18      	subs	r0, r3, r0
 8001980:	b286      	uxth	r6, r0
      break;
 8001982:	e7c3      	b.n	800190c <u8g2_draw_string.isra.0+0x5c>
      x -= u8g2->font_calc_vref(u8g2);
 8001984:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8001988:	4648      	mov	r0, r9
 800198a:	4798      	blx	r3
 800198c:	9b01      	ldr	r3, [sp, #4]
      break;
 800198e:	9e02      	ldr	r6, [sp, #8]
      x -= u8g2->font_calc_vref(u8g2);
 8001990:	1a18      	subs	r0, r3, r0
 8001992:	b287      	uxth	r7, r0
      break;
 8001994:	e7ba      	b.n	800190c <u8g2_draw_string.isra.0+0x5c>
      y += u8g2->font_calc_vref(u8g2);
 8001996:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800199a:	4648      	mov	r0, r9
 800199c:	4798      	blx	r3
 800199e:	9b02      	ldr	r3, [sp, #8]
      break;
 80019a0:	9f01      	ldr	r7, [sp, #4]
      y += u8g2->font_calc_vref(u8g2);
 80019a2:	4418      	add	r0, r3
 80019a4:	b286      	uxth	r6, r0
      break;
 80019a6:	e7b1      	b.n	800190c <u8g2_draw_string.isra.0+0x5c>
    font += u8g2->font_info.start_pos_unicode;
 80019a8:	f8b9 208a 	ldrh.w	r2, [r9, #138]	; 0x8a
 80019ac:	eb03 0802 	add.w	r8, r3, r2
    unicode_lookup_table = font; 
 80019b0:	4645      	mov	r5, r8
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	4628      	mov	r0, r5
 80019b6:	f7ff fa23 	bl	8000e00 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80019ba:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80019bc:	4480      	add	r8, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80019be:	4628      	mov	r0, r5
 80019c0:	f7ff fa1e 	bl	8000e00 <u8g2_font_get_word>
    } while( e < encoding );
 80019c4:	4284      	cmp	r4, r0
      unicode_lookup_table+=4;
 80019c6:	f105 0504 	add.w	r5, r5, #4
    } while( e < encoding );
 80019ca:	d8f2      	bhi.n	80019b2 <u8g2_draw_string.isra.0+0x102>
 80019cc:	f8b8 5000 	ldrh.w	r5, [r8]
 80019d0:	ba6d      	rev16	r5, r5
 80019d2:	b2ad      	uxth	r5, r5
      if ( e == 0 )
 80019d4:	2d00      	cmp	r5, #0
 80019d6:	d0b0      	beq.n	800193a <u8g2_draw_string.isra.0+0x8a>
      if ( e == encoding )
 80019d8:	42ac      	cmp	r4, r5
 80019da:	d00a      	beq.n	80019f2 <u8g2_draw_string.isra.0+0x142>
      font += u8x8_pgm_read( font + 2 );
 80019dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80019e0:	4498      	add	r8, r3
 80019e2:	f8b8 5000 	ldrh.w	r5, [r8]
 80019e6:	ba6d      	rev16	r5, r5
 80019e8:	b2ad      	uxth	r5, r5
      if ( e == 0 )
 80019ea:	2d00      	cmp	r5, #0
 80019ec:	d0a5      	beq.n	800193a <u8g2_draw_string.isra.0+0x8a>
      if ( e == encoding )
 80019ee:	42ac      	cmp	r4, r5
 80019f0:	d1f4      	bne.n	80019dc <u8g2_draw_string.isra.0+0x12c>
	return font+3;	/* skip encoding and glyph size */
 80019f2:	f108 0303 	add.w	r3, r8, #3
 80019f6:	e009      	b.n	8001a0c <u8g2_draw_string.isra.0+0x15c>
}
 80019f8:	b009      	add	sp, #36	; 0x24
 80019fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ( encoding >= 'A' )
 80019fe:	2c40      	cmp	r4, #64	; 0x40
 8001a00:	d998      	bls.n	8001934 <u8g2_draw_string.isra.0+0x84>
      font += u8g2->font_info.start_pos_upper_A;
 8001a02:	f8b9 2086 	ldrh.w	r2, [r9, #134]	; 0x86
 8001a06:	4413      	add	r3, r2
 8001a08:	e794      	b.n	8001934 <u8g2_draw_string.isra.0+0x84>
	return font+2;	/* skip encoding and glyph size */
 8001a0a:	3302      	adds	r3, #2
  decode->decode_bit_pos = 0;
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001a12:	f899 2078 	ldrb.w	r2, [r9, #120]	; 0x78
  decode->decode_ptr = glyph_data;
 8001a16:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
  if ( bit_pos_plus_cnt >= 8 )
 8001a1a:	2a07      	cmp	r2, #7
  val = u8x8_pgm_read( f->decode_ptr );  
 8001a1c:	7819      	ldrb	r1, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 8001a1e:	f200 80dc 	bhi.w	8001bda <u8g2_draw_string.isra.0+0x32a>
 8001a22:	4610      	mov	r0, r2
  val &= (1U<<cnt)-1;
 8001a24:	fa0a f202 	lsl.w	r2, sl, r2
 8001a28:	ea21 0102 	bic.w	r1, r1, r2
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001a2c:	b24a      	sxtb	r2, r1
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a2e:	f899 1079 	ldrb.w	r1, [r9, #121]	; 0x79
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001a32:	f889 206a 	strb.w	r2, [r9, #106]	; 0x6a
 8001a36:	9203      	str	r2, [sp, #12]
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001a38:	f889 006c 	strb.w	r0, [r9, #108]	; 0x6c
  bit_pos_plus_cnt += cnt;
 8001a3c:	180a      	adds	r2, r1, r0
  val >>= bit_pos;
 8001a3e:	781d      	ldrb	r5, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8001a40:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001a42:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8001a44:	fa45 f500 	asr.w	r5, r5, r0
  if ( bit_pos_plus_cnt >= 8 )
 8001a48:	f200 80b7 	bhi.w	8001bba <u8g2_draw_string.isra.0+0x30a>
  val >>= bit_pos;
 8001a4c:	b2e8      	uxtb	r0, r5
  val &= (1U<<cnt)-1;
 8001a4e:	fa0a f101 	lsl.w	r1, sl, r1
 8001a52:	ea20 0001 	bic.w	r0, r0, r1
  decode->fg_color = u8g2->draw_color;
 8001a56:	f899 1092 	ldrb.w	r1, [r9, #146]	; 0x92
 8001a5a:	f889 106e 	strb.w	r1, [r9, #110]	; 0x6e
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001a5e:	f899 e07a 	ldrb.w	lr, [r9, #122]	; 0x7a
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001a62:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a66:	fab1 f181 	clz	r1, r1
 8001a6a:	0949      	lsrs	r1, r1, #5
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a6c:	fa4f f880 	sxtb.w	r8, r0
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a70:	f889 106f 	strb.w	r1, [r9, #111]	; 0x6f
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a74:	f889 806b 	strb.w	r8, [r9, #107]	; 0x6b
  bit_pos_plus_cnt += cnt;
 8001a78:	eb0e 0102 	add.w	r1, lr, r2
  val &= (1U<<cnt)-1;
 8001a7c:	9005      	str	r0, [sp, #20]
  bit_pos_plus_cnt += cnt;
 8001a7e:	b2c9      	uxtb	r1, r1
  val >>= bit_pos;
 8001a80:	7818      	ldrb	r0, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 8001a82:	2907      	cmp	r1, #7
  val >>= bit_pos;
 8001a84:	fa40 f002 	asr.w	r0, r0, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001a88:	f200 8088 	bhi.w	8001b9c <u8g2_draw_string.isra.0+0x2ec>
  val >>= bit_pos;
 8001a8c:	b2c2      	uxtb	r2, r0
 8001a8e:	9207      	str	r2, [sp, #28]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001a90:	f899 c07b 	ldrb.w	ip, [r9, #123]	; 0x7b
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001a94:	f889 106c 	strb.w	r1, [r9, #108]	; 0x6c
  bit_pos_plus_cnt += cnt;
 8001a98:	eb0c 0201 	add.w	r2, ip, r1
  val >>= bit_pos;
 8001a9c:	781c      	ldrb	r4, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8001a9e:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001aa0:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8001aa2:	fa44 f401 	asr.w	r4, r4, r1
  if ( bit_pos_plus_cnt >= 8 )
 8001aa6:	d86a      	bhi.n	8001b7e <u8g2_draw_string.isra.0+0x2ce>
  val >>= bit_pos;
 8001aa8:	b2e1      	uxtb	r1, r4
 8001aaa:	9106      	str	r1, [sp, #24]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001aac:	f899 107c 	ldrb.w	r1, [r9, #124]	; 0x7c
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001ab0:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
  bit_pos_plus_cnt += cnt;
 8001ab4:	188c      	adds	r4, r1, r2
  val >>= bit_pos;
 8001ab6:	7818      	ldrb	r0, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8001ab8:	b2e4      	uxtb	r4, r4
  if ( bit_pos_plus_cnt >= 8 )
 8001aba:	2c07      	cmp	r4, #7
  val >>= bit_pos;
 8001abc:	fa40 f002 	asr.w	r0, r0, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001ac0:	d850      	bhi.n	8001b64 <u8g2_draw_string.isra.0+0x2b4>
  val >>= bit_pos;
 8001ac2:	b2c5      	uxtb	r5, r0
  cnt--;
 8001ac4:	1e4a      	subs	r2, r1, #1
  d <<= cnt;
 8001ac6:	b2d2      	uxtb	r2, r2
  val &= (1U<<cnt)-1;
 8001ac8:	fa0a f101 	lsl.w	r1, sl, r1
  d <<= cnt;
 8001acc:	2301      	movs	r3, #1
 8001ace:	fa03 f202 	lsl.w	r2, r3, r2
  val &= (1U<<cnt)-1;
 8001ad2:	ea25 0501 	bic.w	r5, r5, r1
  v -= d;
 8001ad6:	1aad      	subs	r5, r5, r2
 8001ad8:	b26a      	sxtb	r2, r5
 8001ada:	9204      	str	r2, [sp, #16]
  if ( decode->glyph_width > 0 )
 8001adc:	9a03      	ldr	r2, [sp, #12]
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001ade:	f889 406c 	strb.w	r4, [r9, #108]	; 0x6c
  if ( decode->glyph_width > 0 )
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	dd3b      	ble.n	8001b5e <u8g2_draw_string.isra.0+0x2ae>
  cnt--;
 8001ae6:	f10c 32ff 	add.w	r2, ip, #4294967295
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001aea:	9905      	ldr	r1, [sp, #20]
  d <<= cnt;
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	fa03 f202 	lsl.w	r2, r3, r2
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001af2:	1a52      	subs	r2, r2, r1
  val &= (1U<<cnt)-1;
 8001af4:	9906      	ldr	r1, [sp, #24]
 8001af6:	fa0a fc0c 	lsl.w	ip, sl, ip
 8001afa:	ea21 010c 	bic.w	r1, r1, ip
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001afe:	4638      	mov	r0, r7
 8001b00:	1a52      	subs	r2, r2, r1
  cnt--;
 8001b02:	f10e 37ff 	add.w	r7, lr, #4294967295
  val &= (1U<<cnt)-1;
 8001b06:	9907      	ldr	r1, [sp, #28]
  d <<= cnt;
 8001b08:	b2ff      	uxtb	r7, r7
  val &= (1U<<cnt)-1;
 8001b0a:	fa0a fe0e 	lsl.w	lr, sl, lr
 8001b0e:	ea21 0e0e 	bic.w	lr, r1, lr
  d <<= cnt;
 8001b12:	40bb      	lsls	r3, r7
  v -= d;
 8001b14:	ebae 0103 	sub.w	r1, lr, r3
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b18:	b252      	sxtb	r2, r2
  v -= d;
 8001b1a:	b249      	sxtb	r1, r1
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b1c:	f899 3070 	ldrb.w	r3, [r9, #112]	; 0x70
 8001b20:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8001b24:	f7ff f98c 	bl	8000e40 <u8g2_add_vector_x>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b28:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b2c:	f8a9 0064 	strh.w	r0, [r9, #100]	; 0x64
 8001b30:	4607      	mov	r7, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7ff f96c 	bl	8000e10 <u8g2_add_vector_y>
 8001b38:	f8a9 0066 	strh.w	r0, [r9, #102]	; 0x66
      switch(decode->dir)
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	f200 8107 	bhi.w	8001d50 <u8g2_draw_string.isra.0+0x4a0>
 8001b42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001b46:	00d8      	.short	0x00d8
 8001b48:	00c000ce 	.word	0x00c000ce
 8001b4c:	0051      	.short	0x0051
      if ( decode->y >= h )
 8001b4e:	f999 3069 	ldrsb.w	r3, [r9, #105]	; 0x69
 8001b52:	4543      	cmp	r3, r8
 8001b54:	db6b      	blt.n	8001c2e <u8g2_draw_string.isra.0+0x37e>
    u8g2->draw_color = decode->fg_color;
 8001b56:	f899 306e 	ldrb.w	r3, [r9, #110]	; 0x6e
 8001b5a:	f889 3092 	strb.w	r3, [r9, #146]	; 0x92
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001b5e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001b62:	e6ea      	b.n	800193a <u8g2_draw_string.isra.0+0x8a>
    f->decode_ptr++;
 8001b64:	1c5d      	adds	r5, r3, #1
 8001b66:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b6a:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 8001b6c:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4093      	lsls	r3, r2
    bit_pos_plus_cnt -= 8;
 8001b74:	3c08      	subs	r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b76:	4303      	orrs	r3, r0
    bit_pos_plus_cnt -= 8;
 8001b78:	b2e4      	uxtb	r4, r4
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b7a:	b2dd      	uxtb	r5, r3
 8001b7c:	e7a2      	b.n	8001ac4 <u8g2_draw_string.isra.0+0x214>
    f->decode_ptr++;
 8001b7e:	1c58      	adds	r0, r3, #1
 8001b80:	f8c9 0060 	str.w	r0, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b84:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 8001b86:	f1c1 0108 	rsb	r1, r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b8a:	b2c9      	uxtb	r1, r1
 8001b8c:	408b      	lsls	r3, r1
 8001b8e:	4323      	orrs	r3, r4
 8001b90:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001b92:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b94:	9306      	str	r3, [sp, #24]
    bit_pos_plus_cnt -= 8;
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	4603      	mov	r3, r0
 8001b9a:	e787      	b.n	8001aac <u8g2_draw_string.isra.0+0x1fc>
    f->decode_ptr++;
 8001b9c:	1c5c      	adds	r4, r3, #1
 8001b9e:	f8c9 4060 	str.w	r4, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001ba2:	785b      	ldrb	r3, [r3, #1]
    s -= bit_pos;
 8001ba4:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	4303      	orrs	r3, r0
 8001bae:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 8001bb0:	3908      	subs	r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001bb2:	9307      	str	r3, [sp, #28]
    bit_pos_plus_cnt -= 8;
 8001bb4:	b2c9      	uxtb	r1, r1
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	e76a      	b.n	8001a90 <u8g2_draw_string.isra.0+0x1e0>
    f->decode_ptr++;
 8001bba:	1c5c      	adds	r4, r3, #1
    s -= bit_pos;
 8001bbc:	f1c0 0008 	rsb	r0, r0, #8
    f->decode_ptr++;
 8001bc0:	f8c9 4060 	str.w	r4, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001bc4:	fa5f fc80 	uxtb.w	ip, r0
 8001bc8:	7858      	ldrb	r0, [r3, #1]
 8001bca:	fa00 f00c 	lsl.w	r0, r0, ip
    bit_pos_plus_cnt -= 8;
 8001bce:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001bd0:	4328      	orrs	r0, r5
    bit_pos_plus_cnt -= 8;
 8001bd2:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001bd4:	b2c0      	uxtb	r0, r0
    bit_pos_plus_cnt -= 8;
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	e739      	b.n	8001a4e <u8g2_draw_string.isra.0+0x19e>
    f->decode_ptr++;
 8001bda:	3301      	adds	r3, #1
    bit_pos_plus_cnt -= 8;
 8001bdc:	f1a2 0008 	sub.w	r0, r2, #8
    f->decode_ptr++;
 8001be0:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
    bit_pos_plus_cnt -= 8;
 8001be4:	b2c0      	uxtb	r0, r0
 8001be6:	e71d      	b.n	8001a24 <u8g2_draw_string.isra.0+0x174>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001be8:	9b03      	ldr	r3, [sp, #12]
 8001bea:	f1c3 0301 	rsb	r3, r3, #1
 8001bee:	4403      	add	r3, r0
	    y1++;
 8001bf0:	1c42      	adds	r2, r0, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bf2:	b298      	uxth	r0, r3
	    x1 += h;
 8001bf4:	eb07 0308 	add.w	r3, r7, r8
	    y1++;
 8001bf8:	b292      	uxth	r2, r2
	    x1 += h;
 8001bfa:	b29b      	uxth	r3, r3
  if ( v0 < a1 )		// v0 <= a1
 8001bfc:	f8b9 604e 	ldrh.w	r6, [r9, #78]	; 0x4e


/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001c00:	f8b9 104c 	ldrh.w	r1, [r9, #76]	; 0x4c
  if ( v0 < a1 )		// v0 <= a1
 8001c04:	4286      	cmp	r6, r0
 8001c06:	f240 8098 	bls.w	8001d3a <u8g2_draw_string.isra.0+0x48a>
    if ( v1 > a0 )	// v1 >= a0
 8001c0a:	428a      	cmp	r2, r1
 8001c0c:	d801      	bhi.n	8001c12 <u8g2_draw_string.isra.0+0x362>
      if ( v0 > v1 )	// v0 > v1
 8001c0e:	4290      	cmp	r0, r2
 8001c10:	d9a5      	bls.n	8001b5e <u8g2_draw_string.isra.0+0x2ae>
  if ( v0 < a1 )		// v0 <= a1
 8001c12:	f8b9 204a 	ldrh.w	r2, [r9, #74]	; 0x4a
 8001c16:	f8b9 1048 	ldrh.w	r1, [r9, #72]	; 0x48
 8001c1a:	42ba      	cmp	r2, r7
 8001c1c:	f240 8091 	bls.w	8001d42 <u8g2_draw_string.isra.0+0x492>
    if ( v1 > a0 )	// v1 >= a0
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d801      	bhi.n	8001c28 <u8g2_draw_string.isra.0+0x378>
      if ( v0 > v1 )	// v0 > v1
 8001c24:	429f      	cmp	r7, r3
 8001c26:	d99a      	bls.n	8001b5e <u8g2_draw_string.isra.0+0x2ae>
    decode->x = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c2e:	f899 2076 	ldrb.w	r2, [r9, #118]	; 0x76
  val = u8x8_pgm_read( f->decode_ptr );  
 8001c32:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
  bit_pos_plus_cnt += cnt;
 8001c36:	18a3      	adds	r3, r4, r2
  val >>= bit_pos;
 8001c38:	7808      	ldrb	r0, [r1, #0]
  bit_pos_plus_cnt += cnt;
 8001c3a:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001c3c:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 8001c3e:	fa40 f004 	asr.w	r0, r0, r4
  if ( bit_pos_plus_cnt >= 8 )
 8001c42:	d86c      	bhi.n	8001d1e <u8g2_draw_string.isra.0+0x46e>
  val >>= bit_pos;
 8001c44:	b2c6      	uxtb	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001c46:	f899 0077 	ldrb.w	r0, [r9, #119]	; 0x77
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001c4a:	f889 306c 	strb.w	r3, [r9, #108]	; 0x6c
  val &= (1U<<cnt)-1;
 8001c4e:	fa0a f202 	lsl.w	r2, sl, r2
 8001c52:	ea26 0602 	bic.w	r6, r6, r2
  bit_pos_plus_cnt += cnt;
 8001c56:	18c2      	adds	r2, r0, r3
  val >>= bit_pos;
 8001c58:	780c      	ldrb	r4, [r1, #0]
  bit_pos_plus_cnt += cnt;
 8001c5a:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001c5c:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8001c5e:	fa44 f403 	asr.w	r4, r4, r3
  if ( bit_pos_plus_cnt >= 8 )
 8001c62:	d84f      	bhi.n	8001d04 <u8g2_draw_string.isra.0+0x454>
  val >>= bit_pos;
 8001c64:	b2e5      	uxtb	r5, r4
  val &= (1U<<cnt)-1;
 8001c66:	fa0a f000 	lsl.w	r0, sl, r0
 8001c6a:	ea25 0500 	bic.w	r5, r5, r0
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001c6e:	f889 206c 	strb.w	r2, [r9, #108]	; 0x6c
 8001c72:	e005      	b.n	8001c80 <u8g2_draw_string.isra.0+0x3d0>
  val >>= bit_pos;
 8001c74:	b2ca      	uxtb	r2, r1
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c76:	07d3      	lsls	r3, r2, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001c78:	f889 406c 	strb.w	r4, [r9, #108]	; 0x6c
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c7c:	f57f af67 	bpl.w	8001b4e <u8g2_draw_string.isra.0+0x29e>
	u8g2_font_decode_len(u8g2, a, 0);
 8001c80:	4631      	mov	r1, r6
 8001c82:	4648      	mov	r0, r9
 8001c84:	2200      	movs	r2, #0
 8001c86:	f7ff f9f3 	bl	8001070 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4648      	mov	r0, r9
 8001c90:	f7ff f9ee 	bl	8001070 <u8g2_font_decode_len>
  uint8_t bit_pos = f->decode_bit_pos;
 8001c94:	f899 306c 	ldrb.w	r3, [r9, #108]	; 0x6c
  val = u8x8_pgm_read( f->decode_ptr );  
 8001c98:	f8d9 7060 	ldr.w	r7, [r9, #96]	; 0x60
  bit_pos_plus_cnt += cnt;
 8001c9c:	1c5c      	adds	r4, r3, #1
  val >>= bit_pos;
 8001c9e:	7839      	ldrb	r1, [r7, #0]
  bit_pos_plus_cnt += cnt;
 8001ca0:	b2e4      	uxtb	r4, r4
    s -= bit_pos;
 8001ca2:	f1c3 0208 	rsb	r2, r3, #8
  if ( bit_pos_plus_cnt >= 8 )
 8001ca6:	2c07      	cmp	r4, #7
    f->decode_ptr++;
 8001ca8:	f107 0c01 	add.w	ip, r7, #1
  val >>= bit_pos;
 8001cac:	fa41 f103 	asr.w	r1, r1, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001cb0:	b2d0      	uxtb	r0, r2
  if ( bit_pos_plus_cnt >= 8 )
 8001cb2:	d9df      	bls.n	8001c74 <u8g2_draw_string.isra.0+0x3c4>
    f->decode_ptr++;
 8001cb4:	f8c9 c060 	str.w	ip, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001cb8:	787a      	ldrb	r2, [r7, #1]
 8001cba:	4082      	lsls	r2, r0
    bit_pos_plus_cnt -= 8;
 8001cbc:	3b07      	subs	r3, #7
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8001cc2:	b2dc      	uxtb	r4, r3
 8001cc4:	e7d7      	b.n	8001c76 <u8g2_draw_string.isra.0+0x3c6>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cc6:	9b03      	ldr	r3, [sp, #12]
 8001cc8:	f1c3 0201 	rsb	r2, r3, #1
 8001ccc:	443a      	add	r2, r7
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cce:	f1c8 0101 	rsb	r1, r8, #1
	    x1++;
 8001cd2:	1c7b      	adds	r3, r7, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cd4:	4401      	add	r1, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cd6:	b297      	uxth	r7, r2
	    y1++;
 8001cd8:	1c42      	adds	r2, r0, #1
	    x1++;
 8001cda:	b29b      	uxth	r3, r3
	    y1++;
 8001cdc:	b292      	uxth	r2, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cde:	b288      	uxth	r0, r1
	    break;	  
 8001ce0:	e78c      	b.n	8001bfc <u8g2_draw_string.isra.0+0x34c>
	    y1 += decode->glyph_width;
 8001ce2:	9a03      	ldr	r2, [sp, #12]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ce4:	f1c8 0101 	rsb	r1, r8, #1
	    x1++;
 8001ce8:	1c7b      	adds	r3, r7, #1
	    y1 += decode->glyph_width;
 8001cea:	4402      	add	r2, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cec:	4439      	add	r1, r7
	    y1 += decode->glyph_width;
 8001cee:	b292      	uxth	r2, r2
	    x1++;
 8001cf0:	b29b      	uxth	r3, r3
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001cf2:	b28f      	uxth	r7, r1
	    break;
 8001cf4:	e782      	b.n	8001bfc <u8g2_draw_string.isra.0+0x34c>
	    x1 += decode->glyph_width;
 8001cf6:	9b03      	ldr	r3, [sp, #12]
	    y1 += h;
 8001cf8:	eb00 0208 	add.w	r2, r0, r8
	    x1 += decode->glyph_width;
 8001cfc:	443b      	add	r3, r7
 8001cfe:	b29b      	uxth	r3, r3
	    y1 += h;
 8001d00:	b292      	uxth	r2, r2
	    break;
 8001d02:	e77b      	b.n	8001bfc <u8g2_draw_string.isra.0+0x34c>
    f->decode_ptr++;
 8001d04:	1c4d      	adds	r5, r1, #1
 8001d06:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d0a:	784d      	ldrb	r5, [r1, #1]
    s -= bit_pos;
 8001d0c:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	409d      	lsls	r5, r3
    bit_pos_plus_cnt -= 8;
 8001d14:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d16:	4325      	orrs	r5, r4
    bit_pos_plus_cnt -= 8;
 8001d18:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d1a:	b2ed      	uxtb	r5, r5
 8001d1c:	e7a3      	b.n	8001c66 <u8g2_draw_string.isra.0+0x3b6>
    f->decode_ptr++;
 8001d1e:	1c4d      	adds	r5, r1, #1
 8001d20:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d24:	784e      	ldrb	r6, [r1, #1]
    s -= bit_pos;
 8001d26:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d2a:	b2e4      	uxtb	r4, r4
 8001d2c:	40a6      	lsls	r6, r4
    bit_pos_plus_cnt -= 8;
 8001d2e:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d30:	4306      	orrs	r6, r0
    bit_pos_plus_cnt -= 8;
 8001d32:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001d34:	b2f6      	uxtb	r6, r6
    bit_pos_plus_cnt -= 8;
 8001d36:	4629      	mov	r1, r5
 8001d38:	e785      	b.n	8001c46 <u8g2_draw_string.isra.0+0x396>
    if ( v1 > a0 )	// v1 >= a0
 8001d3a:	428a      	cmp	r2, r1
 8001d3c:	f63f af67 	bhi.w	8001c0e <u8g2_draw_string.isra.0+0x35e>
 8001d40:	e70d      	b.n	8001b5e <u8g2_draw_string.isra.0+0x2ae>
 8001d42:	428b      	cmp	r3, r1
 8001d44:	f63f af6e 	bhi.w	8001c24 <u8g2_draw_string.isra.0+0x374>
 8001d48:	e709      	b.n	8001b5e <u8g2_draw_string.isra.0+0x2ae>
  switch(u8g2->font_decode.dir)
 8001d4a:	e9dd 7601 	ldrd	r7, r6, [sp, #4]
 8001d4e:	e5dd      	b.n	800190c <u8g2_draw_string.isra.0+0x5c>
      switch(decode->dir)
 8001d50:	4602      	mov	r2, r0
 8001d52:	463b      	mov	r3, r7
 8001d54:	e752      	b.n	8001bfc <u8g2_draw_string.isra.0+0x34c>
 8001d56:	bf00      	nop
	...

08001d60 <_ctl>:
  osalDbgCheck(sdp != NULL);
 8001d60:	b120      	cbz	r0, 8001d6c <_ctl+0xc>
  switch (operation) {
 8001d62:	2901      	cmp	r1, #1
 8001d64:	d106      	bne.n	8001d74 <_ctl+0x14>
    osalDbgCheck(arg == NULL);
 8001d66:	b90a      	cbnz	r2, 8001d6c <_ctl+0xc>
  return HAL_RET_SUCCESS;
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4770      	bx	lr
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001d6c:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <_ctl+0x1c>)
 8001d70:	f7fe ff9e 	bl	8000cb0 <chSysHalt>
    return HAL_RET_UNKNOWN_CTL;
 8001d74:	f06f 0013 	mvn.w	r0, #19
}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	080066d0 	.word	0x080066d0

08001d80 <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001d80:	f011 0f0c 	tst.w	r1, #12
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001d84:	b510      	push	{r4, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001d86:	d141      	bne.n	8001e0c <i2c_lld_serve_rx_end_irq+0x8c>
  dmaStreamDisable(i2cp->dmarx);
 8001d88:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 8001d8a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 8001d8c:	6822      	ldr	r2, [r4, #0]
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f023 031f 	bic.w	r3, r3, #31
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	07db      	lsls	r3, r3, #31
 8001d9a:	d4fc      	bmi.n	8001d96 <i2c_lld_serve_rx_end_irq+0x16>
 8001d9c:	f894 c009 	ldrb.w	ip, [r4, #9]
 8001da0:	6862      	ldr	r2, [r4, #4]
 8001da2:	233d      	movs	r3, #61	; 0x3d
 8001da4:	fa03 f30c 	lsl.w	r3, r3, ip
 8001da8:	6013      	str	r3, [r2, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 8001daa:	684b      	ldr	r3, [r1, #4]
 8001dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001db0:	604b      	str	r3, [r1, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8001db2:	680b      	ldr	r3, [r1, #0]
 8001db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001db8:	600b      	str	r3, [r1, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8001dba:	680b      	ldr	r3, [r1, #0]
 8001dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001dc0:	2230      	movs	r2, #48	; 0x30
 8001dc2:	600b      	str	r3, [r1, #0]
 8001dc4:	f382 8811 	msr	BASEPRI, r2
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <i2c_lld_serve_rx_end_irq+0x98>)
 8001dca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	dd1f      	ble.n	8001e12 <i2c_lld_serve_rx_end_irq+0x92>
 8001dd2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001dd6:	b9e1      	cbnz	r1, 8001e12 <i2c_lld_serve_rx_end_irq+0x92>
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001dd8:	69c3      	ldr	r3, [r0, #28]
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8001dda:	2401      	movs	r4, #1
 8001ddc:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
 8001de0:	b173      	cbz	r3, 8001e00 <i2c_lld_serve_rx_end_irq+0x80>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001de2:	699c      	ldr	r4, [r3, #24]
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8001de4:	61c1      	str	r1, [r0, #28]
    tp->u.rdymsg = msg;
 8001de6:	6299      	str	r1, [r3, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8001de8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8001dec:	6899      	ldr	r1, [r3, #8]
    pqp = pqp->next;
 8001dee:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001df0:	68a0      	ldr	r0, [r4, #8]
 8001df2:	4288      	cmp	r0, r1
 8001df4:	d2fb      	bcs.n	8001dee <i2c_lld_serve_rx_end_irq+0x6e>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8001df6:	6861      	ldr	r1, [r4, #4]
 8001df8:	e9c3 4100 	strd	r4, r1, [r3]
  p->prev->next = p;
 8001dfc:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8001dfe:	6063      	str	r3, [r4, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e06:	f383 8811 	msr	BASEPRI, r3
}
 8001e0a:	bd10      	pop	{r4, pc}
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <i2c_lld_serve_rx_end_irq+0x9c>)
 8001e0e:	f7fe ff4f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#6");
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <i2c_lld_serve_rx_end_irq+0xa0>)
 8001e14:	f7fe ff4c 	bl	8000cb0 <chSysHalt>
 8001e18:	20000e10 	.word	0x20000e10
 8001e1c:	0800642c 	.word	0x0800642c
 8001e20:	08006438 	.word	0x08006438
	...

08001e30 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8001e30:	b510      	push	{r4, lr}
 8001e32:	2330      	movs	r3, #48	; 0x30
 8001e34:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001e38:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <__sch_wakeup+0x94>)
 8001e3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dd3c      	ble.n	8001ebc <__sch_wakeup+0x8c>
 8001e42:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d138      	bne.n	8001ebc <__sch_wakeup+0x8c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8001e50:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d810      	bhi.n	8001e7a <__sch_wakeup+0x4a>
 8001e58:	e8df f003 	tbb	[pc, r3]
 8001e5c:	260f0f2a 	.word	0x260f0f2a
 8001e60:	0b0f070b 	.word	0x0b0f070b
 8001e64:	0f0f0f0f 	.word	0x0f0f0f0f
 8001e68:	0b          	.byte	0x0b
 8001e69:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8001e6a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001e6c:	6883      	ldr	r3, [r0, #8]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	6083      	str	r3, [r0, #8]
  p->prev->next = p->next;
 8001e72:	e9d1 3000 	ldrd	r3, r0, [r1]
 8001e76:	6003      	str	r3, [r0, #0]
  p->next->prev = p->prev;
 8001e78:	6058      	str	r0, [r3, #4]
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8001e7a:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 8001e7e:	2000      	movs	r0, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8001e80:	628c      	str	r4, [r1, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001e82:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001e84:	688c      	ldr	r4, [r1, #8]
  tp->state = CH_STATE_READY;
 8001e86:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    pqp = pqp->next;
 8001e8a:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001e8c:	6898      	ldr	r0, [r3, #8]
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	d2fb      	bcs.n	8001e8a <__sch_wakeup+0x5a>
  p->prev       = pqp->prev;
 8001e92:	685c      	ldr	r4, [r3, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 8001e94:	2000      	movs	r0, #0
 8001e96:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 8001e9a:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8001e9c:	6059      	str	r1, [r3, #4]
 8001e9e:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8001ea2:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 8001ea6:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8001ea8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001eaa:	2000      	movs	r0, #0
 8001eac:	6018      	str	r0, [r3, #0]
    break;
 8001eae:	e7e4      	b.n	8001e7a <__sch_wakeup+0x4a>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eb6:	f383 8811 	msr	BASEPRI, r3
}
 8001eba:	bd10      	pop	{r4, pc}
    chSysHalt("SV#6");
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <__sch_wakeup+0x98>)
 8001ebe:	f7fe fef7 	bl	8000cb0 <chSysHalt>
 8001ec2:	bf00      	nop
 8001ec4:	20000e10 	.word	0x20000e10
 8001ec8:	08006438 	.word	0x08006438
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8001ed0:	2300      	movs	r3, #0
  qp->prev = qp;
 8001ed2:	e9c0 0000 	strd	r0, r0, [r0]
 8001ed6:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	0000      	movs	r0, r0
	...

08001ee0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @api
 */
void chDbgCheckClassI(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <chEvtBroadcastFlagsI+0x98>)
 8001ee4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	db3e      	blt.n	8001f6a <chEvtBroadcastFlagsI+0x8a>
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dd3a      	ble.n	8001f6a <chEvtBroadcastFlagsI+0x8a>
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001ef4:	6803      	ldr	r3, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001ef6:	4298      	cmp	r0, r3
 8001ef8:	d019      	beq.n	8001f2e <chEvtBroadcastFlagsI+0x4e>
    tp->u.rdymsg = MSG_OK;
 8001efa:	2500      	movs	r5, #0
  /*lint -restore*/
    elp->flags |= flags;
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001f02:	b111      	cbz	r1, 8001f0a <chEvtBroadcastFlagsI+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8001f04:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8001f06:	4211      	tst	r1, r2
 8001f08:	d00e      	beq.n	8001f28 <chEvtBroadcastFlagsI+0x48>
      chEvtSignalI(elp->listener, elp->events);
 8001f0a:	685a      	ldr	r2, [r3, #4]
  chDbgCheck(tp != NULL);
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	d02f      	beq.n	8001f70 <chEvtBroadcastFlagsI+0x90>
  tp->epending |= events;
 8001f10:	689c      	ldr	r4, [r3, #8]
 8001f12:	6b96      	ldr	r6, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001f14:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 8001f18:	4334      	orrs	r4, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001f1a:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8001f1e:	6394      	str	r4, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001f20:	d01c      	beq.n	8001f5c <chEvtBroadcastFlagsI+0x7c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001f22:	f1bc 0f0b 	cmp.w	ip, #11
 8001f26:	d003      	beq.n	8001f30 <chEvtBroadcastFlagsI+0x50>
    }
    elp = elp->next;
 8001f28:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8001f2a:	4298      	cmp	r0, r3
 8001f2c:	d1e6      	bne.n	8001efc <chEvtBroadcastFlagsI+0x1c>
  }
}
 8001f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001f30:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8001f32:	ea36 0404 	bics.w	r4, r6, r4
 8001f36:	d1f7      	bne.n	8001f28 <chEvtBroadcastFlagsI+0x48>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8001f38:	6994      	ldr	r4, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8001f3a:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8001f3c:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8001f3e:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 8001f42:	6824      	ldr	r4, [r4, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001f44:	68a6      	ldr	r6, [r4, #8]
 8001f46:	42be      	cmp	r6, r7
 8001f48:	d2fb      	bcs.n	8001f42 <chEvtBroadcastFlagsI+0x62>
    elp = elp->next;
 8001f4a:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8001f4c:	6866      	ldr	r6, [r4, #4]
  p->next       = pqp;
 8001f4e:	6014      	str	r4, [r2, #0]
  while (elp != (event_listener_t *)esp) {
 8001f50:	4298      	cmp	r0, r3
  p->prev       = pqp->prev;
 8001f52:	6056      	str	r6, [r2, #4]
  p->prev->next = p;
 8001f54:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 8001f56:	6062      	str	r2, [r4, #4]
 8001f58:	d1d0      	bne.n	8001efc <chEvtBroadcastFlagsI+0x1c>
 8001f5a:	e7e8      	b.n	8001f2e <chEvtBroadcastFlagsI+0x4e>
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001f5c:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8001f5e:	4234      	tst	r4, r6
 8001f60:	d1ea      	bne.n	8001f38 <chEvtBroadcastFlagsI+0x58>
    elp = elp->next;
 8001f62:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8001f64:	4298      	cmp	r0, r3
 8001f66:	d1c9      	bne.n	8001efc <chEvtBroadcastFlagsI+0x1c>
 8001f68:	e7e1      	b.n	8001f2e <chEvtBroadcastFlagsI+0x4e>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 8001f6a:	4804      	ldr	r0, [pc, #16]	; (8001f7c <chEvtBroadcastFlagsI+0x9c>)
 8001f6c:	f7fe fea0 	bl	8000cb0 <chSysHalt>
  chDbgCheck(tp != NULL);
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <chEvtBroadcastFlagsI+0xa0>)
 8001f72:	f7fe fe9d 	bl	8000cb0 <chSysHalt>
 8001f76:	bf00      	nop
 8001f78:	20000e10 	.word	0x20000e10
 8001f7c:	08006440 	.word	0x08006440
 8001f80:	080066c0 	.word	0x080066c0
	...

08001f90 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8001f90:	b538      	push	{r3, r4, r5, lr}
 8001f92:	2330      	movs	r3, #48	; 0x30
 8001f94:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <chCoreAllocFromTop+0x64>)
 8001f9a:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8001f9e:	ea54 0c05 	orrs.w	ip, r4, r5
 8001fa2:	d121      	bne.n	8001fe8 <chCoreAllocFromTop+0x58>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001fa4:	2401      	movs	r4, #1
 8001fa6:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001faa:	b301      	cbz	r1, 8001fee <chCoreAllocFromTop+0x5e>
 8001fac:	f101 3cff 	add.w	ip, r1, #4294967295
 8001fb0:	ea1c 0c01 	ands.w	ip, ip, r1
 8001fb4:	d11b      	bne.n	8001fee <chCoreAllocFromTop+0x5e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001fb6:	4c10      	ldr	r4, [pc, #64]	; (8001ff8 <chCoreAllocFromTop+0x68>)
 8001fb8:	6865      	ldr	r5, [r4, #4]
 8001fba:	4249      	negs	r1, r1
 8001fbc:	1a28      	subs	r0, r5, r0
 8001fbe:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001fc0:	6821      	ldr	r1, [r4, #0]
  prev = p - offset;
 8001fc2:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001fc4:	428a      	cmp	r2, r1
 8001fc6:	d308      	bcc.n	8001fda <chCoreAllocFromTop+0x4a>
 8001fc8:	4295      	cmp	r5, r2
 8001fca:	d306      	bcc.n	8001fda <chCoreAllocFromTop+0x4a>
  ch_memcore.topmem = prev;
 8001fcc:	6062      	str	r2, [r4, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001fd4:	f382 8811 	msr	BASEPRI, r2
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}
 8001fda:	2200      	movs	r2, #0
    return NULL;
 8001fdc:	4660      	mov	r0, ip
 8001fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001fe2:	f382 8811 	msr	BASEPRI, r2
}
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <chCoreAllocFromTop+0x6c>)
 8001fea:	f7fe fe61 	bl	8000cb0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001fee:	4804      	ldr	r0, [pc, #16]	; (8002000 <chCoreAllocFromTop+0x70>)
 8001ff0:	f7fe fe5e 	bl	8000cb0 <chSysHalt>
 8001ff4:	20000e10 	.word	0x20000e10
 8001ff8:	200010e8 	.word	0x200010e8
 8001ffc:	08006448 	.word	0x08006448
 8002000:	08006674 	.word	0x08006674
	...

08002010 <chCoreAllocAlignedI>:
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <chCoreAllocAlignedI+0x44>)
 8002012:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002016:	2a00      	cmp	r2, #0
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8002018:	b510      	push	{r4, lr}
 800201a:	db15      	blt.n	8002048 <chCoreAllocAlignedI+0x38>
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002020:	2b00      	cmp	r3, #0
 8002022:	dd11      	ble.n	8002048 <chCoreAllocAlignedI+0x38>
 8002024:	b199      	cbz	r1, 800204e <chCoreAllocAlignedI+0x3e>
 8002026:	1e4b      	subs	r3, r1, #1
 8002028:	400b      	ands	r3, r1
 800202a:	d110      	bne.n	800204e <chCoreAllocAlignedI+0x3e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <chCoreAllocAlignedI+0x48>)
 800202e:	6854      	ldr	r4, [r2, #4]
 8002030:	4249      	negs	r1, r1
 8002032:	1a20      	subs	r0, r4, r0
 8002034:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8002036:	6811      	ldr	r1, [r2, #0]
 8002038:	4288      	cmp	r0, r1
 800203a:	d303      	bcc.n	8002044 <chCoreAllocAlignedI+0x34>
 800203c:	4284      	cmp	r4, r0
 800203e:	d301      	bcc.n	8002044 <chCoreAllocAlignedI+0x34>
  ch_memcore.topmem = prev;
 8002040:	6050      	str	r0, [r2, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8002042:	bd10      	pop	{r4, pc}
    return NULL;
 8002044:	4618      	mov	r0, r3
 8002046:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <chCoreAllocAlignedI+0x4c>)
 800204a:	f7fe fe31 	bl	8000cb0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800204e:	4804      	ldr	r0, [pc, #16]	; (8002060 <chCoreAllocAlignedI+0x50>)
 8002050:	f7fe fe2e 	bl	8000cb0 <chSysHalt>
 8002054:	20000e10 	.word	0x20000e10
 8002058:	200010e8 	.word	0x200010e8
 800205c:	08006440 	.word	0x08006440
 8002060:	08006674 	.word	0x08006674
	...

08002070 <vt_insert_first.constprop.0>:
                            sysinterval_t delay) {
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <vt_insert_first.constprop.0+0x5c>)
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8002072:	b430      	push	{r4, r5}
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {

  dlp->delta      = delta;
  dlp->prev       = dlhp;
 8002074:	f103 0410 	add.w	r4, r3, #16
  vtlp->lasttime = now;
 8002078:	61d9      	str	r1, [r3, #28]
 800207a:	6044      	str	r4, [r0, #4]
  dlp->next       = dlp->prev->next;
 800207c:	691c      	ldr	r4, [r3, #16]
  dlp->delta      = delta;
 800207e:	6082      	str	r2, [r0, #8]
 8002080:	2a02      	cmp	r2, #2
  dlp->next       = dlp->prev->next;
 8002082:	6004      	str	r4, [r0, #0]
 8002084:	bf38      	it	cc
 8002086:	2202      	movcc	r2, #2
  dlp->next->prev = dlp;
 8002088:	6060      	str	r0, [r4, #4]
  dlhp->next      = dlp;
 800208a:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800208c:	4810      	ldr	r0, [pc, #64]	; (80020d0 <vt_insert_first.constprop.0+0x60>)

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 800208e:	188c      	adds	r4, r1, r2
 8002090:	6344      	str	r4, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8002092:	2400      	movs	r4, #0
 8002094:	6104      	str	r4, [r0, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002096:	2402      	movs	r4, #2
 8002098:	60c4      	str	r4, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 800209a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800209c:	eba5 0c01 	sub.w	ip, r5, r1
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 80020a0:	4562      	cmp	r2, ip
 80020a2:	d903      	bls.n	80020ac <vt_insert_first.constprop.0+0x3c>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80020a4:	bc30      	pop	{r4, r5}
 80020a6:	4770      	bx	lr
 80020a8:	4629      	mov	r1, r5
 80020aa:	4615      	mov	r5, r2
    currdelta += (sysinterval_t)1;
 80020ac:	3401      	adds	r4, #1
  return systime + (systime_t)interval;
 80020ae:	4421      	add	r1, r4
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80020b0:	6341      	str	r1, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80020b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80020b4:	1b51      	subs	r1, r2, r5
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 80020b6:	42a1      	cmp	r1, r4
 80020b8:	d2f6      	bcs.n	80020a8 <vt_insert_first.constprop.0+0x38>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80020ba:	2c02      	cmp	r4, #2
 80020bc:	d9f2      	bls.n	80020a4 <vt_insert_first.constprop.0+0x34>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 80020be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c0:	f042 0201 	orr.w	r2, r2, #1
}
 80020c4:	bc30      	pop	{r4, r5}
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000e10 	.word	0x20000e10
 80020d0:	40000c00 	.word	0x40000c00
	...

080020e0 <chSchReadyI.isra.0>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80020e0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <chSchReadyI.isra.0+0x40>)
 80020e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	db13      	blt.n	8002114 <chSchReadyI.isra.0+0x34>
 80020ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	dd0f      	ble.n	8002114 <chSchReadyI.isra.0+0x34>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 80020f4:	b188      	cbz	r0, 800211a <chSchReadyI.isra.0+0x3a>
  tp->state = CH_STATE_READY;
 80020f6:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80020f8:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 80020fa:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 80020fc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    pqp = pqp->next;
 8002100:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	428a      	cmp	r2, r1
 8002106:	d2fb      	bcs.n	8002100 <chSchReadyI.isra.0+0x20>
  p->prev       = pqp->prev;
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800210e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8002110:	6058      	str	r0, [r3, #4]
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
}
 8002112:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <chSchReadyI.isra.0+0x44>)
 8002116:	f7fe fdcb 	bl	8000cb0 <chSysHalt>
  chDbgCheck(tp != NULL);
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <chSchReadyI.isra.0+0x48>)
 800211c:	f7fe fdc8 	bl	8000cb0 <chSysHalt>
 8002120:	20000e10 	.word	0x20000e10
 8002124:	08006440 	.word	0x08006440
 8002128:	0800665c 	.word	0x0800665c
 800212c:	00000000 	.word	0x00000000

08002130 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USART_TypeDef *u = sdp->usart;
 8002134:	6f47      	ldr	r7, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8002136:	f8d7 900c 	ldr.w	r9, [r7, #12]
  uint16_t sr = u->SR;
 800213a:	f8d7 a000 	ldr.w	sl, [r7]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800213e:	f41a 7f80 	tst.w	sl, #256	; 0x100
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002142:	b083      	sub	sp, #12
 8002144:	4604      	mov	r4, r0
  if (sr & USART_SR_LBD) {
 8002146:	f040 8097 	bne.w	8002278 <sd_lld_serve_interrupt+0x148>
 800214a:	4ea9      	ldr	r6, [pc, #676]	; (80023f0 <sd_lld_serve_interrupt+0x2c0>)
 800214c:	2330      	movs	r3, #48	; 0x30
 800214e:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002152:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8002156:	2b00      	cmp	r3, #0
 8002158:	f340 80c4 	ble.w	80022e4 <sd_lld_serve_interrupt+0x1b4>
 800215c:	f8d6 808c 	ldr.w	r8, [r6, #140]	; 0x8c
 8002160:	f1b8 0f00 	cmp.w	r8, #0
 8002164:	f040 80be 	bne.w	80022e4 <sd_lld_serve_interrupt+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002168:	2301      	movs	r3, #1
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800216a:	f01a 0f2f 	tst.w	sl, #47	; 0x2f
 800216e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  uint16_t sr = u->SR;
 8002172:	fa1f f58a 	uxth.w	r5, sl
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002176:	d019      	beq.n	80021ac <sd_lld_serve_interrupt+0x7c>
  chnAddFlagsI(sdp, sts);
 8002178:	f104 0b04 	add.w	fp, r4, #4
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 800217c:	f104 0a0c 	add.w	sl, r4, #12
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002180:	0729      	lsls	r1, r5, #28
 8002182:	d127      	bne.n	80021d4 <sd_lld_serve_interrupt+0xa4>
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8002184:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 800218c:	d439      	bmi.n	8002202 <sd_lld_serve_interrupt+0xd2>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800218e:	683b      	ldr	r3, [r7, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002190:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8002194:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002196:	d1f3      	bne.n	8002180 <sd_lld_serve_interrupt+0x50>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002198:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 800219c:	2b00      	cmp	r3, #0
 800219e:	f340 80b8 	ble.w	8002312 <sd_lld_serve_interrupt+0x1e2>
 80021a2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f340 80b3 	ble.w	8002312 <sd_lld_serve_interrupt+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80021b2:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80021b6:	f019 0f80 	tst.w	r9, #128	; 0x80
 80021ba:	d002      	beq.n	80021c2 <sd_lld_serve_interrupt+0x92>
 80021bc:	062a      	lsls	r2, r5, #24
 80021be:	f100 80b4 	bmi.w	800232a <sd_lld_serve_interrupt+0x1fa>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80021c2:	f019 0f40 	tst.w	r9, #64	; 0x40
 80021c6:	d002      	beq.n	80021ce <sd_lld_serve_interrupt+0x9e>
 80021c8:	066b      	lsls	r3, r5, #25
 80021ca:	f100 80e9 	bmi.w	80023a0 <sd_lld_serve_interrupt+0x270>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
    }
    osalSysUnlockFromISR();
  }
}
 80021ce:	b003      	add	sp, #12
 80021d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sr & USART_SR_ORE)
 80021d4:	f3c5 01c0 	ubfx	r1, r5, #3, #1
 80021d8:	0209      	lsls	r1, r1, #8
  if (sr & USART_SR_PE)
 80021da:	07ea      	lsls	r2, r5, #31
    sts |= SD_PARITY_ERROR;
 80021dc:	bf48      	it	mi
 80021de:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 80021e2:	07ab      	lsls	r3, r5, #30
    sts |= SD_FRAMING_ERROR;
 80021e4:	bf48      	it	mi
 80021e6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 80021ea:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
 80021ec:	bf48      	it	mi
 80021ee:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80021f2:	4658      	mov	r0, fp
 80021f4:	f7ff fe74 	bl	8001ee0 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 80021f8:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 8002200:	d5c5      	bpl.n	800218e <sd_lld_serve_interrupt+0x5e>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002202:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8002206:	2900      	cmp	r1, #0
 8002208:	db69      	blt.n	80022de <sd_lld_serve_interrupt+0x1ae>
 800220a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800220e:	2900      	cmp	r1, #0
 8002210:	dd65      	ble.n	80022de <sd_lld_serve_interrupt+0x1ae>
  if (iqIsEmptyI(&sdp->iqueue))
 8002212:	6961      	ldr	r1, [r4, #20]
 8002214:	2900      	cmp	r1, #0
 8002216:	d052      	beq.n	80022be <sd_lld_serve_interrupt+0x18e>
  if (!iqIsFullI(iqp)) {
 8002218:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 800221c:	4288      	cmp	r0, r1
 800221e:	d07b      	beq.n	8002318 <sd_lld_serve_interrupt+0x1e8>
    b = (uint8_t)u->DR & sdp->rxmask;
 8002220:	4013      	ands	r3, r2
    iqp->q_counter++;
 8002222:	6962      	ldr	r2, [r4, #20]
 8002224:	3201      	adds	r2, #1
 8002226:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8002228:	1c42      	adds	r2, r0, #1
 800222a:	6222      	str	r2, [r4, #32]
 800222c:	7003      	strb	r3, [r0, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800222e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002232:	429a      	cmp	r2, r3
 8002234:	d301      	bcc.n	800223a <sd_lld_serve_interrupt+0x10a>
      iqp->q_wrptr = iqp->q_buffer;
 8002236:	69a3      	ldr	r3, [r4, #24]
 8002238:	6223      	str	r3, [r4, #32]
  return (bool)(qp->next != qp);
 800223a:	68e2      	ldr	r2, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 800223c:	4592      	cmp	sl, r2
 800223e:	d0a6      	beq.n	800218e <sd_lld_serve_interrupt+0x5e>
  qp->next       = p->next;
 8002240:	6813      	ldr	r3, [r2, #0]
 8002242:	60e3      	str	r3, [r4, #12]
  qp->next->prev = qp;
 8002244:	f8c3 a004 	str.w	sl, [r3, #4]
 8002248:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800224c:	f8c2 8028 	str.w	r8, [r2, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	db44      	blt.n	80022de <sd_lld_serve_interrupt+0x1ae>
 8002254:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002258:	2b00      	cmp	r3, #0
 800225a:	dd40      	ble.n	80022de <sd_lld_serve_interrupt+0x1ae>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 800225c:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 800225e:	6890      	ldr	r0, [r2, #8]
  tp->state = CH_STATE_READY;
 8002260:	f882 8024 	strb.w	r8, [r2, #36]	; 0x24
    pqp = pqp->next;
 8002264:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8002266:	688b      	ldr	r3, [r1, #8]
 8002268:	4283      	cmp	r3, r0
 800226a:	d2fb      	bcs.n	8002264 <sd_lld_serve_interrupt+0x134>
  p->prev       = pqp->prev;
 800226c:	684b      	ldr	r3, [r1, #4]
  p->next       = pqp;
 800226e:	6011      	str	r1, [r2, #0]
  p->prev       = pqp->prev;
 8002270:	6053      	str	r3, [r2, #4]
  p->prev->next = p;
 8002272:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8002274:	604a      	str	r2, [r1, #4]
 8002276:	e78a      	b.n	800218e <sd_lld_serve_interrupt+0x5e>
 8002278:	2330      	movs	r3, #48	; 0x30
 800227a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800227e:	4e5c      	ldr	r6, [pc, #368]	; (80023f0 <sd_lld_serve_interrupt+0x2c0>)
 8002280:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8002284:	2b00      	cmp	r3, #0
 8002286:	dd2d      	ble.n	80022e4 <sd_lld_serve_interrupt+0x1b4>
 8002288:	f8d6 508c 	ldr.w	r5, [r6, #140]	; 0x8c
 800228c:	bb55      	cbnz	r5, 80022e4 <sd_lld_serve_interrupt+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)1;
 800228e:	2301      	movs	r3, #1
 8002290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002294:	3004      	adds	r0, #4
 8002296:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800229a:	f7ff fe21 	bl	8001ee0 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800229e:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    u->SR = ~USART_SR_LBD;
 80022a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	603a      	str	r2, [r7, #0]
 80022aa:	dd32      	ble.n	8002312 <sd_lld_serve_interrupt+0x1e2>
 80022ac:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	dd2e      	ble.n	8002312 <sd_lld_serve_interrupt+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 80022b4:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
 80022b8:	f385 8811 	msr	BASEPRI, r5
}
 80022bc:	e746      	b.n	800214c <sd_lld_serve_interrupt+0x1c>
  chEvtBroadcastFlagsI(esp, flags);
 80022be:	2104      	movs	r1, #4
 80022c0:	4658      	mov	r0, fp
 80022c2:	e9cd 2300 	strd	r2, r3, [sp]
 80022c6:	f7ff fe0b 	bl	8001ee0 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80022ca:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80022ce:	2900      	cmp	r1, #0
 80022d0:	db05      	blt.n	80022de <sd_lld_serve_interrupt+0x1ae>
 80022d2:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80022d6:	2900      	cmp	r1, #0
 80022d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80022dc:	dc9c      	bgt.n	8002218 <sd_lld_serve_interrupt+0xe8>
    chSysHalt("SV#10");
 80022de:	4845      	ldr	r0, [pc, #276]	; (80023f4 <sd_lld_serve_interrupt+0x2c4>)
 80022e0:	f7fe fce6 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#6");
 80022e4:	4844      	ldr	r0, [pc, #272]	; (80023f8 <sd_lld_serve_interrupt+0x2c8>)
 80022e6:	f7fe fce3 	bl	8000cb0 <chSysHalt>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80022ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d069      	beq.n	80023c4 <sd_lld_serve_interrupt+0x294>
 80022f0:	2110      	movs	r1, #16
 80022f2:	1d20      	adds	r0, r4, #4
 80022f4:	f7ff fdf4 	bl	8001ee0 <chEvtBroadcastFlagsI>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80022f8:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80022fc:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002300:	ea09 0303 	and.w	r3, r9, r3
 8002304:	2a00      	cmp	r2, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	dd03      	ble.n	8002312 <sd_lld_serve_interrupt+0x1e2>
 800230a:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800230e:	2b00      	cmp	r3, #0
 8002310:	dc58      	bgt.n	80023c4 <sd_lld_serve_interrupt+0x294>
    chSysHalt("SV#7");
 8002312:	483a      	ldr	r0, [pc, #232]	; (80023fc <sd_lld_serve_interrupt+0x2cc>)
 8002314:	f7fe fccc 	bl	8000cb0 <chSysHalt>
  if (!iqIsFullI(iqp)) {
 8002318:	6961      	ldr	r1, [r4, #20]
 800231a:	2900      	cmp	r1, #0
 800231c:	d080      	beq.n	8002220 <sd_lld_serve_interrupt+0xf0>
 800231e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002322:	4658      	mov	r0, fp
 8002324:	f7ff fddc 	bl	8001ee0 <chEvtBroadcastFlagsI>
}
 8002328:	e731      	b.n	800218e <sd_lld_serve_interrupt+0x5e>
 800232a:	2330      	movs	r3, #48	; 0x30
 800232c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002330:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8002334:	2b00      	cmp	r3, #0
 8002336:	ddd5      	ble.n	80022e4 <sd_lld_serve_interrupt+0x1b4>
 8002338:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 800233c:	2a00      	cmp	r2, #0
 800233e:	d1d1      	bne.n	80022e4 <sd_lld_serve_interrupt+0x1b4>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8002340:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
  oip->dbg.lock_cnt = (cnt_t)1;
 8002344:	2001      	movs	r0, #1
 8002346:	4291      	cmp	r1, r2
 8002348:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    b = oqGetI(&sdp->oqueue);
 800234c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8002350:	d03e      	beq.n	80023d0 <sd_lld_serve_interrupt+0x2a0>
    uint8_t b;

    oqp->q_counter++;
 8002352:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002354:	3101      	adds	r1, #1
 8002356:	63a1      	str	r1, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8002358:	1c51      	adds	r1, r2, #1
 800235a:	64a1      	str	r1, [r4, #72]	; 0x48
 800235c:	f892 8000 	ldrb.w	r8, [r2]
    if (oqp->q_rdptr >= oqp->q_top) {
 8002360:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002362:	4291      	cmp	r1, r2
 8002364:	d301      	bcc.n	800236a <sd_lld_serve_interrupt+0x23a>
      oqp->q_rdptr = oqp->q_buffer;
 8002366:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002368:	64a2      	str	r2, [r4, #72]	; 0x48
  return (bool)(qp->next != qp);
 800236a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800236c:	4584      	cmp	ip, r0
 800236e:	d009      	beq.n	8002384 <sd_lld_serve_interrupt+0x254>
  qp->next       = p->next;
 8002370:	6803      	ldr	r3, [r0, #0]
 8002372:	6323      	str	r3, [r4, #48]	; 0x30
  qp->next->prev = qp;
 8002374:	f8c3 c004 	str.w	ip, [r3, #4]
 8002378:	2300      	movs	r3, #0
 800237a:	6283      	str	r3, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 800237c:	f7ff feb0 	bl	80020e0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002380:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      u->DR = b;
 8002384:	f8c7 8004 	str.w	r8, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	ddc2      	ble.n	8002312 <sd_lld_serve_interrupt+0x1e2>
 800238c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002390:	2b00      	cmp	r3, #0
 8002392:	ddbe      	ble.n	8002312 <sd_lld_serve_interrupt+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800239a:	f383 8811 	msr	BASEPRI, r3
}
 800239e:	e710      	b.n	80021c2 <sd_lld_serve_interrupt+0x92>
 80023a0:	2330      	movs	r3, #48	; 0x30
 80023a2:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80023a6:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dd9a      	ble.n	80022e4 <sd_lld_serve_interrupt+0x1b4>
 80023ae:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d196      	bne.n	80022e4 <sd_lld_serve_interrupt+0x1b4>
  oip->dbg.lock_cnt = (cnt_t)1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if (oqIsEmptyI(&sdp->oqueue)) {
 80023bc:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d092      	beq.n	80022ea <sd_lld_serve_interrupt+0x1ba>
  oip->dbg.lock_cnt = (cnt_t)0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80023ca:	f383 8811 	msr	BASEPRI, r3
}
 80023ce:	e6fe      	b.n	80021ce <sd_lld_serve_interrupt+0x9e>
  if (!oqIsEmptyI(oqp)) {
 80023d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023d2:	2900      	cmp	r1, #0
 80023d4:	d0bd      	beq.n	8002352 <sd_lld_serve_interrupt+0x222>
  chEvtBroadcastFlagsI(esp, flags);
 80023d6:	2108      	movs	r1, #8
 80023d8:	1d20      	adds	r0, r4, #4
 80023da:	f7ff fd81 	bl	8001ee0 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80023de:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80023e2:	ea09 0303 	and.w	r3, r9, r3
 80023e6:	60fb      	str	r3, [r7, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80023e8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80023ec:	e7cc      	b.n	8002388 <sd_lld_serve_interrupt+0x258>
 80023ee:	bf00      	nop
 80023f0:	20000e10 	.word	0x20000e10
 80023f4:	08006440 	.word	0x08006440
 80023f8:	08006438 	.word	0x08006438
 80023fc:	08006450 	.word	0x08006450

08002400 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8002400:	b508      	push	{r3, lr}
 * @api
 */
void chDbgCheckClassS(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <chSchGoSleepS+0x4c>)
 8002404:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002408:	b9ea      	cbnz	r2, 8002446 <chSchGoSleepS+0x46>
 800240a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800240e:	2a00      	cmp	r2, #0
 8002410:	dd19      	ble.n	8002446 <chSchGoSleepS+0x46>
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 8002412:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8002414:	681a      	ldr	r2, [r3, #0]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8002416:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800241a:	6810      	ldr	r0, [r2, #0]
 800241c:	6018      	str	r0, [r3, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 800241e:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8002422:	6043      	str	r3, [r0, #4]
 8002424:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8002428:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800242a:	f3ef 8309 	mrs	r3, PSP
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 800242e:	6a08      	ldr	r0, [r1, #32]
 8002430:	3b64      	subs	r3, #100	; 0x64
 8002432:	4298      	cmp	r0, r3
 8002434:	d804      	bhi.n	8002440 <chSchGoSleepS+0x40>
}
 8002436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chSysSwitch(ntp, otp);
 800243a:	4610      	mov	r0, r2
 800243c:	f7fd bf62 	b.w	8000304 <__port_switch>
 8002440:	4803      	ldr	r0, [pc, #12]	; (8002450 <chSchGoSleepS+0x50>)
 8002442:	f7fe fc35 	bl	8000cb0 <chSysHalt>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <chSchGoSleepS+0x54>)
 8002448:	f7fe fc32 	bl	8000cb0 <chSysHalt>
 800244c:	20000e10 	.word	0x20000e10
 8002450:	08006460 	.word	0x08006460
 8002454:	08006458 	.word	0x08006458
	...

08002460 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002464:	4d60      	ldr	r5, [pc, #384]	; (80025e8 <chSchGoSleepTimeoutS+0x188>)
 8002466:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800246a:	b086      	sub	sp, #24
 800246c:	2b00      	cmp	r3, #0
 800246e:	d17b      	bne.n	8002568 <chSchGoSleepTimeoutS+0x108>
 8002470:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8002474:	2a00      	cmp	r2, #0
 8002476:	dd77      	ble.n	8002568 <chSchGoSleepTimeoutS+0x108>
  thread_t *tp = __instance_get_currthread(currcore);

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8002478:	1c4a      	adds	r2, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 800247a:	68ef      	ldr	r7, [r5, #12]
  if (TIME_INFINITE != timeout) {
 800247c:	d06b      	beq.n	8002556 <chSchGoSleepTimeoutS+0xf6>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 800247e:	2900      	cmp	r1, #0
 8002480:	d06f      	beq.n	8002562 <chSchGoSleepTimeoutS+0x102>
  return (bool)(dlhp == dlhp->next);
 8002482:	46a8      	mov	r8, r5
 8002484:	4606      	mov	r6, r0
 8002486:	f858 0f10 	ldr.w	r0, [r8, #16]!
 800248a:	f8df e170 	ldr.w	lr, [pc, #368]	; 80025fc <chSchGoSleepTimeoutS+0x19c>

  /* Timer initialization.*/
  vtp->par     = par;
  vtp->func    = vtfunc;
  vtp->reload  = (sysinterval_t)0;
 800248e:	9305      	str	r3, [sp, #20]
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8002490:	4540      	cmp	r0, r8
  vtp->func    = vtfunc;
 8002492:	4b56      	ldr	r3, [pc, #344]	; (80025ec <chSchGoSleepTimeoutS+0x18c>)
 8002494:	f8de c024 	ldr.w	ip, [lr, #36]	; 0x24
  vtp->par     = par;
 8002498:	9704      	str	r7, [sp, #16]
  vtp->func    = vtfunc;
 800249a:	9303      	str	r3, [sp, #12]
    if (ch_dlist_isempty(&vtlp->dlist)) {
 800249c:	f000 8096 	beq.w	80025cc <chSchGoSleepTimeoutS+0x16c>
 80024a0:	69eb      	ldr	r3, [r5, #28]
    if (delta < vtlp->dlist.next->delta) {
 80024a2:	6884      	ldr	r4, [r0, #8]
 80024a4:	ebac 0303 	sub.w	r3, ip, r3
    if (delta < nowdelta) {
 80024a8:	18cb      	adds	r3, r1, r3
 80024aa:	bf28      	it	cs
 80024ac:	460b      	movcs	r3, r1
    if (delta < vtlp->dlist.next->delta) {
 80024ae:	429c      	cmp	r4, r3
 80024b0:	d924      	bls.n	80024fc <chSchGoSleepTimeoutS+0x9c>
  if (delay < currdelta) {
 80024b2:	2902      	cmp	r1, #2
 80024b4:	460a      	mov	r2, r1
 80024b6:	bf38      	it	cc
 80024b8:	2202      	movcc	r2, #2
  return systime + (systime_t)interval;
 80024ba:	eb0c 0102 	add.w	r1, ip, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80024be:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80024c2:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80024c6:	eba1 0c0c 	sub.w	ip, r1, ip
    if (likely(nowdelta < delay)) {
 80024ca:	4562      	cmp	r2, ip
 80024cc:	bf98      	it	ls
 80024ce:	2202      	movls	r2, #2
 80024d0:	d814      	bhi.n	80024fc <chSchGoSleepTimeoutS+0x9c>
    currdelta += (sysinterval_t)1;
 80024d2:	3201      	adds	r2, #1
  return systime + (systime_t)interval;
 80024d4:	eb01 0c02 	add.w	ip, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80024d8:	f8ce c034 	str.w	ip, [lr, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80024dc:	f8de c024 	ldr.w	ip, [lr, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80024e0:	ebac 0101 	sub.w	r1, ip, r1
    if (likely(nowdelta < delay)) {
 80024e4:	4291      	cmp	r1, r2
 80024e6:	d27b      	bcs.n	80025e0 <chSchGoSleepTimeoutS+0x180>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80024e8:	2a02      	cmp	r2, #2
 80024ea:	d907      	bls.n	80024fc <chSchGoSleepTimeoutS+0x9c>
 80024ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	636a      	str	r2, [r5, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 80024f4:	e002      	b.n	80024fc <chSchGoSleepTimeoutS+0x9c>
  while (likely(dlp->delta < delta)) {
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 80024f6:	6800      	ldr	r0, [r0, #0]
    delta -= dlp->delta;
 80024f8:	1b1b      	subs	r3, r3, r4
  while (likely(dlp->delta < delta)) {
 80024fa:	6884      	ldr	r4, [r0, #8]
 80024fc:	429c      	cmp	r4, r3
 80024fe:	d3fa      	bcc.n	80024f6 <chSchGoSleepTimeoutS+0x96>
  dlp->delta      = delta;
 8002500:	9302      	str	r3, [sp, #8]

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8002502:	6882      	ldr	r2, [r0, #8]
  dlp->next       = dlhp;
 8002504:	9000      	str	r0, [sp, #0]
  dlp->delta -= delta;
 8002506:	1ad2      	subs	r2, r2, r3
  dlp->prev       = dlp->next->prev;
 8002508:	6843      	ldr	r3, [r0, #4]
 800250a:	9301      	str	r3, [sp, #4]
  dlp->prev->next = dlp;
 800250c:	466c      	mov	r4, sp
 800250e:	601c      	str	r4, [r3, #0]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
  dlhp->prev      = dlp;
 8002514:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlhp->delta = (sysinterval_t)-1;
 8002518:	61ab      	str	r3, [r5, #24]
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
 800251a:	4630      	mov	r0, r6
 800251c:	f7ff ff70 	bl	8002400 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002520:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002524:	2b00      	cmp	r3, #0
 8002526:	db22      	blt.n	800256e <chSchGoSleepTimeoutS+0x10e>
 8002528:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800252c:	2b00      	cmp	r3, #0
 800252e:	dd1e      	ble.n	800256e <chSchGoSleepTimeoutS+0x10e>
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8002530:	9b00      	ldr	r3, [sp, #0]
    if (chVTIsArmedI(&vt)) {
 8002532:	b163      	cbz	r3, 800254e <chSchGoSleepTimeoutS+0xee>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8002534:	692a      	ldr	r2, [r5, #16]
 8002536:	42a2      	cmp	r2, r4
 8002538:	d01c      	beq.n	8002574 <chSchGoSleepTimeoutS+0x114>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 800253a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	600b      	str	r3, [r1, #0]
 8002542:	4402      	add	r2, r0
 8002544:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	61ab      	str	r3, [r5, #24]
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 800254e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002550:	b006      	add	sp, #24
 8002552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchGoSleepS(newstate);
 8002556:	f7ff ff53 	bl	8002400 <chSchGoSleepS>
}
 800255a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255c:	b006      	add	sp, #24
 800255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8002562:	4823      	ldr	r0, [pc, #140]	; (80025f0 <chSchGoSleepTimeoutS+0x190>)
 8002564:	f7fe fba4 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#11");
 8002568:	4822      	ldr	r0, [pc, #136]	; (80025f4 <chSchGoSleepTimeoutS+0x194>)
 800256a:	f7fe fba1 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#10");
 800256e:	4822      	ldr	r0, [pc, #136]	; (80025f8 <chSchGoSleepTimeoutS+0x198>)
 8002570:	f7fe fb9e 	bl	8000cb0 <chSysHalt>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 8002574:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8002576:	4543      	cmp	r3, r8
  dlhp->next       = dlp->next;
 8002578:	612b      	str	r3, [r5, #16]
  vtp->dlist.next = NULL;
 800257a:	9200      	str	r2, [sp, #0]
  dlhp->next->prev = dlhp;
 800257c:	f8c3 8004 	str.w	r8, [r3, #4]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8002580:	d02b      	beq.n	80025da <chSchGoSleepTimeoutS+0x17a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	9902      	ldr	r1, [sp, #8]
 8002586:	481d      	ldr	r0, [pc, #116]	; (80025fc <chSchGoSleepTimeoutS+0x19c>)
 8002588:	440a      	add	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	6a41      	ldr	r1, [r0, #36]	; 0x24

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800258e:	69eb      	ldr	r3, [r5, #28]
 8002590:	1acc      	subs	r4, r1, r3

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8002592:	42a2      	cmp	r2, r4
 8002594:	d9db      	bls.n	800254e <chSchGoSleepTimeoutS+0xee>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 8002596:	1a5b      	subs	r3, r3, r1
 8002598:	4413      	add	r3, r2
 800259a:	2b02      	cmp	r3, #2
 800259c:	bf38      	it	cc
 800259e:	2302      	movcc	r3, #2
  return systime + (systime_t)interval;
 80025a0:	18ca      	adds	r2, r1, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80025a2:	6342      	str	r2, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80025a4:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80025a6:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 80025a8:	4299      	cmp	r1, r3
 80025aa:	bf28      	it	cs
 80025ac:	2302      	movcs	r3, #2
 80025ae:	d3ce      	bcc.n	800254e <chSchGoSleepTimeoutS+0xee>
    currdelta += (sysinterval_t)1;
 80025b0:	3301      	adds	r3, #1
  return systime + (systime_t)interval;
 80025b2:	18d1      	adds	r1, r2, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80025b4:	6341      	str	r1, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80025b6:	6a41      	ldr	r1, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80025b8:	1a8a      	subs	r2, r1, r2
    if (likely(nowdelta < delay)) {
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d212      	bcs.n	80025e4 <chSchGoSleepTimeoutS+0x184>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d9c5      	bls.n	800254e <chSchGoSleepTimeoutS+0xee>
  currcore->rfcu.mask |= mask;
 80025c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	636b      	str	r3, [r5, #52]	; 0x34
}
 80025ca:	e7c0      	b.n	800254e <chSchGoSleepTimeoutS+0xee>
      vt_insert_first(vtlp, vtp, now, delay);
 80025cc:	466c      	mov	r4, sp
 80025ce:	460a      	mov	r2, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4661      	mov	r1, ip
 80025d4:	f7ff fd4c 	bl	8002070 <vt_insert_first.constprop.0>
      return;
 80025d8:	e79f      	b.n	800251a <chSchGoSleepTimeoutS+0xba>
  STM32_ST_TIM->DIER = 0U;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <chSchGoSleepTimeoutS+0x19c>)
 80025dc:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 80025de:	e7b6      	b.n	800254e <chSchGoSleepTimeoutS+0xee>
  return (systime_t)STM32_ST_TIM->CNT;
 80025e0:	4661      	mov	r1, ip
 80025e2:	e776      	b.n	80024d2 <chSchGoSleepTimeoutS+0x72>
 80025e4:	460a      	mov	r2, r1
 80025e6:	e7e3      	b.n	80025b0 <chSchGoSleepTimeoutS+0x150>
 80025e8:	20000e10 	.word	0x20000e10
 80025ec:	08001e31 	.word	0x08001e31
 80025f0:	08006698 	.word	0x08006698
 80025f4:	08006458 	.word	0x08006458
 80025f8:	08006440 	.word	0x08006440
 80025fc:	40000c00 	.word	0x40000c00

08002600 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002604:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 8002606:	f8d0 b01c 	ldr.w	fp, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 800260a:	9302      	str	r3, [sp, #8]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800260c:	2a00      	cmp	r2, #0
 800260e:	f000 8081 	beq.w	8002714 <oqWriteTimeout+0x114>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002612:	4691      	mov	r9, r2
 8002614:	4688      	mov	r8, r1
 8002616:	2230      	movs	r2, #48	; 0x30
 8002618:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800261c:	4e3f      	ldr	r6, [pc, #252]	; (800271c <oqWriteTimeout+0x11c>)
 800261e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8002622:	430b      	orrs	r3, r1
 8002624:	d170      	bne.n	8002708 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002626:	2301      	movs	r3, #1
 8002628:	4604      	mov	r4, r0
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8002630:	46ca      	mov	sl, r9
  if (n > oqGetEmptyI(oqp)) {
 8002632:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002634:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8002638:	4553      	cmp	r3, sl
    n = oqGetEmptyI(oqp);
 800263a:	bf34      	ite	cc
 800263c:	68a5      	ldrcc	r5, [r4, #8]
 800263e:	4655      	movcs	r5, sl
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002640:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 8002642:	42af      	cmp	r7, r5
 8002644:	d859      	bhi.n	80026fa <oqWriteTimeout+0xfa>
  else if (n > s1) {
 8002646:	d243      	bcs.n	80026d0 <oqWriteTimeout+0xd0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002648:	463a      	mov	r2, r7
 800264a:	4641      	mov	r1, r8
 800264c:	f7fd fe7a 	bl	8000344 <memcpy>
    s2 = n - s1;
 8002650:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002652:	68e0      	ldr	r0, [r4, #12]
 8002654:	9203      	str	r2, [sp, #12]
 8002656:	eb08 0107 	add.w	r1, r8, r7
 800265a:	f7fd fe73 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800265e:	68e3      	ldr	r3, [r4, #12]
 8002660:	9a03      	ldr	r2, [sp, #12]
 8002662:	441a      	add	r2, r3
  oqp->q_counter -= n;
 8002664:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr += n;
 8002666:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8002668:	1b5b      	subs	r3, r3, r5
 800266a:	60a3      	str	r3, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 800266c:	b3b5      	cbz	r5, 80026dc <oqWriteTimeout+0xdc>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 800266e:	f1bb 0f00 	cmp.w	fp, #0
 8002672:	d001      	beq.n	8002678 <oqWriteTimeout+0x78>
        nfy(oqp);
 8002674:	4620      	mov	r0, r4
 8002676:	47d8      	blx	fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002678:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 800267c:	2b00      	cmp	r3, #0
 800267e:	d146      	bne.n	800270e <oqWriteTimeout+0x10e>
 8002680:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8002684:	2a00      	cmp	r2, #0
 8002686:	dd42      	ble.n	800270e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002688:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	9b01      	ldr	r3, [sp, #4]
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002692:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 8002696:	44a8      	add	r8, r5
 8002698:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800269c:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 80026a0:	4313      	orrs	r3, r2
 80026a2:	d131      	bne.n	8002708 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 80026aa:	f1ba 0f00 	cmp.w	sl, #0
 80026ae:	d1c0      	bne.n	8002632 <oqWriteTimeout+0x32>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80026b0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80026b4:	bb5a      	cbnz	r2, 800270e <oqWriteTimeout+0x10e>
 80026b6:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80026ba:	2900      	cmp	r1, #0
 80026bc:	dd27      	ble.n	800270e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 80026be:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80026c2:	f382 8811 	msr	BASEPRI, r2
    }
  }

  osalSysUnlock();
  return max - n;
}
 80026c6:	eba9 000a 	sub.w	r0, r9, sl
 80026ca:	b005      	add	sp, #20
 80026cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80026d0:	462a      	mov	r2, r5
 80026d2:	4641      	mov	r1, r8
 80026d4:	f7fd fe36 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80026d8:	68e2      	ldr	r2, [r4, #12]
 80026da:	e7c3      	b.n	8002664 <oqWriteTimeout+0x64>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80026dc:	9902      	ldr	r1, [sp, #8]
  return __sch_get_currthread();
 80026de:	68f3      	ldr	r3, [r6, #12]
 80026e0:	2900      	cmp	r1, #0
 80026e2:	d0e5      	beq.n	80026b0 <oqWriteTimeout+0xb0>
  p->prev       = qp->prev;
 80026e4:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 80026e6:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 80026e8:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80026ea:	2004      	movs	r0, #4
  p->prev->next = p;
 80026ec:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80026ee:	6063      	str	r3, [r4, #4]
 80026f0:	f7ff feb6 	bl	8002460 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d09c      	beq.n	8002632 <oqWriteTimeout+0x32>
 80026f8:	e7da      	b.n	80026b0 <oqWriteTimeout+0xb0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80026fa:	462a      	mov	r2, r5
 80026fc:	4641      	mov	r1, r8
 80026fe:	f7fd fe21 	bl	8000344 <memcpy>
    oqp->q_wrptr += n;
 8002702:	6962      	ldr	r2, [r4, #20]
 8002704:	442a      	add	r2, r5
 8002706:	e7ad      	b.n	8002664 <oqWriteTimeout+0x64>
    chSysHalt("SV#4");
 8002708:	4805      	ldr	r0, [pc, #20]	; (8002720 <oqWriteTimeout+0x120>)
 800270a:	f7fe fad1 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#5");
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <oqWriteTimeout+0x124>)
 8002710:	f7fe face 	bl	8000cb0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8002714:	4804      	ldr	r0, [pc, #16]	; (8002728 <oqWriteTimeout+0x128>)
 8002716:	f7fe facb 	bl	8000cb0 <chSysHalt>
 800271a:	bf00      	nop
 800271c:	20000e10 	.word	0x20000e10
 8002720:	08006448 	.word	0x08006448
 8002724:	08006470 	.word	0x08006470
 8002728:	0800664c 	.word	0x0800664c
 800272c:	00000000 	.word	0x00000000

08002730 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	3030      	adds	r0, #48	; 0x30
 8002736:	f7ff bf63 	b.w	8002600 <oqWriteTimeout>
 800273a:	bf00      	nop
 800273c:	0000      	movs	r0, r0
	...

08002740 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002740:	3030      	adds	r0, #48	; 0x30
 8002742:	f7ff bf5d 	b.w	8002600 <oqWriteTimeout>
 8002746:	bf00      	nop
	...

08002750 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2330      	movs	r3, #48	; 0x30
 8002754:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002758:	4e26      	ldr	r6, [pc, #152]	; (80027f4 <iqGetTimeout+0xa4>)
 800275a:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 800275e:	4313      	orrs	r3, r2
 8002760:	d144      	bne.n	80027ec <iqGetTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002762:	2301      	movs	r3, #1
 8002764:	4604      	mov	r4, r0
 8002766:	460d      	mov	r5, r1
 8002768:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
}
 800276c:	e00a      	b.n	8002784 <iqGetTimeout+0x34>
  p->prev       = qp->prev;
 800276e:	6862      	ldr	r2, [r4, #4]
 8002770:	4629      	mov	r1, r5
 8002772:	e9c3 4200 	strd	r4, r2, [r3]
 8002776:	2004      	movs	r0, #4
  p->prev->next = p;
 8002778:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800277a:	6063      	str	r3, [r4, #4]
 800277c:	f7ff fe70 	bl	8002460 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002780:	2800      	cmp	r0, #0
 8002782:	db06      	blt.n	8002792 <iqGetTimeout+0x42>
  while (iqIsEmptyI(iqp)) {
 8002784:	68a3      	ldr	r3, [r4, #8]
 8002786:	b983      	cbnz	r3, 80027aa <iqGetTimeout+0x5a>
 8002788:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800278a:	2d00      	cmp	r5, #0
 800278c:	d1ef      	bne.n	800276e <iqGetTimeout+0x1e>
    return MSG_TIMEOUT;
 800278e:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002792:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8002796:	bb33      	cbnz	r3, 80027e6 <iqGetTimeout+0x96>
 8002798:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 800279c:	2a00      	cmp	r2, #0
 800279e:	dd22      	ble.n	80027e6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80027a0:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80027a4:	f383 8811 	msr	BASEPRI, r3
}
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 80027aa:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80027ac:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 80027ae:	3b01      	subs	r3, #1
 80027b0:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 80027b2:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 80027b4:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 80027b6:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 80027b8:	bf28      	it	cs
 80027ba:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 80027bc:	61a2      	str	r2, [r4, #24]
 80027be:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 80027c0:	bf28      	it	cs
 80027c2:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 80027c4:	69e3      	ldr	r3, [r4, #28]
 80027c6:	b10b      	cbz	r3, 80027cc <iqGetTimeout+0x7c>
    iqp->q_notify(iqp);
 80027c8:	4620      	mov	r0, r4
 80027ca:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80027cc:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80027d0:	b94b      	cbnz	r3, 80027e6 <iqGetTimeout+0x96>
 80027d2:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	dd05      	ble.n	80027e6 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80027da:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80027de:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 80027e2:	4628      	mov	r0, r5
}
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 80027e6:	4804      	ldr	r0, [pc, #16]	; (80027f8 <iqGetTimeout+0xa8>)
 80027e8:	f7fe fa62 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#4");
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <iqGetTimeout+0xac>)
 80027ee:	f7fe fa5f 	bl	8000cb0 <chSysHalt>
 80027f2:	bf00      	nop
 80027f4:	20000e10 	.word	0x20000e10
 80027f8:	08006470 	.word	0x08006470
 80027fc:	08006448 	.word	0x08006448

08002800 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	300c      	adds	r0, #12
 8002806:	f7ff bfa3 	b.w	8002750 <iqGetTimeout>
 800280a:	bf00      	nop
 800280c:	0000      	movs	r0, r0
	...

08002810 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002810:	300c      	adds	r0, #12
 8002812:	f7ff bf9d 	b.w	8002750 <iqGetTimeout>
 8002816:	bf00      	nop
	...

08002820 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qnotify_t nfy = iqp->q_notify;
 8002824:	f8d0 a01c 	ldr.w	sl, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8002828:	b085      	sub	sp, #20
  osalDbgCheck(n > 0U);
 800282a:	2a00      	cmp	r2, #0
 800282c:	f000 8089 	beq.w	8002942 <iqReadTimeout+0x122>
 8002830:	4690      	mov	r8, r2
 8002832:	460f      	mov	r7, r1
 8002834:	4699      	mov	r9, r3
 8002836:	2230      	movs	r2, #48	; 0x30
 8002838:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800283c:	4e42      	ldr	r6, [pc, #264]	; (8002948 <iqReadTimeout+0x128>)
 800283e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8002842:	430b      	orrs	r3, r1
 8002844:	d177      	bne.n	8002936 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002846:	2301      	movs	r3, #1
 8002848:	46c3      	mov	fp, r8
 800284a:	f8cd 800c 	str.w	r8, [sp, #12]
 800284e:	4604      	mov	r4, r0
 8002850:	9201      	str	r2, [sp, #4]
 8002852:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8002856:	46b8      	mov	r8, r7
  if (n > iqGetFullI(iqp)) {
 8002858:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800285a:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 800285c:	455a      	cmp	r2, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800285e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8002860:	bf34      	ite	cc
 8002862:	68a5      	ldrcc	r5, [r4, #8]
 8002864:	465d      	movcs	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002866:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 8002868:	42aa      	cmp	r2, r5
 800286a:	d85d      	bhi.n	8002928 <iqReadTimeout+0x108>
  else if (n > s1) {
 800286c:	d246      	bcs.n	80028fc <iqReadTimeout+0xdc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800286e:	4640      	mov	r0, r8
    s2 = n - s1;
 8002870:	1aaf      	subs	r7, r5, r2
 8002872:	9202      	str	r2, [sp, #8]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002874:	f7fd fd66 	bl	8000344 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8002878:	9a02      	ldr	r2, [sp, #8]
 800287a:	68e1      	ldr	r1, [r4, #12]
 800287c:	eb08 0002 	add.w	r0, r8, r2
 8002880:	463a      	mov	r2, r7
 8002882:	f7fd fd5f 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002886:	68e2      	ldr	r2, [r4, #12]
 8002888:	443a      	add	r2, r7
    iqp->q_rdptr += n;
 800288a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800288c:	68a2      	ldr	r2, [r4, #8]
 800288e:	1b52      	subs	r2, r2, r5
 8002890:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002892:	2d00      	cmp	r5, #0
 8002894:	d038      	beq.n	8002908 <iqReadTimeout+0xe8>
      if (nfy != NULL) {
 8002896:	f1ba 0f00 	cmp.w	sl, #0
 800289a:	d001      	beq.n	80028a0 <iqReadTimeout+0x80>
        nfy(iqp);
 800289c:	4620      	mov	r0, r4
 800289e:	47d0      	blx	sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80028a0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d149      	bne.n	800293c <iqReadTimeout+0x11c>
 80028a8:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80028ac:	2900      	cmp	r1, #0
 80028ae:	dd45      	ble.n	800293c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80028b0:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80028b4:	f382 8811 	msr	BASEPRI, r2
 80028b8:	9b01      	ldr	r3, [sp, #4]
      n  -= done;
 80028ba:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80028be:	44a8      	add	r8, r5
 80028c0:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80028c4:	e9d6 2122 	ldrd	r2, r1, [r6, #136]	; 0x88
 80028c8:	430a      	orrs	r2, r1
 80028ca:	d134      	bne.n	8002936 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 80028d2:	f1bb 0f00 	cmp.w	fp, #0
 80028d6:	d1bf      	bne.n	8002858 <iqReadTimeout+0x38>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80028d8:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80028dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80028e0:	bb62      	cbnz	r2, 800293c <iqReadTimeout+0x11c>
 80028e2:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80028e6:	2900      	cmp	r1, #0
 80028e8:	dd28      	ble.n	800293c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80028ea:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80028ee:	f382 8811 	msr	BASEPRI, r2
}
 80028f2:	eba8 000b 	sub.w	r0, r8, fp
 80028f6:	b005      	add	sp, #20
 80028f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80028fc:	462a      	mov	r2, r5
 80028fe:	4640      	mov	r0, r8
 8002900:	f7fd fd20 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002904:	68e2      	ldr	r2, [r4, #12]
 8002906:	e7c0      	b.n	800288a <iqReadTimeout+0x6a>
 8002908:	68f2      	ldr	r2, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800290a:	f1b9 0f00 	cmp.w	r9, #0
 800290e:	d0e3      	beq.n	80028d8 <iqReadTimeout+0xb8>
  p->prev       = qp->prev;
 8002910:	6861      	ldr	r1, [r4, #4]
 8002912:	6051      	str	r1, [r2, #4]
  p->next       = qp;
 8002914:	6014      	str	r4, [r2, #0]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002916:	2004      	movs	r0, #4
  p->prev->next = p;
 8002918:	600a      	str	r2, [r1, #0]
  qp->prev      = p;
 800291a:	6062      	str	r2, [r4, #4]
 800291c:	4649      	mov	r1, r9
 800291e:	f7ff fd9f 	bl	8002460 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8002922:	2800      	cmp	r0, #0
 8002924:	d098      	beq.n	8002858 <iqReadTimeout+0x38>
 8002926:	e7d7      	b.n	80028d8 <iqReadTimeout+0xb8>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002928:	462a      	mov	r2, r5
 800292a:	4640      	mov	r0, r8
 800292c:	f7fd fd0a 	bl	8000344 <memcpy>
    iqp->q_rdptr += n;
 8002930:	69a2      	ldr	r2, [r4, #24]
 8002932:	442a      	add	r2, r5
 8002934:	e7a9      	b.n	800288a <iqReadTimeout+0x6a>
    chSysHalt("SV#4");
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <iqReadTimeout+0x12c>)
 8002938:	f7fe f9ba 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#5");
 800293c:	4804      	ldr	r0, [pc, #16]	; (8002950 <iqReadTimeout+0x130>)
 800293e:	f7fe f9b7 	bl	8000cb0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8002942:	4804      	ldr	r0, [pc, #16]	; (8002954 <iqReadTimeout+0x134>)
 8002944:	f7fe f9b4 	bl	8000cb0 <chSysHalt>
 8002948:	20000e10 	.word	0x20000e10
 800294c:	08006448 	.word	0x08006448
 8002950:	08006470 	.word	0x08006470
 8002954:	08006688 	.word	0x08006688
	...

08002960 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	300c      	adds	r0, #12
 8002966:	f7ff bf5b 	b.w	8002820 <iqReadTimeout>
 800296a:	bf00      	nop
 800296c:	0000      	movs	r0, r0
	...

08002970 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002970:	300c      	adds	r0, #12
 8002972:	f7ff bf55 	b.w	8002820 <iqReadTimeout>
 8002976:	bf00      	nop
	...

08002980 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	4615      	mov	r5, r2
 8002984:	2330      	movs	r3, #48	; 0x30
 8002986:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800298a:	4f26      	ldr	r7, [pc, #152]	; (8002a24 <oqPutTimeout+0xa4>)
 800298c:	e9d7 3222 	ldrd	r3, r2, [r7, #136]	; 0x88
 8002990:	4313      	orrs	r3, r2
 8002992:	d143      	bne.n	8002a1c <oqPutTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002994:	2301      	movs	r3, #1
 8002996:	4604      	mov	r4, r0
 8002998:	460e      	mov	r6, r1
 800299a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
}
 800299e:	e00a      	b.n	80029b6 <oqPutTimeout+0x36>
  p->prev       = qp->prev;
 80029a0:	6860      	ldr	r0, [r4, #4]
 80029a2:	4629      	mov	r1, r5
 80029a4:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 80029a8:	6003      	str	r3, [r0, #0]
 80029aa:	2004      	movs	r0, #4
  qp->prev      = p;
 80029ac:	6063      	str	r3, [r4, #4]
 80029ae:	f7ff fd57 	bl	8002460 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80029b2:	2800      	cmp	r0, #0
 80029b4:	db06      	blt.n	80029c4 <oqPutTimeout+0x44>
  while (oqIsFullI(oqp)) {
 80029b6:	68a3      	ldr	r3, [r4, #8]
 80029b8:	b983      	cbnz	r3, 80029dc <oqPutTimeout+0x5c>
 80029ba:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80029bc:	2d00      	cmp	r5, #0
 80029be:	d1ef      	bne.n	80029a0 <oqPutTimeout+0x20>
    return MSG_TIMEOUT;
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80029c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c8:	bb2b      	cbnz	r3, 8002a16 <oqPutTimeout+0x96>
 80029ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	dd21      	ble.n	8002a16 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029d6:	f383 8811 	msr	BASEPRI, r3
}
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  oqp->q_counter--;
 80029dc:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80029de:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80029e4:	1c53      	adds	r3, r2, #1
 80029e6:	6163      	str	r3, [r4, #20]
 80029e8:	7016      	strb	r6, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80029ea:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80029ee:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80029f0:	bf24      	itt	cs
 80029f2:	68e3      	ldrcs	r3, [r4, #12]
 80029f4:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 80029f6:	69e3      	ldr	r3, [r4, #28]
 80029f8:	b10b      	cbz	r3, 80029fe <oqPutTimeout+0x7e>
    oqp->q_notify(oqp);
 80029fa:	4620      	mov	r0, r4
 80029fc:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80029fe:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a02:	b940      	cbnz	r0, 8002a16 <oqPutTimeout+0x96>
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	dd04      	ble.n	8002a16 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002a0c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8002a10:	f380 8811 	msr	BASEPRI, r0
}
 8002a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 8002a16:	4804      	ldr	r0, [pc, #16]	; (8002a28 <oqPutTimeout+0xa8>)
 8002a18:	f7fe f94a 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#4");
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <oqPutTimeout+0xac>)
 8002a1e:	f7fe f947 	bl	8000cb0 <chSysHalt>
 8002a22:	bf00      	nop
 8002a24:	20000e10 	.word	0x20000e10
 8002a28:	08006470 	.word	0x08006470
 8002a2c:	08006448 	.word	0x08006448

08002a30 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	3030      	adds	r0, #48	; 0x30
 8002a36:	f7ff bfa3 	b.w	8002980 <oqPutTimeout>
 8002a3a:	bf00      	nop
 8002a3c:	0000      	movs	r0, r0
	...

08002a40 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002a40:	3030      	adds	r0, #48	; 0x30
 8002a42:	f7ff bf9d 	b.w	8002980 <oqPutTimeout>
 8002a46:	bf00      	nop
	...

08002a50 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8002a50:	b510      	push	{r4, lr}
 8002a52:	2330      	movs	r3, #48	; 0x30
 8002a54:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002a58:	4c10      	ldr	r4, [pc, #64]	; (8002a9c <chThdSleep+0x4c>)
 8002a5a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	d113      	bne.n	8002a8a <chThdSleep+0x3a>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	4601      	mov	r1, r0
 8002a66:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8002a6a:	b1a0      	cbz	r0, 8002a96 <chThdSleep+0x46>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8002a6c:	2008      	movs	r0, #8
 8002a6e:	f7ff fcf7 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002a72:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a76:	b95b      	cbnz	r3, 8002a90 <chThdSleep+0x40>
 8002a78:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	dd07      	ble.n	8002a90 <chThdSleep+0x40>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002a80:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002a84:	f383 8811 	msr	BASEPRI, r3
}
 8002a88:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <chThdSleep+0x50>)
 8002a8c:	f7fe f910 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#5");
 8002a90:	4804      	ldr	r0, [pc, #16]	; (8002aa4 <chThdSleep+0x54>)
 8002a92:	f7fe f90d 	bl	8000cb0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8002a96:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <chThdSleep+0x58>)
 8002a98:	f7fe f90a 	bl	8000cb0 <chSysHalt>
 8002a9c:	20000e10 	.word	0x20000e10
 8002aa0:	08006448 	.word	0x08006448
 8002aa4:	08006470 	.word	0x08006470
 8002aa8:	08006668 	.word	0x08006668
 8002aac:	00000000 	.word	0x00000000

08002ab0 <u8x8_gpio_and_delay_stm32>:
//#warning todo adapt to I2C2 pins
uint8_t u8x8_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  (void)arg_ptr; //to remove unused parameter warning

  switch(msg)
 8002ab0:	3928      	subs	r1, #40	; 0x28
{
 8002ab2:	b510      	push	{r4, lr}
  switch(msg)
 8002ab4:	2925      	cmp	r1, #37	; 0x25
 8002ab6:	d819      	bhi.n	8002aec <u8x8_gpio_and_delay_stm32+0x3c>
 8002ab8:	e8df f001 	tbb	[pc, r1]
 8002abc:	16161316 	.word	0x16161316
 8002ac0:	18181d16 	.word	0x18181d16
 8002ac4:	18181818 	.word	0x18181818
 8002ac8:	18181818 	.word	0x18181818
 8002acc:	18181818 	.word	0x18181818
 8002ad0:	18181818 	.word	0x18181818
 8002ad4:	18181818 	.word	0x18181818
 8002ad8:	18181818 	.word	0x18181818
 8002adc:	18181818 	.word	0x18181818
 8002ae0:	3c33      	.short	0x3c33
  case U8X8_MSG_DELAY_100NANO:
    /* not used at the moment */
    break;

  case U8X8_MSG_DELAY_MILLI:
    chThdSleepMilliseconds(1);
 8002ae2:	200a      	movs	r0, #10
 8002ae4:	f7ff ffb4 	bl	8002a50 <chThdSleep>
  default:
    u8x8_SetGPIOResult(u8x8, 1);
    break;
  }
  return 1;
}
 8002ae8:	2001      	movs	r0, #1
 8002aea:	bd10      	pop	{r4, pc}
    u8x8_SetGPIOResult(u8x8, 1);
 8002aec:	2301      	movs	r3, #1
 8002aee:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 8002af2:	2001      	movs	r0, #1
 8002af4:	bd10      	pop	{r4, pc}
    if(arg_int == 1){
 8002af6:	2a01      	cmp	r2, #1
 *
 * @notapi
 */
void gpt_lld_polled_delay(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 8002af8:	4822      	ldr	r0, [pc, #136]	; (8002b84 <u8x8_gpio_and_delay_stm32+0xd4>)
 8002afa:	d030      	beq.n	8002b5e <u8x8_gpio_and_delay_stm32+0xae>
 8002afc:	68c2      	ldr	r2, [r0, #12]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8002afe:	2301      	movs	r3, #1
  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 8002b00:	2402      	movs	r4, #2
 8002b02:	6014      	str	r4, [r2, #0]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8002b04:	2100      	movs	r1, #0
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8002b06:	62d3      	str	r3, [r2, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8002b08:	6153      	str	r3, [r2, #20]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002b0a:	230d      	movs	r3, #13
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8002b0c:	6111      	str	r1, [r2, #16]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002b0e:	6013      	str	r3, [r2, #0]
  while (!(gptp->tim->SR & STM32_TIM_SR_UIF))
 8002b10:	6913      	ldr	r3, [r2, #16]
 8002b12:	07db      	lsls	r3, r3, #31
 8002b14:	d5fc      	bpl.n	8002b10 <u8x8_gpio_and_delay_stm32+0x60>
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
  gpt_lld_polled_delay(gptp, interval);
  gptp->state = GPT_READY;
 8002b16:	2302      	movs	r3, #2
    ;
  gptp->tim->SR = 0U;                           /* Clear pending IRQs.      */
 8002b18:	2100      	movs	r1, #0
 8002b1a:	7003      	strb	r3, [r0, #0]
 8002b1c:	6111      	str	r1, [r2, #16]
}
 8002b1e:	2001      	movs	r0, #1
 8002b20:	bd10      	pop	{r4, pc}
      palClearPad(GPIOB, 8);
 8002b22:	4819      	ldr	r0, [pc, #100]	; (8002b88 <u8x8_gpio_and_delay_stm32+0xd8>)
    if ( arg_int == 0 )
 8002b24:	b97a      	cbnz	r2, 8002b46 <u8x8_gpio_and_delay_stm32+0x96>
      palClearPad(GPIOB, 8);
 8002b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b2a:	8341      	strh	r1, [r0, #26]
      palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f7fe f83f 	bl	8000bb0 <_pal_lld_setgroupmode>
 8002b32:	e7d9      	b.n	8002ae8 <u8x8_gpio_and_delay_stm32+0x38>
      palClearPad(GPIOB, 9);
 8002b34:	4814      	ldr	r0, [pc, #80]	; (8002b88 <u8x8_gpio_and_delay_stm32+0xd8>)
    if ( arg_int == 0 )
 8002b36:	b962      	cbnz	r2, 8002b52 <u8x8_gpio_and_delay_stm32+0xa2>
      palClearPad(GPIOB, 9);
 8002b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b3c:	8341      	strh	r1, [r0, #26]
      palSetPadMode(GPIOB, 9, PAL_MODE_OUTPUT_PUSHPULL);
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f7fe f836 	bl	8000bb0 <_pal_lld_setgroupmode>
 8002b44:	e7d0      	b.n	8002ae8 <u8x8_gpio_and_delay_stm32+0x38>
      palSetPadMode(GPIOB, 8, PAL_MODE_INPUT);
 8002b46:	2200      	movs	r2, #0
 8002b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4c:	f7fe f830 	bl	8000bb0 <_pal_lld_setgroupmode>
 8002b50:	e7ca      	b.n	8002ae8 <u8x8_gpio_and_delay_stm32+0x38>
      palSetPadMode(GPIOB, 9, PAL_MODE_INPUT);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b58:	f7fe f82a 	bl	8000bb0 <_pal_lld_setgroupmode>
 8002b5c:	e7c4      	b.n	8002ae8 <u8x8_gpio_and_delay_stm32+0x38>
  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 8002b5e:	68c1      	ldr	r1, [r0, #12]
 8002b60:	2402      	movs	r4, #2
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8002b62:	2309      	movs	r3, #9
  gptp->tim->CR1 = STM32_TIM_CR1_UDIS;          /* Immediate update.        */
 8002b64:	600c      	str	r4, [r1, #0]
  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
 8002b66:	62cb      	str	r3, [r1, #44]	; 0x2c
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8002b68:	2400      	movs	r4, #0
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002b6a:	230d      	movs	r3, #13
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
 8002b6c:	614a      	str	r2, [r1, #20]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8002b6e:	610c      	str	r4, [r1, #16]
  gptp->tim->CR1 = STM32_TIM_CR1_OPM | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8002b70:	600b      	str	r3, [r1, #0]
  while (!(gptp->tim->SR & STM32_TIM_SR_UIF))
 8002b72:	690b      	ldr	r3, [r1, #16]
 8002b74:	07da      	lsls	r2, r3, #31
 8002b76:	d5fc      	bpl.n	8002b72 <u8x8_gpio_and_delay_stm32+0xc2>
  gptp->tim->SR = 0U;                           /* Clear pending IRQs.      */
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	610a      	str	r2, [r1, #16]
 8002b7e:	7003      	strb	r3, [r0, #0]
}
 8002b80:	e7b2      	b.n	8002ae8 <u8x8_gpio_and_delay_stm32+0x38>
 8002b82:	bf00      	nop
 8002b84:	2000086c 	.word	0x2000086c
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	00000000 	.word	0x00000000

08002b90 <__port_irq_epilogue.part.0>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8002b90:	b410      	push	{r4}
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8002b92:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002b96:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8002b9a:	3b68      	subs	r3, #104	; 0x68

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8002b9c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 8002ba0:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <__port_irq_epilogue.part.0+0x38>)
    ectxp->xpsr = 0x01000000U;
 8002ba2:	61d9      	str	r1, [r3, #28]
    ectxp->fpscr = FPU->FPDSCR;
 8002ba4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002ba8:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__port_irq_epilogue.part.0+0x3c>)

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <__port_irq_epilogue.part.0+0x40>)
 8002bb0:	6808      	ldr	r0, [r1, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8002bb2:	68c9      	ldr	r1, [r1, #12]
    if (chSchIsPreemptionRequired()) {
 8002bb4:	6884      	ldr	r4, [r0, #8]
 8002bb6:	6888      	ldr	r0, [r1, #8]
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8002bb8:	4906      	ldr	r1, [pc, #24]	; (8002bd4 <__port_irq_epilogue.part.0+0x44>)
 8002bba:	4284      	cmp	r4, r0
 8002bbc:	bf88      	it	hi
 8002bbe:	460a      	movhi	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8002bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ef00 	.word	0xe000ef00
 8002bcc:	20000e10 	.word	0x20000e10
 8002bd0:	0800033e 	.word	0x0800033e
 8002bd4:	08000333 	.word	0x08000333
	...

08002be0 <u8x8_byte_i2c>:
  switch(msg)
 8002be0:	3914      	subs	r1, #20
{
 8002be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be6:	4605      	mov	r5, r0
  switch(msg)
 8002be8:	290c      	cmp	r1, #12
 8002bea:	d80e      	bhi.n	8002c0a <u8x8_byte_i2c+0x2a>
 8002bec:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002bf0:	000d0084 	.word	0x000d0084
 8002bf4:	0068000d 	.word	0x0068000d
 8002bf8:	0010007e 	.word	0x0010007e
 8002bfc:	000d000d 	.word	0x000d000d
 8002c00:	000d000d 	.word	0x000d000d
 8002c04:	000d000d 	.word	0x000d000d
 8002c08:	00fc      	.short	0x00fc
    return 0;
 8002c0a:	2000      	movs	r0, #0
}
 8002c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    i2cMasterTransmitTimeout(&I2CD2, u8x8_GetI2CAddress(u8x8) >> 1, buffer, buf_idx, NULL, 0, TIME_INFINITE);
 8002c10:	4b9d      	ldr	r3, [pc, #628]	; (8002e88 <u8x8_byte_i2c+0x2a8>)
 8002c12:	f893 c000 	ldrb.w	ip, [r3]
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
  msg_t rdymsg;

  osalDbgCheck((i2cp != NULL) &&
 8002c16:	f1bc 0f00 	cmp.w	ip, #0
 8002c1a:	f000 80e8 	beq.w	8002dee <u8x8_byte_i2c+0x20e>
 8002c1e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002c22:	2030      	movs	r0, #48	; 0x30
 8002c24:	f380 8811 	msr	BASEPRI, r0
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002c28:	4c98      	ldr	r4, [pc, #608]	; (8002e8c <u8x8_byte_i2c+0x2ac>)
 8002c2a:	e9d4 3122 	ldrd	r3, r1, [r4, #136]	; 0x88
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	d143      	bne.n	8002cba <u8x8_byte_i2c+0xda>
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8002c32:	4e97      	ldr	r6, [pc, #604]	; (8002e90 <u8x8_byte_i2c+0x2b0>)
  oip->dbg.lock_cnt = (cnt_t)0;
 8002c34:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8002c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c3c:	8432      	strh	r2, [r6, #32]
  i2cp->state = I2C_ACTIVE_TX;
 8002c3e:	2203      	movs	r2, #3
  I2C_TypeDef *dp = i2cp->i2c;
 8002c40:	f8d6 e034 	ldr.w	lr, [r6, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 8002c44:	60b3      	str	r3, [r6, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002c46:	7032      	strb	r2, [r6, #0]
 8002c48:	f383 8811 	msr	BASEPRI, r3

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002c4c:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002c4e:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 8002c50:	6811      	ldr	r1, [r2, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002c52:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8002c54:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8002e9c <u8x8_byte_i2c+0x2bc>
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002c58:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002c5a:	600f      	str	r7, [r1, #0]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002c5c:	6a77      	ldr	r7, [r6, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8002c5e:	f8c1 800c 	str.w	r8, [r1, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8002c62:	f8c1 c004 	str.w	ip, [r1, #4]
 8002c66:	498b      	ldr	r1, [pc, #556]	; (8002e94 <u8x8_byte_i2c+0x2b4>)
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002c68:	6017      	str	r7, [r2, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8002c6a:	60d3      	str	r3, [r2, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8002c6c:	6053      	str	r3, [r2, #4]
 8002c6e:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 8002c70:	f380 8811 	msr	BASEPRI, r0
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002c74:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002c78:	b9fa      	cbnz	r2, 8002cba <u8x8_byte_i2c+0xda>
 8002c7a:	4680      	mov	r8, r0
  oip->dbg.lock_cnt = (cnt_t)0;
 8002c7c:	4694      	mov	ip, r2
  oip->dbg.lock_cnt = (cnt_t)1;
 8002c7e:	2001      	movs	r0, #1
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002c80:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002c84:	b9cb      	cbnz	r3, 8002cba <u8x8_byte_i2c+0xda>
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8002c86:	f8de 3018 	ldr.w	r3, [lr, #24]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002c8a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8002c8e:	079b      	lsls	r3, r3, #30
 8002c90:	d404      	bmi.n	8002c9c <u8x8_byte_i2c+0xbc>
 8002c92:	f8de 3000 	ldr.w	r3, [lr]
 8002c96:	059b      	lsls	r3, r3, #22
 8002c98:	f140 8116 	bpl.w	8002ec8 <u8x8_byte_i2c+0x2e8>
 8002c9c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8002c9e:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8002ca0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ca4:	d271      	bcs.n	8002d8a <u8x8_byte_i2c+0x1aa>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002ca6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8002caa:	f38c 8811 	msr	BASEPRI, ip
 8002cae:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002cb2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0e2      	beq.n	8002c80 <u8x8_byte_i2c+0xa0>
    chSysHalt("SV#4");
 8002cba:	4877      	ldr	r0, [pc, #476]	; (8002e98 <u8x8_byte_i2c+0x2b8>)
 8002cbc:	f7fd fff8 	bl	8000cb0 <chSysHalt>
    while( arg_int > 0 )
 8002cc0:	2a00      	cmp	r2, #0
 8002cc2:	f000 8091 	beq.w	8002de8 <u8x8_byte_i2c+0x208>
 8002cc6:	4f70      	ldr	r7, [pc, #448]	; (8002e88 <u8x8_byte_i2c+0x2a8>)
 8002cc8:	4d74      	ldr	r5, [pc, #464]	; (8002e9c <u8x8_byte_i2c+0x2bc>)
 8002cca:	f897 c000 	ldrb.w	ip, [r7]
 8002cce:	189e      	adds	r6, r3, r2
 8002cd0:	ebac 0403 	sub.w	r4, ip, r3
      buffer[buf_idx++] = *data;
 8002cd4:	1919      	adds	r1, r3, r4
 8002cd6:	7818      	ldrb	r0, [r3, #0]
 8002cd8:	b2c9      	uxtb	r1, r1
      data++;
 8002cda:	3301      	adds	r3, #1
    while( arg_int > 0 )
 8002cdc:	429e      	cmp	r6, r3
      buffer[buf_idx++] = *data;
 8002cde:	5468      	strb	r0, [r5, r1]
    while( arg_int > 0 )
 8002ce0:	d1f8      	bne.n	8002cd4 <u8x8_byte_i2c+0xf4>
      buffer[buf_idx++] = *data;
 8002ce2:	4462      	add	r2, ip
 8002ce4:	703a      	strb	r2, [r7, #0]
  return 1;
 8002ce6:	2001      	movs	r0, #1
}
 8002ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf_idx = 0;
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <u8x8_byte_i2c+0x2a8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
  return 1;
 8002cf2:	2001      	movs	r0, #1
}
 8002cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf8:	2330      	movs	r3, #48	; 0x30
 8002cfa:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002cfe:	4c63      	ldr	r4, [pc, #396]	; (8002e8c <u8x8_byte_i2c+0x2ac>)
 8002d00:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 8002d04:	431a      	orrs	r2, r3
 8002d06:	d1d8      	bne.n	8002cba <u8x8_byte_i2c+0xda>
  i2cp->config = config;
 8002d08:	4e61      	ldr	r6, [pc, #388]	; (8002e90 <u8x8_byte_i2c+0x2b0>)
 8002d0a:	4965      	ldr	r1, [pc, #404]	; (8002ea0 <u8x8_byte_i2c+0x2c0>)
  if (i2cp->state == I2C_STOP) {
 8002d0c:	7833      	ldrb	r3, [r6, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8002d0e:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8002d10:	6071      	str	r1, [r6, #4]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002d12:	2001      	movs	r0, #1
  if (i2cp->state == I2C_STOP) {
 8002d14:	4283      	cmp	r3, r0
 8002d16:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8002d1a:	d06b      	beq.n	8002df4 <u8x8_byte_i2c+0x214>
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002d1c:	e9d6 800b 	ldrd	r8, r0, [r6, #44]	; 0x2c
 8002d20:	6801      	ldr	r1, [r0, #0]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002d22:	f8d8 7000 	ldr.w	r7, [r8]
 8002d26:	f105 0310 	add.w	r3, r5, #16
 8002d2a:	60bb      	str	r3, [r7, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002d2c:	608b      	str	r3, [r1, #8]
  dp->CR1 = I2C_CR1_SWRST;
 8002d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d32:	602b      	str	r3, [r5, #0]
  dp->CR1 = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	602b      	str	r3, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002d38:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002d3c:	606b      	str	r3, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002d3e:	686b      	ldr	r3, [r5, #4]
 8002d40:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8002d44:	400b      	ands	r3, r1
 8002d46:	606b      	str	r3, [r5, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002d48:	686b      	ldr	r3, [r5, #4]
 8002d4a:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8002d4e:	606b      	str	r3, [r5, #4]
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8002d50:	2310      	movs	r3, #16
 8002d52:	622b      	str	r3, [r5, #32]
  dp->CCR = regCCR;
 8002d54:	f248 032a 	movw	r3, #32810	; 0x802a
 8002d58:	61eb      	str	r3, [r5, #28]
  regCR1 = dp->CR1;
 8002d5a:	6829      	ldr	r1, [r5, #0]
  dp->CR1 = regCR1;
 8002d5c:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8002d60:	400b      	ands	r3, r1
 8002d62:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_PE;
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	602b      	str	r3, [r5, #0]
    i2cp->state = I2C_READY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	7033      	strb	r3, [r6, #0]
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002d70:	2a00      	cmp	r2, #0
 8002d72:	f040 8083 	bne.w	8002e7c <u8x8_byte_i2c+0x29c>
 8002d76:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	dd7e      	ble.n	8002e7c <u8x8_byte_i2c+0x29c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002d7e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8002d82:	f382 8811 	msr	BASEPRI, r2
  return 1;
 8002d86:	2001      	movs	r0, #1
  return msg;
 8002d88:	e740      	b.n	8002c0c <u8x8_byte_i2c+0x2c>
      dmaStreamDisable(i2cp->dmatx);
 8002d8a:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8002d8c:	680a      	ldr	r2, [r1, #0]
 8002d8e:	6813      	ldr	r3, [r2, #0]
 8002d90:	f023 031f 	bic.w	r3, r3, #31
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	07d8      	lsls	r0, r3, #31
 8002d9a:	d4fc      	bmi.n	8002d96 <u8x8_byte_i2c+0x1b6>
 8002d9c:	7a48      	ldrb	r0, [r1, #9]
 8002d9e:	684a      	ldr	r2, [r1, #4]
      dmaStreamDisable(i2cp->dmarx);
 8002da0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
      dmaStreamDisable(i2cp->dmatx);
 8002da2:	233d      	movs	r3, #61	; 0x3d
 8002da4:	4083      	lsls	r3, r0
 8002da6:	6013      	str	r3, [r2, #0]
      dmaStreamDisable(i2cp->dmarx);
 8002da8:	680a      	ldr	r2, [r1, #0]
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	f023 031f 	bic.w	r3, r3, #31
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	07db      	lsls	r3, r3, #31
 8002db6:	d4fc      	bmi.n	8002db2 <u8x8_byte_i2c+0x1d2>
 8002db8:	684a      	ldr	r2, [r1, #4]
 8002dba:	7a49      	ldrb	r1, [r1, #9]
 8002dbc:	233d      	movs	r3, #61	; 0x3d
 8002dbe:	408b      	lsls	r3, r1
 8002dc0:	6013      	str	r3, [r2, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 8002dc2:	2205      	movs	r2, #5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002dc4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002dc8:	7032      	strb	r2, [r6, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d156      	bne.n	8002e7c <u8x8_byte_i2c+0x29c>
 8002dce:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	dd52      	ble.n	8002e7c <u8x8_byte_i2c+0x29c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002dd6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002dda:	f383 8811 	msr	BASEPRI, r3
    global = u8x8_GetI2CAddress(u8x8) >> 1;
 8002dde:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002de2:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <u8x8_byte_i2c+0x2c4>)
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	6013      	str	r3, [r2, #0]
  return 1;
 8002de8:	2001      	movs	r0, #1
}
 8002dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  osalDbgCheck((i2cp != NULL) &&
 8002dee:	482e      	ldr	r0, [pc, #184]	; (8002ea8 <u8x8_byte_i2c+0x2c8>)
 8002df0:	f7fd ff5e 	bl	8000cb0 <chSysHalt>
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002df4:	f240 4316 	movw	r3, #1046	; 0x416
 8002df8:	f240 4256 	movw	r2, #1110	; 0x456
 8002dfc:	e9c6 3209 	strd	r3, r2, [r6, #36]	; 0x24
      rccResetI2C2();
 8002e00:	4f2a      	ldr	r7, [pc, #168]	; (8002eac <u8x8_byte_i2c+0x2cc>)
 8002e02:	492b      	ldr	r1, [pc, #172]	; (8002eb0 <u8x8_byte_i2c+0x2d0>)
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	2002      	movs	r0, #2
 8002e16:	6a3b      	ldr	r3, [r7, #32]
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8002e18:	f7fe fa9a 	bl	8001350 <dmaStreamAllocI.part.0.constprop.0>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002e1c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C2_RX_DMA_STREAM,
 8002e20:	62f0      	str	r0, [r6, #44]	; 0x2c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	4680      	mov	r8, r0
 8002e26:	db2c      	blt.n	8002e82 <u8x8_byte_i2c+0x2a2>
 8002e28:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	dd28      	ble.n	8002e82 <u8x8_byte_i2c+0x2a2>
 8002e30:	4920      	ldr	r1, [pc, #128]	; (8002eb4 <u8x8_byte_i2c+0x2d4>)
 8002e32:	2007      	movs	r0, #7
 8002e34:	f7fe fa8c 	bl	8001350 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableI2C2(true);
 8002e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C2_TX_DMA_STREAM,
 8002e3a:	6330      	str	r0, [r6, #48]	; 0x30
      rccEnableI2C2(true);
 8002e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e40:	643b      	str	r3, [r7, #64]	; 0x40
 8002e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e48:	663b      	str	r3, [r7, #96]	; 0x60
 8002e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <u8x8_byte_i2c+0x2d8>)
 8002e4e:	2250      	movs	r2, #80	; 0x50
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e50:	2102      	movs	r1, #2
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002e52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e56:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e5a:	6059      	str	r1, [r3, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002e5c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002e60:	2204      	movs	r2, #4
 8002e62:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002e66:	605a      	str	r2, [r3, #4]
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 8002e68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e6a:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <u8x8_byte_i2c+0x2dc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	6273      	str	r3, [r6, #36]	; 0x24
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 8002e70:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002e72:	4313      	orrs	r3, r2
 8002e74:	62b3      	str	r3, [r6, #40]	; 0x28
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002e76:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002e7a:	e751      	b.n	8002d20 <u8x8_byte_i2c+0x140>
    chSysHalt("SV#5");
 8002e7c:	4810      	ldr	r0, [pc, #64]	; (8002ec0 <u8x8_byte_i2c+0x2e0>)
 8002e7e:	f7fd ff17 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#10");
 8002e82:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <u8x8_byte_i2c+0x2e4>)
 8002e84:	f7fd ff14 	bl	8000cb0 <chSysHalt>
 8002e88:	20000dec 	.word	0x20000dec
 8002e8c:	20000e10 	.word	0x20000e10
 8002e90:	2000087c 	.word	0x2000087c
 8002e94:	40000c00 	.word	0x40000c00
 8002e98:	08006448 	.word	0x08006448
 8002e9c:	20000df0 	.word	0x20000df0
 8002ea0:	0800680c 	.word	0x0800680c
 8002ea4:	2000119c 	.word	0x2000119c
 8002ea8:	080066a4 	.word	0x080066a4
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08001d81 	.word	0x08001d81
 8002eb4:	08000cd1 	.word	0x08000cd1
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	0e030000 	.word	0x0e030000
 8002ec0:	08006470 	.word	0x08006470
 8002ec4:	08006440 	.word	0x08006440

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8002ec8:	f8de 3004 	ldr.w	r3, [lr, #4]
  return __sch_get_currthread();
 8002ecc:	68e7      	ldr	r7, [r4, #12]
 8002ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed2:	f8ce 3004 	str.w	r3, [lr, #4]
  dp->CR1 |= I2C_CR1_START;
 8002ed6:	f8de 3000 	ldr.w	r3, [lr]
 8002eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ede:	f8ce 3000 	str.w	r3, [lr]
  tp->u.wttrp = trp;
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <u8x8_byte_i2c+0x358>)
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    chSchGoSleepS(newstate);
 8002ee6:	2003      	movs	r0, #3
  *trp = tp;
 8002ee8:	61f7      	str	r7, [r6, #28]
 8002eea:	f7ff fa89 	bl	8002400 <chSchGoSleepS>
  return tp->u.rdymsg;
 8002eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28

  /* Waits for the operation completion or a timeout.*/
  msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
  if (msg != MSG_OK) {
 8002ef0:	b1e9      	cbz	r1, 8002f2e <u8x8_byte_i2c+0x34e>
    dmaStreamDisable(i2cp->dmatx);
 8002ef2:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8002ef4:	6802      	ldr	r2, [r0, #0]
 8002ef6:	6813      	ldr	r3, [r2, #0]
 8002ef8:	f023 031f 	bic.w	r3, r3, #31
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	07df      	lsls	r7, r3, #31
 8002f02:	d4fc      	bmi.n	8002efe <u8x8_byte_i2c+0x31e>
 8002f04:	7a47      	ldrb	r7, [r0, #9]
 8002f06:	6842      	ldr	r2, [r0, #4]
    dmaStreamDisable(i2cp->dmarx);
 8002f08:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    dmaStreamDisable(i2cp->dmatx);
 8002f0a:	233d      	movs	r3, #61	; 0x3d
 8002f0c:	40bb      	lsls	r3, r7
 8002f0e:	6013      	str	r3, [r2, #0]
    dmaStreamDisable(i2cp->dmarx);
 8002f10:	6802      	ldr	r2, [r0, #0]
 8002f12:	6813      	ldr	r3, [r2, #0]
 8002f14:	f023 031f 	bic.w	r3, r3, #31
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	07db      	lsls	r3, r3, #31
 8002f1e:	d4fc      	bmi.n	8002f1a <u8x8_byte_i2c+0x33a>
 8002f20:	7a47      	ldrb	r7, [r0, #9]
 8002f22:	6842      	ldr	r2, [r0, #4]
 8002f24:	233d      	movs	r3, #61	; 0x3d
 8002f26:	40bb      	lsls	r3, r7
  if (rdymsg == MSG_TIMEOUT) {
 8002f28:	3101      	adds	r1, #1
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	d001      	beq.n	8002f32 <u8x8_byte_i2c+0x352>
  }
  else {
    i2cp->state = I2C_READY;
 8002f2e:	2202      	movs	r2, #2
 8002f30:	e748      	b.n	8002dc4 <u8x8_byte_i2c+0x1e4>
    i2cp->state = I2C_LOCKED;
 8002f32:	2205      	movs	r2, #5
 8002f34:	e746      	b.n	8002dc4 <u8x8_byte_i2c+0x1e4>
 8002f36:	bf00      	nop
 8002f38:	20000898 	.word	0x20000898
 8002f3c:	00000000 	.word	0x00000000

08002f40 <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002f40:	6802      	ldr	r2, [r0, #0]
  cnt *= 8;
 8002f42:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002f46:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002f48:	6b40      	ldr	r0, [r0, #52]	; 0x34
  cnt *= 8;
 8002f4a:	fb12 f203 	smulbb	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	f003 b895 	b.w	8006080 <memset>
 8002f56:	bf00      	nop
	...

08002f60 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
	...

08002f70 <__late_init>:
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
	...

08002f80 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8002f80:	e7fe      	b.n	8002f80 <__default_exit>
 8002f82:	bf00      	nop
	...

08002f90 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	4d15      	ldr	r5, [pc, #84]	; (8002fe8 <__init_ram_areas+0x58>)
 8002f94:	4f15      	ldr	r7, [pc, #84]	; (8002fec <__init_ram_areas+0x5c>)
 8002f96:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <__init_ram_areas+0x60>)
 8002f98:	4816      	ldr	r0, [pc, #88]	; (8002ff4 <__init_ram_areas+0x64>)
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <__init_ram_areas+0x68>)
 8002f9c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8002fa0:	4281      	cmp	r1, r0
 8002fa2:	d90d      	bls.n	8002fc0 <__init_ram_areas+0x30>
 8002fa4:	3a04      	subs	r2, #4
 8002fa6:	4603      	mov	r3, r0
      *p = *tp;
 8002fa8:	f852 6f04 	ldr.w	r6, [r2, #4]!
 8002fac:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	d8f9      	bhi.n	8002fa8 <__init_ram_areas+0x18>
      p++;
 8002fb4:	1e4b      	subs	r3, r1, #1
 8002fb6:	1a1b      	subs	r3, r3, r0
 8002fb8:	f023 0303 	bic.w	r3, r3, #3
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002fc0:	4287      	cmp	r7, r0
 8002fc2:	d907      	bls.n	8002fd4 <__init_ram_areas+0x44>
      *p = 0;
 8002fc4:	1e7a      	subs	r2, r7, #1
 8002fc6:	1a12      	subs	r2, r2, r0
 8002fc8:	f022 0203 	bic.w	r2, r2, #3
 8002fcc:	3204      	adds	r2, #4
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f003 f856 	bl	8006080 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d005      	beq.n	8002fe4 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8002fd8:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 8002fdc:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 8002fe0:	3510      	adds	r5, #16
 8002fe2:	e7dd      	b.n	8002fa0 <__init_ram_areas+0x10>
#endif
}
 8002fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08006854 	.word	0x08006854
 8002fec:	20002718 	.word	0x20002718
 8002ff0:	20002718 	.word	0x20002718
 8002ff4:	20002718 	.word	0x20002718
 8002ff8:	08008288 	.word	0x08008288
 8002ffc:	00000000 	.word	0x00000000

08003000 <__dbg_check_unlock>:
void __dbg_check_unlock(void) {
 8003000:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <__dbg_check_unlock+0x20>)
 8003004:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003008:	b932      	cbnz	r2, 8003018 <__dbg_check_unlock+0x18>
 800300a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800300e:	2900      	cmp	r1, #0
 8003010:	dd02      	ble.n	8003018 <__dbg_check_unlock+0x18>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003016:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <__dbg_check_unlock+0x24>)
 800301a:	f7fd fe49 	bl	8000cb0 <chSysHalt>
 800301e:	bf00      	nop
 8003020:	20000e10 	.word	0x20000e10
 8003024:	08006470 	.word	0x08006470
	...

08003030 <__dbg_check_lock>:
void __dbg_check_lock(void) {
 8003030:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <__dbg_check_lock+0x1c>)
 8003034:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 8003038:	430a      	orrs	r2, r1
 800303a:	d103      	bne.n	8003044 <__dbg_check_lock+0x14>
  oip->dbg.lock_cnt = (cnt_t)1;
 800303c:	2201      	movs	r2, #1
 800303e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003042:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <__dbg_check_lock+0x20>)
 8003046:	f7fd fe33 	bl	8000cb0 <chSysHalt>
 800304a:	bf00      	nop
 800304c:	20000e10 	.word	0x20000e10
 8003050:	08006448 	.word	0x08006448
	...

08003060 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	4606      	mov	r6, r0
 8003064:	460d      	mov	r5, r1
 8003066:	4614      	mov	r4, r2
 8003068:	2330      	movs	r3, #48	; 0x30
 800306a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 800306e:	f7ff ffdf 	bl	8003030 <__dbg_check_lock>
  tp = threadref(((uint8_t *)wsp + size -
 8003072:	f1a5 0c48 	sub.w	ip, r5, #72	; 0x48
 8003076:	eb06 030c 	add.w	r3, r6, ip
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800307a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800307e:	60da      	str	r2, [r3, #12]
 8003080:	2100      	movs	r1, #0
  tp->refs              = (trefs_t)1;
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003088:	e943 4109 	strd	r4, r1, [r3, #-36]	; 0x24
  tp->epending          = (eventmask_t)0;
 800308c:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
  tp->name              = name;
 8003090:	4a2d      	ldr	r2, [pc, #180]	; (8003148 <chThdCreateStatic.constprop.0.isra.0+0xe8>)
 8003092:	61da      	str	r2, [r3, #28]
  tp->state             = CH_STATE_WTSTART;
 8003094:	2102      	movs	r1, #2
  tp->owner             = oip;
 8003096:	4a2d      	ldr	r2, [pc, #180]	; (800314c <chThdCreateStatic.constprop.0.isra.0+0xec>)
  tp->state             = CH_STATE_WTSTART;
 8003098:	8499      	strh	r1, [r3, #36]	; 0x24
  tp->hdr.pqueue.prio   = prio;
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	6099      	str	r1, [r3, #8]
  p->prev       = qp->prev;
 800309e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80030a0:	4f2b      	ldr	r7, [pc, #172]	; (8003150 <chThdCreateStatic.constprop.0.isra.0+0xf0>)
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80030a2:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  tp->realprio          = prio;
 80030a6:	6419      	str	r1, [r3, #64]	; 0x40
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80030a8:	f843 7c04 	str.w	r7, [r3, #-4]
  REG_INSERT(oip, tp);
 80030ac:	f103 0010 	add.w	r0, r3, #16
  ch_queue_init(&tp->msgqueue);
 80030b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
  p->next       = qp;
 80030b4:	f102 0728 	add.w	r7, r2, #40	; 0x28
  tp->wabase = (stkalign_t *)wsp;
 80030b8:	621e      	str	r6, [r3, #32]
  tp->owner             = oip;
 80030ba:	619a      	str	r2, [r3, #24]
  p->prev       = qp->prev;
 80030bc:	615c      	str	r4, [r3, #20]
  p->next       = qp;
 80030be:	611f      	str	r7, [r3, #16]
  p->prev->next = p;
 80030c0:	6020      	str	r0, [r4, #0]
  qp->prev = qp;
 80030c2:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
  ch_list_init(&tp->waiting);
 80030c6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  qp->prev      = p;
 80030ca:	62d0      	str	r0, [r2, #44]	; 0x2c
  lp->next = lp;
 80030cc:	62d9      	str	r1, [r3, #44]	; 0x2c
 80030ce:	bb45      	cbnz	r5, 8003122 <chThdCreateStatic.constprop.0.isra.0+0xc2>
 80030d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80030d4:	2900      	cmp	r1, #0
 80030d6:	dd24      	ble.n	8003122 <chThdCreateStatic.constprop.0.isra.0+0xc2>
  thread_t *otp = __instance_get_currthread(oip);
 80030d8:	68d1      	ldr	r1, [r2, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80030da:	6898      	ldr	r0, [r3, #8]
 80030dc:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 80030de:	629d      	str	r5, [r3, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	d924      	bls.n	800312e <chThdCreateStatic.constprop.0.isra.0+0xce>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 80030e4:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 80030e6:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
    pqp = pqp->next;
 80030ea:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio > p->prio));
 80030ec:	6885      	ldr	r5, [r0, #8]
 80030ee:	42ac      	cmp	r4, r5
 80030f0:	d3fb      	bcc.n	80030ea <chThdCreateStatic.constprop.0.isra.0+0x8a>
  p->prev       = pqp->prev;
 80030f2:	6844      	ldr	r4, [r0, #4]
 80030f4:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 80030f8:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 80030fa:	2401      	movs	r4, #1
  pqp->prev     = p;
 80030fc:	6041      	str	r1, [r0, #4]
 80030fe:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8003102:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003104:	f3ef 8209 	mrs	r2, PSP
    chSysSwitch(ntp, otp);
 8003108:	6a08      	ldr	r0, [r1, #32]
 800310a:	3a64      	subs	r2, #100	; 0x64
 800310c:	4290      	cmp	r0, r2
 800310e:	d80b      	bhi.n	8003128 <chThdCreateStatic.constprop.0.isra.0+0xc8>
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f8f7 	bl	8000304 <__port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  __dbg_check_unlock();
 8003116:	f7ff ff73 	bl	8003000 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800311a:	2300      	movs	r3, #0
 800311c:	f383 8811 	msr	BASEPRI, r3
}
 8003120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#11");
 8003122:	480c      	ldr	r0, [pc, #48]	; (8003154 <chThdCreateStatic.constprop.0.isra.0+0xf4>)
 8003124:	f7fd fdc4 	bl	8000cb0 <chSysHalt>
 8003128:	480b      	ldr	r0, [pc, #44]	; (8003158 <chThdCreateStatic.constprop.0.isra.0+0xf8>)
 800312a:	f7fd fdc1 	bl	8000cb0 <chSysHalt>
  tp->state = CH_STATE_READY;
 800312e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
    pqp = pqp->next;
 8003132:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003134:	6891      	ldr	r1, [r2, #8]
 8003136:	4288      	cmp	r0, r1
 8003138:	d9fb      	bls.n	8003132 <chThdCreateStatic.constprop.0.isra.0+0xd2>
  p->prev       = pqp->prev;
 800313a:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 800313c:	f846 200c 	str.w	r2, [r6, ip]
  p->prev       = pqp->prev;
 8003140:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 8003142:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 8003144:	6053      	str	r3, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003146:	e7e6      	b.n	8003116 <chThdCreateStatic.constprop.0.isra.0+0xb6>
 8003148:	08006478 	.word	0x08006478
 800314c:	20000e10 	.word	0x20000e10
 8003150:	0800031d 	.word	0x0800031d
 8003154:	08006458 	.word	0x08006458
 8003158:	08006460 	.word	0x08006460
 800315c:	00000000 	.word	0x00000000

08003160 <sdStart.isra.0>:
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	4604      	mov	r4, r0
 8003164:	460d      	mov	r5, r1
 8003166:	2330      	movs	r3, #48	; 0x30
 8003168:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 800316c:	f7ff ff60 	bl	8003030 <__dbg_check_lock>
  if (sdp->state == SD_STOP) {
 8003170:	7a23      	ldrb	r3, [r4, #8]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d035      	beq.n	80031e2 <sdStart.isra.0+0x82>
  USART_TypeDef *u = sdp->usart;
 8003176:	e9d4 321d 	ldrd	r3, r2, [r4, #116]	; 0x74
  if (config->cr1 & USART_CR1_OVER8)
 800317a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800317e:	6829      	ldr	r1, [r5, #0]
  if (config->cr1 & USART_CR1_OVER8)
 8003180:	2800      	cmp	r0, #0
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 8003182:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8003186:	fbb2 f2f1 	udiv	r2, r2, r1
  if (config->cr1 & USART_CR1_OVER8)
 800318a:	88a9      	ldrh	r1, [r5, #4]
 800318c:	da05      	bge.n	800319a <sdStart.isra.0+0x3a>
    brr = ((brr & ~7) * 2) | (brr & 7);
 800318e:	f022 0007 	bic.w	r0, r2, #7
 8003192:	f002 0207 	and.w	r2, r2, #7
 8003196:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  u->BRR = brr;
 800319a:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800319c:	88e8      	ldrh	r0, [r5, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800319e:	892a      	ldrh	r2, [r5, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80031a0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80031a4:	f042 0201 	orr.w	r2, r2, #1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80031a8:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80031aa:	615a      	str	r2, [r3, #20]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80031ac:	f441 5204 	orr.w	r2, r1, #8448	; 0x2100
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 80031b0:	f401 51a0 	and.w	r1, r1, #5120	; 0x1400
    sdp->rxmask = 0xFF;
 80031b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80031b8:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->SR = 0;
 80031bc:	f04f 0500 	mov.w	r5, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80031c0:	60da      	str	r2, [r3, #12]
    sdp->rxmask = 0xFF;
 80031c2:	bf08      	it	eq
 80031c4:	217f      	moveq	r1, #127	; 0x7f
  u->SR = 0;
 80031c6:	601d      	str	r5, [r3, #0]
    sdp->rxmask = 0xFF;
 80031c8:	bf18      	it	ne
 80031ca:	21ff      	movne	r1, #255	; 0xff
    sdp->state = SD_READY;
 80031cc:	2202      	movs	r2, #2
  (void)u->SR;  /* SR reset step 1.*/
 80031ce:	6818      	ldr	r0, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
 80031d6:	7222      	strb	r2, [r4, #8]
  __dbg_check_unlock();
 80031d8:	f7ff ff12 	bl	8003000 <__dbg_check_unlock>
 80031dc:	f385 8811 	msr	BASEPRI, r5
}
 80031e0:	bd38      	pop	{r3, r4, r5, pc}
    if (&SD1 == sdp) {
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <sdStart.isra.0+0xbc>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	d00d      	beq.n	8003204 <sdStart.isra.0+0xa4>
    if (&SD2 == sdp) {
 80031e8:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <sdStart.isra.0+0xc0>)
 80031ea:	429c      	cmp	r4, r3
 80031ec:	d1c3      	bne.n	8003176 <sdStart.isra.0+0x16>
      rccEnableUSART2(true);
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <sdStart.isra.0+0xc4>)
 80031f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
 80031f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
 8003200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003202:	e7b8      	b.n	8003176 <sdStart.isra.0+0x16>
      rccEnableUSART1(true);
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <sdStart.isra.0+0xc4>)
 8003206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003208:	f042 0210 	orr.w	r2, r2, #16
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
 800320e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003210:	f042 0210 	orr.w	r2, r2, #16
 8003214:	665a      	str	r2, [r3, #100]	; 0x64
 8003216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003218:	e7ad      	b.n	8003176 <sdStart.isra.0+0x16>
 800321a:	bf00      	nop
 800321c:	200008b4 	.word	0x200008b4
 8003220:	20000934 	.word	0x20000934
 8003224:	40023800 	.word	0x40023800
	...

08003230 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	2530      	movs	r5, #48	; 0x30
 8003234:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003238:	4c18      	ldr	r4, [pc, #96]	; (800329c <VectorD4+0x6c>)
 800323a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800323e:	2b00      	cmp	r3, #0
 8003240:	db22      	blt.n	8003288 <VectorD4+0x58>
 8003242:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003246:	b9fa      	cbnz	r2, 8003288 <VectorD4+0x58>
  oip->dbg.isr_cnt++;
 8003248:	3301      	adds	r3, #1
 800324a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800324e:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
 8003252:	4813      	ldr	r0, [pc, #76]	; (80032a0 <VectorD4+0x70>)
 8003254:	f7fe ff6c 	bl	8002130 <sd_lld_serve_interrupt>
 8003258:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800325c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003260:	2b00      	cmp	r3, #0
 8003262:	dd14      	ble.n	800328e <VectorD4+0x5e>
 8003264:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003268:	b98a      	cbnz	r2, 800328e <VectorD4+0x5e>
  oip->dbg.isr_cnt--;
 800326a:	3b01      	subs	r3, #1
 800326c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003270:	f382 8811 	msr	BASEPRI, r2
 8003274:	f385 8811 	msr	BASEPRI, r5
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <VectorD4+0x74>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003280:	d108      	bne.n	8003294 <VectorD4+0x64>
 8003282:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8003286:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8003288:	4807      	ldr	r0, [pc, #28]	; (80032a8 <VectorD4+0x78>)
 800328a:	f7fd fd11 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 800328e:	4807      	ldr	r0, [pc, #28]	; (80032ac <VectorD4+0x7c>)
 8003290:	f7fd fd0e 	bl	8000cb0 <chSysHalt>
 8003294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003298:	f7ff bc7a 	b.w	8002b90 <__port_irq_epilogue.part.0>
 800329c:	20000e10 	.word	0x20000e10
 80032a0:	200008b4 	.word	0x200008b4
 80032a4:	e000ed00 	.word	0xe000ed00
 80032a8:	08006480 	.word	0x08006480
 80032ac:	08006488 	.word	0x08006488

080032b0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	2530      	movs	r5, #48	; 0x30
 80032b4:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80032b8:	4c18      	ldr	r4, [pc, #96]	; (800331c <VectorD8+0x6c>)
 80032ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db22      	blt.n	8003308 <VectorD8+0x58>
 80032c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80032c6:	b9fa      	cbnz	r2, 8003308 <VectorD8+0x58>
  oip->dbg.isr_cnt++;
 80032c8:	3301      	adds	r3, #1
 80032ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80032ce:	f382 8811 	msr	BASEPRI, r2

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 80032d2:	4813      	ldr	r0, [pc, #76]	; (8003320 <VectorD8+0x70>)
 80032d4:	f7fe ff2c 	bl	8002130 <sd_lld_serve_interrupt>
 80032d8:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80032dc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dd14      	ble.n	800330e <VectorD8+0x5e>
 80032e4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80032e8:	b98a      	cbnz	r2, 800330e <VectorD8+0x5e>
  oip->dbg.isr_cnt--;
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80032f0:	f382 8811 	msr	BASEPRI, r2
 80032f4:	f385 8811 	msr	BASEPRI, r5
 80032f8:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <VectorD8+0x74>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003300:	d108      	bne.n	8003314 <VectorD8+0x64>
 8003302:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8003306:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#8");
 8003308:	4807      	ldr	r0, [pc, #28]	; (8003328 <VectorD8+0x78>)
 800330a:	f7fd fcd1 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 800330e:	4807      	ldr	r0, [pc, #28]	; (800332c <VectorD8+0x7c>)
 8003310:	f7fd fcce 	bl	8000cb0 <chSysHalt>
 8003314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003318:	f7ff bc3a 	b.w	8002b90 <__port_irq_epilogue.part.0>
 800331c:	20000e10 	.word	0x20000e10
 8003320:	20000934 	.word	0x20000934
 8003324:	e000ed00 	.word	0xe000ed00
 8003328:	08006480 	.word	0x08006480
 800332c:	08006488 	.word	0x08006488

08003330 <VectorA8>:
/**
 * @brief   TIM1-TRG-COM, TIM11 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_TRGCO_TIM11_HANDLER) {
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	2330      	movs	r3, #48	; 0x30
 8003334:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003338:	4c26      	ldr	r4, [pc, #152]	; (80033d4 <VectorA8+0xa4>)
 800333a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800333e:	2b00      	cmp	r3, #0
 8003340:	db3d      	blt.n	80033be <VectorA8+0x8e>
 8003342:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003346:	2800      	cmp	r0, #0
 8003348:	d139      	bne.n	80033be <VectorA8+0x8e>
  oip->dbg.isr_cnt++;
 800334a:	3301      	adds	r3, #1
 800334c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003350:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8003354:	4d20      	ldr	r5, [pc, #128]	; (80033d8 <VectorA8+0xa8>)
 8003356:	68ea      	ldr	r2, [r5, #12]
 8003358:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800335a:	68d1      	ldr	r1, [r2, #12]
 800335c:	400b      	ands	r3, r1
 800335e:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 8003360:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8003362:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8003364:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8003366:	d418      	bmi.n	800339a <VectorA8+0x6a>
 8003368:	2230      	movs	r2, #48	; 0x30
 800336a:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800336e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003372:	2b00      	cmp	r3, #0
 8003374:	dd26      	ble.n	80033c4 <VectorA8+0x94>
 8003376:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800337a:	bb19      	cbnz	r1, 80033c4 <VectorA8+0x94>
  oip->dbg.isr_cnt--;
 800337c:	3b01      	subs	r3, #1
 800337e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003382:	f381 8811 	msr	BASEPRI, r1
 8003386:	f382 8811 	msr	BASEPRI, r2
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <VectorA8+0xac>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003392:	d11a      	bne.n	80033ca <VectorA8+0x9a>
 8003394:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8003398:	bd38      	pop	{r3, r4, r5, pc}
    _gpt_isr_invoke_cb(gptp);
 800339a:	782b      	ldrb	r3, [r5, #0]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <VectorA8+0x80>
 80033a0:	2302      	movs	r3, #2
 80033a2:	702b      	strb	r3, [r5, #0]
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 80033a4:	6010      	str	r0, [r2, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 80033a6:	6110      	str	r0, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 80033a8:	68d3      	ldr	r3, [r2, #12]
 80033aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ae:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 80033b0:	686b      	ldr	r3, [r5, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0d7      	beq.n	8003368 <VectorA8+0x38>
 80033b8:	4807      	ldr	r0, [pc, #28]	; (80033d8 <VectorA8+0xa8>)
 80033ba:	4798      	blx	r3
 80033bc:	e7d4      	b.n	8003368 <VectorA8+0x38>
    chSysHalt("SV#8");
 80033be:	4808      	ldr	r0, [pc, #32]	; (80033e0 <VectorA8+0xb0>)
 80033c0:	f7fd fc76 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 80033c4:	4807      	ldr	r0, [pc, #28]	; (80033e4 <VectorA8+0xb4>)
 80033c6:	f7fd fc73 	bl	8000cb0 <chSysHalt>
 80033ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033ce:	f7ff bbdf 	b.w	8002b90 <__port_irq_epilogue.part.0>
 80033d2:	bf00      	nop
 80033d4:	20000e10 	.word	0x20000e10
 80033d8:	2000086c 	.word	0x2000086c
 80033dc:	e000ed00 	.word	0xe000ed00
 80033e0:	08006480 	.word	0x08006480
 80033e4:	08006488 	.word	0x08006488
	...

080033f0 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 80033f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	2130      	movs	r1, #48	; 0x30
 80033f6:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80033fa:	4c70      	ldr	r4, [pc, #448]	; (80035bc <Vector108+0x1cc>)
 80033fc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003400:	2b00      	cmp	r3, #0
 8003402:	f2c0 808e 	blt.w	8003522 <Vector108+0x132>
 8003406:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800340a:	2a00      	cmp	r2, #0
 800340c:	f040 8089 	bne.w	8003522 <Vector108+0x132>
  oip->dbg.isr_cnt++;
 8003410:	3301      	adds	r3, #1
 8003412:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003416:	f382 8811 	msr	BASEPRI, r2
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 800341a:	4d69      	ldr	r5, [pc, #420]	; (80035c0 <Vector108+0x1d0>)
 800341c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800341e:	68ea      	ldr	r2, [r5, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8003424:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8003426:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8003428:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 800342a:	d41a      	bmi.n	8003462 <Vector108+0x72>
 800342c:	2230      	movs	r2, #48	; 0x30
 800342e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003432:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003436:	2b00      	cmp	r3, #0
 8003438:	dd70      	ble.n	800351c <Vector108+0x12c>
 800343a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800343e:	2900      	cmp	r1, #0
 8003440:	d16c      	bne.n	800351c <Vector108+0x12c>
  oip->dbg.isr_cnt--;
 8003442:	3b01      	subs	r3, #1
 8003444:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003448:	f381 8811 	msr	BASEPRI, r1
 800344c:	f382 8811 	msr	BASEPRI, r2
 8003450:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <Vector108+0x1d4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003458:	d169      	bne.n	800352e <Vector108+0x13e>
 800345a:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 800345e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003462:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003466:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800346a:	2b00      	cmp	r3, #0
 800346c:	dd5c      	ble.n	8003528 <Vector108+0x138>
 800346e:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
 8003472:	f1ba 0f00 	cmp.w	sl, #0
 8003476:	d157      	bne.n	8003528 <Vector108+0x138>
  oip->dbg.lock_cnt = (cnt_t)1;
 8003478:	2301      	movs	r3, #1
 800347a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 800347e:	f104 0b10 	add.w	fp, r4, #16
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8003482:	46d0      	mov	r8, sl
 8003484:	f04f 0930 	mov.w	r9, #48	; 0x30
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8003488:	6926      	ldr	r6, [r4, #16]
 800348a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800348c:	69e7      	ldr	r7, [r4, #28]
    if (nowdelta < vtp->dlist.delta) {
 800348e:	68b2      	ldr	r2, [r6, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8003490:	1bc8      	subs	r0, r1, r7
 8003492:	4290      	cmp	r0, r2
 8003494:	d35e      	bcc.n	8003554 <Vector108+0x164>
  return systime + (systime_t)interval;
 8003496:	4417      	add	r7, r2
  dlp->prev->next = dlp->next;
 8003498:	e9d6 3200 	ldrd	r3, r2, [r6]
    vtlp->lasttime = lasttime;
 800349c:	61e7      	str	r7, [r4, #28]
 800349e:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 80034a0:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 80034a2:	f8c6 a000 	str.w	sl, [r6]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	455b      	cmp	r3, fp
 80034aa:	d050      	beq.n	800354e <Vector108+0x15e>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80034ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	dd49      	ble.n	8003548 <Vector108+0x158>
  oip->dbg.lock_cnt = (cnt_t)0;
 80034b4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80034b8:	f388 8811 	msr	BASEPRI, r8
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 80034bc:	e9d6 3103 	ldrd	r3, r1, [r6, #12]
 80034c0:	4630      	mov	r0, r6
 80034c2:	4798      	blx	r3
 80034c4:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80034c8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	dd2b      	ble.n	8003528 <Vector108+0x138>
 80034d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80034d4:	bb42      	cbnz	r2, 8003528 <Vector108+0x138>

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 80034d6:	6973      	ldr	r3, [r6, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 80034d8:	2101      	movs	r1, #1
 80034da:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0d2      	beq.n	8003488 <Vector108+0x98>
 80034e2:	6a69      	ldr	r1, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80034e4:	eba1 0c07 	sub.w	ip, r1, r7
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 80034e8:	4563      	cmp	r3, ip
 80034ea:	d34c      	bcc.n	8003586 <Vector108+0x196>
  return (bool)(dlhp == dlhp->next);
 80034ec:	6920      	ldr	r0, [r4, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 80034ee:	4558      	cmp	r0, fp
 80034f0:	d021      	beq.n	8003536 <Vector108+0x146>
  while (likely(dlp->delta < delta)) {
 80034f2:	6882      	ldr	r2, [r0, #8]
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d904      	bls.n	8003502 <Vector108+0x112>
    dlp = dlp->next;
 80034f8:	6800      	ldr	r0, [r0, #0]
    delta -= dlp->delta;
 80034fa:	1a9b      	subs	r3, r3, r2
  while (likely(dlp->delta < delta)) {
 80034fc:	6882      	ldr	r2, [r0, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d3fa      	bcc.n	80034f8 <Vector108+0x108>
  dlp->delta      = delta;
 8003502:	60b3      	str	r3, [r6, #8]
  dlp->delta -= delta;
 8003504:	6882      	ldr	r2, [r0, #8]
  dlp->next       = dlhp;
 8003506:	6030      	str	r0, [r6, #0]
  dlp->delta -= delta;
 8003508:	1ad2      	subs	r2, r2, r3
  dlp->prev       = dlp->next->prev;
 800350a:	6843      	ldr	r3, [r0, #4]
 800350c:	6073      	str	r3, [r6, #4]
  dlp->prev->next = dlp;
 800350e:	601e      	str	r6, [r3, #0]
  dlhp->delta = (sysinterval_t)-1;
 8003510:	f04f 33ff 	mov.w	r3, #4294967295
  dlp->delta -= delta;
 8003514:	e9c0 6201 	strd	r6, r2, [r0, #4]
  dlhp->delta = (sysinterval_t)-1;
 8003518:	61a3      	str	r3, [r4, #24]
}
 800351a:	e7b3      	b.n	8003484 <Vector108+0x94>
    chSysHalt("SV#9");
 800351c:	482a      	ldr	r0, [pc, #168]	; (80035c8 <Vector108+0x1d8>)
 800351e:	f7fd fbc7 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#8");
 8003522:	482a      	ldr	r0, [pc, #168]	; (80035cc <Vector108+0x1dc>)
 8003524:	f7fd fbc4 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#6");
 8003528:	4829      	ldr	r0, [pc, #164]	; (80035d0 <Vector108+0x1e0>)
 800352a:	f7fd fbc1 	bl	8000cb0 <chSysHalt>
 800352e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003532:	f7ff bb2d 	b.w	8002b90 <__port_irq_epilogue.part.0>
        delay = vtp->reload - nowdelta;
 8003536:	1a5a      	subs	r2, r3, r1
 8003538:	443a      	add	r2, r7

        vt_insert_first(vtlp, vtp, now, delay);
 800353a:	4630      	mov	r0, r6
 800353c:	f7fe fd98 	bl	8002070 <vt_insert_first.constprop.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003540:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003544:	2b00      	cmp	r3, #0
 8003546:	dc14      	bgt.n	8003572 <Vector108+0x182>
    chSysHalt("SV#7");
 8003548:	4822      	ldr	r0, [pc, #136]	; (80035d4 <Vector108+0x1e4>)
 800354a:	f7fd fbb1 	bl	8000cb0 <chSysHalt>
  STM32_ST_TIM->DIER = 0U;
 800354e:	f8c5 a00c 	str.w	sl, [r5, #12]
 8003552:	e7ab      	b.n	80034ac <Vector108+0xbc>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8003554:	455e      	cmp	r6, fp
 8003556:	d00c      	beq.n	8003572 <Vector108+0x182>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8003558:	1a52      	subs	r2, r2, r1
 800355a:	19d3      	adds	r3, r2, r7
 800355c:	2b02      	cmp	r3, #2
  vtlp->lasttime += nowdelta;
 800355e:	61e1      	str	r1, [r4, #28]
  vtp->dlist.delta -= nowdelta;
 8003560:	60b3      	str	r3, [r6, #8]
  if (delay < currdelta) {
 8003562:	bf38      	it	cc
 8003564:	2302      	movcc	r3, #2
  return systime + (systime_t)interval;
 8003566:	18ca      	adds	r2, r1, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8003568:	636a      	str	r2, [r5, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800356a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800356c:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 800356e:	4299      	cmp	r1, r3
 8003570:	d212      	bcs.n	8003598 <Vector108+0x1a8>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003572:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003576:	2b00      	cmp	r3, #0
 8003578:	dde6      	ble.n	8003548 <Vector108+0x158>
  oip->dbg.lock_cnt = (cnt_t)0;
 800357a:	2300      	movs	r3, #0
 800357c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003580:	f383 8811 	msr	BASEPRI, r3
}
 8003584:	e752      	b.n	800342c <Vector108+0x3c>
  currcore->rfcu.mask |= mask;
 8003586:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 8003588:	6920      	ldr	r0, [r4, #16]
 800358a:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 800358e:	4558      	cmp	r0, fp
 8003590:	6363      	str	r3, [r4, #52]	; 0x34
 8003592:	d0d2      	beq.n	800353a <Vector108+0x14a>
 8003594:	4663      	mov	r3, ip
 8003596:	e7ac      	b.n	80034f2 <Vector108+0x102>
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8003598:	4909      	ldr	r1, [pc, #36]	; (80035c0 <Vector108+0x1d0>)
    if (likely(nowdelta < delay)) {
 800359a:	2302      	movs	r3, #2
    currdelta += (sysinterval_t)1;
 800359c:	3301      	adds	r3, #1
  return systime + (systime_t)interval;
 800359e:	18d0      	adds	r0, r2, r3
 80035a0:	6348      	str	r0, [r1, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 80035a2:	6a48      	ldr	r0, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80035a4:	1a82      	subs	r2, r0, r2
    if (likely(nowdelta < delay)) {
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d206      	bcs.n	80035b8 <Vector108+0x1c8>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d9e1      	bls.n	8003572 <Vector108+0x182>
 80035ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6363      	str	r3, [r4, #52]	; 0x34
}
 80035b6:	e7dc      	b.n	8003572 <Vector108+0x182>
 80035b8:	4602      	mov	r2, r0
 80035ba:	e7ef      	b.n	800359c <Vector108+0x1ac>
 80035bc:	20000e10 	.word	0x20000e10
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	e000ed00 	.word	0xe000ed00
 80035c8:	08006488 	.word	0x08006488
 80035cc:	08006480 	.word	0x08006480
 80035d0:	08006438 	.word	0x08006438
 80035d4:	08006450 	.word	0x08006450
	...

080035e0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	2330      	movs	r3, #48	; 0x30
 80035e4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80035e8:	4c4b      	ldr	r4, [pc, #300]	; (8003718 <Vector88+0x138>)
 80035ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f2c0 8081 	blt.w	80036f6 <Vector88+0x116>
 80035f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d17c      	bne.n	80036f6 <Vector88+0x116>
  oip->dbg.isr_cnt++;
 80035fc:	3301      	adds	r3, #1
 80035fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003602:	f382 8811 	msr	BASEPRI, r2
  if (adcp->grpp != NULL) {
 8003606:	4d45      	ldr	r5, [pc, #276]	; (800371c <Vector88+0x13c>)
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8003608:	4b45      	ldr	r3, [pc, #276]	; (8003720 <Vector88+0x140>)
  if (adcp->grpp != NULL) {
 800360a:	6928      	ldr	r0, [r5, #16]
  sr = ADC1->SR;
 800360c:	6819      	ldr	r1, [r3, #0]
  ADC1->SR = 0;
 800360e:	601a      	str	r2, [r3, #0]
  if (adcp->grpp != NULL) {
 8003610:	2800      	cmp	r0, #0
 8003612:	d04a      	beq.n	80036aa <Vector88+0xca>
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 8003614:	068a      	lsls	r2, r1, #26
 8003616:	d461      	bmi.n	80036dc <Vector88+0xfc>
    if (sr & ADC_SR_AWD) {
 8003618:	07cb      	lsls	r3, r1, #31
 800361a:	d546      	bpl.n	80036aa <Vector88+0xca>
 800361c:	2104      	movs	r1, #4
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800361e:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	f023 031f 	bic.w	r3, r3, #31
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	f013 0301 	ands.w	r3, r3, #1
 8003630:	d1fb      	bne.n	800362a <Vector88+0x4a>
 8003632:	f897 c009 	ldrb.w	ip, [r7, #9]
      _adc_isr_error_code(adcp, emask);
 8003636:	6886      	ldr	r6, [r0, #8]
  adcp->adc->CR1 = 0;
 8003638:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
 800363a:	687f      	ldr	r7, [r7, #4]
 800363c:	203d      	movs	r0, #61	; 0x3d
 800363e:	fa00 f00c 	lsl.w	r0, r0, ip
 8003642:	6038      	str	r0, [r7, #0]
  adcp->adc->CR1 = 0;
 8003644:	6053      	str	r3, [r2, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8003646:	6893      	ldr	r3, [r2, #8]
 8003648:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800364c:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800364e:	2301      	movs	r3, #1
 8003650:	6093      	str	r3, [r2, #8]
      _adc_isr_error_code(adcp, emask);
 8003652:	2e00      	cmp	r6, #0
 8003654:	d055      	beq.n	8003702 <Vector88+0x122>
 8003656:	2305      	movs	r3, #5
 8003658:	702b      	strb	r3, [r5, #0]
 800365a:	4830      	ldr	r0, [pc, #192]	; (800371c <Vector88+0x13c>)
 800365c:	47b0      	blx	r6
 800365e:	782b      	ldrb	r3, [r5, #0]
 8003660:	2b05      	cmp	r3, #5
 8003662:	d04e      	beq.n	8003702 <Vector88+0x122>
 8003664:	2330      	movs	r3, #48	; 0x30
 8003666:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800366a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800366e:	2b00      	cmp	r3, #0
 8003670:	dd4f      	ble.n	8003712 <Vector88+0x132>
 8003672:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d14b      	bne.n	8003712 <Vector88+0x132>
  if (*trp != NULL) {
 800367a:	6968      	ldr	r0, [r5, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 800367c:	2201      	movs	r2, #1
 800367e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003682:	b168      	cbz	r0, 80036a0 <Vector88+0xc0>
    tp->u.rdymsg = msg;
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	6282      	str	r2, [r0, #40]	; 0x28
    *trp = NULL;
 800368a:	616b      	str	r3, [r5, #20]
    (void) chSchReadyI(tp);
 800368c:	f7fe fd28 	bl	80020e0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003690:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003694:	2b00      	cmp	r3, #0
 8003696:	dd39      	ble.n	800370c <Vector88+0x12c>
 8003698:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800369c:	2b00      	cmp	r3, #0
 800369e:	dd35      	ble.n	800370c <Vector88+0x12c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	2230      	movs	r2, #48	; 0x30
 80036ac:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80036b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	dd21      	ble.n	80036fc <Vector88+0x11c>
 80036b8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80036bc:	b9f1      	cbnz	r1, 80036fc <Vector88+0x11c>
  oip->dbg.isr_cnt--;
 80036be:	3b01      	subs	r3, #1
 80036c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80036c4:	f381 8811 	msr	BASEPRI, r1
 80036c8:	f382 8811 	msr	BASEPRI, r2
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <Vector88+0x144>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80036d4:	d10b      	bne.n	80036ee <Vector88+0x10e>
 80036d6:	f383 8811 	msr	BASEPRI, r3
}
 80036da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 80036dc:	782b      	ldrb	r3, [r5, #0]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d19a      	bne.n	8003618 <Vector88+0x38>
      emask |= ADC_ERR_OVERFLOW;
 80036e2:	f011 0f01 	tst.w	r1, #1
 80036e6:	bf14      	ite	ne
 80036e8:	2106      	movne	r1, #6
 80036ea:	2102      	moveq	r1, #2
 80036ec:	e797      	b.n	800361e <Vector88+0x3e>
}
 80036ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036f2:	f7ff ba4d 	b.w	8002b90 <__port_irq_epilogue.part.0>
    chSysHalt("SV#8");
 80036f6:	480c      	ldr	r0, [pc, #48]	; (8003728 <Vector88+0x148>)
 80036f8:	f7fd fada 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 80036fc:	480b      	ldr	r0, [pc, #44]	; (800372c <Vector88+0x14c>)
 80036fe:	f7fd fad7 	bl	8000cb0 <chSysHalt>
      _adc_isr_error_code(adcp, emask);
 8003702:	2202      	movs	r2, #2
 8003704:	2300      	movs	r3, #0
 8003706:	702a      	strb	r2, [r5, #0]
 8003708:	612b      	str	r3, [r5, #16]
 800370a:	e7ab      	b.n	8003664 <Vector88+0x84>
    chSysHalt("SV#7");
 800370c:	4808      	ldr	r0, [pc, #32]	; (8003730 <Vector88+0x150>)
 800370e:	f7fd facf 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#6");
 8003712:	4808      	ldr	r0, [pc, #32]	; (8003734 <Vector88+0x154>)
 8003714:	f7fd facc 	bl	8000cb0 <chSysHalt>
 8003718:	20000e10 	.word	0x20000e10
 800371c:	20000808 	.word	0x20000808
 8003720:	40012000 	.word	0x40012000
 8003724:	e000ed00 	.word	0xe000ed00
 8003728:	08006480 	.word	0x08006480
 800372c:	08006488 	.word	0x08006488
 8003730:	08006450 	.word	0x08006450
 8003734:	08006438 	.word	0x08006438
	...

08003740 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8003740:	b510      	push	{r4, lr}
 8003742:	2330      	movs	r3, #48	; 0x30
 8003744:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003748:	4c1c      	ldr	r4, [pc, #112]	; (80037bc <Vector6C+0x7c>)
 800374a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800374e:	2b00      	cmp	r3, #0
 8003750:	db2a      	blt.n	80037a8 <Vector6C+0x68>
 8003752:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003756:	bb3a      	cbnz	r2, 80037a8 <Vector6C+0x68>
  oip->dbg.isr_cnt++;
 8003758:	3301      	adds	r3, #1
 800375a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800375e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <Vector6C+0x80>)
  if (dma.streams[0].func)
 8003764:	4817      	ldr	r0, [pc, #92]	; (80037c4 <Vector6C+0x84>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003766:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8003768:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800376a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800376e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8003770:	b10a      	cbz	r2, 8003776 <Vector6C+0x36>
    dma.streams[0].func(dma.streams[0].param, flags);
 8003772:	6880      	ldr	r0, [r0, #8]
 8003774:	4790      	blx	r2
 8003776:	2230      	movs	r2, #48	; 0x30
 8003778:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800377c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003780:	2b00      	cmp	r3, #0
 8003782:	dd14      	ble.n	80037ae <Vector6C+0x6e>
 8003784:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003788:	b989      	cbnz	r1, 80037ae <Vector6C+0x6e>
  oip->dbg.isr_cnt--;
 800378a:	3b01      	subs	r3, #1
 800378c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003790:	f381 8811 	msr	BASEPRI, r1
 8003794:	f382 8811 	msr	BASEPRI, r2
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <Vector6C+0x88>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80037a0:	d108      	bne.n	80037b4 <Vector6C+0x74>
 80037a2:	f383 8811 	msr	BASEPRI, r3
}
 80037a6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80037a8:	4808      	ldr	r0, [pc, #32]	; (80037cc <Vector6C+0x8c>)
 80037aa:	f7fd fa81 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 80037ae:	4808      	ldr	r0, [pc, #32]	; (80037d0 <Vector6C+0x90>)
 80037b0:	f7fd fa7e 	bl	8000cb0 <chSysHalt>
 80037b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b8:	f7ff b9ea 	b.w	8002b90 <__port_irq_epilogue.part.0>
 80037bc:	20000e10 	.word	0x20000e10
 80037c0:	40026000 	.word	0x40026000
 80037c4:	20001118 	.word	0x20001118
 80037c8:	e000ed00 	.word	0xe000ed00
 80037cc:	08006480 	.word	0x08006480
 80037d0:	08006488 	.word	0x08006488
	...

080037e0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80037e0:	b510      	push	{r4, lr}
 80037e2:	2330      	movs	r3, #48	; 0x30
 80037e4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80037e8:	4c1d      	ldr	r4, [pc, #116]	; (8003860 <Vector70+0x80>)
 80037ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db2c      	blt.n	800384c <Vector70+0x6c>
 80037f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80037f6:	bb4a      	cbnz	r2, 800384c <Vector70+0x6c>
  oip->dbg.isr_cnt++;
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80037fe:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <Vector70+0x84>)
  if (dma.streams[1].func)
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <Vector70+0x88>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	0989      	lsrs	r1, r1, #6
 800380a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800380e:	0188      	lsls	r0, r1, #6
 8003810:	6098      	str	r0, [r3, #8]
  if (dma.streams[1].func)
 8003812:	68d3      	ldr	r3, [r2, #12]
 8003814:	b10b      	cbz	r3, 800381a <Vector70+0x3a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8003816:	6910      	ldr	r0, [r2, #16]
 8003818:	4798      	blx	r3
 800381a:	2230      	movs	r2, #48	; 0x30
 800381c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003820:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003824:	2b00      	cmp	r3, #0
 8003826:	dd14      	ble.n	8003852 <Vector70+0x72>
 8003828:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800382c:	b989      	cbnz	r1, 8003852 <Vector70+0x72>
  oip->dbg.isr_cnt--;
 800382e:	3b01      	subs	r3, #1
 8003830:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003834:	f381 8811 	msr	BASEPRI, r1
 8003838:	f382 8811 	msr	BASEPRI, r2
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <Vector70+0x8c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003844:	d108      	bne.n	8003858 <Vector70+0x78>
 8003846:	f383 8811 	msr	BASEPRI, r3
}
 800384a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800384c:	4808      	ldr	r0, [pc, #32]	; (8003870 <Vector70+0x90>)
 800384e:	f7fd fa2f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003852:	4808      	ldr	r0, [pc, #32]	; (8003874 <Vector70+0x94>)
 8003854:	f7fd fa2c 	bl	8000cb0 <chSysHalt>
 8003858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800385c:	f7ff b998 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003860:	20000e10 	.word	0x20000e10
 8003864:	40026000 	.word	0x40026000
 8003868:	20001118 	.word	0x20001118
 800386c:	e000ed00 	.word	0xe000ed00
 8003870:	08006480 	.word	0x08006480
 8003874:	08006488 	.word	0x08006488
	...

08003880 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8003880:	b510      	push	{r4, lr}
 8003882:	2330      	movs	r3, #48	; 0x30
 8003884:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003888:	4c1d      	ldr	r4, [pc, #116]	; (8003900 <Vector74+0x80>)
 800388a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800388e:	2b00      	cmp	r3, #0
 8003890:	db2c      	blt.n	80038ec <Vector74+0x6c>
 8003892:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003896:	bb4a      	cbnz	r2, 80038ec <Vector74+0x6c>
  oip->dbg.isr_cnt++;
 8003898:	3301      	adds	r3, #1
 800389a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800389e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80038a2:	4b18      	ldr	r3, [pc, #96]	; (8003904 <Vector74+0x84>)
  if (dma.streams[2].func)
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <Vector74+0x88>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	0c09      	lsrs	r1, r1, #16
 80038aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 80038ae:	0408      	lsls	r0, r1, #16
 80038b0:	6098      	str	r0, [r3, #8]
  if (dma.streams[2].func)
 80038b2:	6953      	ldr	r3, [r2, #20]
 80038b4:	b10b      	cbz	r3, 80038ba <Vector74+0x3a>
    dma.streams[2].func(dma.streams[2].param, flags);
 80038b6:	6990      	ldr	r0, [r2, #24]
 80038b8:	4798      	blx	r3
 80038ba:	2230      	movs	r2, #48	; 0x30
 80038bc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80038c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	dd14      	ble.n	80038f2 <Vector74+0x72>
 80038c8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80038cc:	b989      	cbnz	r1, 80038f2 <Vector74+0x72>
  oip->dbg.isr_cnt--;
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80038d4:	f381 8811 	msr	BASEPRI, r1
 80038d8:	f382 8811 	msr	BASEPRI, r2
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <Vector74+0x8c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80038e4:	d108      	bne.n	80038f8 <Vector74+0x78>
 80038e6:	f383 8811 	msr	BASEPRI, r3
}
 80038ea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80038ec:	4808      	ldr	r0, [pc, #32]	; (8003910 <Vector74+0x90>)
 80038ee:	f7fd f9df 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 80038f2:	4808      	ldr	r0, [pc, #32]	; (8003914 <Vector74+0x94>)
 80038f4:	f7fd f9dc 	bl	8000cb0 <chSysHalt>
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fc:	f7ff b948 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003900:	20000e10 	.word	0x20000e10
 8003904:	40026000 	.word	0x40026000
 8003908:	20001118 	.word	0x20001118
 800390c:	e000ed00 	.word	0xe000ed00
 8003910:	08006480 	.word	0x08006480
 8003914:	08006488 	.word	0x08006488
	...

08003920 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8003920:	b510      	push	{r4, lr}
 8003922:	2330      	movs	r3, #48	; 0x30
 8003924:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003928:	4c1d      	ldr	r4, [pc, #116]	; (80039a0 <Vector78+0x80>)
 800392a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800392e:	2b00      	cmp	r3, #0
 8003930:	db2c      	blt.n	800398c <Vector78+0x6c>
 8003932:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003936:	bb4a      	cbnz	r2, 800398c <Vector78+0x6c>
  oip->dbg.isr_cnt++;
 8003938:	3301      	adds	r3, #1
 800393a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800393e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <Vector78+0x84>)
  if (dma.streams[3].func)
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <Vector78+0x88>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	0d89      	lsrs	r1, r1, #22
 800394a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 800394e:	0588      	lsls	r0, r1, #22
 8003950:	6098      	str	r0, [r3, #8]
  if (dma.streams[3].func)
 8003952:	69d3      	ldr	r3, [r2, #28]
 8003954:	b10b      	cbz	r3, 800395a <Vector78+0x3a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8003956:	6a10      	ldr	r0, [r2, #32]
 8003958:	4798      	blx	r3
 800395a:	2230      	movs	r2, #48	; 0x30
 800395c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003960:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003964:	2b00      	cmp	r3, #0
 8003966:	dd14      	ble.n	8003992 <Vector78+0x72>
 8003968:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800396c:	b989      	cbnz	r1, 8003992 <Vector78+0x72>
  oip->dbg.isr_cnt--;
 800396e:	3b01      	subs	r3, #1
 8003970:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003974:	f381 8811 	msr	BASEPRI, r1
 8003978:	f382 8811 	msr	BASEPRI, r2
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <Vector78+0x8c>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003984:	d108      	bne.n	8003998 <Vector78+0x78>
 8003986:	f383 8811 	msr	BASEPRI, r3
}
 800398a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <Vector78+0x90>)
 800398e:	f7fd f98f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003992:	4808      	ldr	r0, [pc, #32]	; (80039b4 <Vector78+0x94>)
 8003994:	f7fd f98c 	bl	8000cb0 <chSysHalt>
 8003998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800399c:	f7ff b8f8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 80039a0:	20000e10 	.word	0x20000e10
 80039a4:	40026000 	.word	0x40026000
 80039a8:	20001118 	.word	0x20001118
 80039ac:	e000ed00 	.word	0xe000ed00
 80039b0:	08006480 	.word	0x08006480
 80039b4:	08006488 	.word	0x08006488
	...

080039c0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80039c0:	b510      	push	{r4, lr}
 80039c2:	2330      	movs	r3, #48	; 0x30
 80039c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80039c8:	4c1c      	ldr	r4, [pc, #112]	; (8003a3c <Vector7C+0x7c>)
 80039ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db2a      	blt.n	8003a28 <Vector7C+0x68>
 80039d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80039d6:	bb3a      	cbnz	r2, 8003a28 <Vector7C+0x68>
  oip->dbg.isr_cnt++;
 80039d8:	3301      	adds	r3, #1
 80039da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80039de:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80039e2:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <Vector7C+0x80>)
  if (dma.streams[4].func)
 80039e4:	4817      	ldr	r0, [pc, #92]	; (8003a44 <Vector7C+0x84>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80039e6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80039e8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80039ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80039ee:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80039f0:	b10a      	cbz	r2, 80039f6 <Vector7C+0x36>
    dma.streams[4].func(dma.streams[4].param, flags);
 80039f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80039f4:	4790      	blx	r2
 80039f6:	2230      	movs	r2, #48	; 0x30
 80039f8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80039fc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	dd14      	ble.n	8003a2e <Vector7C+0x6e>
 8003a04:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003a08:	b989      	cbnz	r1, 8003a2e <Vector7C+0x6e>
  oip->dbg.isr_cnt--;
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003a10:	f381 8811 	msr	BASEPRI, r1
 8003a14:	f382 8811 	msr	BASEPRI, r2
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <Vector7C+0x88>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003a20:	d108      	bne.n	8003a34 <Vector7C+0x74>
 8003a22:	f383 8811 	msr	BASEPRI, r3
}
 8003a26:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003a28:	4808      	ldr	r0, [pc, #32]	; (8003a4c <Vector7C+0x8c>)
 8003a2a:	f7fd f941 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003a2e:	4808      	ldr	r0, [pc, #32]	; (8003a50 <Vector7C+0x90>)
 8003a30:	f7fd f93e 	bl	8000cb0 <chSysHalt>
 8003a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a38:	f7ff b8aa 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003a3c:	20000e10 	.word	0x20000e10
 8003a40:	40026000 	.word	0x40026000
 8003a44:	20001118 	.word	0x20001118
 8003a48:	e000ed00 	.word	0xe000ed00
 8003a4c:	08006480 	.word	0x08006480
 8003a50:	08006488 	.word	0x08006488
	...

08003a60 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003a60:	b510      	push	{r4, lr}
 8003a62:	2330      	movs	r3, #48	; 0x30
 8003a64:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003a68:	4c1d      	ldr	r4, [pc, #116]	; (8003ae0 <Vector80+0x80>)
 8003a6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	db2c      	blt.n	8003acc <Vector80+0x6c>
 8003a72:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003a76:	bb4a      	cbnz	r2, 8003acc <Vector80+0x6c>
  oip->dbg.isr_cnt++;
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003a7e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003a82:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <Vector80+0x84>)
  if (dma.streams[5].func)
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <Vector80+0x88>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	0989      	lsrs	r1, r1, #6
 8003a8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8003a8e:	0188      	lsls	r0, r1, #6
 8003a90:	60d8      	str	r0, [r3, #12]
  if (dma.streams[5].func)
 8003a92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a94:	b10b      	cbz	r3, 8003a9a <Vector80+0x3a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003a96:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003a98:	4798      	blx	r3
 8003a9a:	2230      	movs	r2, #48	; 0x30
 8003a9c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003aa0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dd14      	ble.n	8003ad2 <Vector80+0x72>
 8003aa8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003aac:	b989      	cbnz	r1, 8003ad2 <Vector80+0x72>
  oip->dbg.isr_cnt--;
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003ab4:	f381 8811 	msr	BASEPRI, r1
 8003ab8:	f382 8811 	msr	BASEPRI, r2
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <Vector80+0x8c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003ac4:	d108      	bne.n	8003ad8 <Vector80+0x78>
 8003ac6:	f383 8811 	msr	BASEPRI, r3
}
 8003aca:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003acc:	4808      	ldr	r0, [pc, #32]	; (8003af0 <Vector80+0x90>)
 8003ace:	f7fd f8ef 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003ad2:	4808      	ldr	r0, [pc, #32]	; (8003af4 <Vector80+0x94>)
 8003ad4:	f7fd f8ec 	bl	8000cb0 <chSysHalt>
 8003ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003adc:	f7ff b858 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003ae0:	20000e10 	.word	0x20000e10
 8003ae4:	40026000 	.word	0x40026000
 8003ae8:	20001118 	.word	0x20001118
 8003aec:	e000ed00 	.word	0xe000ed00
 8003af0:	08006480 	.word	0x08006480
 8003af4:	08006488 	.word	0x08006488
	...

08003b00 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8003b00:	b510      	push	{r4, lr}
 8003b02:	2330      	movs	r3, #48	; 0x30
 8003b04:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003b08:	4c1d      	ldr	r4, [pc, #116]	; (8003b80 <Vector84+0x80>)
 8003b0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db2c      	blt.n	8003b6c <Vector84+0x6c>
 8003b12:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b16:	bb4a      	cbnz	r2, 8003b6c <Vector84+0x6c>
  oip->dbg.isr_cnt++;
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003b1e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <Vector84+0x84>)
  if (dma.streams[6].func)
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <Vector84+0x88>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	0c09      	lsrs	r1, r1, #16
 8003b2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 8003b2e:	0408      	lsls	r0, r1, #16
 8003b30:	60d8      	str	r0, [r3, #12]
  if (dma.streams[6].func)
 8003b32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003b34:	b10b      	cbz	r3, 8003b3a <Vector84+0x3a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8003b36:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8003b38:	4798      	blx	r3
 8003b3a:	2230      	movs	r2, #48	; 0x30
 8003b3c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003b40:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	dd14      	ble.n	8003b72 <Vector84+0x72>
 8003b48:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003b4c:	b989      	cbnz	r1, 8003b72 <Vector84+0x72>
  oip->dbg.isr_cnt--;
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003b54:	f381 8811 	msr	BASEPRI, r1
 8003b58:	f382 8811 	msr	BASEPRI, r2
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <Vector84+0x8c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003b64:	d108      	bne.n	8003b78 <Vector84+0x78>
 8003b66:	f383 8811 	msr	BASEPRI, r3
}
 8003b6a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003b6c:	4808      	ldr	r0, [pc, #32]	; (8003b90 <Vector84+0x90>)
 8003b6e:	f7fd f89f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003b72:	4808      	ldr	r0, [pc, #32]	; (8003b94 <Vector84+0x94>)
 8003b74:	f7fd f89c 	bl	8000cb0 <chSysHalt>
 8003b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b7c:	f7ff b808 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003b80:	20000e10 	.word	0x20000e10
 8003b84:	40026000 	.word	0x40026000
 8003b88:	20001118 	.word	0x20001118
 8003b8c:	e000ed00 	.word	0xe000ed00
 8003b90:	08006480 	.word	0x08006480
 8003b94:	08006488 	.word	0x08006488
	...

08003ba0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	2330      	movs	r3, #48	; 0x30
 8003ba4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003ba8:	4c1d      	ldr	r4, [pc, #116]	; (8003c20 <VectorFC+0x80>)
 8003baa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db2c      	blt.n	8003c0c <VectorFC+0x6c>
 8003bb2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003bb6:	bb4a      	cbnz	r2, 8003c0c <VectorFC+0x6c>
  oip->dbg.isr_cnt++;
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003bbe:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003bc2:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <VectorFC+0x84>)
  if (dma.streams[7].func)
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <VectorFC+0x88>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	0d89      	lsrs	r1, r1, #22
 8003bca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 8003bce:	0588      	lsls	r0, r1, #22
 8003bd0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[7].func)
 8003bd2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003bd4:	b10b      	cbz	r3, 8003bda <VectorFC+0x3a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8003bd6:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003bd8:	4798      	blx	r3
 8003bda:	2230      	movs	r2, #48	; 0x30
 8003bdc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003be0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	dd14      	ble.n	8003c12 <VectorFC+0x72>
 8003be8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003bec:	b989      	cbnz	r1, 8003c12 <VectorFC+0x72>
  oip->dbg.isr_cnt--;
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003bf4:	f381 8811 	msr	BASEPRI, r1
 8003bf8:	f382 8811 	msr	BASEPRI, r2
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <VectorFC+0x8c>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003c04:	d108      	bne.n	8003c18 <VectorFC+0x78>
 8003c06:	f383 8811 	msr	BASEPRI, r3
}
 8003c0a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003c0c:	4808      	ldr	r0, [pc, #32]	; (8003c30 <VectorFC+0x90>)
 8003c0e:	f7fd f84f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003c12:	4808      	ldr	r0, [pc, #32]	; (8003c34 <VectorFC+0x94>)
 8003c14:	f7fd f84c 	bl	8000cb0 <chSysHalt>
 8003c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c1c:	f7fe bfb8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003c20:	20000e10 	.word	0x20000e10
 8003c24:	40026000 	.word	0x40026000
 8003c28:	20001118 	.word	0x20001118
 8003c2c:	e000ed00 	.word	0xe000ed00
 8003c30:	08006480 	.word	0x08006480
 8003c34:	08006488 	.word	0x08006488
	...

08003c40 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8003c40:	b510      	push	{r4, lr}
 8003c42:	2330      	movs	r3, #48	; 0x30
 8003c44:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003c48:	4c1c      	ldr	r4, [pc, #112]	; (8003cbc <Vector120+0x7c>)
 8003c4a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db2a      	blt.n	8003ca8 <Vector120+0x68>
 8003c52:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003c56:	bb3a      	cbnz	r2, 8003ca8 <Vector120+0x68>
  oip->dbg.isr_cnt++;
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003c5e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <Vector120+0x80>)
  if (dma.streams[8].func)
 8003c64:	4817      	ldr	r0, [pc, #92]	; (8003cc4 <Vector120+0x84>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c66:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8003c68:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8003c6e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8003c70:	b10a      	cbz	r2, 8003c76 <Vector120+0x36>
    dma.streams[8].func(dma.streams[8].param, flags);
 8003c72:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003c74:	4790      	blx	r2
 8003c76:	2230      	movs	r2, #48	; 0x30
 8003c78:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003c7c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	dd14      	ble.n	8003cae <Vector120+0x6e>
 8003c84:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003c88:	b989      	cbnz	r1, 8003cae <Vector120+0x6e>
  oip->dbg.isr_cnt--;
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003c90:	f381 8811 	msr	BASEPRI, r1
 8003c94:	f382 8811 	msr	BASEPRI, r2
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <Vector120+0x88>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003ca0:	d108      	bne.n	8003cb4 <Vector120+0x74>
 8003ca2:	f383 8811 	msr	BASEPRI, r3
}
 8003ca6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003ca8:	4808      	ldr	r0, [pc, #32]	; (8003ccc <Vector120+0x8c>)
 8003caa:	f7fd f801 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003cae:	4808      	ldr	r0, [pc, #32]	; (8003cd0 <Vector120+0x90>)
 8003cb0:	f7fc fffe 	bl	8000cb0 <chSysHalt>
 8003cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb8:	f7fe bf6a 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003cbc:	20000e10 	.word	0x20000e10
 8003cc0:	40026400 	.word	0x40026400
 8003cc4:	20001118 	.word	0x20001118
 8003cc8:	e000ed00 	.word	0xe000ed00
 8003ccc:	08006480 	.word	0x08006480
 8003cd0:	08006488 	.word	0x08006488
	...

08003ce0 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	2330      	movs	r3, #48	; 0x30
 8003ce4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003ce8:	4c1d      	ldr	r4, [pc, #116]	; (8003d60 <Vector124+0x80>)
 8003cea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db2c      	blt.n	8003d4c <Vector124+0x6c>
 8003cf2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003cf6:	bb4a      	cbnz	r2, 8003d4c <Vector124+0x6c>
  oip->dbg.isr_cnt++;
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003cfe:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <Vector124+0x84>)
  if (dma.streams[9].func)
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <Vector124+0x88>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003d06:	6819      	ldr	r1, [r3, #0]
 8003d08:	0989      	lsrs	r1, r1, #6
 8003d0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8003d0e:	0188      	lsls	r0, r1, #6
 8003d10:	6098      	str	r0, [r3, #8]
  if (dma.streams[9].func)
 8003d12:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003d14:	b10b      	cbz	r3, 8003d1a <Vector124+0x3a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8003d16:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8003d18:	4798      	blx	r3
 8003d1a:	2230      	movs	r2, #48	; 0x30
 8003d1c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003d20:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	dd14      	ble.n	8003d52 <Vector124+0x72>
 8003d28:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003d2c:	b989      	cbnz	r1, 8003d52 <Vector124+0x72>
  oip->dbg.isr_cnt--;
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003d34:	f381 8811 	msr	BASEPRI, r1
 8003d38:	f382 8811 	msr	BASEPRI, r2
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <Vector124+0x8c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003d44:	d108      	bne.n	8003d58 <Vector124+0x78>
 8003d46:	f383 8811 	msr	BASEPRI, r3
}
 8003d4a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003d4c:	4808      	ldr	r0, [pc, #32]	; (8003d70 <Vector124+0x90>)
 8003d4e:	f7fc ffaf 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003d52:	4808      	ldr	r0, [pc, #32]	; (8003d74 <Vector124+0x94>)
 8003d54:	f7fc ffac 	bl	8000cb0 <chSysHalt>
 8003d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5c:	f7fe bf18 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003d60:	20000e10 	.word	0x20000e10
 8003d64:	40026400 	.word	0x40026400
 8003d68:	20001118 	.word	0x20001118
 8003d6c:	e000ed00 	.word	0xe000ed00
 8003d70:	08006480 	.word	0x08006480
 8003d74:	08006488 	.word	0x08006488
	...

08003d80 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8003d80:	b510      	push	{r4, lr}
 8003d82:	2330      	movs	r3, #48	; 0x30
 8003d84:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003d88:	4c1d      	ldr	r4, [pc, #116]	; (8003e00 <Vector128+0x80>)
 8003d8a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	db2c      	blt.n	8003dec <Vector128+0x6c>
 8003d92:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003d96:	bb4a      	cbnz	r2, 8003dec <Vector128+0x6c>
  oip->dbg.isr_cnt++;
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003d9e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <Vector128+0x84>)
  if (dma.streams[10].func)
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <Vector128+0x88>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	0c09      	lsrs	r1, r1, #16
 8003daa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 8003dae:	0408      	lsls	r0, r1, #16
 8003db0:	6098      	str	r0, [r3, #8]
  if (dma.streams[10].func)
 8003db2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003db4:	b10b      	cbz	r3, 8003dba <Vector128+0x3a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003db6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8003db8:	4798      	blx	r3
 8003dba:	2230      	movs	r2, #48	; 0x30
 8003dbc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003dc0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	dd14      	ble.n	8003df2 <Vector128+0x72>
 8003dc8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003dcc:	b989      	cbnz	r1, 8003df2 <Vector128+0x72>
  oip->dbg.isr_cnt--;
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003dd4:	f381 8811 	msr	BASEPRI, r1
 8003dd8:	f382 8811 	msr	BASEPRI, r2
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <Vector128+0x8c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003de4:	d108      	bne.n	8003df8 <Vector128+0x78>
 8003de6:	f383 8811 	msr	BASEPRI, r3
}
 8003dea:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003dec:	4808      	ldr	r0, [pc, #32]	; (8003e10 <Vector128+0x90>)
 8003dee:	f7fc ff5f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003df2:	4808      	ldr	r0, [pc, #32]	; (8003e14 <Vector128+0x94>)
 8003df4:	f7fc ff5c 	bl	8000cb0 <chSysHalt>
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f7fe bec8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003e00:	20000e10 	.word	0x20000e10
 8003e04:	40026400 	.word	0x40026400
 8003e08:	20001118 	.word	0x20001118
 8003e0c:	e000ed00 	.word	0xe000ed00
 8003e10:	08006480 	.word	0x08006480
 8003e14:	08006488 	.word	0x08006488
	...

08003e20 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8003e20:	b510      	push	{r4, lr}
 8003e22:	2330      	movs	r3, #48	; 0x30
 8003e24:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003e28:	4c1d      	ldr	r4, [pc, #116]	; (8003ea0 <Vector12C+0x80>)
 8003e2a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	db2c      	blt.n	8003e8c <Vector12C+0x6c>
 8003e32:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003e36:	bb4a      	cbnz	r2, 8003e8c <Vector12C+0x6c>
  oip->dbg.isr_cnt++;
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003e3e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <Vector12C+0x84>)
  if (dma.streams[11].func)
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <Vector12C+0x88>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003e46:	6819      	ldr	r1, [r3, #0]
 8003e48:	0d89      	lsrs	r1, r1, #22
 8003e4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 8003e4e:	0588      	lsls	r0, r1, #22
 8003e50:	6098      	str	r0, [r3, #8]
  if (dma.streams[11].func)
 8003e52:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003e54:	b10b      	cbz	r3, 8003e5a <Vector12C+0x3a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8003e56:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003e58:	4798      	blx	r3
 8003e5a:	2230      	movs	r2, #48	; 0x30
 8003e5c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003e60:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dd14      	ble.n	8003e92 <Vector12C+0x72>
 8003e68:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003e6c:	b989      	cbnz	r1, 8003e92 <Vector12C+0x72>
  oip->dbg.isr_cnt--;
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003e74:	f381 8811 	msr	BASEPRI, r1
 8003e78:	f382 8811 	msr	BASEPRI, r2
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <Vector12C+0x8c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003e84:	d108      	bne.n	8003e98 <Vector12C+0x78>
 8003e86:	f383 8811 	msr	BASEPRI, r3
}
 8003e8a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003e8c:	4808      	ldr	r0, [pc, #32]	; (8003eb0 <Vector12C+0x90>)
 8003e8e:	f7fc ff0f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003e92:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <Vector12C+0x94>)
 8003e94:	f7fc ff0c 	bl	8000cb0 <chSysHalt>
 8003e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e9c:	f7fe be78 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003ea0:	20000e10 	.word	0x20000e10
 8003ea4:	40026400 	.word	0x40026400
 8003ea8:	20001118 	.word	0x20001118
 8003eac:	e000ed00 	.word	0xe000ed00
 8003eb0:	08006480 	.word	0x08006480
 8003eb4:	08006488 	.word	0x08006488
	...

08003ec0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	2330      	movs	r3, #48	; 0x30
 8003ec4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003ec8:	4c1c      	ldr	r4, [pc, #112]	; (8003f3c <Vector130+0x7c>)
 8003eca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db2a      	blt.n	8003f28 <Vector130+0x68>
 8003ed2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003ed6:	bb3a      	cbnz	r2, 8003f28 <Vector130+0x68>
  oip->dbg.isr_cnt++;
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003ede:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <Vector130+0x80>)
  if (dma.streams[12].func)
 8003ee4:	4817      	ldr	r0, [pc, #92]	; (8003f44 <Vector130+0x84>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003ee6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8003ee8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003eea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8003eee:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8003ef0:	b10a      	cbz	r2, 8003ef6 <Vector130+0x36>
    dma.streams[12].func(dma.streams[12].param, flags);
 8003ef2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003ef4:	4790      	blx	r2
 8003ef6:	2230      	movs	r2, #48	; 0x30
 8003ef8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003efc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dd14      	ble.n	8003f2e <Vector130+0x6e>
 8003f04:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003f08:	b989      	cbnz	r1, 8003f2e <Vector130+0x6e>
  oip->dbg.isr_cnt--;
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003f10:	f381 8811 	msr	BASEPRI, r1
 8003f14:	f382 8811 	msr	BASEPRI, r2
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <Vector130+0x88>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003f20:	d108      	bne.n	8003f34 <Vector130+0x74>
 8003f22:	f383 8811 	msr	BASEPRI, r3
}
 8003f26:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003f28:	4808      	ldr	r0, [pc, #32]	; (8003f4c <Vector130+0x8c>)
 8003f2a:	f7fc fec1 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003f2e:	4808      	ldr	r0, [pc, #32]	; (8003f50 <Vector130+0x90>)
 8003f30:	f7fc febe 	bl	8000cb0 <chSysHalt>
 8003f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f38:	f7fe be2a 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003f3c:	20000e10 	.word	0x20000e10
 8003f40:	40026400 	.word	0x40026400
 8003f44:	20001118 	.word	0x20001118
 8003f48:	e000ed00 	.word	0xe000ed00
 8003f4c:	08006480 	.word	0x08006480
 8003f50:	08006488 	.word	0x08006488
	...

08003f60 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8003f60:	b510      	push	{r4, lr}
 8003f62:	2330      	movs	r3, #48	; 0x30
 8003f64:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003f68:	4c1d      	ldr	r4, [pc, #116]	; (8003fe0 <Vector150+0x80>)
 8003f6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	db2c      	blt.n	8003fcc <Vector150+0x6c>
 8003f72:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003f76:	bb4a      	cbnz	r2, 8003fcc <Vector150+0x6c>
  oip->dbg.isr_cnt++;
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003f7e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003f82:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <Vector150+0x84>)
  if (dma.streams[13].func)
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <Vector150+0x88>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	0989      	lsrs	r1, r1, #6
 8003f8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8003f8e:	0188      	lsls	r0, r1, #6
 8003f90:	60d8      	str	r0, [r3, #12]
  if (dma.streams[13].func)
 8003f92:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8003f94:	b10b      	cbz	r3, 8003f9a <Vector150+0x3a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8003f96:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8003f98:	4798      	blx	r3
 8003f9a:	2230      	movs	r2, #48	; 0x30
 8003f9c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003fa0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dd14      	ble.n	8003fd2 <Vector150+0x72>
 8003fa8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003fac:	b989      	cbnz	r1, 8003fd2 <Vector150+0x72>
  oip->dbg.isr_cnt--;
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003fb4:	f381 8811 	msr	BASEPRI, r1
 8003fb8:	f382 8811 	msr	BASEPRI, r2
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <Vector150+0x8c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003fc4:	d108      	bne.n	8003fd8 <Vector150+0x78>
 8003fc6:	f383 8811 	msr	BASEPRI, r3
}
 8003fca:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003fcc:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <Vector150+0x90>)
 8003fce:	f7fc fe6f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8003fd2:	4808      	ldr	r0, [pc, #32]	; (8003ff4 <Vector150+0x94>)
 8003fd4:	f7fc fe6c 	bl	8000cb0 <chSysHalt>
 8003fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fdc:	f7fe bdd8 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8003fe0:	20000e10 	.word	0x20000e10
 8003fe4:	40026400 	.word	0x40026400
 8003fe8:	20001118 	.word	0x20001118
 8003fec:	e000ed00 	.word	0xe000ed00
 8003ff0:	08006480 	.word	0x08006480
 8003ff4:	08006488 	.word	0x08006488
	...

08004000 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8004000:	b510      	push	{r4, lr}
 8004002:	2330      	movs	r3, #48	; 0x30
 8004004:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004008:	4c1d      	ldr	r4, [pc, #116]	; (8004080 <Vector154+0x80>)
 800400a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800400e:	2b00      	cmp	r3, #0
 8004010:	db2c      	blt.n	800406c <Vector154+0x6c>
 8004012:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004016:	bb4a      	cbnz	r2, 800406c <Vector154+0x6c>
  oip->dbg.isr_cnt++;
 8004018:	3301      	adds	r3, #1
 800401a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800401e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004022:	4b18      	ldr	r3, [pc, #96]	; (8004084 <Vector154+0x84>)
  if (dma.streams[14].func)
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <Vector154+0x88>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	0c09      	lsrs	r1, r1, #16
 800402a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 800402e:	0408      	lsls	r0, r1, #16
 8004030:	60d8      	str	r0, [r3, #12]
  if (dma.streams[14].func)
 8004032:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8004034:	b10b      	cbz	r3, 800403a <Vector154+0x3a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8004036:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8004038:	4798      	blx	r3
 800403a:	2230      	movs	r2, #48	; 0x30
 800403c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004040:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004044:	2b00      	cmp	r3, #0
 8004046:	dd14      	ble.n	8004072 <Vector154+0x72>
 8004048:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800404c:	b989      	cbnz	r1, 8004072 <Vector154+0x72>
  oip->dbg.isr_cnt--;
 800404e:	3b01      	subs	r3, #1
 8004050:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004054:	f381 8811 	msr	BASEPRI, r1
 8004058:	f382 8811 	msr	BASEPRI, r2
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <Vector154+0x8c>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004064:	d108      	bne.n	8004078 <Vector154+0x78>
 8004066:	f383 8811 	msr	BASEPRI, r3
}
 800406a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800406c:	4808      	ldr	r0, [pc, #32]	; (8004090 <Vector154+0x90>)
 800406e:	f7fc fe1f 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8004072:	4808      	ldr	r0, [pc, #32]	; (8004094 <Vector154+0x94>)
 8004074:	f7fc fe1c 	bl	8000cb0 <chSysHalt>
 8004078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407c:	f7fe bd88 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8004080:	20000e10 	.word	0x20000e10
 8004084:	40026400 	.word	0x40026400
 8004088:	20001118 	.word	0x20001118
 800408c:	e000ed00 	.word	0xe000ed00
 8004090:	08006480 	.word	0x08006480
 8004094:	08006488 	.word	0x08006488
	...

080040a0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 80040a0:	b510      	push	{r4, lr}
 80040a2:	2330      	movs	r3, #48	; 0x30
 80040a4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80040a8:	4c1e      	ldr	r4, [pc, #120]	; (8004124 <Vector158+0x84>)
 80040aa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db2d      	blt.n	800410e <Vector158+0x6e>
 80040b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80040b6:	bb52      	cbnz	r2, 800410e <Vector158+0x6e>
  oip->dbg.isr_cnt++;
 80040b8:	3301      	adds	r3, #1
 80040ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80040be:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80040c2:	4b19      	ldr	r3, [pc, #100]	; (8004128 <Vector158+0x88>)
  if (dma.streams[15].func)
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <Vector158+0x8c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	0d89      	lsrs	r1, r1, #22
 80040ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 80040ce:	0588      	lsls	r0, r1, #22
 80040d0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[15].func)
 80040d2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 80040d4:	b113      	cbz	r3, 80040dc <Vector158+0x3c>
    dma.streams[15].func(dma.streams[15].param, flags);
 80040d6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 80040da:	4798      	blx	r3
 80040dc:	2230      	movs	r2, #48	; 0x30
 80040de:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80040e2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dd14      	ble.n	8004114 <Vector158+0x74>
 80040ea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80040ee:	b989      	cbnz	r1, 8004114 <Vector158+0x74>
  oip->dbg.isr_cnt--;
 80040f0:	3b01      	subs	r3, #1
 80040f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80040f6:	f381 8811 	msr	BASEPRI, r1
 80040fa:	f382 8811 	msr	BASEPRI, r2
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <Vector158+0x90>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8004106:	d108      	bne.n	800411a <Vector158+0x7a>
 8004108:	f383 8811 	msr	BASEPRI, r3
}
 800410c:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800410e:	4809      	ldr	r0, [pc, #36]	; (8004134 <Vector158+0x94>)
 8004110:	f7fc fdce 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8004114:	4808      	ldr	r0, [pc, #32]	; (8004138 <Vector158+0x98>)
 8004116:	f7fc fdcb 	bl	8000cb0 <chSysHalt>
 800411a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411e:	f7fe bd37 	b.w	8002b90 <__port_irq_epilogue.part.0>
 8004122:	bf00      	nop
 8004124:	20000e10 	.word	0x20000e10
 8004128:	40026400 	.word	0x40026400
 800412c:	20001118 	.word	0x20001118
 8004130:	e000ed00 	.word	0xe000ed00
 8004134:	08006480 	.word	0x08006480
 8004138:	08006488 	.word	0x08006488
 800413c:	00000000 	.word	0x00000000

08004140 <VectorC4>:
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	2130      	movs	r1, #48	; 0x30
 8004144:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8004148:	4c7d      	ldr	r4, [pc, #500]	; (8004340 <VectorC4+0x200>)
 800414a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800414e:	2b00      	cmp	r3, #0
 8004150:	f2c0 80e5 	blt.w	800431e <VectorC4+0x1de>
 8004154:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004158:	2a00      	cmp	r2, #0
 800415a:	f040 80e0 	bne.w	800431e <VectorC4+0x1de>
  oip->dbg.isr_cnt++;
 800415e:	3301      	adds	r3, #1
 8004160:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8004164:	f382 8811 	msr	BASEPRI, r2
  I2C_TypeDef *dp = i2cp->i2c;
 8004168:	4a76      	ldr	r2, [pc, #472]	; (8004344 <VectorC4+0x204>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800416a:	4877      	ldr	r0, [pc, #476]	; (8004348 <VectorC4+0x208>)
  I2C_TypeDef *dp = i2cp->i2c;
 800416c:	6b55      	ldr	r5, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800416e:	69ab      	ldr	r3, [r5, #24]
  uint32_t event = dp->SR1;
 8004170:	696e      	ldr	r6, [r5, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8004172:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8004176:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800417a:	4283      	cmp	r3, r0
 800417c:	d836      	bhi.n	80041ec <VectorC4+0xac>
 800417e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004182:	d90f      	bls.n	80041a4 <VectorC4+0x64>
 8004184:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004188:	3b01      	subs	r3, #1
 800418a:	2b10      	cmp	r3, #16
 800418c:	d80d      	bhi.n	80041aa <VectorC4+0x6a>
 800418e:	e8df f003 	tbb	[pc, r3]
 8004192:	5942      	.short	0x5942
 8004194:	0c0c0c0c 	.word	0x0c0c0c0c
 8004198:	0c0c6f0c 	.word	0x0c0c6f0c
 800419c:	0c0c0c0c 	.word	0x0c0c0c0c
 80041a0:	0c0c      	.short	0x0c0c
 80041a2:	74          	.byte	0x74
 80041a3:	00          	.byte	0x00
 80041a4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80041a8:	d035      	beq.n	8004216 <VectorC4+0xd6>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80041aa:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 80041ae:	bf18      	it	ne
 80041b0:	69ab      	ldrne	r3, [r5, #24]
 80041b2:	2230      	movs	r2, #48	; 0x30
 80041b4:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80041b8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f340 80b1 	ble.w	8004324 <VectorC4+0x1e4>
 80041c2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80041c6:	2900      	cmp	r1, #0
 80041c8:	f040 80ac 	bne.w	8004324 <VectorC4+0x1e4>
  oip->dbg.isr_cnt--;
 80041cc:	3b01      	subs	r3, #1
 80041ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80041d2:	f381 8811 	msr	BASEPRI, r1
 80041d6:	f382 8811 	msr	BASEPRI, r2
 80041da:	4b5c      	ldr	r3, [pc, #368]	; (800434c <VectorC4+0x20c>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80041e2:	f040 80a2 	bne.w	800432a <VectorC4+0x1ea>
 80041e6:	f383 8811 	msr	BASEPRI, r3
}
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80041ec:	4858      	ldr	r0, [pc, #352]	; (8004350 <VectorC4+0x210>)
 80041ee:	4283      	cmp	r3, r0
 80041f0:	d01d      	beq.n	800422e <VectorC4+0xee>
 80041f2:	3002      	adds	r0, #2
 80041f4:	4283      	cmp	r3, r0
 80041f6:	d1d8      	bne.n	80041aa <VectorC4+0x6a>
    (void)dp->DR; /* Clear BTF.*/
 80041f8:	692b      	ldr	r3, [r5, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80041fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d064      	beq.n	80042ce <VectorC4+0x18e>
      i2cp->addr |= 0x01;
 8004204:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8004206:	682b      	ldr	r3, [r5, #0]
      i2cp->addr |= 0x01;
 8004208:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800420c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8004210:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8004212:	602b      	str	r3, [r5, #0]
      return;
 8004214:	e7cd      	b.n	80041b2 <VectorC4+0x72>
    if ((i2cp->addr >> 8) > 0) {
 8004216:	8c13      	ldrh	r3, [r2, #32]
 8004218:	0a1a      	lsrs	r2, r3, #8
 800421a:	d02c      	beq.n	8004276 <VectorC4+0x136>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800421c:	f002 0206 	and.w	r2, r2, #6
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	4313      	orrs	r3, r2
 8004226:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800422a:	612b      	str	r3, [r5, #16]
 800422c:	e7bd      	b.n	80041aa <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800422e:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 8004230:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004232:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8004236:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004238:	606b      	str	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6013      	str	r3, [r2, #0]
    break;
 8004242:	e7b2      	b.n	80041aa <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004244:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8004246:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004248:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800424c:	680b      	ldr	r3, [r1, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800424e:	606a      	str	r2, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8004258:	686a      	ldr	r2, [r5, #4]
 800425a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800425e:	606a      	str	r2, [r5, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d8a1      	bhi.n	80041aa <VectorC4+0x6a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	e79c      	b.n	80041aa <VectorC4+0x6a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8004270:	8c13      	ldrh	r3, [r2, #32]
 8004272:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8004276:	612b      	str	r3, [r5, #16]
    break;
 8004278:	e797      	b.n	80041aa <VectorC4+0x6a>
  dmaStreamDisable(i2cp->dmatx);
 800427a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  dp->CR1 = I2C_CR1_SWRST;
 800427c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004280:	602b      	str	r3, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 8004282:	6801      	ldr	r1, [r0, #0]
  dp->CR1 = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	602b      	str	r3, [r5, #0]
  dp->CR2 = 0;
 8004288:	606b      	str	r3, [r5, #4]
  dp->SR1 = 0;
 800428a:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 800428c:	680b      	ldr	r3, [r1, #0]
 800428e:	f023 031f 	bic.w	r3, r3, #31
 8004292:	600b      	str	r3, [r1, #0]
 8004294:	680b      	ldr	r3, [r1, #0]
 8004296:	07db      	lsls	r3, r3, #31
 8004298:	d4fc      	bmi.n	8004294 <VectorC4+0x154>
 800429a:	f890 c009 	ldrb.w	ip, [r0, #9]
  dmaStreamDisable(i2cp->dmarx);
 800429e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 80042a0:	6842      	ldr	r2, [r0, #4]
 80042a2:	233d      	movs	r3, #61	; 0x3d
 80042a4:	fa03 f30c 	lsl.w	r3, r3, ip
 80042a8:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 80042aa:	680a      	ldr	r2, [r1, #0]
 80042ac:	6813      	ldr	r3, [r2, #0]
 80042ae:	f023 031f 	bic.w	r3, r3, #31
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	6813      	ldr	r3, [r2, #0]
 80042b6:	07db      	lsls	r3, r3, #31
 80042b8:	d4fc      	bmi.n	80042b4 <VectorC4+0x174>
 80042ba:	684a      	ldr	r2, [r1, #4]
 80042bc:	7a49      	ldrb	r1, [r1, #9]
 80042be:	233d      	movs	r3, #61	; 0x3d
 80042c0:	408b      	lsls	r3, r1
 80042c2:	6013      	str	r3, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80042c4:	686b      	ldr	r3, [r5, #4]
 80042c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ca:	606b      	str	r3, [r5, #4]
    break;
 80042cc:	e76d      	b.n	80041aa <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80042ce:	686b      	ldr	r3, [r5, #4]
 80042d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d4:	606b      	str	r3, [r5, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80042d6:	682b      	ldr	r3, [r5, #0]
 80042d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042dc:	602b      	str	r3, [r5, #0]
 80042de:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80042e2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	dd23      	ble.n	8004332 <VectorC4+0x1f2>
 80042ea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80042ee:	bb03      	cbnz	r3, 8004332 <VectorC4+0x1f2>
  if (*trp != NULL) {
 80042f0:	69d0      	ldr	r0, [r2, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 80042f2:	2101      	movs	r1, #1
 80042f4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 80042f8:	b158      	cbz	r0, 8004312 <VectorC4+0x1d2>
    *trp = NULL;
 80042fa:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 80042fc:	6283      	str	r3, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 80042fe:	f7fd feef 	bl	80020e0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004302:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004306:	2b00      	cmp	r3, #0
 8004308:	dd16      	ble.n	8004338 <VectorC4+0x1f8>
 800430a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800430e:	2b00      	cmp	r3, #0
 8004310:	dd12      	ble.n	8004338 <VectorC4+0x1f8>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004312:	2300      	movs	r3, #0
 8004314:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	e745      	b.n	80041aa <VectorC4+0x6a>
    chSysHalt("SV#8");
 800431e:	480d      	ldr	r0, [pc, #52]	; (8004354 <VectorC4+0x214>)
 8004320:	f7fc fcc6 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 8004324:	480c      	ldr	r0, [pc, #48]	; (8004358 <VectorC4+0x218>)
 8004326:	f7fc fcc3 	bl	8000cb0 <chSysHalt>
}
 800432a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800432e:	f7fe bc2f 	b.w	8002b90 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 8004332:	480a      	ldr	r0, [pc, #40]	; (800435c <VectorC4+0x21c>)
 8004334:	f7fc fcbc 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#7");
 8004338:	4809      	ldr	r0, [pc, #36]	; (8004360 <VectorC4+0x220>)
 800433a:	f7fc fcb9 	bl	8000cb0 <chSysHalt>
 800433e:	bf00      	nop
 8004340:	20000e10 	.word	0x20000e10
 8004344:	2000087c 	.word	0x2000087c
 8004348:	00030011 	.word	0x00030011
 800434c:	e000ed00 	.word	0xe000ed00
 8004350:	00070082 	.word	0x00070082
 8004354:	08006480 	.word	0x08006480
 8004358:	08006488 	.word	0x08006488
 800435c:	08006438 	.word	0x08006438
 8004360:	08006450 	.word	0x08006450
	...

08004370 <VectorC8>:
  uint16_t sr = I2CD2.i2c->SR1;
 8004370:	495a      	ldr	r1, [pc, #360]	; (80044dc <VectorC8+0x16c>)
 8004372:	6b4a      	ldr	r2, [r1, #52]	; 0x34
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 8004376:	6955      	ldr	r5, [r2, #20]
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 800437e:	4c58      	ldr	r4, [pc, #352]	; (80044e0 <VectorC8+0x170>)
 8004380:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004384:	2b00      	cmp	r3, #0
 8004386:	f2c0 8098 	blt.w	80044ba <VectorC8+0x14a>
 800438a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800438e:	2a00      	cmp	r2, #0
 8004390:	f040 8093 	bne.w	80044ba <VectorC8+0x14a>
  oip->dbg.isr_cnt++;
 8004394:	3301      	adds	r3, #1
 8004396:	b2a8      	uxth	r0, r5
 8004398:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800439c:	f382 8811 	msr	BASEPRI, r2
  dmaStreamDisable(i2cp->dmatx);
 80043a0:	e9d1 760c 	ldrd	r7, r6, [r1, #48]	; 0x30
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80043a4:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 80043a8:	683a      	ldr	r2, [r7, #0]
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80043aa:	43db      	mvns	r3, r3
 80043ac:	6173      	str	r3, [r6, #20]
  dmaStreamDisable(i2cp->dmatx);
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	f023 031f 	bic.w	r3, r3, #31
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	07db      	lsls	r3, r3, #31
 80043ba:	d4fc      	bmi.n	80043b6 <VectorC8+0x46>
 80043bc:	f897 c009 	ldrb.w	ip, [r7, #9]
 80043c0:	687a      	ldr	r2, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 80043c2:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 80043c4:	233d      	movs	r3, #61	; 0x3d
 80043c6:	fa03 f30c 	lsl.w	r3, r3, ip
 80043ca:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	f023 031f 	bic.w	r3, r3, #31
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	07db      	lsls	r3, r3, #31
 80043da:	d4fc      	bmi.n	80043d6 <VectorC8+0x66>
 80043dc:	f897 c009 	ldrb.w	ip, [r7, #9]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	233d      	movs	r3, #61	; 0x3d
 80043e4:	fa03 f30c 	lsl.w	r3, r3, ip
 80043e8:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 80043ea:	f3c0 2300 	ubfx	r3, r0, #8, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80043ee:	0582      	lsls	r2, r0, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80043f0:	bf48      	it	mi
 80043f2:	f043 0302 	orrmi.w	r3, r3, #2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80043f6:	0547      	lsls	r7, r0, #21
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80043f8:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80043fa:	d50a      	bpl.n	8004412 <VectorC8+0xa2>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80043fc:	6872      	ldr	r2, [r6, #4]
 80043fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004402:	6072      	str	r2, [r6, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8004404:	6832      	ldr	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8004406:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	6032      	str	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8004410:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8004412:	0502      	lsls	r2, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8004414:	bf44      	itt	mi
 8004416:	f043 0308 	orrmi.w	r3, r3, #8
 800441a:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800441c:	0447      	lsls	r7, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 800441e:	bf44      	itt	mi
 8004420:	f043 0320 	orrmi.w	r3, r3, #32
 8004424:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8004426:	04c6      	lsls	r6, r0, #19
 8004428:	d41c      	bmi.n	8004464 <VectorC8+0xf4>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800442a:	042a      	lsls	r2, r5, #16
 800442c:	d41f      	bmi.n	800446e <VectorC8+0xfe>
  if (i2cp->errors != I2C_NO_ERROR)
 800442e:	bb0b      	cbnz	r3, 8004474 <VectorC8+0x104>
 8004430:	2230      	movs	r2, #48	; 0x30
 8004432:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8004436:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800443a:	2b00      	cmp	r3, #0
 800443c:	dd40      	ble.n	80044c0 <VectorC8+0x150>
 800443e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004442:	2900      	cmp	r1, #0
 8004444:	d13c      	bne.n	80044c0 <VectorC8+0x150>
  oip->dbg.isr_cnt--;
 8004446:	3b01      	subs	r3, #1
 8004448:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800444c:	f381 8811 	msr	BASEPRI, r1
 8004450:	f382 8811 	msr	BASEPRI, r2
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <VectorC8+0x174>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800445c:	d133      	bne.n	80044c6 <VectorC8+0x156>
 800445e:	f383 8811 	msr	BASEPRI, r3
}
 8004462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->errors |= I2C_PEC_ERROR;
 8004464:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8004468:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 800446a:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800446c:	d502      	bpl.n	8004474 <VectorC8+0x104>
    i2cp->errors |= I2C_SMB_ALERT;
 800446e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004472:	608b      	str	r3, [r1, #8]
 8004474:	2330      	movs	r3, #48	; 0x30
 8004476:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800447a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800447e:	2b00      	cmp	r3, #0
 8004480:	dd25      	ble.n	80044ce <VectorC8+0x15e>
 8004482:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004486:	bb13      	cbnz	r3, 80044ce <VectorC8+0x15e>
  if (*trp != NULL) {
 8004488:	69c8      	ldr	r0, [r1, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 800448a:	2201      	movs	r2, #1
 800448c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8004490:	b168      	cbz	r0, 80044ae <VectorC8+0x13e>
    tp->u.rdymsg = msg;
 8004492:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 8004496:	61cb      	str	r3, [r1, #28]
    tp->u.rdymsg = msg;
 8004498:	6282      	str	r2, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 800449a:	f7fd fe21 	bl	80020e0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800449e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dd16      	ble.n	80044d4 <VectorC8+0x164>
 80044a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dd12      	ble.n	80044d4 <VectorC8+0x164>
  oip->dbg.lock_cnt = (cnt_t)0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	e7ba      	b.n	8004430 <VectorC8+0xc0>
    chSysHalt("SV#8");
 80044ba:	480b      	ldr	r0, [pc, #44]	; (80044e8 <VectorC8+0x178>)
 80044bc:	f7fc fbf8 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#9");
 80044c0:	480a      	ldr	r0, [pc, #40]	; (80044ec <VectorC8+0x17c>)
 80044c2:	f7fc fbf5 	bl	8000cb0 <chSysHalt>
}
 80044c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044ca:	f7fe bb61 	b.w	8002b90 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 80044ce:	4808      	ldr	r0, [pc, #32]	; (80044f0 <VectorC8+0x180>)
 80044d0:	f7fc fbee 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#7");
 80044d4:	4807      	ldr	r0, [pc, #28]	; (80044f4 <VectorC8+0x184>)
 80044d6:	f7fc fbeb 	bl	8000cb0 <chSysHalt>
 80044da:	bf00      	nop
 80044dc:	2000087c 	.word	0x2000087c
 80044e0:	20000e10 	.word	0x20000e10
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	08006480 	.word	0x08006480
 80044ec:	08006488 	.word	0x08006488
 80044f0:	08006438 	.word	0x08006438
 80044f4:	08006450 	.word	0x08006450
	...

08004500 <chSchDoPreemption>:
  thread_t *otp = __instance_get_currthread(oip);
 8004500:	4a12      	ldr	r2, [pc, #72]	; (800454c <chSchDoPreemption+0x4c>)
  ch_priority_queue_t *p = pqp->next;
 8004502:	6810      	ldr	r0, [r2, #0]
 8004504:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 8004506:	6803      	ldr	r3, [r0, #0]
static void __sch_reschedule_ahead(void) {
 8004508:	b510      	push	{r4, lr}
  ntp->state = CH_STATE_CURRENT;
 800450a:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8004512:	2400      	movs	r4, #0
  pqp->next       = p->next;
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 800451a:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio > p->prio));
 800451c:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 800451e:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 8004520:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	42a2      	cmp	r2, r4
 8004526:	d8fb      	bhi.n	8004520 <chSchDoPreemption+0x20>
  p->prev       = pqp->prev;
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 800452e:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8004530:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004532:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(ntp, otp);
 8004536:	6a0a      	ldr	r2, [r1, #32]
 8004538:	3b64      	subs	r3, #100	; 0x64
 800453a:	429a      	cmp	r2, r3
 800453c:	d803      	bhi.n	8004546 <chSchDoPreemption+0x46>
}
 800453e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSysSwitch(ntp, otp);
 8004542:	f7fb bedf 	b.w	8000304 <__port_switch>
 8004546:	4802      	ldr	r0, [pc, #8]	; (8004550 <chSchDoPreemption+0x50>)
 8004548:	f7fc fbb2 	bl	8000cb0 <chSysHalt>
 800454c:	20000e10 	.word	0x20000e10
 8004550:	08006460 	.word	0x08006460
	...

08004560 <myprintf>:
static mutex_t mutex_bsp2;


static uint32_t beep_ms = 200;

int myprintf(const char *fmt, ...) {
 8004560:	b40f      	push	{r0, r1, r2, r3}
 8004562:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004566:	ed2d 8b06 	vpush	{d8-d10}
 800456a:	b091      	sub	sp, #68	; 0x44
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800456c:	2330      	movs	r3, #48	; 0x30
 800456e:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8004572:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004576:	f8df b258 	ldr.w	fp, [pc, #600]	; 80047d0 <myprintf+0x270>
 800457a:	e9db 3222 	ldrd	r3, r2, [fp, #136]	; 0x88
 800457e:	4313      	orrs	r3, r2
 8004580:	f040 8190 	bne.w	80048a4 <myprintf+0x344>

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8004584:	4a90      	ldr	r2, [pc, #576]	; (80047c8 <myprintf+0x268>)
 8004586:	f8db 400c 	ldr.w	r4, [fp, #12]
 800458a:	6890      	ldr	r0, [r2, #8]
  oip->dbg.lock_cnt = (cnt_t)1;
 800458c:	2301      	movs	r3, #1
 800458e:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8004592:	2800      	cmp	r0, #0
 8004594:	f000 8288 	beq.w	8004aa8 <myprintf+0x548>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8004598:	68a3      	ldr	r3, [r4, #8]
 800459a:	6882      	ldr	r2, [r0, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	d20b      	bcs.n	80045b8 <myprintf+0x58>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 80045a0:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80045a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	f000 81cb 	beq.w	8004942 <myprintf+0x3e2>
 80045ac:	2b07      	cmp	r3, #7
 80045ae:	f000 81ad 	beq.w	800490c <myprintf+0x3ac>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 81be 	beq.w	8004934 <myprintf+0x3d4>
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED == TRUE
static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {

  ch_queue_t *cp = qp;
 80045b8:	4b83      	ldr	r3, [pc, #524]	; (80047c8 <myprintf+0x268>)
 80045ba:	e003      	b.n	80045c4 <myprintf+0x64>
  do {
    cp = cp->next;
  } while ((cp != qp) &&
 80045bc:	6899      	ldr	r1, [r3, #8]
 80045be:	68a2      	ldr	r2, [r4, #8]
 80045c0:	4291      	cmp	r1, r2
 80045c2:	d303      	bcc.n	80045cc <myprintf+0x6c>
    cp = cp->next;
 80045c4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 80045c6:	4a80      	ldr	r2, [pc, #512]	; (80047c8 <myprintf+0x268>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d1f7      	bne.n	80045bc <myprintf+0x5c>
           (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
  tp->next       = cp;
  tp->prev       = cp->prev;
 80045cc:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 80045ce:	6023      	str	r3, [r4, #0]
  tp->prev       = cp->prev;
 80045d0:	6062      	str	r2, [r4, #4]
  tp->prev->next = tp;
 80045d2:	6014      	str	r4, [r2, #0]
  cp->prev       = tp;
 80045d4:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
      currtp->u.wtmtxp = mp;
 80045d6:	4b7c      	ldr	r3, [pc, #496]	; (80047c8 <myprintf+0x268>)
 80045d8:	62a3      	str	r3, [r4, #40]	; 0x28
      chSchGoSleepS(CH_STATE_WTMTX);
 80045da:	2006      	movs	r0, #6
 80045dc:	f7fd ff10 	bl	8002400 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80045e0:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f040 825c 	bne.w	8004aa2 <myprintf+0x542>
 80045ea:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f340 8257 	ble.w	8004aa2 <myprintf+0x542>
  oip->dbg.lock_cnt = (cnt_t)0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 80045fa:	f383 8811 	msr	BASEPRI, r3
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 80045fe:	4648      	mov	r0, r9
  va_list ap;
  int formatted_bytes;
  chMtxLock(&mutex_bsp2);
  va_start(ap, fmt);
 8004600:	aa21      	add	r2, sp, #132	; 0x84
 8004602:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004606:	9209      	str	r2, [sp, #36]	; 0x24
  formatted_bytes = chvprintf(bsp2, fmt, ap);
 8004608:	9203      	str	r2, [sp, #12]
    if (c == 0) {
 800460a:	2900      	cmp	r1, #0
 800460c:	f000 836a 	beq.w	8004ce4 <myprintf+0x784>
 8004610:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80047cc <myprintf+0x26c>
 8004614:	461f      	mov	r7, r3
 8004616:	e00c      	b.n	8004632 <myprintf+0xd2>
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004618:	f8da 3000 	ldr.w	r3, [sl]
      n++;
      continue;
 800461c:	4681      	mov	r9, r0
      streamPut(chp, (uint8_t)c);
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	486a      	ldr	r0, [pc, #424]	; (80047cc <myprintf+0x26c>)
      n++;
 8004622:	3701      	adds	r7, #1
      streamPut(chp, (uint8_t)c);
 8004624:	4798      	blx	r3
    c = *fmt++;
 8004626:	4648      	mov	r0, r9
 8004628:	f810 1b01 	ldrb.w	r1, [r0], #1
    if (c == 0) {
 800462c:	2900      	cmp	r1, #0
 800462e:	f000 80e3 	beq.w	80047f8 <myprintf+0x298>
    if (c != '%') {
 8004632:	2925      	cmp	r1, #37	; 0x25
 8004634:	d1f0      	bne.n	8004618 <myprintf+0xb8>
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    if (*fmt == '-') {
 8004636:	f899 3001 	ldrb.w	r3, [r9, #1]
 800463a:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 800463c:	bf06      	itte	eq
 800463e:	f109 0002 	addeq.w	r0, r9, #2
      left_align = true;
 8004642:	2301      	moveq	r3, #1
    left_align = false;
 8004644:	2300      	movne	r3, #0
 8004646:	9302      	str	r3, [sp, #8]
    }

    /* Sign mode.*/
    do_sign = false;
    if (*fmt == '+') {
 8004648:	7803      	ldrb	r3, [r0, #0]
 800464a:	2b2b      	cmp	r3, #43	; 0x2b
      do_sign = true;
    }

    /* Filler mode.*/
    filler = ' ';
    if (*fmt == '0') {
 800464c:	bf03      	ittte	eq
 800464e:	7843      	ldrbeq	r3, [r0, #1]
      do_sign = true;
 8004650:	2501      	moveq	r5, #1
      fmt++;
 8004652:	3001      	addeq	r0, #1
    do_sign = false;
 8004654:	2500      	movne	r5, #0
    if (*fmt == '0') {
 8004656:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8004658:	bf03      	ittte	eq
 800465a:	3001      	addeq	r0, #1
      filler = '0';
 800465c:	461e      	moveq	r6, r3
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 800465e:	7803      	ldrbeq	r3, [r0, #0]
    filler = ' ';
 8004660:	2620      	movne	r6, #32
    if ( *fmt == '*') {
 8004662:	2b2a      	cmp	r3, #42	; 0x2a
 8004664:	d149      	bne.n	80046fa <myprintf+0x19a>
      width = va_arg(ap, int);
      ++fmt;
      c = *fmt++;
 8004666:	7843      	ldrb	r3, [r0, #1]
      width = va_arg(ap, int);
 8004668:	9a03      	ldr	r2, [sp, #12]
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
 800466a:	2b2e      	cmp	r3, #46	; 0x2e
      width = va_arg(ap, int);
 800466c:	f852 4b04 	ldr.w	r4, [r2], #4
      c = *fmt++;
 8004670:	f100 0902 	add.w	r9, r0, #2
    if (c == '.') {
 8004674:	d057      	beq.n	8004726 <myprintf+0x1c6>
    precision = 0;
 8004676:	f04f 0800 	mov.w	r8, #0
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800467a:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800467e:	294c      	cmp	r1, #76	; 0x4c
 8004680:	d061      	beq.n	8004746 <myprintf+0x1e6>
    else {
      is_long = (c >= 'A') && (c <= 'Z');
    }

    /* Command decoding.*/
    switch (c) {
 8004682:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8004686:	2934      	cmp	r1, #52	; 0x34
 8004688:	f200 810f 	bhi.w	80048aa <myprintf+0x34a>
 800468c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004690:	010d0173 	.word	0x010d0173
 8004694:	010d010d 	.word	0x010d010d
 8004698:	0173010d 	.word	0x0173010d
 800469c:	010d010d 	.word	0x010d010d
 80046a0:	010d010d 	.word	0x010d010d
 80046a4:	01be010d 	.word	0x01be010d
 80046a8:	010d0185 	.word	0x010d0185
 80046ac:	010d010d 	.word	0x010d010d
 80046b0:	01c1010d 	.word	0x01c1010d
 80046b4:	010d010d 	.word	0x010d010d
 80046b8:	010d0185 	.word	0x010d0185
 80046bc:	010d010d 	.word	0x010d010d
 80046c0:	010d010d 	.word	0x010d010d
 80046c4:	010d010d 	.word	0x010d010d
 80046c8:	010d010d 	.word	0x010d010d
 80046cc:	01f9010d 	.word	0x01f9010d
 80046d0:	010d0173 	.word	0x010d0173
 80046d4:	010d01e5 	.word	0x010d01e5
 80046d8:	0173010d 	.word	0x0173010d
 80046dc:	010d010d 	.word	0x010d010d
 80046e0:	010d010d 	.word	0x010d010d
 80046e4:	01be010d 	.word	0x01be010d
 80046e8:	010d0185 	.word	0x010d0185
 80046ec:	01c4010d 	.word	0x01c4010d
 80046f0:	01c1010d 	.word	0x01c1010d
 80046f4:	010d010d 	.word	0x010d010d
 80046f8:	0185      	.short	0x0185
        c = *fmt++;
 80046fa:	f100 0901 	add.w	r9, r0, #1
        if (c == 0) {
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d07a      	beq.n	80047f8 <myprintf+0x298>
      width = 0;
 8004702:	2400      	movs	r4, #0
 8004704:	e007      	b.n	8004716 <myprintf+0x1b6>
        c = *fmt++;
 8004706:	f819 3b01 	ldrb.w	r3, [r9], #1
          width = width * 10 + c;
 800470a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800470e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
        if (c == 0) {
 8004712:	2b00      	cmp	r3, #0
 8004714:	d070      	beq.n	80047f8 <myprintf+0x298>
        if (c >= '0' && c <= '9') {
 8004716:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	2a09      	cmp	r2, #9
 800471e:	d9f2      	bls.n	8004706 <myprintf+0x1a6>
    if (c == '.') {
 8004720:	2b2e      	cmp	r3, #46	; 0x2e
 8004722:	9a03      	ldr	r2, [sp, #12]
 8004724:	d1a7      	bne.n	8004676 <myprintf+0x116>
      c = *fmt++;
 8004726:	f899 3000 	ldrb.w	r3, [r9]
      if (c == 0) {
 800472a:	2b00      	cmp	r3, #0
 800472c:	d064      	beq.n	80047f8 <myprintf+0x298>
      if (c == '*') {
 800472e:	2b2a      	cmp	r3, #42	; 0x2a
 8004730:	d150      	bne.n	80047d4 <myprintf+0x274>
        c = *fmt++;
 8004732:	f899 3001 	ldrb.w	r3, [r9, #1]
        precision = va_arg(ap, int);
 8004736:	f852 8b04 	ldr.w	r8, [r2], #4
    if (c == 'l' || c == 'L') {
 800473a:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 800473e:	294c      	cmp	r1, #76	; 0x4c
        c = *fmt++;
 8004740:	f109 0902 	add.w	r9, r9, #2
    if (c == 'l' || c == 'L') {
 8004744:	d19d      	bne.n	8004682 <myprintf+0x122>
      c = *fmt++;
 8004746:	f819 3b01 	ldrb.w	r3, [r9], #1
      if (c == 0) {
 800474a:	2b00      	cmp	r3, #0
 800474c:	d054      	beq.n	80047f8 <myprintf+0x298>
    switch (c) {
 800474e:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8004752:	2934      	cmp	r1, #52	; 0x34
 8004754:	f200 80a9 	bhi.w	80048aa <myprintf+0x34a>
 8004758:	e8df f011 	tbh	[pc, r1, lsl #1]
 800475c:	00a7010d 	.word	0x00a7010d
 8004760:	00a700a7 	.word	0x00a700a7
 8004764:	010d00a7 	.word	0x010d00a7
 8004768:	00a700a7 	.word	0x00a700a7
 800476c:	00a700a7 	.word	0x00a700a7
 8004770:	015800a7 	.word	0x015800a7
 8004774:	00a7011f 	.word	0x00a7011f
 8004778:	00a700a7 	.word	0x00a700a7
 800477c:	015b00a7 	.word	0x015b00a7
 8004780:	00a700a7 	.word	0x00a700a7
 8004784:	00a7011f 	.word	0x00a7011f
 8004788:	00a700a7 	.word	0x00a700a7
 800478c:	00a700a7 	.word	0x00a700a7
 8004790:	00a700a7 	.word	0x00a700a7
 8004794:	00a700a7 	.word	0x00a700a7
 8004798:	019300a7 	.word	0x019300a7
 800479c:	00a7010d 	.word	0x00a7010d
 80047a0:	00a7017f 	.word	0x00a7017f
 80047a4:	010d00a7 	.word	0x010d00a7
 80047a8:	00a700a7 	.word	0x00a700a7
 80047ac:	00a700a7 	.word	0x00a700a7
 80047b0:	015800a7 	.word	0x015800a7
 80047b4:	00a7011f 	.word	0x00a7011f
 80047b8:	015e00a7 	.word	0x015e00a7
 80047bc:	015b00a7 	.word	0x015b00a7
 80047c0:	00a700a7 	.word	0x00a700a7
 80047c4:	011f      	.short	0x011f
 80047c6:	bf00      	nop
 80047c8:	200011a4 	.word	0x200011a4
 80047cc:	20000934 	.word	0x20000934
 80047d0:	20000e10 	.word	0x20000e10
      c = *fmt++;
 80047d4:	f109 0901 	add.w	r9, r9, #1
    precision = 0;
 80047d8:	f04f 0800 	mov.w	r8, #0
        while (c >= '0' && c <= '9') {
 80047dc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80047e0:	b2c9      	uxtb	r1, r1
 80047e2:	2909      	cmp	r1, #9
 80047e4:	f63f af49 	bhi.w	800467a <myprintf+0x11a>
          c = *fmt++;
 80047e8:	f819 3b01 	ldrb.w	r3, [r9], #1
          precision = precision * 10 + c;
 80047ec:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80047f0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
          if (c == 0) {
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f1      	bne.n	80047dc <myprintf+0x27c>
 80047f8:	463e      	mov	r6, r7
 80047fa:	f8db 100c 	ldr.w	r1, [fp, #12]
 80047fe:	2330      	movs	r3, #48	; 0x30
 8004800:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004804:	e9db 3222 	ldrd	r3, r2, [fp, #136]	; 0x88
 8004808:	431a      	orrs	r2, r3
 800480a:	d14b      	bne.n	80048a4 <myprintf+0x344>
  return (bool)(qp->next != qp);
 800480c:	4da9      	ldr	r5, [pc, #676]	; (8004ab4 <myprintf+0x554>)
 800480e:	6828      	ldr	r0, [r5, #0]
    chDbgAssert(currtp->mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;
 8004810:	68eb      	ldr	r3, [r5, #12]
  oip->dbg.lock_cnt = (cnt_t)1;
 8004812:	2401      	movs	r4, #1

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8004814:	42a8      	cmp	r0, r5
 8004816:	f8cb 408c 	str.w	r4, [fp, #140]	; 0x8c
    currtp->mtxlist = mp->next;
 800481a:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (chMtxQueueNotEmptyS(mp)) {
 800481c:	f000 8173 	beq.w	8004b06 <myprintf+0x5a6>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 8004820:	6c0c      	ldr	r4, [r1, #64]	; 0x40
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 8004822:	b14b      	cbz	r3, 8004838 <myprintf+0x2d8>
 8004824:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <myprintf+0x2d2>
 800482a:	6892      	ldr	r2, [r2, #8]
 800482c:	4294      	cmp	r4, r2
 800482e:	bf38      	it	cc
 8004830:	4614      	movcc	r4, r2
            ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
          newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 8004832:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f5      	bne.n	8004824 <myprintf+0x2c4>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      currtp->hdr.pqueue.prio = newprio;
 8004838:	608c      	str	r4, [r1, #8]
  qp->next       = p->next;
 800483a:	6803      	ldr	r3, [r0, #0]
 800483c:	4a9d      	ldr	r2, [pc, #628]	; (8004ab4 <myprintf+0x554>)
  qp->next->prev = qp;
 800483e:	605a      	str	r2, [r3, #4]
  qp->next       = p->next;
 8004840:	6013      	str	r3, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = threadref(ch_queue_fifo_remove(&mp->queue));
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8004842:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      tp->mtxlist = mp;
 8004844:	63c2      	str	r2, [r0, #60]	; 0x3c
      mp->next = tp->mtxlist;
 8004846:	e9c2 0302 	strd	r0, r3, [r2, #8]

      /* Note, not using chSchWakeupS() because that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 800484a:	f7fd fc49 	bl	80020e0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800484e:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 8243 	bne.w	8004cde <myprintf+0x77e>
 8004858:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800485c:	2b00      	cmp	r3, #0
 800485e:	f340 823e 	ble.w	8004cde <myprintf+0x77e>
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8004862:	f8db 2000 	ldr.w	r2, [fp]
 8004866:	f8db 300c 	ldr.w	r3, [fp, #12]
 800486a:	6892      	ldr	r2, [r2, #8]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	d90b      	bls.n	800488a <myprintf+0x32a>
    __sch_reschedule_ahead();
 8004872:	f7ff fe45 	bl	8004500 <chSchDoPreemption>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004876:	f8db 3088 	ldr.w	r3, [fp, #136]	; 0x88
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 8111 	bne.w	8004aa2 <myprintf+0x542>
 8004880:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 8004884:	2b00      	cmp	r3, #0
 8004886:	f340 810c 	ble.w	8004aa2 <myprintf+0x542>
  oip->dbg.lock_cnt = (cnt_t)0;
 800488a:	2300      	movs	r3, #0
 800488c:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
 8004890:	f383 8811 	msr	BASEPRI, r3
  va_end(ap);
  chMtxUnlock(&mutex_bsp2);

  return formatted_bytes;
}
 8004894:	4630      	mov	r0, r6
 8004896:	b011      	add	sp, #68	; 0x44
 8004898:	ecbd 8b06 	vpop	{d8-d10}
 800489c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	b004      	add	sp, #16
 80048a2:	4770      	bx	lr
    chSysHalt("SV#4");
 80048a4:	4884      	ldr	r0, [pc, #528]	; (8004ab8 <myprintf+0x558>)
 80048a6:	f7fc fa03 	bl	8000cb0 <chSysHalt>
        l = va_arg(ap, unsigned int);
      }
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80048aa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    }
    i = (int)(p - s);
    if ((width -= i) < 0) {
      width = 0;
    }
    if (left_align == false) {
 80048ae:	9b02      	ldr	r3, [sp, #8]
      break;
 80048b0:	9203      	str	r2, [sp, #12]
 80048b2:	3c01      	subs	r4, #1
 80048b4:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
    if (left_align == false) {
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 80ef 	bne.w	8004a9c <myprintf+0x53c>
      width = -width;
    }
    if (width < 0) {
 80048be:	9b02      	ldr	r3, [sp, #8]
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	2c00      	cmp	r4, #0
      width = -width;
 80048c4:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 80048c8:	f300 8120 	bgt.w	8004b0c <myprintf+0x5ac>
    if (left_align == false) {
 80048cc:	ad0a      	add	r5, sp, #40	; 0x28
 80048ce:	9b01      	ldr	r3, [sp, #4]
 80048d0:	1c5c      	adds	r4, r3, #1
 80048d2:	442c      	add	r4, r5
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 80048d4:	f8da 3000 	ldr.w	r3, [sl]
 80048d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	4650      	mov	r0, sl
 80048e0:	4798      	blx	r3
    while (--i >= 0) {
 80048e2:	42a5      	cmp	r5, r4
 80048e4:	d1f6      	bne.n	80048d4 <myprintf+0x374>
      n++;
 80048e6:	9b01      	ldr	r3, [sp, #4]
 80048e8:	3701      	adds	r7, #1
 80048ea:	443b      	add	r3, r7
 80048ec:	461f      	mov	r7, r3
    }

    while (width) {
 80048ee:	f1b8 0f00 	cmp.w	r8, #0
 80048f2:	f43f ae98 	beq.w	8004626 <myprintf+0xc6>
 80048f6:	4644      	mov	r4, r8
      streamPut(chp, (uint8_t)filler);
 80048f8:	f8da 3000 	ldr.w	r3, [sl]
 80048fc:	4631      	mov	r1, r6
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4650      	mov	r0, sl
 8004902:	4798      	blx	r3
    while (width) {
 8004904:	3c01      	subs	r4, #1
 8004906:	d1f7      	bne.n	80048f8 <myprintf+0x398>
      n++;
 8004908:	4447      	add	r7, r8
 800490a:	e68c      	b.n	8004626 <myprintf+0xc6>
  p->prev->next = p->next;
 800490c:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8004910:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004912:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8004914:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 8004916:	462b      	mov	r3, r5
 8004918:	e003      	b.n	8004922 <myprintf+0x3c2>
  } while ((cp != qp) &&
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	6882      	ldr	r2, [r0, #8]
 800491e:	4291      	cmp	r1, r2
 8004920:	d302      	bcc.n	8004928 <myprintf+0x3c8>
    cp = cp->next;
 8004922:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 8004924:	429d      	cmp	r5, r3
 8004926:	d1f8      	bne.n	800491a <myprintf+0x3ba>
  tp->prev       = cp->prev;
 8004928:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 800492a:	6003      	str	r3, [r0, #0]
  tp->prev       = cp->prev;
 800492c:	6042      	str	r2, [r0, #4]
  tp->prev->next = tp;
 800492e:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8004930:	6058      	str	r0, [r3, #4]
}
 8004932:	e641      	b.n	80045b8 <myprintf+0x58>
  p->prev->next = p->next;
 8004934:	e9d0 3200 	ldrd	r3, r2, [r0]
 8004938:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800493a:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 800493c:	f7fd fbd0 	bl	80020e0 <chSchReadyI.isra.0>
          break;
 8004940:	e63a      	b.n	80045b8 <myprintf+0x58>
  p->prev->next = p->next;
 8004942:	e9d0 3200 	ldrd	r3, r2, [r0]
          ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 8004946:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004948:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800494a:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 800494c:	462b      	mov	r3, r5
 800494e:	e003      	b.n	8004958 <myprintf+0x3f8>
  } while ((cp != qp) &&
 8004950:	6899      	ldr	r1, [r3, #8]
 8004952:	6882      	ldr	r2, [r0, #8]
 8004954:	4291      	cmp	r1, r2
 8004956:	d302      	bcc.n	800495e <myprintf+0x3fe>
    cp = cp->next;
 8004958:	681b      	ldr	r3, [r3, #0]
  } while ((cp != qp) &&
 800495a:	429d      	cmp	r5, r3
 800495c:	d1f8      	bne.n	8004950 <myprintf+0x3f0>
  tp->prev       = cp->prev;
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	6042      	str	r2, [r0, #4]
  tp->next       = cp;
 8004962:	6003      	str	r3, [r0, #0]
  tp->prev->next = tp;
 8004964:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8004966:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8004968:	68a8      	ldr	r0, [r5, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 800496a:	68a3      	ldr	r3, [r4, #8]
 800496c:	6882      	ldr	r2, [r0, #8]
 800496e:	4293      	cmp	r3, r2
 8004970:	f63f ae16 	bhi.w	80045a0 <myprintf+0x40>
 8004974:	e620      	b.n	80045b8 <myprintf+0x58>
        l = va_arg(ap, int);
 8004976:	4613      	mov	r3, r2
 8004978:	f853 1b04 	ldr.w	r1, [r3], #4
 800497c:	9303      	str	r3, [sp, #12]
      if (l < 0) {
 800497e:	2900      	cmp	r1, #0
 8004980:	f2c0 80c7 	blt.w	8004b12 <myprintf+0x5b2>
        if (do_sign) {
 8004984:	2d00      	cmp	r5, #0
 8004986:	f000 81a0 	beq.w	8004cca <myprintf+0x76a>
          *p++ = '+';
 800498a:	232b      	movs	r3, #43	; 0x2b
 800498c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004990:	ab0a      	add	r3, sp, #40	; 0x28
 8004992:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	e0c3      	b.n	8004b22 <myprintf+0x5c2>
    switch (c) {
 800499a:	f04f 0c10 	mov.w	ip, #16
        l = va_arg(ap, unsigned int);
 800499e:	4613      	mov	r3, r2
  q = p + MAX_FILLER;
 80049a0:	f10d 0e33 	add.w	lr, sp, #51	; 0x33
        l = va_arg(ap, unsigned int);
 80049a4:	f853 1b04 	ldr.w	r1, [r3], #4
 80049a8:	9303      	str	r3, [sp, #12]
  q = p + MAX_FILLER;
 80049aa:	4672      	mov	r2, lr
 80049ac:	e000      	b.n	80049b0 <myprintf+0x450>
 80049ae:	462a      	mov	r2, r5
    i = (int)(l % radix);
 80049b0:	4608      	mov	r0, r1
 80049b2:	fbb1 f1fc 	udiv	r1, r1, ip
 80049b6:	fb0c 0511 	mls	r5, ip, r1, r0
    i += '0';
 80049ba:	f105 0330 	add.w	r3, r5, #48	; 0x30
    if (i > '9') {
 80049be:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80049c0:	bfc8      	it	gt
 80049c2:	f105 0337 	addgt.w	r3, r5, #55	; 0x37
    *--q = i;
 80049c6:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 80049c8:	4560      	cmp	r0, ip
    *--q = i;
 80049ca:	f802 3c01 	strb.w	r3, [r2, #-1]
 80049ce:	f102 35ff 	add.w	r5, r2, #4294967295
  } while ((ll /= radix) != 0);
 80049d2:	d2ec      	bcs.n	80049ae <myprintf+0x44e>
  i = (int)(p + MAX_FILLER - q);
 80049d4:	a90a      	add	r1, sp, #40	; 0x28
 80049d6:	ebae 0505 	sub.w	r5, lr, r5
 80049da:	9104      	str	r1, [sp, #16]
 80049dc:	e001      	b.n	80049e2 <myprintf+0x482>
    *p++ = *q++;
 80049de:	f812 3b01 	ldrb.w	r3, [r2], #1
 80049e2:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 80049e6:	4572      	cmp	r2, lr
 80049e8:	d1f9      	bne.n	80049de <myprintf+0x47e>
        i--;
 80049ea:	1e6b      	subs	r3, r5, #1
    if ((width -= i) < 0) {
 80049ec:	1b64      	subs	r4, r4, r5
    s = tmpbuf;
 80049ee:	9d04      	ldr	r5, [sp, #16]
        i--;
 80049f0:	9301      	str	r3, [sp, #4]
    if (left_align == false) {
 80049f2:	9b02      	ldr	r3, [sp, #8]
 80049f4:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
 80049f8:	b91b      	cbnz	r3, 8004a02 <myprintf+0x4a2>
    if (width < 0) {
 80049fa:	2c00      	cmp	r4, #0
      width = -width;
 80049fc:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8004a00:	dc5e      	bgt.n	8004ac0 <myprintf+0x560>
    while (--i >= 0) {
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f6bf af62 	bge.w	80048ce <myprintf+0x36e>
 8004a0a:	e770      	b.n	80048ee <myprintf+0x38e>
    switch (c) {
 8004a0c:	f04f 0c08 	mov.w	ip, #8
 8004a10:	e7c5      	b.n	800499e <myprintf+0x43e>
 8004a12:	f04f 0c0a 	mov.w	ip, #10
 8004a16:	e7c2      	b.n	800499e <myprintf+0x43e>
      if ((s = va_arg(ap, char *)) == 0) {
 8004a18:	4613      	mov	r3, r2
 8004a1a:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a1e:	9303      	str	r3, [sp, #12]
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	f000 8156 	beq.w	8004cd2 <myprintf+0x772>
      for (p = s; *p && (--precision >= 0); p++)
 8004a26:	782a      	ldrb	r2, [r5, #0]
      if (precision == 0) {
 8004a28:	f1b8 0f00 	cmp.w	r8, #0
 8004a2c:	f040 813a 	bne.w	8004ca4 <myprintf+0x744>
      for (p = s; *p && (--precision >= 0); p++)
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	f000 813c 	beq.w	8004cae <myprintf+0x74e>
 8004a36:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 8004a3a:	462a      	mov	r2, r5
 8004a3c:	e003      	b.n	8004a46 <myprintf+0x4e6>
 8004a3e:	1aab      	subs	r3, r5, r2
 8004a40:	eb13 0f08 	cmn.w	r3, r8
 8004a44:	d403      	bmi.n	8004a4e <myprintf+0x4ee>
 8004a46:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f7      	bne.n	8004a3e <myprintf+0x4de>
    i = (int)(p - s);
 8004a4e:	1b52      	subs	r2, r2, r5
        i--;
 8004a50:	1e53      	subs	r3, r2, #1
    if ((width -= i) < 0) {
 8004a52:	1aa4      	subs	r4, r4, r2
        i--;
 8004a54:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8004a56:	2620      	movs	r6, #32
 8004a58:	e7cb      	b.n	80049f2 <myprintf+0x492>
      f = (float) va_arg(ap, double);
 8004a5a:	3207      	adds	r2, #7
 8004a5c:	f022 0307 	bic.w	r3, r2, #7
 8004a60:	e8f3 0102 	ldrd	r0, r1, [r3], #8
 8004a64:	9303      	str	r3, [sp, #12]
 8004a66:	f7fc f815 	bl	8000a94 <__aeabi_d2f>
 8004a6a:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 8004a6e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	d479      	bmi.n	8004b6c <myprintf+0x60c>
        if (do_sign) {
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	f000 8122 	beq.w	8004cc2 <myprintf+0x762>
          *p++ = '+';
 8004a7e:	232b      	movs	r3, #43	; 0x2b
 8004a80:	e077      	b.n	8004b72 <myprintf+0x612>
      *p++ = va_arg(ap, int);
 8004a82:	f852 3b04 	ldr.w	r3, [r2], #4
 8004a86:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    if (left_align == false) {
 8004a8a:	9b02      	ldr	r3, [sp, #8]
      *p++ = va_arg(ap, int);
 8004a8c:	9203      	str	r2, [sp, #12]
 8004a8e:	3c01      	subs	r4, #1
      filler = ' ';
 8004a90:	2620      	movs	r6, #32
    if ((width -= i) < 0) {
 8004a92:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
    if (left_align == false) {
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f43f af11 	beq.w	80048be <myprintf+0x35e>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	e714      	b.n	80048cc <myprintf+0x36c>
    chSysHalt("SV#5");
 8004aa2:	4806      	ldr	r0, [pc, #24]	; (8004abc <myprintf+0x55c>)
 8004aa4:	f7fc f904 	bl	8000cb0 <chSysHalt>
    mp->next = currtp->mtxlist;
 8004aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    mp->owner = currtp;
 8004aaa:	4a02      	ldr	r2, [pc, #8]	; (8004ab4 <myprintf+0x554>)
    currtp->mtxlist = mp;
 8004aac:	63e2      	str	r2, [r4, #60]	; 0x3c
    mp->next = currtp->mtxlist;
 8004aae:	e9c2 4302 	strd	r4, r3, [r2, #8]
 8004ab2:	e59f      	b.n	80045f4 <myprintf+0x94>
 8004ab4:	200011a4 	.word	0x200011a4
 8004ab8:	08006448 	.word	0x08006448
 8004abc:	08006470 	.word	0x08006470
      width = -width;
 8004ac0:	4644      	mov	r4, r8
      if ((*s == '-' || *s == '+') && filler == '0') {
 8004ac2:	7829      	ldrb	r1, [r5, #0]
 8004ac4:	292d      	cmp	r1, #45	; 0x2d
 8004ac6:	d011      	beq.n	8004aec <myprintf+0x58c>
 8004ac8:	292b      	cmp	r1, #43	; 0x2b
 8004aca:	d00f      	beq.n	8004aec <myprintf+0x58c>
        streamPut(chp, (uint8_t)filler);
 8004acc:	f8da 3000 	ldr.w	r3, [sl]
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	4798      	blx	r3
      } while (++width != 0);
 8004ad8:	f118 0801 	adds.w	r8, r8, #1
 8004adc:	d1f6      	bne.n	8004acc <myprintf+0x56c>
    while (--i >= 0) {
 8004ade:	9b01      	ldr	r3, [sp, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	eba7 0704 	sub.w	r7, r7, r4
 8004ae6:	f6bf aef2 	bge.w	80048ce <myprintf+0x36e>
 8004aea:	e59c      	b.n	8004626 <myprintf+0xc6>
      if ((*s == '-' || *s == '+') && filler == '0') {
 8004aec:	2e30      	cmp	r6, #48	; 0x30
 8004aee:	d1ed      	bne.n	8004acc <myprintf+0x56c>
    while (--i >= 0) {
 8004af0:	9b01      	ldr	r3, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
 8004af2:	f8da 2000 	ldr.w	r2, [sl]
 8004af6:	4882      	ldr	r0, [pc, #520]	; (8004d00 <myprintf+0x7a0>)
 8004af8:	68d2      	ldr	r2, [r2, #12]
    while (--i >= 0) {
 8004afa:	3b01      	subs	r3, #1
        streamPut(chp, (uint8_t)*s++);
 8004afc:	3501      	adds	r5, #1
        n++;
 8004afe:	3701      	adds	r7, #1
    while (--i >= 0) {
 8004b00:	9301      	str	r3, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
 8004b02:	4790      	blx	r2
        i--;
 8004b04:	e7e2      	b.n	8004acc <myprintf+0x56c>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8004b06:	4b7f      	ldr	r3, [pc, #508]	; (8004d04 <myprintf+0x7a4>)
 8004b08:	609a      	str	r2, [r3, #8]
void __dbg_check_unlock(void) {
 8004b0a:	e6be      	b.n	800488a <myprintf+0x32a>
      width = -width;
 8004b0c:	4644      	mov	r4, r8
    if (width < 0) {
 8004b0e:	ad0a      	add	r5, sp, #40	; 0x28
 8004b10:	e7d7      	b.n	8004ac2 <myprintf+0x562>
        *p++ = '-';
 8004b12:	232d      	movs	r3, #45	; 0x2d
 8004b14:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        l = -l;
 8004b18:	ab0a      	add	r3, sp, #40	; 0x28
 8004b1a:	4249      	negs	r1, r1
        *p++ = '-';
 8004b1c:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 8004b20:	9304      	str	r3, [sp, #16]
  q = p + MAX_FILLER;
 8004b22:	f105 030b 	add.w	r3, r5, #11
    i = (int)(l % radix);
 8004b26:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 8004d0c <myprintf+0x7ac>
  q = p + MAX_FILLER;
 8004b2a:	4618      	mov	r0, r3
    i = (int)(l % radix);
 8004b2c:	fbae c201 	umull	ip, r2, lr, r1
 8004b30:	08d2      	lsrs	r2, r2, #3
 8004b32:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8004b36:	4694      	mov	ip, r2
 8004b38:	eba1 0248 	sub.w	r2, r1, r8, lsl #1
    i += '0';
 8004b3c:	3230      	adds	r2, #48	; 0x30
    i = (int)(l % radix);
 8004b3e:	4688      	mov	r8, r1
    *--q = i;
 8004b40:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8004b42:	f1b8 0f09 	cmp.w	r8, #9
    *--q = i;
 8004b46:	f800 2d01 	strb.w	r2, [r0, #-1]!
    l /= radix;
 8004b4a:	4661      	mov	r1, ip
  } while ((ll /= radix) != 0);
 8004b4c:	dcee      	bgt.n	8004b2c <myprintf+0x5cc>
  i = (int)(p + MAX_FILLER - q);
 8004b4e:	1a1b      	subs	r3, r3, r0
 8004b50:	442b      	add	r3, r5
 8004b52:	e001      	b.n	8004b58 <myprintf+0x5f8>
    *p++ = *q++;
 8004b54:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004b58:	f805 2b01 	strb.w	r2, [r5], #1
  while (--i);
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	d1f9      	bne.n	8004b54 <myprintf+0x5f4>
    i = (int)(p - s);
 8004b60:	9d04      	ldr	r5, [sp, #16]
 8004b62:	1b5b      	subs	r3, r3, r5
    if ((width -= i) < 0) {
 8004b64:	1ae4      	subs	r4, r4, r3
        i--;
 8004b66:	3b01      	subs	r3, #1
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	e742      	b.n	80049f2 <myprintf+0x492>
        f = -f;
 8004b6c:	eeb1 8a48 	vneg.f32	s16, s16
        *p++ = '-';
 8004b70:	232d      	movs	r3, #45	; 0x2d
          *p++ = '+';
 8004b72:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004b76:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	ab0a      	add	r3, sp, #40	; 0x28
 8004b7e:	9304      	str	r3, [sp, #16]
      p = ftoa(p, f, precision);
 8004b80:	ee18 0a10 	vmov	r0, s16
 8004b84:	f7fb ff06 	bl	8000994 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8004b88:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b8c:	f1b8 0f08 	cmp.w	r8, #8
      p = ftoa(p, f, precision);
 8004b90:	ec41 0b19 	vmov	d9, r0, r1
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8004b94:	d87c      	bhi.n	8004c90 <myprintf+0x730>
  precision = pow10[precision - 1];
 8004b96:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <myprintf+0x7a8>)
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8004b98:	4d5c      	ldr	r5, [pc, #368]	; (8004d0c <myprintf+0x7ac>)
  precision = pow10[precision - 1];
 8004b9a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004b9e:	9307      	str	r3, [sp, #28]
  l = (long)((num - l) * precision);
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	f7fb fed4 	bl	8000950 <__aeabi_ui2d>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8004ba8:	4643      	mov	r3, r8
 8004baa:	fba5 3503 	umull	r3, r5, r5, r3
  l = (long)((num - l) * precision);
 8004bae:	ec41 0b1a 	vmov	d10, r0, r1
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8004bb2:	08ed      	lsrs	r5, r5, #3
  l = (long)num;
 8004bb4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  q = p + MAX_FILLER;
 8004bb8:	9b01      	ldr	r3, [sp, #4]
    i = (int)(l % radix);
 8004bba:	f8df c150 	ldr.w	ip, [pc, #336]	; 8004d0c <myprintf+0x7ac>
  l = (long)num;
 8004bbe:	edcd 7a05 	vstr	s15, [sp, #20]
  q = p + MAX_FILLER;
 8004bc2:	f103 0e0b 	add.w	lr, r3, #11
  l = num;
 8004bc6:	ee17 1a90 	vmov	r1, s15
  q = p + MAX_FILLER;
 8004bca:	4672      	mov	r2, lr
    i = (int)(l % radix);
 8004bcc:	fbac 0301 	umull	r0, r3, ip, r1
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	eba1 0348 	sub.w	r3, r1, r8, lsl #1
    i += '0';
 8004bdc:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8004bde:	4688      	mov	r8, r1
    *--q = i;
 8004be0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8004be2:	f1b8 0f09 	cmp.w	r8, #9
    *--q = i;
 8004be6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8004bea:	4601      	mov	r1, r0
  } while ((ll /= radix) != 0);
 8004bec:	d8ee      	bhi.n	8004bcc <myprintf+0x66c>
  i = (int)(p + MAX_FILLER - q);
 8004bee:	9901      	ldr	r1, [sp, #4]
 8004bf0:	ebae 0e02 	sub.w	lr, lr, r2
 8004bf4:	eb01 000e 	add.w	r0, r1, lr
 8004bf8:	e001      	b.n	8004bfe <myprintf+0x69e>
    *p++ = *q++;
 8004bfa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004bfe:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8004c02:	4281      	cmp	r1, r0
 8004c04:	d1f9      	bne.n	8004bfa <myprintf+0x69a>
 8004c06:	9b01      	ldr	r3, [sp, #4]
  l = (long)((num - l) * precision);
 8004c08:	9805      	ldr	r0, [sp, #20]
 8004c0a:	f10e 3eff 	add.w	lr, lr, #4294967295
  *p++ = '.';
 8004c0e:	4473      	add	r3, lr
 8004c10:	460a      	mov	r2, r1
 8004c12:	9306      	str	r3, [sp, #24]
 8004c14:	232e      	movs	r3, #46	; 0x2e
 8004c16:	f802 3b0c 	strb.w	r3, [r2], #12
 8004c1a:	9201      	str	r2, [sp, #4]
  l = (long)((num - l) * precision);
 8004c1c:	f7fb fea8 	bl	8000970 <__aeabi_i2d>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	ec51 0b19 	vmov	r0, r1, d9
 8004c28:	f7fb fd54 	bl	80006d4 <__aeabi_dsub>
 8004c2c:	ec53 2b1a 	vmov	r2, r3, d10
 8004c30:	f7fb fc22 	bl	8000478 <__aeabi_dmul>
 8004c34:	f7fb ff06 	bl	8000a44 <__aeabi_d2iz>
    ll = num;
 8004c38:	9907      	ldr	r1, [sp, #28]
  *p++ = '.';
 8004c3a:	9b06      	ldr	r3, [sp, #24]
    i = (int)(l % radix);
 8004c3c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8004d0c <myprintf+0x7ac>
    ll = num;
 8004c40:	2909      	cmp	r1, #9
 8004c42:	bf98      	it	ls
 8004c44:	4605      	movls	r5, r0
  q = p + MAX_FILLER;
 8004c46:	9901      	ldr	r1, [sp, #4]
  *p++ = '.';
 8004c48:	3302      	adds	r3, #2
    i = (int)(l % radix);
 8004c4a:	fbae c200 	umull	ip, r2, lr, r0
 8004c4e:	08d2      	lsrs	r2, r2, #3
 8004c50:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8004c54:	4694      	mov	ip, r2
 8004c56:	eba0 0248 	sub.w	r2, r0, r8, lsl #1
    i += '0';
 8004c5a:	3230      	adds	r2, #48	; 0x30
    l /= radix;
 8004c5c:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 8004c5e:	46ac      	mov	ip, r5
    *--q = i;
 8004c60:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8004c62:	fbae 8505 	umull	r8, r5, lr, r5
 8004c66:	f1bc 0f09 	cmp.w	ip, #9
    *--q = i;
 8004c6a:	f801 2d01 	strb.w	r2, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8004c6e:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 8004c72:	d8ea      	bhi.n	8004c4a <myprintf+0x6ea>
  i = (int)(p + MAX_FILLER - q);
 8004c74:	9801      	ldr	r0, [sp, #4]
 8004c76:	9d06      	ldr	r5, [sp, #24]
 8004c78:	1a40      	subs	r0, r0, r1
 8004c7a:	3002      	adds	r0, #2
 8004c7c:	4405      	add	r5, r0
 8004c7e:	4628      	mov	r0, r5
 8004c80:	e001      	b.n	8004c86 <myprintf+0x726>
    *p++ = *q++;
 8004c82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004c86:	f803 2b01 	strb.w	r2, [r3], #1
  while (--i);
 8004c8a:	4283      	cmp	r3, r0
 8004c8c:	d1f9      	bne.n	8004c82 <myprintf+0x722>
 8004c8e:	e767      	b.n	8004b60 <myprintf+0x600>
 8004c90:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8004cf8 <myprintf+0x798>
 8004c94:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <myprintf+0x7b0>)
 8004c96:	4d1f      	ldr	r5, [pc, #124]	; (8004d14 <myprintf+0x7b4>)
 8004c98:	9307      	str	r3, [sp, #28]
 8004c9a:	eeb0 aa47 	vmov.f32	s20, s14
 8004c9e:	eef0 aa67 	vmov.f32	s21, s15
 8004ca2:	e787      	b.n	8004bb4 <myprintf+0x654>
      for (p = s; *p && (--precision >= 0); p++)
 8004ca4:	b11a      	cbz	r2, 8004cae <myprintf+0x74e>
 8004ca6:	f1b8 0801 	subs.w	r8, r8, #1
 8004caa:	f57f aec6 	bpl.w	8004a3a <myprintf+0x4da>
    if (left_align == false) {
 8004cae:	9b02      	ldr	r3, [sp, #8]
 8004cb0:	ea24 78e4 	bic.w	r8, r4, r4, asr #31
 8004cb4:	b91b      	cbnz	r3, 8004cbe <myprintf+0x75e>
    if (width < 0) {
 8004cb6:	2c00      	cmp	r4, #0
      width = -width;
 8004cb8:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8004cbc:	dc14      	bgt.n	8004ce8 <myprintf+0x788>
    if (left_align == false) {
 8004cbe:	2620      	movs	r6, #32
 8004cc0:	e615      	b.n	80048ee <myprintf+0x38e>
    p = tmpbuf;
 8004cc2:	ab0a      	add	r3, sp, #40	; 0x28
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	e75a      	b.n	8004b80 <myprintf+0x620>
 8004cca:	ab0a      	add	r3, sp, #40	; 0x28
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	461d      	mov	r5, r3
 8004cd0:	e727      	b.n	8004b22 <myprintf+0x5c2>
        s = "(null)";
 8004cd2:	4d11      	ldr	r5, [pc, #68]	; (8004d18 <myprintf+0x7b8>)
      if (precision == 0) {
 8004cd4:	f1b8 0f00 	cmp.w	r8, #0
 8004cd8:	f43f aead 	beq.w	8004a36 <myprintf+0x4d6>
 8004cdc:	e7e3      	b.n	8004ca6 <myprintf+0x746>
    chSysHalt("SV#11");
 8004cde:	480f      	ldr	r0, [pc, #60]	; (8004d1c <myprintf+0x7bc>)
 8004ce0:	f7fb ffe6 	bl	8000cb0 <chSysHalt>
  int n = 0;
 8004ce4:	460e      	mov	r6, r1
 8004ce6:	e588      	b.n	80047fa <myprintf+0x29a>
    if (width < 0) {
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
      width = -width;
 8004cec:	4644      	mov	r4, r8
    if (width < 0) {
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	2620      	movs	r6, #32
 8004cf2:	e6e6      	b.n	8004ac2 <myprintf+0x562>
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	00000000 	.word	0x00000000
 8004cfc:	41cdcd65 	.word	0x41cdcd65
 8004d00:	20000934 	.word	0x20000934
 8004d04:	200011a4 	.word	0x200011a4
 8004d08:	08006830 	.word	0x08006830
 8004d0c:	cccccccd 	.word	0xcccccccd
 8004d10:	3b9aca00 	.word	0x3b9aca00
 8004d14:	05f5e100 	.word	0x05f5e100
 8004d18:	08006490 	.word	0x08006490
 8004d1c:	08006458 	.word	0x08006458

08004d20 <adf_write_reg>:
 *
 * @api
 */
//void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {

void adf_write_reg(uint32_t data){
 8004d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    spiSend(&SPID2, 1, &temp);
  }
  spiUnselect(&SPID2);            // Slave Select deassertion.
  */

  palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004d24:	4c97      	ldr	r4, [pc, #604]	; (8004f84 <adf_write_reg+0x264>)
 8004d26:	4d98      	ldr	r5, [pc, #608]	; (8004f88 <adf_write_reg+0x268>)
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
void adf_write_reg(uint32_t data){
 8004d2c:	4606      	mov	r6, r0
  palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004d2e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8004d32:	8367      	strh	r7, [r4, #26]
  myprintf("Bitbang adf_write_reg: 0x%08X\n", data);
 8004d34:	4895      	ldr	r0, [pc, #596]	; (8004f8c <adf_write_reg+0x26c>)
  palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004d36:	8363      	strh	r3, [r4, #26]
void adf_write_reg(uint32_t data){
 8004d38:	b083      	sub	sp, #12
  myprintf("Bitbang adf_write_reg: 0x%08X\n", data);
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	f7ff fc10 	bl	8004560 <myprintf>
  palClearPad(GPIOB, GPIOB_ADF_LE);           // Slave Select assertion.
 8004d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d44:	8363      	strh	r3, [r4, #26]
 8004d46:	f04f 0a18 	mov.w	sl, #24
 8004d4a:	f04f 0830 	mov.w	r8, #48	; 0x30
   for(int i=3; i>=0; --i){
     uint8_t temp = data >> (i * 8);
 8004d4e:	fa26 f90a 	lsr.w	r9, r6, sl
     //myprintf("adf_write_ byte: 0x%X\n",temp);

     //MSB first
     if(temp&0x80)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004d52:	f019 0f80 	tst.w	r9, #128	; 0x80
 8004d56:	bf14      	ite	ne
 8004d58:	8327      	strhne	r7, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004d5a:	8367      	strheq	r7, [r4, #26]
 8004d5c:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004d60:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f040 8104 	bne.w	8004f72 <adf_write_reg+0x252>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004d6a:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004d6c:	210a      	movs	r1, #10
 8004d6e:	2008      	movs	r0, #8
 8004d70:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004d74:	f7fd fb74 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004d78:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 80fb 	bne.w	8004f78 <adf_write_reg+0x258>
 8004d82:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	f340 80f6 	ble.w	8004f78 <adf_write_reg+0x258>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004d8c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004d90:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004d94:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8004d98:	f8a4 b018 	strh.w	fp, [r4, #24]
     chThdSleepMilliseconds(1);
 8004d9c:	200a      	movs	r0, #10
 8004d9e:	f7fd fe57 	bl	8002a50 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004da2:	f019 0f40 	tst.w	r9, #64	; 0x40
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004da6:	f8a4 b01a 	strh.w	fp, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8004daa:	f04f 000a 	mov.w	r0, #10
     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004dae:	bf14      	ite	ne
 8004db0:	8327      	strhne	r7, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004db2:	8367      	strheq	r7, [r4, #26]
     if(temp&0x40)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004db4:	fa5f fb89 	uxtb.w	fp, r9
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004db8:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8004dbc:	f7fd fe48 	bl	8002a50 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004dc0:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8004dc4:	200a      	movs	r0, #10
 8004dc6:	f7fd fe43 	bl	8002a50 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004dca:	f01b 0320 	ands.w	r3, fp, #32
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004dce:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8004dd2:	f04f 000a 	mov.w	r0, #10
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004dd6:	9301      	str	r3, [sp, #4]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004dd8:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004ddc:	bf14      	ite	ne
 8004dde:	8327      	strhne	r7, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004de0:	8367      	strheq	r7, [r4, #26]
     chThdSleepMilliseconds(1);
 8004de2:	f7fd fe35 	bl	8002a50 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004de6:	f8a4 9018 	strh.w	r9, [r4, #24]
 8004dea:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004dee:	e9d5 3122 	ldrd	r3, r1, [r5, #136]	; 0x88
 8004df2:	430b      	orrs	r3, r1
 8004df4:	f040 80bd 	bne.w	8004f72 <adf_write_reg+0x252>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	210a      	movs	r1, #10
 8004dfc:	2008      	movs	r0, #8
 8004dfe:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004e02:	f7fd fb2d 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004e06:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 80b4 	bne.w	8004f78 <adf_write_reg+0x258>
 8004e10:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8004e14:	2900      	cmp	r1, #0
 8004e16:	f340 80af 	ble.w	8004f78 <adf_write_reg+0x258>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004e1a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004e1e:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004e22:	9b01      	ldr	r3, [sp, #4]
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004e24:	f8a4 901a 	strh.w	r9, [r4, #26]
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 80a8 	bne.w	8004f7e <adf_write_reg+0x25e>
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004e2e:	8367      	strh	r7, [r4, #26]
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004e30:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8004e34:	200a      	movs	r0, #10
 8004e36:	f7fd fe0b 	bl	8002a50 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004e3a:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8004e3e:	200a      	movs	r0, #10
 8004e40:	f7fd fe06 	bl	8002a50 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004e44:	f01b 0f08 	tst.w	fp, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004e48:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8004e4c:	f04f 000a 	mov.w	r0, #10
     if(temp&0x08)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004e50:	bf14      	ite	ne
 8004e52:	8327      	strhne	r7, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004e54:	8367      	strheq	r7, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004e56:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8004e5a:	f7fd fdf9 	bl	8002a50 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004e5e:	f8a4 9018 	strh.w	r9, [r4, #24]
 8004e62:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004e66:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f040 8081 	bne.w	8004f72 <adf_write_reg+0x252>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004e70:	2301      	movs	r3, #1
 8004e72:	210a      	movs	r1, #10
 8004e74:	2008      	movs	r0, #8
 8004e76:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004e7a:	f7fd faf1 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004e7e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d178      	bne.n	8004f78 <adf_write_reg+0x258>
 8004e86:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8004e8a:	2a00      	cmp	r2, #0
 8004e8c:	dd74      	ble.n	8004f78 <adf_write_reg+0x258>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004e8e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004e92:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004e96:	f01b 0f04 	tst.w	fp, #4
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004e9a:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8004e9e:	f04f 000a 	mov.w	r0, #10
     if(temp&0x04)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004ea2:	bf14      	ite	ne
 8004ea4:	8327      	strhne	r7, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004ea6:	8367      	strheq	r7, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004ea8:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8004eac:	f7fd fdd0 	bl	8002a50 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004eb0:	f8a4 9018 	strh.w	r9, [r4, #24]
 8004eb4:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004eb8:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d158      	bne.n	8004f72 <adf_write_reg+0x252>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	210a      	movs	r1, #10
 8004ec4:	2008      	movs	r0, #8
 8004ec6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004eca:	f7fd fac9 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004ece:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d150      	bne.n	8004f78 <adf_write_reg+0x258>
 8004ed6:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	dd4c      	ble.n	8004f78 <adf_write_reg+0x258>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004ede:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004ee2:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004ee6:	f01b 0f02 	tst.w	fp, #2
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004eea:	f8a4 901a 	strh.w	r9, [r4, #26]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
     chThdSleepMilliseconds(1);
 8004eee:	f04f 000a 	mov.w	r0, #10
     if(temp&0x02)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004ef2:	bf14      	ite	ne
 8004ef4:	8327      	strhne	r7, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004ef6:	8367      	strheq	r7, [r4, #26]
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004ef8:	f44f 5900 	mov.w	r9, #8192	; 0x2000
     chThdSleepMilliseconds(1);
 8004efc:	f7fd fda8 	bl	8002a50 <chThdSleep>
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004f00:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8004f04:	200a      	movs	r0, #10
 8004f06:	f7fd fda3 	bl	8002a50 <chThdSleep>
     palClearPad(GPIOB, GPIOB_ADF_CLK);

     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004f0a:	f01b 0f01 	tst.w	fp, #1
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004f0e:	f8a4 901a 	strh.w	r9, [r4, #26]
     if(temp&0x01)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004f12:	bf14      	ite	ne
 8004f14:	8327      	strhne	r7, [r4, #24]
     else           palClearPad(GPIOB, GPIOB_ADF_DATA);
 8004f16:	8367      	strheq	r7, [r4, #26]
 8004f18:	f388 8811 	msr	BASEPRI, r8
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004f1c:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 8004f20:	4313      	orrs	r3, r2
 8004f22:	d126      	bne.n	8004f72 <adf_write_reg+0x252>
  oip->dbg.lock_cnt = (cnt_t)1;
 8004f24:	2301      	movs	r3, #1
 8004f26:	210a      	movs	r1, #10
 8004f28:	2008      	movs	r0, #8
 8004f2a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004f2e:	f7fd fa97 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8004f32:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8004f36:	b9fb      	cbnz	r3, 8004f78 <adf_write_reg+0x258>
 8004f38:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	dd1b      	ble.n	8004f78 <adf_write_reg+0x258>
  oip->dbg.lock_cnt = (cnt_t)0;
 8004f40:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8004f44:	f383 8811 	msr	BASEPRI, r3
     chThdSleepMilliseconds(1);
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004f48:	f44f 5900 	mov.w	r9, #8192	; 0x2000
   for(int i=3; i>=0; --i){
 8004f4c:	f1aa 0a08 	sub.w	sl, sl, #8
     palSetPad(GPIOB, GPIOB_ADF_CLK);
 8004f50:	f8a4 9018 	strh.w	r9, [r4, #24]
     chThdSleepMilliseconds(1);
 8004f54:	200a      	movs	r0, #10
 8004f56:	f7fd fd7b 	bl	8002a50 <chThdSleep>
   for(int i=3; i>=0; --i){
 8004f5a:	f11a 0f08 	cmn.w	sl, #8
     palClearPad(GPIOB, GPIOB_ADF_CLK);
 8004f5e:	f8a4 901a 	strh.w	r9, [r4, #26]
   for(int i=3; i>=0; --i){
 8004f62:	f47f aef4 	bne.w	8004d4e <adf_write_reg+0x2e>
   }
   palSetPad(GPIOB, GPIOB_ADF_LE);             // Slave Select deassertion.
 8004f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f6a:	8323      	strh	r3, [r4, #24]
}
 8004f6c:	b003      	add	sp, #12
 8004f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chSysHalt("SV#4");
 8004f72:	4807      	ldr	r0, [pc, #28]	; (8004f90 <adf_write_reg+0x270>)
 8004f74:	f7fb fe9c 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#5");
 8004f78:	4806      	ldr	r0, [pc, #24]	; (8004f94 <adf_write_reg+0x274>)
 8004f7a:	f7fb fe99 	bl	8000cb0 <chSysHalt>
     if(temp&0x20)  palSetPad(GPIOB, GPIOB_ADF_DATA);
 8004f7e:	8327      	strh	r7, [r4, #24]
 8004f80:	e756      	b.n	8004e30 <adf_write_reg+0x110>
 8004f82:	bf00      	nop
 8004f84:	40020400 	.word	0x40020400
 8004f88:	20000e10 	.word	0x20000e10
 8004f8c:	08006498 	.word	0x08006498
 8004f90:	08006448 	.word	0x08006448
 8004f94:	08006470 	.word	0x08006470
	...

08004fa0 <adf_config.constprop.0>:
//if div > 64, n
//muxout/2 is used except when r = 1
//if r = 0: n divider is used (should be usable > 10 MHz)
//testmode = 1: muxout high, testmode = 2: muxout low

void adf_config(uint32_t div_n, uint32_t div_r, uint8_t testmode) {
 8004fa0:	b510      	push	{r4, lr}
  //R0 -----------------------------------------------------------
  uint32_t r;
  if(testmode == 1){
    ADF4156_reg[0] |= 1 << 27; // muxout high
  } else if(testmode == 2){
    ADF4156_reg[0] |= 2 << 27; // muxout low
 8004fa2:	2801      	cmp	r0, #1

  //R4 -----------------------------------------------------------
  //default: all 0

  //Programming sequence R4,R3,..,R0 (write to R0 transfers double buffered settings)
  adf_write_reg(ADF4156_reg[4]);
 8004fa4:	f04f 0004 	mov.w	r0, #4
    ADF4156_reg[0] |= 2 << 27; // muxout low
 8004fa8:	bf0c      	ite	eq
 8004faa:	f04f 6400 	moveq.w	r4, #134217728	; 0x8000000
 8004fae:	f04f 5480 	movne.w	r4, #268435456	; 0x10000000
  adf_write_reg(ADF4156_reg[4]);
 8004fb2:	f7ff feb5 	bl	8004d20 <adf_write_reg>
  adf_write_reg(ADF4156_reg[3]);
 8004fb6:	2013      	movs	r0, #19
 8004fb8:	f7ff feb2 	bl	8004d20 <adf_write_reg>
  adf_write_reg(ADF4156_reg[2]);
 8004fbc:	f248 0012 	movw	r0, #32786	; 0x8012
 8004fc0:	f7ff feae 	bl	8004d20 <adf_write_reg>
  adf_write_reg(ADF4156_reg[1]);
 8004fc4:	2009      	movs	r0, #9
 8004fc6:	f7ff feab 	bl	8004d20 <adf_write_reg>
  adf_write_reg(ADF4156_reg[0]);
 8004fca:	f444 2038 	orr.w	r0, r4, #753664	; 0xb8000
                                     PIN_AFIO_AF(GPIOB_ADF_LE, 0U) |         \
                                     PIN_AFIO_AF(GPIOB_ADF_CLK, 5U) |         \
                                     PIN_AFIO_AF(GPIOB_LED1, 0U) |         \
                                     PIN_AFIO_AF(GPIOB_ADF_DATA, 5U))
   */
}
 8004fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adf_write_reg(ADF4156_reg[0]);
 8004fd2:	f7ff bea5 	b.w	8004d20 <adf_write_reg>
 8004fd6:	bf00      	nop
	...

08004fe0 <ThdSerial>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	; (800505c <ThdSerial+0x7c>)
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <ThdSerial+0x80>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
   115200,
   0,
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD2, &my_config);
 8004fe6:	491f      	ldr	r1, [pc, #124]	; (8005064 <ThdSerial+0x84>)
 8004fe8:	481f      	ldr	r0, [pc, #124]	; (8005068 <ThdSerial+0x88>)
   // myprintf(bsp2, "%.3f %.3f %.3f\n\r", adc_get_temp_internal(), adc_get_temp_heater(), adc_get_current());



   // Getting data from Serial Driver with a timeout.
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8004fea:	4d20      	ldr	r5, [pc, #128]	; (800506c <ThdSerial+0x8c>)
 8004fec:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005084 <ThdSerial+0xa4>
static THD_FUNCTION(ThdSerial, arg) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	61da      	str	r2, [r3, #28]
  sdStart(&SD2, &my_config);
 8004ff4:	f7fe f8b4 	bl	8003160 <sdStart.isra.0>
  myprintf("ThdSerial\n");
 8004ff8:	481d      	ldr	r0, [pc, #116]	; (8005070 <ThdSerial+0x90>)
        heater_disable();
      } else if(tkn == '1'){
        myprintf("Enable heater..\n");
        heater_setTempDegC(50.0);
      } else if(tkn == '2'){
        myprintf("Beep\n");
 8004ffa:	4f1e      	ldr	r7, [pc, #120]	; (8005074 <ThdSerial+0x94>)
  myprintf("ThdSerial\n");
 8004ffc:	f7ff fab0 	bl	8004560 <myprintf>
      sdPut(&SD2, tkn);
 8005000:	f105 0624 	add.w	r6, r5, #36	; 0x24
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8005004:	4628      	mov	r0, r5
 8005006:	f242 7110 	movw	r1, #10000	; 0x2710
 800500a:	f7fd fba1 	bl	8002750 <iqGetTimeout>
    if(tkn != MSG_TIMEOUT) {
 800500e:	1c43      	adds	r3, r0, #1
    msg_t tkn = sdGetTimeout(&SD2, TIME_MS2I(1000));
 8005010:	4604      	mov	r4, r0
    if(tkn != MSG_TIMEOUT) {
 8005012:	d0f7      	beq.n	8005004 <ThdSerial+0x24>
      sdPut(&SD2, tkn);
 8005014:	b2c1      	uxtb	r1, r0
 8005016:	f04f 32ff 	mov.w	r2, #4294967295
 800501a:	4630      	mov	r0, r6
 800501c:	f7fd fcb0 	bl	8002980 <oqPutTimeout>
      if(tkn == '0'){
 8005020:	2c30      	cmp	r4, #48	; 0x30
 8005022:	d00a      	beq.n	800503a <ThdSerial+0x5a>
      } else if(tkn == '1'){
 8005024:	2c31      	cmp	r4, #49	; 0x31
 8005026:	d010      	beq.n	800504a <ThdSerial+0x6a>
      } else if(tkn == '2'){
 8005028:	2c32      	cmp	r4, #50	; 0x32
 800502a:	d1eb      	bne.n	8005004 <ThdSerial+0x24>
        myprintf("Beep\n");
 800502c:	4638      	mov	r0, r7
 800502e:	f7ff fa97 	bl	8004560 <myprintf>
        beep_ms = 10;
 8005032:	230a      	movs	r3, #10
 8005034:	f8c8 3000 	str.w	r3, [r8]
 8005038:	e7e4      	b.n	8005004 <ThdSerial+0x24>
        myprintf("  Disable heater\n");
 800503a:	480f      	ldr	r0, [pc, #60]	; (8005078 <ThdSerial+0x98>)
 800503c:	f7ff fa90 	bl	8004560 <myprintf>
  //To ensure soft start and no current limit overshoot
  palSetPad(GPIOA, GPIOA_heater_enable);
}

void heater_disable(void){
  palClearPad(GPIOA, GPIOA_heater_enable);
 8005040:	4b0e      	ldr	r3, [pc, #56]	; (800507c <ThdSerial+0x9c>)
 8005042:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005046:	835a      	strh	r2, [r3, #26]
}
 8005048:	e7dc      	b.n	8005004 <ThdSerial+0x24>
        myprintf("Enable heater..\n");
 800504a:	480d      	ldr	r0, [pc, #52]	; (8005080 <ThdSerial+0xa0>)
 800504c:	f7ff fa88 	bl	8004560 <myprintf>
void dacPutChannelX(DACDriver *dacp, dacchannel_t channel, dacsample_t sample) {

  osalDbgCheck(channel < (dacchannel_t)DAC_MAX_CHANNELS);
  osalDbgAssert(dacp->state == DAC_READY, "invalid state");

  dac_lld_put_channel(dacp, channel, sample);
 8005050:	f640 302b 	movw	r0, #2859	; 0xb2b
 8005054:	f7fc f9d4 	bl	8001400 <dac_lld_put_channel.constprop.0>
}
 8005058:	e7d4      	b.n	8005004 <ThdSerial+0x24>
 800505a:	bf00      	nop
 800505c:	20000e10 	.word	0x20000e10
 8005060:	080064b8 	.word	0x080064b8
 8005064:	08006818 	.word	0x08006818
 8005068:	20000934 	.word	0x20000934
 800506c:	20000940 	.word	0x20000940
 8005070:	080064c8 	.word	0x080064c8
 8005074:	080064fc 	.word	0x080064fc
 8005078:	080064d4 	.word	0x080064d4
 800507c:	40020000 	.word	0x40020000
 8005080:	080064e8 	.word	0x080064e8
 8005084:	20000800 	.word	0x20000800
	...

08005090 <ThdBlinker>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThdBlinker, 128);
static THD_FUNCTION(ThdBlinker, arg) {
 8005090:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005094:	4ca8      	ldr	r4, [pc, #672]	; (8005338 <ThdBlinker+0x2a8>)
 8005096:	4aa9      	ldr	r2, [pc, #676]	; (800533c <ThdBlinker+0x2ac>)
 8005098:	68e3      	ldr	r3, [r4, #12]
  (void)arg;
  chRegSetThreadName("blinker");
  chThdSleepMilliseconds(100);
  myprintf("ThdBlinker\n");

  for(float i=150; i>30; i=i*0.9){
 800509a:	4da9      	ldr	r5, [pc, #676]	; (8005340 <ThdBlinker+0x2b0>)
 800509c:	61da      	str	r2, [r3, #28]
static THD_FUNCTION(ThdBlinker, arg) {
 800509e:	b083      	sub	sp, #12
  chThdSleepMilliseconds(100);
 80050a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050a4:	f7fd fcd4 	bl	8002a50 <chThdSleep>
  myprintf("ThdBlinker\n");
 80050a8:	48a6      	ldr	r0, [pc, #664]	; (8005344 <ThdBlinker+0x2b4>)
    palSetPad(GPIOB, GPIOB_LED1);
 80050aa:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 800535c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 80050ae:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800534c <ThdBlinker+0x2bc>
  myprintf("ThdBlinker\n");
 80050b2:	f7ff fa55 	bl	8004560 <myprintf>
    palSetPad(GPIOB, GPIOB_LED1);
 80050b6:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  myprintf("ThdBlinker\n");
 80050ba:	2310      	movs	r3, #16
 80050bc:	9301      	str	r3, [sp, #4]
    palSetPad(GPIOB, GPIOB_LED1);
 80050be:	4647      	mov	r7, r8
    chThdSleepMilliseconds(i);
 80050c0:	f240 36e7 	movw	r6, #999	; 0x3e7
    palSetPad(GPIOB, GPIOB_LED1);
 80050c4:	f8ab 7018 	strh.w	r7, [fp, #24]
    chThdSleepMilliseconds(i);
 80050c8:	4628      	mov	r0, r5
    palClearPad(GPIOC, GPIOC_LED2);
 80050ca:	f8aa 701a 	strh.w	r7, [sl, #26]
    chThdSleepMilliseconds(i);
 80050ce:	f001 f829 	bl	8006124 <__aeabi_f2ulz>
 80050d2:	0082      	lsls	r2, r0, #2
 80050d4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 80050d8:	1813      	adds	r3, r2, r0
 80050da:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 80050de:	eb41 020c 	adc.w	r2, r1, ip
 80050e2:	00d2      	lsls	r2, r2, #3
 80050e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	1a1b      	subs	r3, r3, r0
 80050ec:	eb62 0201 	sbc.w	r2, r2, r1
 80050f0:	0112      	lsls	r2, r2, #4
 80050f2:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	1818      	adds	r0, r3, r0
 80050fa:	eb41 0102 	adc.w	r1, r1, r2
 80050fe:	0103      	lsls	r3, r0, #4
 8005100:	0109      	lsls	r1, r1, #4
 8005102:	ea41 7110 	orr.w	r1, r1, r0, lsr #28
 8005106:	1998      	adds	r0, r3, r6
 8005108:	f141 0100 	adc.w	r1, r1, #0
 800510c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005110:	2300      	movs	r3, #0
 8005112:	f7fb fd0f 	bl	8000b34 <__aeabi_uldivmod>
 8005116:	f04f 0930 	mov.w	r9, #48	; 0x30
 800511a:	4601      	mov	r1, r0
 800511c:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005120:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005124:	4313      	orrs	r3, r2
 8005126:	f040 80f6 	bne.w	8005316 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 800512a:	2301      	movs	r3, #1
 800512c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8005130:	2800      	cmp	r0, #0
 8005132:	f000 80f3 	beq.w	800531c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005136:	9000      	str	r0, [sp, #0]
 8005138:	2008      	movs	r0, #8
 800513a:	f7fd f991 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800513e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8005142:	9900      	ldr	r1, [sp, #0]
 8005144:	2301      	movs	r3, #1
 8005146:	2a00      	cmp	r2, #0
 8005148:	f040 80e2 	bne.w	8005310 <ThdBlinker+0x280>
 800514c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005150:	2800      	cmp	r0, #0
 8005152:	f340 80dd 	ble.w	8005310 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005156:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 800515a:	f382 8811 	msr	BASEPRI, r2
    palClearPad(GPIOB, GPIOB_LED1);
 800515e:	f8ab 801a 	strh.w	r8, [fp, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 8005162:	f8aa 8018 	strh.w	r8, [sl, #24]
 8005166:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800516a:	e9d4 2022 	ldrd	r2, r0, [r4, #136]	; 0x88
 800516e:	4302      	orrs	r2, r0
 8005170:	f040 80d1 	bne.w	8005316 <ThdBlinker+0x286>
 8005174:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8005176:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800517a:	f7fd f971 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800517e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 80c4 	bne.w	8005310 <ThdBlinker+0x280>
 8005188:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800518c:	2a00      	cmp	r2, #0
 800518e:	f340 80bf 	ble.w	8005310 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005192:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005196:	f383 8811 	msr	BASEPRI, r3
  for(float i=150; i>30; i=i*0.9){
 800519a:	4628      	mov	r0, r5
 800519c:	f7fb fbfa 	bl	8000994 <__aeabi_f2d>
 80051a0:	a361      	add	r3, pc, #388	; (adr r3, 8005328 <ThdBlinker+0x298>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb f967 	bl	8000478 <__aeabi_dmul>
 80051aa:	f7fb fc73 	bl	8000a94 <__aeabi_d2f>
 80051ae:	9b01      	ldr	r3, [sp, #4]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	4605      	mov	r5, r0
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	d185      	bne.n	80050c4 <ThdBlinker+0x34>
    chThdSleepMilliseconds(i);
  }
  for(float i=30; i<150; i=i*1.1){
    palSetPad(GPIOB, GPIOB_LED1);
 80051b8:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 80051bc:	2311      	movs	r3, #17
 80051be:	f8df a19c 	ldr.w	sl, [pc, #412]	; 800535c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 80051c2:	f8df b188 	ldr.w	fp, [pc, #392]	; 800534c <ThdBlinker+0x2bc>
  for(float i=30; i<150; i=i*1.1){
 80051c6:	4e60      	ldr	r6, [pc, #384]	; (8005348 <ThdBlinker+0x2b8>)
 80051c8:	9300      	str	r3, [sp, #0]
    palSetPad(GPIOB, GPIOB_LED1);
 80051ca:	46c8      	mov	r8, r9
    chThdSleepMilliseconds(i);
 80051cc:	f242 7510 	movw	r5, #10000	; 0x2710
    palSetPad(GPIOB, GPIOB_LED1);
 80051d0:	f8aa 8018 	strh.w	r8, [sl, #24]
    chThdSleepMilliseconds(i);
 80051d4:	4630      	mov	r0, r6
    palClearPad(GPIOC, GPIOC_LED2);
 80051d6:	f8ab 801a 	strh.w	r8, [fp, #26]
    chThdSleepMilliseconds(i);
 80051da:	f000 ffa3 	bl	8006124 <__aeabi_f2ulz>
 80051de:	fba0 0305 	umull	r0, r3, r0, r5
 80051e2:	fb05 3101 	mla	r1, r5, r1, r3
 80051e6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80051ea:	18c0      	adds	r0, r0, r3
 80051ec:	f141 0100 	adc.w	r1, r1, #0
 80051f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051f4:	2300      	movs	r3, #0
 80051f6:	f7fb fc9d 	bl	8000b34 <__aeabi_uldivmod>
 80051fa:	2730      	movs	r7, #48	; 0x30
 80051fc:	4601      	mov	r1, r0
 80051fe:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005202:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005206:	4313      	orrs	r3, r2
 8005208:	f040 8085 	bne.w	8005316 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 800520c:	2301      	movs	r3, #1
 800520e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8005212:	2800      	cmp	r0, #0
 8005214:	f000 8082 	beq.w	800531c <ThdBlinker+0x28c>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005218:	9001      	str	r0, [sp, #4]
 800521a:	2008      	movs	r0, #8
 800521c:	f7fd f920 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005220:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005224:	2b00      	cmp	r3, #0
 8005226:	d173      	bne.n	8005310 <ThdBlinker+0x280>
 8005228:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800522c:	2a00      	cmp	r2, #0
 800522e:	dd6f      	ble.n	8005310 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005230:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005234:	f383 8811 	msr	BASEPRI, r3
    palClearPad(GPIOB, GPIOB_LED1);
 8005238:	f8aa 901a 	strh.w	r9, [sl, #26]
    palSetPad(GPIOC, GPIOC_LED2);
 800523c:	f8ab 9018 	strh.w	r9, [fp, #24]
 8005240:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005244:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005248:	4313      	orrs	r3, r2
 800524a:	d164      	bne.n	8005316 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 800524c:	2301      	movs	r3, #1
 800524e:	9901      	ldr	r1, [sp, #4]
 8005250:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005254:	2008      	movs	r0, #8
 8005256:	f7fd f903 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800525a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800525e:	2b00      	cmp	r3, #0
 8005260:	d156      	bne.n	8005310 <ThdBlinker+0x280>
 8005262:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005266:	2a00      	cmp	r2, #0
 8005268:	dd52      	ble.n	8005310 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 800526a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800526e:	f383 8811 	msr	BASEPRI, r3
  for(float i=30; i<150; i=i*1.1){
 8005272:	4630      	mov	r0, r6
 8005274:	f7fb fb8e 	bl	8000994 <__aeabi_f2d>
 8005278:	a32d      	add	r3, pc, #180	; (adr r3, 8005330 <ThdBlinker+0x2a0>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb f8fb 	bl	8000478 <__aeabi_dmul>
 8005282:	f7fb fc07 	bl	8000a94 <__aeabi_d2f>
 8005286:	9b00      	ldr	r3, [sp, #0]
 8005288:	3b01      	subs	r3, #1
 800528a:	4606      	mov	r6, r0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	d19f      	bne.n	80051d0 <ThdBlinker+0x140>
    chThdSleepMilliseconds(i);
  }

  while (true) {
    palSetPad(GPIOB, GPIOB_LED1);
 8005290:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8005294:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800535c <ThdBlinker+0x2cc>
    palClearPad(GPIOC, GPIOC_LED2);
 8005298:	4e2c      	ldr	r6, [pc, #176]	; (800534c <ThdBlinker+0x2bc>)
    palSetPad(GPIOB, GPIOB_LED1);
 800529a:	46a9      	mov	r9, r5
 800529c:	f8a8 9018 	strh.w	r9, [r8, #24]
    palClearPad(GPIOC, GPIOC_LED2);
 80052a0:	f8a6 901a 	strh.w	r9, [r6, #26]
 80052a4:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80052a8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80052ac:	4313      	orrs	r3, r2
 80052ae:	d132      	bne.n	8005316 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80052b6:	2008      	movs	r0, #8
 80052b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80052bc:	f7fd f8d0 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80052c0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80052c4:	bb23      	cbnz	r3, 8005310 <ThdBlinker+0x280>
 80052c6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	dd20      	ble.n	8005310 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 80052ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80052d2:	f383 8811 	msr	BASEPRI, r3
    chThdSleepMilliseconds(1000);
    palClearPad(GPIOB, GPIOC_LED2);
 80052d6:	f8a8 501a 	strh.w	r5, [r8, #26]
    palSetPad(GPIOC, GPIOB_LED1);
 80052da:	8335      	strh	r5, [r6, #24]
 80052dc:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80052e0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80052e4:	4313      	orrs	r3, r2
 80052e6:	d116      	bne.n	8005316 <ThdBlinker+0x286>
  oip->dbg.lock_cnt = (cnt_t)1;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f242 7110 	movw	r1, #10000	; 0x2710
 80052ee:	2008      	movs	r0, #8
 80052f0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80052f4:	f7fd f8b4 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80052f8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80052fc:	b943      	cbnz	r3, 8005310 <ThdBlinker+0x280>
 80052fe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005302:	2a00      	cmp	r2, #0
 8005304:	dd04      	ble.n	8005310 <ThdBlinker+0x280>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005306:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	e7c5      	b.n	800529c <ThdBlinker+0x20c>
    chSysHalt("SV#5");
 8005310:	480f      	ldr	r0, [pc, #60]	; (8005350 <ThdBlinker+0x2c0>)
 8005312:	f7fb fccd 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#4");
 8005316:	480f      	ldr	r0, [pc, #60]	; (8005354 <ThdBlinker+0x2c4>)
 8005318:	f7fb fcca 	bl	8000cb0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 800531c:	480e      	ldr	r0, [pc, #56]	; (8005358 <ThdBlinker+0x2c8>)
 800531e:	f7fb fcc7 	bl	8000cb0 <chSysHalt>
 8005322:	bf00      	nop
 8005324:	f3af 8000 	nop.w
 8005328:	cccccccd 	.word	0xcccccccd
 800532c:	3feccccc 	.word	0x3feccccc
 8005330:	9999999a 	.word	0x9999999a
 8005334:	3ff19999 	.word	0x3ff19999
 8005338:	20000e10 	.word	0x20000e10
 800533c:	08006504 	.word	0x08006504
 8005340:	43160000 	.word	0x43160000
 8005344:	0800650c 	.word	0x0800650c
 8005348:	41f00000 	.word	0x41f00000
 800534c:	40020800 	.word	0x40020800
 8005350:	08006470 	.word	0x08006470
 8005354:	08006448 	.word	0x08006448
 8005358:	08006668 	.word	0x08006668
 800535c:	40020400 	.word	0x40020400

08005360 <ThdGNSS>:

/*
 * GNSS (UART1) receive and forward
 */
static THD_WORKING_AREA(waThdGNSS, 128);
static THD_FUNCTION(ThdGNSS, arg) {
 8005360:	b508      	push	{r3, lr}
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <ThdGNSS+0x28>)
 8005364:	4a09      	ldr	r2, [pc, #36]	; (800538c <ThdGNSS+0x2c>)
 8005366:	68db      	ldr	r3, [r3, #12]
  (void)arg;
  chRegSetThreadName("GNSS");
  myprintf("ThdGNSS\n");
 8005368:	4809      	ldr	r0, [pc, #36]	; (8005390 <ThdGNSS+0x30>)
 800536a:	61da      	str	r2, [r3, #28]
 800536c:	f7ff f8f8 	bl	8004560 <myprintf>
   9600,
   0,
   USART_CR2_STOP1_BITS,
   0
  };
  sdStart(&SD1, &my_config);
 8005370:	4908      	ldr	r1, [pc, #32]	; (8005394 <ThdGNSS+0x34>)
 8005372:	4809      	ldr	r0, [pc, #36]	; (8005398 <ThdGNSS+0x38>)


  while(true){
    /* Getting data from Serial Driver with a timeout. */
    msg_t tkn = sdGetTimeout(&SD1, TIME_MS2I(100));
 8005374:	4c09      	ldr	r4, [pc, #36]	; (800539c <ThdGNSS+0x3c>)
  sdStart(&SD1, &my_config);
 8005376:	f7fd fef3 	bl	8003160 <sdStart.isra.0>
    msg_t tkn = sdGetTimeout(&SD1, TIME_MS2I(100));
 800537a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800537e:	4620      	mov	r0, r4
 8005380:	f7fd f9e6 	bl	8002750 <iqGetTimeout>
  while(true){
 8005384:	e7f9      	b.n	800537a <ThdGNSS+0x1a>
 8005386:	bf00      	nop
 8005388:	20000e10 	.word	0x20000e10
 800538c:	08006518 	.word	0x08006518
 8005390:	08006520 	.word	0x08006520
 8005394:	08006824 	.word	0x08006824
 8005398:	200008b4 	.word	0x200008b4
 800539c:	200008c0 	.word	0x200008c0

080053a0 <ThdBeeper>:
/*
 * Piezo beeper
 */

static THD_WORKING_AREA(waThdBeeper, 128);
static THD_FUNCTION(ThdBeeper, arg) {
 80053a0:	b580      	push	{r7, lr}
  (void)arg;
  myprintf("ThdBeeper\n");
 80053a2:	4833      	ldr	r0, [pc, #204]	; (8005470 <ThdBeeper+0xd0>)
 80053a4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005488 <ThdBeeper+0xe8>
 80053a8:	4c32      	ldr	r4, [pc, #200]	; (8005474 <ThdBeeper+0xd4>)
 80053aa:	4e33      	ldr	r6, [pc, #204]	; (8005478 <ThdBeeper+0xd8>)

void piezo_toggle(void){
  palTogglePad(GPIOC, GPIOC_PIEZO_A);
 80053ac:	4d33      	ldr	r5, [pc, #204]	; (800547c <ThdBeeper+0xdc>)
 80053ae:	f7ff f8d7 	bl	8004560 <myprintf>

  while(true){

    if(beep_ms){
 80053b2:	f8d8 3000 	ldr.w	r3, [r8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d03a      	beq.n	8005430 <ThdBeeper+0x90>
      systime_t start = chVTGetSystemTimeX();
      systime_t end = chTimeAddX(start, TIME_MS2I(beep_ms));
 80053ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80053be:	f240 30e7 	movw	r0, #999	; 0x3e7
 80053c2:	2100      	movs	r1, #0
 80053c4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80053c8:	2300      	movs	r3, #0
 80053ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053ce:	f7fb fbb1 	bl	8000b34 <__aeabi_uldivmod>
 80053d2:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80053d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 80053d6:	1bdb      	subs	r3, r3, r7
      while (chTimeIsInRangeX(chVTGetSystemTimeX(), start, end)) {
 80053d8:	4298      	cmp	r0, r3
      systime_t end = chTimeAddX(start, TIME_MS2I(beep_ms));
 80053da:	4682      	mov	sl, r0
      while (chTimeIsInRangeX(chVTGetSystemTimeX(), start, end)) {
 80053dc:	d925      	bls.n	800542a <ThdBeeper+0x8a>
 80053de:	f04f 0930 	mov.w	r9, #48	; 0x30
 80053e2:	696b      	ldr	r3, [r5, #20]
 80053e4:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 80053e8:	616b      	str	r3, [r5, #20]
  palTogglePad(GPIOC, GPIOC_PIEZO_B);
 80053ea:	696b      	ldr	r3, [r5, #20]
 80053ec:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 80053f0:	616b      	str	r3, [r5, #20]
 80053f2:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80053f6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d135      	bne.n	800546a <ThdBeeper+0xca>
  oip->dbg.lock_cnt = (cnt_t)1;
 80053fe:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005400:	210a      	movs	r1, #10
 8005402:	2008      	movs	r0, #8
 8005404:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005408:	f7fd f82a 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800540c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005410:	bb43      	cbnz	r3, 8005464 <ThdBeeper+0xc4>
 8005412:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005416:	2a00      	cmp	r2, #0
 8005418:	dd24      	ble.n	8005464 <ThdBeeper+0xc4>
  oip->dbg.lock_cnt = (cnt_t)0;
 800541a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005424:	1bdb      	subs	r3, r3, r7
 8005426:	459a      	cmp	sl, r3
 8005428:	d8db      	bhi.n	80053e2 <ThdBeeper+0x42>
        piezo_toggle();
        chThdSleepMilliseconds(1);
      }
      beep_ms = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	f8c8 3000 	str.w	r3, [r8]
 8005430:	2330      	movs	r3, #48	; 0x30
 8005432:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005436:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800543a:	4313      	orrs	r3, r2
 800543c:	d115      	bne.n	800546a <ThdBeeper+0xca>
  oip->dbg.lock_cnt = (cnt_t)1;
 800543e:	2301      	movs	r3, #1
 8005440:	2164      	movs	r1, #100	; 0x64
 8005442:	2008      	movs	r0, #8
 8005444:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005448:	f7fd f80a 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800544c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005450:	b943      	cbnz	r3, 8005464 <ThdBeeper+0xc4>
 8005452:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005456:	2a00      	cmp	r2, #0
 8005458:	dd04      	ble.n	8005464 <ThdBeeper+0xc4>
  oip->dbg.lock_cnt = (cnt_t)0;
 800545a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	e7a6      	b.n	80053b2 <ThdBeeper+0x12>
    chSysHalt("SV#5");
 8005464:	4806      	ldr	r0, [pc, #24]	; (8005480 <ThdBeeper+0xe0>)
 8005466:	f7fb fc23 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#4");
 800546a:	4806      	ldr	r0, [pc, #24]	; (8005484 <ThdBeeper+0xe4>)
 800546c:	f7fb fc20 	bl	8000cb0 <chSysHalt>
 8005470:	0800652c 	.word	0x0800652c
 8005474:	20000e10 	.word	0x20000e10
 8005478:	40000c00 	.word	0x40000c00
 800547c:	40020800 	.word	0x40020800
 8005480:	08006470 	.word	0x08006470
 8005484:	08006448 	.word	0x08006448
 8005488:	20000800 	.word	0x20000800
 800548c:	00000000 	.word	0x00000000

08005490 <ThdCntr>:

void ThdCntrFunc(void) {
  myprintf("ThdCntr\n");

  //selftest muxout
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 8005490:	4e37      	ldr	r6, [pc, #220]	; (8005570 <ThdCntr+0xe0>)
  myprintf("ThdCntr\n");
 8005492:	4838      	ldr	r0, [pc, #224]	; (8005574 <ThdCntr+0xe4>)

  //enable and select int 100M ref
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 8005494:	4c38      	ldr	r4, [pc, #224]	; (8005578 <ThdCntr+0xe8>)
    chThdSleepMilliseconds(10);
  }
}

static THD_WORKING_AREA(waThdCntr, 128);
static THD_FUNCTION(ThdCntr, arg) {
 8005496:	b580      	push	{r7, lr}
  myprintf("ThdCntr\n");
 8005498:	f7ff f862 	bl	8004560 <myprintf>
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 800549c:	6931      	ldr	r1, [r6, #16]
 800549e:	4837      	ldr	r0, [pc, #220]	; (800557c <ThdCntr+0xec>)
 80054a0:	f001 0101 	and.w	r1, r1, #1
  palClearPad(GPIOB, GPIOB_REF_INT_SEL);
 80054a4:	2501      	movs	r5, #1
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 80054a6:	2720      	movs	r7, #32
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 80054a8:	f7ff f85a 	bl	8004560 <myprintf>
  palSetPad(GPIOB, GPIOB_REF_INT_EN);
 80054ac:	8327      	strh	r7, [r4, #24]
  chThdSleepMilliseconds(100);
 80054ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  palClearPad(GPIOB, GPIOB_REF_INT_SEL);
 80054b2:	8365      	strh	r5, [r4, #26]
  chThdSleepMilliseconds(100);
 80054b4:	f7fd facc 	bl	8002a50 <chThdSleep>

  myprintf("testmode muxout low\n");
 80054b8:	4831      	ldr	r0, [pc, #196]	; (8005580 <ThdCntr+0xf0>)
 80054ba:	f7ff f851 	bl	8004560 <myprintf>
  adf_config(1, 1, 2); //testmode muxout low
 80054be:	2002      	movs	r0, #2
 80054c0:	f7ff fd6e 	bl	8004fa0 <adf_config.constprop.0>
  chThdSleepMilliseconds(1);
 80054c4:	200a      	movs	r0, #10
 80054c6:	f7fd fac3 	bl	8002a50 <chThdSleep>

  //disable and select ext to freeze synchronizer with 0 at output
  palClearPad(GPIOB, GPIOB_REF_INT_EN);
 80054ca:	8367      	strh	r7, [r4, #26]
  palSetPad(GPIOB, GPIOB_REF_INT_SEL);
  chThdSleepMilliseconds(100);
 80054cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  palSetPad(GPIOB, GPIOB_REF_INT_SEL);
 80054d0:	8325      	strh	r5, [r4, #24]
  chThdSleepMilliseconds(100);
 80054d2:	f7fd fabd 	bl	8002a50 <chThdSleep>

  myprintf("testmode muxout high\n");
 80054d6:	482b      	ldr	r0, [pc, #172]	; (8005584 <ThdCntr+0xf4>)
 80054d8:	f7ff f842 	bl	8004560 <myprintf>
  adf_config(1, 1, 1); //testmode muxout high
 80054dc:	4628      	mov	r0, r5
 80054de:	f7ff fd5f 	bl	8004fa0 <adf_config.constprop.0>
  chThdSleepMilliseconds(1);
 80054e2:	200a      	movs	r0, #10
 80054e4:	f7fd fab4 	bl	8002a50 <chThdSleep>
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 80054e8:	6931      	ldr	r1, [r6, #16]
 80054ea:	4824      	ldr	r0, [pc, #144]	; (800557c <ThdCntr+0xec>)
 80054ec:	4029      	ands	r1, r5
 80054ee:	f7ff f837 	bl	8004560 <myprintf>

  myprintf("testmode muxout low\n");
 80054f2:	4823      	ldr	r0, [pc, #140]	; (8005580 <ThdCntr+0xf0>)
 80054f4:	f7ff f834 	bl	8004560 <myprintf>
  adf_config(1, 1, 2); //testmode muxout low
 80054f8:	2002      	movs	r0, #2
 80054fa:	f7ff fd51 	bl	8004fa0 <adf_config.constprop.0>
  chThdSleepMilliseconds(1);
 80054fe:	200a      	movs	r0, #10
 8005500:	f7fd faa6 	bl	8002a50 <chThdSleep>
  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 8005504:	6931      	ldr	r1, [r6, #16]
 8005506:	481d      	ldr	r0, [pc, #116]	; (800557c <ThdCntr+0xec>)
 8005508:	4029      	ands	r1, r5
 800550a:	f7ff f829 	bl	8004560 <myprintf>
 800550e:	2330      	movs	r3, #48	; 0x30
 8005510:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005514:	4c1c      	ldr	r4, [pc, #112]	; (8005588 <ThdCntr+0xf8>)
 8005516:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800551a:	bb13      	cbnz	r3, 8005562 <ThdCntr+0xd2>
//  chThdSleepMilliseconds(1);
//  myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));

  while(true){
    chThdSleepMilliseconds(1000);
    myprintf("CNT_in = %d\n", palReadPad(GPIOA, GPIOA_CNT_IN));
 800551c:	4f17      	ldr	r7, [pc, #92]	; (800557c <ThdCntr+0xec>)
 800551e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005522:	b9f3      	cbnz	r3, 8005562 <ThdCntr+0xd2>
 8005524:	f242 7110 	movw	r1, #10000	; 0x2710
 8005528:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 800552a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800552e:	f7fc ff97 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005532:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005536:	b9bb      	cbnz	r3, 8005568 <ThdCntr+0xd8>
 8005538:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800553c:	2a00      	cmp	r2, #0
 800553e:	dd13      	ble.n	8005568 <ThdCntr+0xd8>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005540:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	6931      	ldr	r1, [r6, #16]
 800554a:	4638      	mov	r0, r7
 800554c:	f001 0101 	and.w	r1, r1, #1
 8005550:	f7ff f806 	bl	8004560 <myprintf>
 8005554:	2330      	movs	r3, #48	; 0x30
 8005556:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800555a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0dd      	beq.n	800551e <ThdCntr+0x8e>
    chSysHalt("SV#4");
 8005562:	480a      	ldr	r0, [pc, #40]	; (800558c <ThdCntr+0xfc>)
 8005564:	f7fb fba4 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#5");
 8005568:	4809      	ldr	r0, [pc, #36]	; (8005590 <ThdCntr+0x100>)
 800556a:	f7fb fba1 	bl	8000cb0 <chSysHalt>
 800556e:	bf00      	nop
 8005570:	40020000 	.word	0x40020000
 8005574:	08006538 	.word	0x08006538
 8005578:	40020400 	.word	0x40020400
 800557c:	08006544 	.word	0x08006544
 8005580:	08006554 	.word	0x08006554
 8005584:	0800656c 	.word	0x0800656c
 8005588:	20000e10 	.word	0x20000e10
 800558c:	08006448 	.word	0x08006448
 8005590:	08006470 	.word	0x08006470
	...

080055a0 <ThdDisp>:
  (void)arg;
  ThdCntrFunc();
}

static THD_WORKING_AREA(waThdDisp, 128);
static THD_FUNCTION(ThdDisp, arg) {
 80055a0:	b500      	push	{lr}

  return global;
}

void ThdDispFunc(void) {
  myprintf("ThdDisp\n");
 80055a2:	4885      	ldr	r0, [pc, #532]	; (80057b8 <ThdDisp+0x218>)
 80055a4:	b083      	sub	sp, #12
 80055a6:	f7fe ffdb 	bl	8004560 <myprintf>
 80055aa:	2330      	movs	r3, #48	; 0x30
 80055ac:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 80055b0:	f7fd fd3e 	bl	8003030 <__dbg_check_lock>
  gptp->config = config;
 80055b4:	4a81      	ldr	r2, [pc, #516]	; (80057bc <ThdDisp+0x21c>)
 80055b6:	4982      	ldr	r1, [pc, #520]	; (80057c0 <ThdDisp+0x220>)
  if (gptp->state == GPT_STOP) {
 80055b8:	7813      	ldrb	r3, [r2, #0]
 80055ba:	6051      	str	r1, [r2, #4]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f000 80e0 	beq.w	8005782 <ThdDisp+0x1e2>
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80055c2:	6893      	ldr	r3, [r2, #8]
 80055c4:	497f      	ldr	r1, [pc, #508]	; (80057c4 <ThdDisp+0x224>)
 80055c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ca:	3b01      	subs	r3, #1
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80055cc:	b29b      	uxth	r3, r3
  gptp->tim->CR1  = 0U;                         /* Initially stopped.       */
 80055ce:	68d1      	ldr	r1, [r2, #12]
 80055d0:	2500      	movs	r5, #0
 80055d2:	600d      	str	r5, [r1, #0]
    gptp->state = GPT_READY;
 80055d4:	2002      	movs	r0, #2
  gptp->tim->CR2  = gptp->config->cr2;
 80055d6:	604d      	str	r5, [r1, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80055d8:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR   = 0U;                         /* Clear pending IRQs.      */
 80055da:	610d      	str	r5, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80055dc:	60cd      	str	r5, [r1, #12]
 80055de:	7010      	strb	r0, [r2, #0]
  __dbg_check_unlock();
 80055e0:	f7fd fd0e 	bl	8003000 <__dbg_check_unlock>
 80055e4:	f385 8811 	msr	BASEPRI, r5
  palSetPadMode(GPIOB,  9, PAL_MODE_ALTERNATE(9) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN); //I2C2 SDA
 80055e8:	4877      	ldr	r0, [pc, #476]	; (80057c8 <ThdDisp+0x228>)
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 80055ea:	4c78      	ldr	r4, [pc, #480]	; (80057cc <ThdDisp+0x22c>)
 80055ec:	f240 429e 	movw	r2, #1182	; 0x49e
 80055f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055f4:	f7fb fadc 	bl	8000bb0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 10, PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN); //I2C2 SCL
 80055f8:	f240 221e 	movw	r2, #542	; 0x21e
 80055fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005600:	f7fb fad6 	bl	8000bb0 <_pal_lld_setgroupmode>
  chThdSleepMilliseconds(500);
 8005604:	f241 3088 	movw	r0, #5000	; 0x1388
 8005608:	f7fd fa22 	bl	8002a50 <chThdSleep>
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    u8x8->bus_clock = 0;		/* issue 769 */
    u8x8->i2c_address = 255;
 800560c:	20ff      	movs	r0, #255	; 0xff
 800560e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005612:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
{
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005616:	486e      	ldr	r0, [pc, #440]	; (80057d0 <ThdDisp+0x230>)
 8005618:	60a0      	str	r0, [r4, #8]
  u8x8->cad_cb = cad_cb;
 800561a:	486e      	ldr	r0, [pc, #440]	; (80057d4 <ThdDisp+0x234>)
 800561c:	60e0      	str	r0, [r4, #12]
  u8x8->byte_cb = byte_cb;
 800561e:	486e      	ldr	r0, [pc, #440]	; (80057d8 <ThdDisp+0x238>)
 8005620:	6120      	str	r0, [r4, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005622:	486e      	ldr	r0, [pc, #440]	; (80057dc <ThdDisp+0x23c>)
 8005624:	6160      	str	r0, [r4, #20]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005626:	2109      	movs	r1, #9
 8005628:	462b      	mov	r3, r5
 800562a:	462a      	mov	r2, r5
    u8x8->display_info = NULL;
 800562c:	6025      	str	r5, [r4, #0]
    u8x8->is_font_inverse_mode = 0;
 800562e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005632:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8005636:	61a5      	str	r5, [r4, #24]
 8005638:	4620      	mov	r0, r4
 800563a:	f7fb ffd1 	bl	80015e0 <u8x8_d_sh1107_64x128>
  u8g2->ll_hvline = ll_hvline_cb;
 800563e:	4a68      	ldr	r2, [pc, #416]	; (80057e0 <ThdDisp+0x240>)
 8005640:	62e2      	str	r2, [r4, #44]	; 0x2c
  u8g2->tile_buf_height = tile_buf_height;
 8005642:	2210      	movs	r2, #16
 8005644:	8722      	strh	r2, [r4, #56]	; 0x38
  u8g2->tile_buf_ptr = buf;
 8005646:	4b67      	ldr	r3, [pc, #412]	; (80057e4 <ThdDisp+0x244>)
 8005648:	6363      	str	r3, [r4, #52]	; 0x34
  u8g2->draw_color = 1;
 800564a:	f240 1201 	movw	r2, #257	; 0x101
  u8g2->cb->update_dimension(u8g2);
 800564e:	4620      	mov	r0, r4
  u8g2->draw_color = 1;
 8005650:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
  u8g2->cb = u8g2_cb;
 8005654:	4b64      	ldr	r3, [pc, #400]	; (80057e8 <ThdDisp+0x248>)
 8005656:	6323      	str	r3, [r4, #48]	; 0x30
  u8g2->font = NULL;
 8005658:	65a5      	str	r5, [r4, #88]	; 0x58
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800565a:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
  u8g2->font_height_mode = 0; /* issue 2046 */
 800565e:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
  u8g2->bitmap_transparency = 0;
 8005662:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
  u8g2->cb->update_dimension(u8g2);
 8005666:	f7fb fdcb 	bl	8001200 <u8g2_update_dimension_r1>
  u8g2->clip_x0 = 0;
 800566a:	4b60      	ldr	r3, [pc, #384]	; (80057ec <ThdDisp+0x24c>)
  u8g2->clip_y0 = 0;
 800566c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  u8g2->cb->update_page_win(u8g2);
 8005670:	f7fb fdee 	bl	8001250 <u8g2_update_page_win_r1>
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005674:	4a5e      	ldr	r2, [pc, #376]	; (80057f0 <ThdDisp+0x250>)
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8005676:	68a6      	ldr	r6, [r4, #8]
 8005678:	65e2      	str	r2, [r4, #92]	; 0x5c
 800567a:	462b      	mov	r3, r5
 800567c:	462a      	mov	r2, r5
  u8g2->font_decode.dir = 0;
 800567e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
 8005682:	210a      	movs	r1, #10
 8005684:	47b0      	blx	r6
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005686:	462b      	mov	r3, r5
 8005688:	462a      	mov	r2, r5
 800568a:	68a6      	ldr	r6, [r4, #8]
 800568c:	210b      	movs	r1, #11
 800568e:	4620      	mov	r0, r4
 8005690:	47b0      	blx	r6
  u8g2_SetFont(u8g2, u8g2_font_6x12_tf);
 8005692:	4958      	ldr	r1, [pc, #352]	; (80057f4 <ThdDisp+0x254>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8005694:	4e58      	ldr	r6, [pc, #352]	; (80057f8 <ThdDisp+0x258>)
 8005696:	4620      	mov	r0, r4
 8005698:	f7fb fbf2 	bl	8000e80 <u8g2_SetFont>
  u8g2_ClearBuffer(u8g2);
 800569c:	4620      	mov	r0, r4
 800569e:	f7fd fc4f 	bl	8002f40 <u8g2_ClearBuffer>
  return u8g2_draw_string(u8g2, x, y, str);
 80056a2:	4629      	mov	r1, r5
 80056a4:	4b55      	ldr	r3, [pc, #340]	; (80057fc <ThdDisp+0x25c>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80056a6:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80056a8:	2208      	movs	r2, #8
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7fc f900 	bl	80018b0 <u8g2_draw_string.isra.0>
  u8g2_SendBuffer(u8g2);
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7fb fb95 	bl	8000de0 <u8g2_SendBuffer>
 80056b6:	4b52      	ldr	r3, [pc, #328]	; (8005800 <ThdDisp+0x260>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80056b8:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80056ba:	2208      	movs	r2, #8
 80056bc:	4629      	mov	r1, r5
 80056be:	4620      	mov	r0, r4
 80056c0:	f7fc f8f6 	bl	80018b0 <u8g2_draw_string.isra.0>
  u8g2_SendBuffer(u8g2);
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7fb fb8b 	bl	8000de0 <u8g2_SendBuffer>
  u8g2_ClearBuffer(u8g2);
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7fd fc38 	bl	8002f40 <u8g2_ClearBuffer>
  u8g2_SetFont(u8g2, u8g2_font_helvR12_tr);
 80056d0:	4620      	mov	r0, r4
 80056d2:	494c      	ldr	r1, [pc, #304]	; (8005804 <ThdDisp+0x264>)
 80056d4:	f7fb fbd4 	bl	8000e80 <u8g2_SetFont>
 80056d8:	4b4b      	ldr	r3, [pc, #300]	; (8005808 <ThdDisp+0x268>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80056da:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80056dc:	221e      	movs	r2, #30
 80056de:	4629      	mov	r1, r5
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7fc f8e5 	bl	80018b0 <u8g2_draw_string.isra.0>
  u8g2_SetFont(u8g2, u8g2_font_helvB10_tr);
 80056e6:	4620      	mov	r0, r4
 80056e8:	4948      	ldr	r1, [pc, #288]	; (800580c <ThdDisp+0x26c>)
 80056ea:	f7fb fbc9 	bl	8000e80 <u8g2_SetFont>
 80056ee:	4b48      	ldr	r3, [pc, #288]	; (8005810 <ThdDisp+0x270>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80056f0:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80056f2:	2232      	movs	r2, #50	; 0x32
 80056f4:	4629      	mov	r1, r5
 80056f6:	4620      	mov	r0, r4
 80056f8:	f7fc f8da 	bl	80018b0 <u8g2_draw_string.isra.0>
  u8g2_SetFont(u8g2, u8g2_font_5x7_tf);
 80056fc:	4620      	mov	r0, r4
 80056fe:	4945      	ldr	r1, [pc, #276]	; (8005814 <ThdDisp+0x274>)
 8005700:	f7fb fbbe 	bl	8000e80 <u8g2_SetFont>
 8005704:	2232      	movs	r2, #50	; 0x32
 8005706:	4b44      	ldr	r3, [pc, #272]	; (8005818 <ThdDisp+0x278>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8005708:	6066      	str	r6, [r4, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800570a:	2178      	movs	r1, #120	; 0x78
 800570c:	4620      	mov	r0, r4
 800570e:	f7fc f8cf 	bl	80018b0 <u8g2_draw_string.isra.0>
  u8g2_SendBuffer(u8g2);
 8005712:	4620      	mov	r0, r4
 8005714:	f7fb fb64 	bl	8000de0 <u8g2_SendBuffer>
  return global;
 8005718:	4b40      	ldr	r3, [pc, #256]	; (800581c <ThdDisp+0x27c>)

  int temp = display_init();
  myprintf("display initialized (move to separate disp thread) \n");
 800571a:	4841      	ldr	r0, [pc, #260]	; (8005820 <ThdDisp+0x280>)
  return global;
 800571c:	6819      	ldr	r1, [r3, #0]
 800571e:	9101      	str	r1, [sp, #4]
  myprintf("display initialized (move to separate disp thread) \n");
 8005720:	f7fe ff1e 	bl	8004560 <myprintf>
  myprintf("I2C_addr = %d\n", temp);
 8005724:	9901      	ldr	r1, [sp, #4]
 8005726:	483f      	ldr	r0, [pc, #252]	; (8005824 <ThdDisp+0x284>)
 8005728:	f7fe ff1a 	bl	8004560 <myprintf>
  myprintf("I2C_addr = 0x%x\n", temp);
 800572c:	9901      	ldr	r1, [sp, #4]
 800572e:	483e      	ldr	r0, [pc, #248]	; (8005828 <ThdDisp+0x288>)
 8005730:	f7fe ff16 	bl	8004560 <myprintf>
 8005734:	2330      	movs	r3, #48	; 0x30
 8005736:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800573a:	4c3c      	ldr	r4, [pc, #240]	; (800582c <ThdDisp+0x28c>)
 800573c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005740:	b9e3      	cbnz	r3, 800577c <ThdDisp+0x1dc>
  oip->dbg.lock_cnt = (cnt_t)1;
 8005742:	2501      	movs	r5, #1
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005744:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005748:	b9c3      	cbnz	r3, 800577c <ThdDisp+0x1dc>
 800574a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800574e:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8005750:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8005754:	f7fc fe84 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005758:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800575c:	bb43      	cbnz	r3, 80057b0 <ThdDisp+0x210>
 800575e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005762:	2a00      	cmp	r2, #0
 8005764:	dd24      	ble.n	80057b0 <ThdDisp+0x210>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005766:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	2330      	movs	r3, #48	; 0x30
 8005770:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005774:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0e3      	beq.n	8005744 <ThdDisp+0x1a4>
    chSysHalt("SV#4");
 800577c:	482c      	ldr	r0, [pc, #176]	; (8005830 <ThdDisp+0x290>)
 800577e:	f7fb fa97 	bl	8000cb0 <chSysHalt>
      rccEnableTIM11(true);
 8005782:	492c      	ldr	r1, [pc, #176]	; (8005834 <ThdDisp+0x294>)
      gptp->clock = STM32_TIMCLK2;
 8005784:	482c      	ldr	r0, [pc, #176]	; (8005838 <ThdDisp+0x298>)
      rccEnableTIM11(true);
 8005786:	6c4b      	ldr	r3, [r1, #68]	; 0x44
      gptp->clock = STM32_TIMCLK2;
 8005788:	6090      	str	r0, [r2, #8]
      rccEnableTIM11(true);
 800578a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800578e:	644b      	str	r3, [r1, #68]	; 0x44
 8005790:	6e48      	ldr	r0, [r1, #100]	; 0x64
 8005792:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005796:	6648      	str	r0, [r1, #100]	; 0x64
 8005798:	6e48      	ldr	r0, [r1, #100]	; 0x64
      rccResetTIM11();
 800579a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800579c:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80057a0:	6248      	str	r0, [r1, #36]	; 0x24
 80057a2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80057a4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80057a8:	6248      	str	r0, [r1, #36]	; 0x24
 80057aa:	6a49      	ldr	r1, [r1, #36]	; 0x24
      gptp->clock = STM32_TIMCLK2;
 80057ac:	2331      	movs	r3, #49	; 0x31
 80057ae:	e70e      	b.n	80055ce <ThdDisp+0x2e>
    chSysHalt("SV#5");
 80057b0:	4822      	ldr	r0, [pc, #136]	; (800583c <ThdDisp+0x29c>)
 80057b2:	f7fb fa7d 	bl	8000cb0 <chSysHalt>
 80057b6:	bf00      	nop
 80057b8:	08006584 	.word	0x08006584
 80057bc:	2000086c 	.word	0x2000086c
 80057c0:	080067fc 	.word	0x080067fc
 80057c4:	001e8480 	.word	0x001e8480
 80057c8:	40020400 	.word	0x40020400
 80057cc:	200011b4 	.word	0x200011b4
 80057d0:	080015e1 	.word	0x080015e1
 80057d4:	080017b1 	.word	0x080017b1
 80057d8:	08002be1 	.word	0x08002be1
 80057dc:	08002ab1 	.word	0x08002ab1
 80057e0:	08001141 	.word	0x08001141
 80057e4:	200009ec 	.word	0x200009ec
 80057e8:	080068d4 	.word	0x080068d4
 80057ec:	ffff0000 	.word	0xffff0000
 80057f0:	08000e71 	.word	0x08000e71
 80057f4:	08006f2c 	.word	0x08006f2c
 80057f8:	08001331 	.word	0x08001331
 80057fc:	08006590 	.word	0x08006590
 8005800:	080065a0 	.word	0x080065a0
 8005804:	08007c2c 	.word	0x08007c2c
 8005808:	080065b0 	.word	0x080065b0
 800580c:	080076f4 	.word	0x080076f4
 8005810:	080065c0 	.word	0x080065c0
 8005814:	080068e0 	.word	0x080068e0
 8005818:	080065d4 	.word	0x080065d4
 800581c:	2000119c 	.word	0x2000119c
 8005820:	080065d8 	.word	0x080065d8
 8005824:	08006610 	.word	0x08006610
 8005828:	08006620 	.word	0x08006620
 800582c:	20000e10 	.word	0x20000e10
 8005830:	08006448 	.word	0x08006448
 8005834:	40023800 	.word	0x40023800
 8005838:	05f5e100 	.word	0x05f5e100
 800583c:	08006470 	.word	0x08006470

08005840 <chThdExit>:
void chThdExit(msg_t msg) {
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	2330      	movs	r3, #48	; 0x30
 8005844:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <chThdExit+0x60>)
 800584a:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 800584e:	430a      	orrs	r2, r1
 8005850:	d11a      	bne.n	8005888 <chThdExit+0x48>
  return __sch_get_currthread();
 8005852:	68dc      	ldr	r4, [r3, #12]
  return (bool)(lp->next != lp);
 8005854:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005856:	f104 052c 	add.w	r5, r4, #44	; 0x2c
  oip->dbg.lock_cnt = (cnt_t)1;
 800585a:	2101      	movs	r1, #1
 800585c:	4295      	cmp	r5, r2
 800585e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  currtp->u.exitcode = msg;
 8005862:	62a0      	str	r0, [r4, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005864:	d107      	bne.n	8005876 <chThdExit+0x36>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8005866:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800586a:	b183      	cbz	r3, 800588e <chThdExit+0x4e>
}
 800586c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8005870:	200f      	movs	r0, #15
 8005872:	f7fc bdc5 	b.w	8002400 <chSchGoSleepS>
  lp->next = p->next;
 8005876:	6813      	ldr	r3, [r2, #0]
 8005878:	62e3      	str	r3, [r4, #44]	; 0x2c
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 800587a:	4610      	mov	r0, r2
 800587c:	f7fc fc30 	bl	80020e0 <chSchReadyI.isra.0>
  return (bool)(lp->next != lp);
 8005880:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8005882:	42aa      	cmp	r2, r5
 8005884:	d0ef      	beq.n	8005866 <chThdExit+0x26>
 8005886:	e7f6      	b.n	8005876 <chThdExit+0x36>
    chSysHalt("SV#4");
 8005888:	4806      	ldr	r0, [pc, #24]	; (80058a4 <chThdExit+0x64>)
 800588a:	f7fb fa11 	bl	8000cb0 <chSysHalt>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800588e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8005892:	079b      	lsls	r3, r3, #30
 8005894:	d1ea      	bne.n	800586c <chThdExit+0x2c>
  p->prev->next = p->next;
 8005896:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800589a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 800589c:	605a      	str	r2, [r3, #4]
  return p;
 800589e:	e7e5      	b.n	800586c <chThdExit+0x2c>
 80058a0:	20000e10 	.word	0x20000e10
 80058a4:	08006448 	.word	0x08006448
	...

080058b0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80058b0:	f3ef 8309 	mrs	r3, PSP
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80058b4:	4905      	ldr	r1, [pc, #20]	; (80058cc <SVC_Handler+0x1c>)
 80058b6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80058b8:	f022 0201 	bic.w	r2, r2, #1
    psp += sizeof (struct port_extctx);
 80058bc:	3368      	adds	r3, #104	; 0x68
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 80058be:	634a      	str	r2, [r1, #52]	; 0x34
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80058c0:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80058c4:	2300      	movs	r3, #0
 80058c6:	f383 8811 	msr	BASEPRI, r3
}
 80058ca:	4770      	bx	lr
 80058cc:	e000ef00 	.word	0xe000ef00

080058d0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <__early_init+0x168>)
  gpiop->OTYPER  = config->otyper;
 80058d2:	495a      	ldr	r1, [pc, #360]	; (8005a3c <__early_init+0x16c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80058d4:	691a      	ldr	r2, [r3, #16]
  gpiop->PUPDR   = config->pupdr;
 80058d6:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8005a84 <__early_init+0x1b4>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80058da:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80058de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80058e2:	611a      	str	r2, [r3, #16]
 80058e4:	6918      	ldr	r0, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 80058e6:	4c56      	ldr	r4, [pc, #344]	; (8005a40 <__early_init+0x170>)
  gpiop->PUPDR   = config->pupdr;
 80058e8:	4f56      	ldr	r7, [pc, #344]	; (8005a44 <__early_init+0x174>)
  gpiop->MODER   = config->moder;
 80058ea:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8005a88 <__early_init+0x1b8>
  gpiop->PUPDR   = config->pupdr;
 80058ee:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8005a8c <__early_init+0x1bc>
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80058f2:	4e55      	ldr	r6, [pc, #340]	; (8005a48 <__early_init+0x178>)
  gpiop->MODER   = config->moder;
 80058f4:	f8df e198 	ldr.w	lr, [pc, #408]	; 8005a90 <__early_init+0x1c0>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80058f8:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 80058fc:	6118      	str	r0, [r3, #16]
 80058fe:	6918      	ldr	r0, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8005900:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005902:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 8005906:	6318      	str	r0, [r3, #48]	; 0x30
 8005908:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800590a:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 800590e:	6518      	str	r0, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8005910:	2200      	movs	r2, #0
  gpiop->OSPEEDR = config->ospeedr;
 8005912:	484e      	ldr	r0, [pc, #312]	; (8005a4c <__early_init+0x17c>)
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8005914:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8005916:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005918:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800591a:	484d      	ldr	r0, [pc, #308]	; (8005a50 <__early_init+0x180>)
 800591c:	60c8      	str	r0, [r1, #12]
  gpiop->AFRL    = config->afrl;
 800591e:	f247 7002 	movw	r0, #30466	; 0x7702
  gpiop->ODR     = config->odr;
 8005922:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8005924:	6208      	str	r0, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8005926:	f44f 60ee 	mov.w	r0, #1904	; 0x770
 800592a:	6248      	str	r0, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800592c:	4849      	ldr	r0, [pc, #292]	; (8005a54 <__early_init+0x184>)
 800592e:	6008      	str	r0, [r1, #0]
  gpiop->ODR     = config->odr;
 8005930:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  gpiop->OTYPER  = config->otyper;
 8005934:	4848      	ldr	r0, [pc, #288]	; (8005a58 <__early_init+0x188>)
  gpiop->OSPEEDR = config->ospeedr;
 8005936:	4949      	ldr	r1, [pc, #292]	; (8005a5c <__early_init+0x18c>)
  gpiop->OTYPER  = config->otyper;
 8005938:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800593a:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
 800593e:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8005940:	60e7      	str	r7, [r4, #12]
  gpiop->OTYPER  = config->otyper;
 8005942:	4947      	ldr	r1, [pc, #284]	; (8005a60 <__early_init+0x190>)
  gpiop->ODR     = config->odr;
 8005944:	f8c4 a014 	str.w	sl, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8005948:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800594a:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800594c:	f8c4 9000 	str.w	r9, [r4]
  gpiop->ODR     = config->odr;
 8005950:	f44f 6400 	mov.w	r4, #2048	; 0x800
  gpiop->OTYPER  = config->otyper;
 8005954:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8005956:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8005958:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->ODR     = config->odr;
 800595c:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 800595e:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 8005962:	6204      	str	r4, [r0, #32]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8005964:	4f3f      	ldr	r7, [pc, #252]	; (8005a64 <__early_init+0x194>)
  gpiop->AFRH    = config->afrh;
 8005966:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8005968:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 800596c:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800596e:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8005970:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
 8005974:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8005976:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8005978:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800597a:	600a      	str	r2, [r1, #0]
  PWR->CR = STM32_VOS;
 800597c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8005980:	641f      	str	r7, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8005982:	6032      	str	r2, [r6, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	0791      	lsls	r1, r2, #30
 8005990:	d5fc      	bpl.n	800598c <__early_init+0xbc>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005992:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8005994:	4a28      	ldr	r2, [pc, #160]	; (8005a38 <__early_init+0x168>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8005996:	f021 0103 	bic.w	r1, r1, #3
 800599a:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800599c:	6893      	ldr	r3, [r2, #8]
 800599e:	f013 030c 	ands.w	r3, r3, #12
 80059a2:	d1fb      	bne.n	800599c <__early_init+0xcc>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80059a4:	6811      	ldr	r1, [r2, #0]
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80059a6:	4830      	ldr	r0, [pc, #192]	; (8005a68 <__early_init+0x198>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80059a8:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80059ac:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80059ae:	6093      	str	r3, [r2, #8]
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80059b0:	6050      	str	r0, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80059b2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80059b4:	4924      	ldr	r1, [pc, #144]	; (8005a48 <__early_init+0x178>)
  RCC->CR |= RCC_CR_PLLON;
 80059b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ba:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80059bc:	684b      	ldr	r3, [r1, #4]
 80059be:	045a      	lsls	r2, r3, #17
 80059c0:	d5fc      	bpl.n	80059bc <__early_init+0xec>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80059c2:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <__early_init+0x168>)
 80059c4:	6813      	ldr	r3, [r2, #0]
 80059c6:	019b      	lsls	r3, r3, #6
 80059c8:	d5fc      	bpl.n	80059c4 <__early_init+0xf4>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80059ca:	4b28      	ldr	r3, [pc, #160]	; (8005a6c <__early_init+0x19c>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80059cc:	4c28      	ldr	r4, [pc, #160]	; (8005a70 <__early_init+0x1a0>)
 80059ce:	6094      	str	r4, [r2, #8]
    RCC->DCKCFGR = dckcfgr |
 80059d0:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80059d2:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 80059d4:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80059d8:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <__early_init+0x1a4>)
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d01e      	beq.n	8005a22 <__early_init+0x152>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80059e4:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <__early_init+0x1a8>)
 80059e6:	f240 7203 	movw	r2, #1795	; 0x703
 80059ea:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80059ec:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <__early_init+0x1a8>)
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d1fa      	bne.n	80059ee <__early_init+0x11e>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80059f8:	4a0f      	ldr	r2, [pc, #60]	; (8005a38 <__early_init+0x168>)
 80059fa:	6893      	ldr	r3, [r2, #8]
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8005a02:	6893      	ldr	r3, [r2, #8]
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d1fa      	bne.n	8005a02 <__early_init+0x132>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8005a0c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a12:	6453      	str	r3, [r2, #68]	; 0x44
 8005a14:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8005a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a1a:	6653      	str	r3, [r2, #100]	; 0x64
 8005a1c:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8005a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8005a22:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <__early_init+0x1ac>)
 8005a24:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <__early_init+0x1b0>)
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d1db      	bne.n	80059e4 <__early_init+0x114>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <__early_init+0x1a8>)
 8005a2e:	f240 1203 	movw	r2, #259	; 0x103
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e7da      	b.n	80059ec <__early_init+0x11c>
 8005a36:	bf00      	nop
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	40020400 	.word	0x40020400
 8005a44:	00aaa2a8 	.word	0x00aaa2a8
 8005a48:	40007000 	.word	0x40007000
 8005a4c:	556955a5 	.word	0x556955a5
 8005a50:	a8822a0a 	.word	0xa8822a0a
 8005a54:	2928c0a0 	.word	0x2928c0a0
 8005a58:	40020800 	.word	0x40020800
 8005a5c:	9a555555 	.word	0x9a555555
 8005a60:	40021c00 	.word	0x40021c00
 8005a64:	10000400 	.word	0x10000400
 8005a68:	04001908 	.word	0x04001908
 8005a6c:	e0042000 	.word	0xe0042000
 8005a70:	38881000 	.word	0x38881000
 8005a74:	20006411 	.word	0x20006411
 8005a78:	40023c00 	.word	0x40023c00
 8005a7c:	e000ed00 	.word	0xe000ed00
 8005a80:	410fc241 	.word	0x410fc241
 8005a84:	aaaaaaa0 	.word	0xaaaaaaa0
 8005a88:	55000481 	.word	0x55000481
 8005a8c:	8a0aaa8a 	.word	0x8a0aaa8a
 8005a90:	10500030 	.word	0x10500030
	...

08005aa0 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8005aa0:	4b21      	ldr	r3, [pc, #132]	; (8005b28 <main+0x88>)
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	f062 0287 	orn	r2, r2, #135	; 0x87


/*
 * Application entry point.
 */
int main(void) {
 8005aa8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005aac:	611a      	str	r2, [r3, #16]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	f002 0287 	and.w	r2, r2, #135	; 0x87
 8005ab4:	611a      	str	r2, [r3, #16]
 8005ab6:	691a      	ldr	r2, [r3, #16]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8005ab8:	6a1a      	ldr	r2, [r3, #32]
 8005aba:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8005abe:	621a      	str	r2, [r3, #32]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005ac6:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8005acc:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 8005ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad0:	6258      	str	r0, [r3, #36]	; 0x24
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad6:	6259      	str	r1, [r3, #36]	; 0x24
 8005ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 8005ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8005adc:	4813      	ldr	r0, [pc, #76]	; (8005b2c <main+0x8c>)
  rccEnablePWRInterface(true);
 8005ade:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ae6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005aea:	661a      	str	r2, [r3, #96]	; 0x60
 8005aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8005aee:	6802      	ldr	r2, [r0, #0]
 8005af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af4:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8005af6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005af8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005afc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005b00:	b089      	sub	sp, #36	; 0x24
 8005b02:	d003      	beq.n	8005b0c <main+0x6c>
    RCC->BDCR = RCC_BDCR_BDRST;
 8005b04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b08:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8005b0a:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8005b0c:	4807      	ldr	r0, [pc, #28]	; (8005b2c <main+0x8c>)
  dma.allocated_mask = 0U;
 8005b0e:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <main+0x90>)
 8005b10:	6841      	ldr	r1, [r0, #4]
 8005b12:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <main+0x94>)
 8005b14:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8005b18:	2400      	movs	r4, #0
 8005b1a:	6041      	str	r1, [r0, #4]
 8005b1c:	4906      	ldr	r1, [pc, #24]	; (8005b38 <main+0x98>)
 8005b1e:	6014      	str	r4, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005b20:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8005b24:	e00c      	b.n	8005b40 <main+0xa0>
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40007000 	.word	0x40007000
 8005b30:	20001118 	.word	0x20001118
 8005b34:	080066e4 	.word	0x080066e4
 8005b38:	40026010 	.word	0x40026010
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8005b3c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8005b40:	600c      	str	r4, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005b42:	330c      	adds	r3, #12
 8005b44:	4298      	cmp	r0, r3
 8005b46:	f102 0208 	add.w	r2, r2, #8
    dma.streams[i].func = NULL;
 8005b4a:	f842 4c04 	str.w	r4, [r2, #-4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8005b4e:	d1f5      	bne.n	8005b3c <main+0x9c>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005b50:	4bc1      	ldr	r3, [pc, #772]	; (8005e58 <main+0x3b8>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8005b52:	49c2      	ldr	r1, [pc, #776]	; (8005e5c <main+0x3bc>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005b54:	4ac2      	ldr	r2, [pc, #776]	; (8005e60 <main+0x3c0>)
  rccResetADC();
 8005b56:	4dc3      	ldr	r5, [pc, #780]	; (8005e64 <main+0x3c4>)
  dacp->state = DAC_STOP;
 8005b58:	4ec3      	ldr	r6, [pc, #780]	; (8005e68 <main+0x3c8>)
  sdObjectInit(&SD1, NULL, notify1);
 8005b5a:	f8df a39c 	ldr.w	sl, [pc, #924]	; 8005ef8 <main+0x458>
  sdObjectInit(&SD2, NULL, notify2);
 8005b5e:	f8df b39c 	ldr.w	fp, [pc, #924]	; 8005efc <main+0x45c>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8005b62:	f04f 37ff 	mov.w	r7, #4294967295
 8005b66:	609f      	str	r7, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8005b68:	60df      	str	r7, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8005b6a:	608f      	str	r7, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8005b6c:	60cf      	str	r7, [r1, #12]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8005b6e:	49bf      	ldr	r1, [pc, #764]	; (8005e6c <main+0x3cc>)
 8005b70:	2370      	movs	r3, #112	; 0x70
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b72:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005b76:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b7a:	f44f 2880 	mov.w	r8, #262144	; 0x40000
  adcp->config   = NULL;
  adcp->samples  = NULL;
 8005b7e:	e9c1 4401 	strd	r4, r4, [r1, #4]
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 8005b82:	e9c1 4403 	strd	r4, r4, [r1, #12]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8005b86:	614c      	str	r4, [r1, #20]
 8005b88:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005b8c:	6010      	str	r0, [r2, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005b8e:	f882 3332 	strb.w	r3, [r2, #818]	; 0x332
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b92:	2020      	movs	r0, #32
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005b94:	23c0      	movs	r3, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005b96:	f8c2 8184 	str.w	r8, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005b9a:	f8c2 8004 	str.w	r8, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005b9e:	f882 3325 	strb.w	r3, [r2, #805]	; 0x325
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005ba2:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005ba6:	6050      	str	r0, [r2, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005ba8:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005bac:	2340      	movs	r3, #64	; 0x40
  adcp->state    = ADC_STOP;
 8005bae:	f04f 0901 	mov.w	r9, #1
 8005bb2:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8005bb6:	f101 0018 	add.w	r0, r1, #24
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005bba:	6053      	str	r3, [r2, #4]
 8005bbc:	f881 9000 	strb.w	r9, [r1]
 8005bc0:	f7fc f986 	bl	8001ed0 <chMtxObjectInit>
 8005bc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  ADCD1.dmastp  = NULL;
 8005bc6:	62cc      	str	r4, [r1, #44]	; 0x2c
  rccResetADC();
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bcc:	626b      	str	r3, [r5, #36]	; 0x24
 8005bce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd4:	626b      	str	r3, [r5, #36]	; 0x24
 8005bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8005bd8:	2360      	movs	r3, #96	; 0x60
  dacp->thread = NULL;
 8005bda:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8005bde:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
  ADCD1.adc     = ADC1;
 8005be2:	4ba3      	ldr	r3, [pc, #652]	; (8005e70 <main+0x3d0>)
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005be4:	f8c2 8180 	str.w	r8, [r2, #384]	; 0x180
 8005be8:	f106 0018 	add.w	r0, r6, #24
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005bec:	f8c2 8000 	str.w	r8, [r2]
  i2cp->state  = I2C_STOP;
 8005bf0:	4aa0      	ldr	r2, [pc, #640]	; (8005e74 <main+0x3d4>)
 8005bf2:	628b      	str	r3, [r1, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8005bf4:	4ba0      	ldr	r3, [pc, #640]	; (8005e78 <main+0x3d8>)
 8005bf6:	630b      	str	r3, [r1, #48]	; 0x30
  dacp->state = DAC_STOP;
 8005bf8:	f886 9000 	strb.w	r9, [r6]
  DACD1.params  = &dac1_ch1_params;
 8005bfc:	499f      	ldr	r1, [pc, #636]	; (8005e7c <main+0x3dc>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state           = SPI_STOP;
 8005bfe:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8005f00 <main+0x460>
 8005c02:	f7fc f965 	bl	8001ed0 <chMtxObjectInit>
  GPTD11.tim = STM32_TIM11;
 8005c06:	4b9e      	ldr	r3, [pc, #632]	; (8005e80 <main+0x3e0>)
 8005c08:	62b1      	str	r1, [r6, #40]	; 0x28
 8005c0a:	f102 000c 	add.w	r0, r2, #12
 8005c0e:	499d      	ldr	r1, [pc, #628]	; (8005e84 <main+0x3e4>)
 8005c10:	f882 9000 	strb.w	r9, [r2]
  i2cp->config = NULL;
 8005c14:	6054      	str	r4, [r2, #4]
 8005c16:	60d9      	str	r1, [r3, #12]
  gptp->state  = GPT_STOP;
 8005c18:	f883 9000 	strb.w	r9, [r3]
  sdObjectInit(&SD1, NULL, notify1);
 8005c1c:	499a      	ldr	r1, [pc, #616]	; (8005e88 <main+0x3e8>)
  gptp->config = NULL;
 8005c1e:	605c      	str	r4, [r3, #4]
  DACD1.dma = NULL;
 8005c20:	62f4      	str	r4, [r6, #44]	; 0x2c
 8005c22:	f7fc f955 	bl	8001ed0 <chMtxObjectInit>
  I2CD2.i2c    = I2C2;
 8005c26:	4b99      	ldr	r3, [pc, #612]	; (8005e8c <main+0x3ec>)
 8005c28:	6353      	str	r3, [r2, #52]	; 0x34
 8005c2a:	4650      	mov	r0, sl
  I2CD2.dmatx  = NULL;
 8005c2c:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
  I2CD2.thread = NULL;
 8005c30:	61d4      	str	r4, [r2, #28]
 8005c32:	f7fb fc05 	bl	8001440 <sdObjectInit.constprop.0>
  SD1.clock = STM32_PCLK2;
 8005c36:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8005f04 <main+0x464>
 8005c3a:	4b95      	ldr	r3, [pc, #596]	; (8005e90 <main+0x3f0>)
  sdObjectInit(&SD2, NULL, notify2);
 8005c3c:	4995      	ldr	r1, [pc, #596]	; (8005e94 <main+0x3f4>)
 8005c3e:	4658      	mov	r0, fp
  SD1.clock = STM32_PCLK2;
 8005c40:	e9ca e31d 	strd	lr, r3, [sl, #116]	; 0x74
  sdObjectInit(&SD2, NULL, notify2);
 8005c44:	f7fb fbfc 	bl	8001440 <sdObjectInit.constprop.0>
  SD2.clock = STM32_PCLK1;
 8005c48:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8005f08 <main+0x468>
 8005c4c:	4b92      	ldr	r3, [pc, #584]	; (8005e98 <main+0x3f8>)
 8005c4e:	f888 9000 	strb.w	r9, [r8]
 8005c52:	f108 000c 	add.w	r0, r8, #12
 8005c56:	e9cb a31d 	strd	sl, r3, [fp, #116]	; 0x74
  spip->config          = NULL;
#if SPI_USE_SYNCHRONIZATION == TRUE
  spip->sync_transfer   = NULL;
 8005c5a:	e9c8 4401 	strd	r4, r4, [r8, #4]
 8005c5e:	f7fc f937 	bl	8001ed0 <chMtxObjectInit>
  ST_ENABLE_CLOCK();
 8005c62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  ST_ENABLE_STOP();
 8005c64:	498d      	ldr	r1, [pc, #564]	; (8005e9c <main+0x3fc>)
  ST_ENABLE_CLOCK();
 8005c66:	f043 0308 	orr.w	r3, r3, #8

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = NULL;
  SPID2.dmatx     = NULL;
 8005c6a:	e9c8 4408 	strd	r4, r4, [r8, #32]
 8005c6e:	642b      	str	r3, [r5, #64]	; 0x40
 8005c70:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8005c72:	f043 0308 	orr.w	r3, r3, #8
 8005c76:	662b      	str	r3, [r5, #96]	; 0x60
 8005c78:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  ST_ENABLE_STOP();
 8005c7a:	688a      	ldr	r2, [r1, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005c7c:	4b88      	ldr	r3, [pc, #544]	; (8005ea0 <main+0x400>)
  ST_ENABLE_STOP();
 8005c7e:	f042 0208 	orr.w	r2, r2, #8
 8005c82:	608a      	str	r2, [r1, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8005c84:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c88:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8005c8a:	62df      	str	r7, [r3, #44]	; 0x2c
  tmp->cumulative = (rttime_t)0;
 8005c8c:	2200      	movs	r2, #0
  STM32_ST_TIM->CCMR1  = 0;
 8005c8e:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8005c90:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8005c92:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8005c94:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8005c96:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8005c9a:	f8c3 9000 	str.w	r9, [r3]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  SPID2.spi       = SPI2;
 8005ca4:	4b7f      	ldr	r3, [pc, #508]	; (8005ea4 <main+0x404>)
 8005ca6:	f8c8 301c 	str.w	r3, [r8, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8005caa:	4b7f      	ldr	r3, [pc, #508]	; (8005ea8 <main+0x408>)
 8005cac:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  tmp->worst      = (rtcnt_t)0;
 8005cb0:	e9cd 7402 	strd	r7, r4, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8005cb4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ch_system.state = ch_sys_initializing;
 8005cb8:	4f7c      	ldr	r7, [pc, #496]	; (8005eac <main+0x40c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8005cba:	3330      	adds	r3, #48	; 0x30
}
 8005cbc:	2504      	movs	r5, #4
 8005cbe:	f887 9000 	strb.w	r9, [r7]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8005cc2:	60bc      	str	r4, [r7, #8]
 8005cc4:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 8005cc8:	a802      	add	r0, sp, #8
 8005cca:	f7fb f829 	bl	8000d20 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8005cce:	f7fb f82f 	bl	8000d30 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 8005cd2:	3d01      	subs	r5, #1
 8005cd4:	d1f8      	bne.n	8005cc8 <main+0x228>
  tcp->offset = tm.best;
 8005cd6:	9a02      	ldr	r2, [sp, #8]
  ch_memcore.basemem = __heap_base__;
 8005cd8:	4b75      	ldr	r3, [pc, #468]	; (8005eb0 <main+0x410>)
 8005cda:	60ba      	str	r2, [r7, #8]
 8005cdc:	4a75      	ldr	r2, [pc, #468]	; (8005eb4 <main+0x414>)
 8005cde:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8005ce0:	4a75      	ldr	r2, [pc, #468]	; (8005eb8 <main+0x418>)
 8005ce2:	605a      	str	r2, [r3, #4]
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8005ce4:	4b75      	ldr	r3, [pc, #468]	; (8005ebc <main+0x41c>)
 8005ce6:	4a76      	ldr	r2, [pc, #472]	; (8005ec0 <main+0x420>)
 8005ce8:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8005cea:	f103 000c 	add.w	r0, r3, #12
  H_PAGES(&default_heap.header) = 0;
 8005cee:	e9c3 5501 	strd	r5, r5, [r3, #4]
  chMtxObjectInit(&default_heap.mtx);
 8005cf2:	f7fc f8ed 	bl	8001ed0 <chMtxObjectInit>
 * @init
 */
void __factory_init(void) {

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8005cf6:	4873      	ldr	r0, [pc, #460]	; (8005ec4 <main+0x424>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 8005cf8:	4c73      	ldr	r4, [pc, #460]	; (8005ec8 <main+0x428>)
 8005cfa:	f7fc f8e9 	bl	8001ed0 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8005cfe:	f100 0310 	add.w	r3, r0, #16
 8005d02:	6103      	str	r3, [r0, #16]
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 8005d04:	2214      	movs	r2, #20
 8005d06:	2304      	movs	r3, #4
 8005d08:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8005d0c:	6343      	str	r3, [r0, #52]	; 0x34
 8005d0e:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8005d12:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005d14:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8005d18:	6403      	str	r3, [r0, #64]	; 0x40
 8005d1a:	f100 0344 	add.w	r3, r0, #68	; 0x44
 8005d1e:	6443      	str	r3, [r0, #68]	; 0x44
  mp->provider = provider;
 8005d20:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <main+0x42c>)
 8005d22:	6203      	str	r3, [r0, #32]
 8005d24:	6383      	str	r3, [r0, #56]	; 0x38

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 8005d26:	4b6a      	ldr	r3, [pc, #424]	; (8005ed0 <main+0x430>)
 8005d28:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d2a:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8005d2e:	6243      	str	r3, [r0, #36]	; 0x24
 8005d30:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8005d34:	6283      	str	r3, [r0, #40]	; 0x28
  mp->object_size = size;
 8005d36:	231c      	movs	r3, #28
  mp->next = NULL;
 8005d38:	6145      	str	r5, [r0, #20]
 8005d3a:	62c5      	str	r5, [r0, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 8005d3c:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 8005d3e:	6325      	str	r5, [r4, #48]	; 0x30
  mp->object_size = size;
 8005d40:	6303      	str	r3, [r0, #48]	; 0x30
 8005d42:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8005d46:	f38a 8811 	msr	BASEPRI, sl
  __ASM volatile ("cpsie i" : : : "memory");
 8005d4a:	b662      	cpsie	i
  pqp->prio = (tprio_t)0;
 8005d4c:	e9c4 4501 	strd	r4, r5, [r4, #4]
  tp->epending          = (eventmask_t)0;
 8005d50:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d54:	4b5f      	ldr	r3, [pc, #380]	; (8005ed4 <main+0x434>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 8005d56:	6365      	str	r5, [r4, #52]	; 0x34

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8005d58:	61e5      	str	r5, [r4, #28]

  sdp->panic_msg = NULL;

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 8005d5a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8005d5e:	68d9      	ldr	r1, [r3, #12]
  tp->owner             = oip;
 8005d60:	6564      	str	r4, [r4, #84]	; 0x54
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d62:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8005d66:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 8005d68:	4a5b      	ldr	r2, [pc, #364]	; (8005ed8 <main+0x438>)
 8005d6a:	484d      	ldr	r0, [pc, #308]	; (8005ea0 <main+0x400>)
 8005d6c:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8005d6e:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005d70:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005d74:	4959      	ldr	r1, [pc, #356]	; (8005edc <main+0x43c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005d76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005d7a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005d7e:	680a      	ldr	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d80:	f04f 0b20 	mov.w	fp, #32
 8005d84:	f042 0201 	orr.w	r2, r2, #1
 8005d88:	600a      	str	r2, [r1, #0]
 8005d8a:	f883 b01f 	strb.w	fp, [r3, #31]
  dlhp->next  = dlhp;
 8005d8e:	f104 0110 	add.w	r1, r4, #16
 8005d92:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
 8005d96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d98:	9301      	str	r3, [sp, #4]
  dlhp->prev  = dlhp;
 8005d9a:	e9c4 1104 	strd	r1, r1, [r4, #16]
  tp->hdr.pqueue.prio   = prio;
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	6461      	str	r1, [r4, #68]	; 0x44
  tp->realprio          = prio;
 8005da2:	67e1      	str	r1, [r4, #124]	; 0x7c
  p->prev       = qp->prev;
 8005da4:	f104 0128 	add.w	r1, r4, #40	; 0x28
  tp->wabase = tdp->wbase;
 8005da8:	4b4d      	ldr	r3, [pc, #308]	; (8005ee0 <main+0x440>)
 8005daa:	6521      	str	r1, [r4, #80]	; 0x50
  qp->next = qp;
 8005dac:	f104 016c 	add.w	r1, r4, #108	; 0x6c
  qp->prev = qp;
 8005db0:	e9c4 111b 	strd	r1, r1, [r4, #108]	; 0x6c
  p->prev->next = p;
 8005db4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
  tp->name              = name;
 8005db8:	494a      	ldr	r1, [pc, #296]	; (8005ee4 <main+0x444>)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8005dba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005dbe:	62a0      	str	r0, [r4, #40]	; 0x28
  dlhp->delta = (sysinterval_t)-1;
 8005dc0:	f04f 3cff 	mov.w	ip, #4294967295
  sdp->lock_cnt = (cnt_t)1;
 8005dc4:	2201      	movs	r2, #1
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8005dc6:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
  tp->name              = name;
 8005dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dcc:	f8c4 c018 	str.w	ip, [r4, #24]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8005dd0:	4945      	ldr	r1, [pc, #276]	; (8005ee8 <main+0x448>)
 8005dd2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  lp->next = lp;
 8005dd6:	f104 0c68 	add.w	ip, r4, #104	; 0x68
 8005dda:	46a9      	mov	r9, r5
 8005ddc:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
  pqp->next = pqp;
 8005de0:	6024      	str	r4, [r4, #0]
 8005de2:	e9c4 8908 	strd	r8, r9, [r4, #32]
 8005de6:	65e1      	str	r1, [r4, #92]	; 0x5c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005de8:	f1a0 0164 	sub.w	r1, r0, #100	; 0x64
 8005dec:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
 8005df0:	493e      	ldr	r1, [pc, #248]	; (8005eec <main+0x44c>)
 8005df2:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
 8005df6:	493e      	ldr	r1, [pc, #248]	; (8005ef0 <main+0x450>)
 8005df8:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
  tp->name              = name;
 8005dfc:	493d      	ldr	r1, [pc, #244]	; (8005ef4 <main+0x454>)
 8005dfe:	f8c3 11d4 	str.w	r1, [r3, #468]	; 0x1d4
  p->next       = qp;
 8005e02:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005e06:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 8005e0a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  p->prev       = qp->prev;
 8005e0e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  tp->refs              = (trefs_t)1;
 8005e12:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  tp->hdr.pqueue.prio   = prio;
 8005e16:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tp->realprio          = prio;
 8005e1a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  tp->refs              = (trefs_t)1;
 8005e1e:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
  tp->state             = CH_STATE_WTSTART;
 8005e22:	f04f 0202 	mov.w	r2, #2
  qp->next = qp;
 8005e26:	f503 7ef4 	add.w	lr, r3, #488	; 0x1e8
  p->prev       = qp->prev;
 8005e2a:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
 8005e2e:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
  lp->next = lp;
 8005e32:	f100 012c 	add.w	r1, r0, #44	; 0x2c
  p->prev->next = p;
 8005e36:	f100 0210 	add.w	r2, r0, #16
  qp->prev = qp;
 8005e3a:	e9c3 ee7a 	strd	lr, lr, [r3, #488]	; 0x1e8
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8005e3e:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
  lp->next = lp;
 8005e42:	f8c3 11e4 	str.w	r1, [r3, #484]	; 0x1e4
  tp->epending          = (eventmask_t)0;
 8005e46:	e9c3 557c 	strd	r5, r5, [r3, #496]	; 0x1f0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8005e4a:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
  tp->owner             = oip;
 8005e4e:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  p->prev->next = p;
 8005e52:	64e2      	str	r2, [r4, #76]	; 0x4c
  qp->prev      = p;
 8005e54:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005e56:	e059      	b.n	8005f0c <main+0x46c>
 8005e58:	40026000 	.word	0x40026000
 8005e5c:	40026400 	.word	0x40026400
 8005e60:	e000e100 	.word	0xe000e100
 8005e64:	40023800 	.word	0x40023800
 8005e68:	2000083c 	.word	0x2000083c
 8005e6c:	20000808 	.word	0x20000808
 8005e70:	40012000 	.word	0x40012000
 8005e74:	2000087c 	.word	0x2000087c
 8005e78:	00022c16 	.word	0x00022c16
 8005e7c:	080067d8 	.word	0x080067d8
 8005e80:	2000086c 	.word	0x2000086c
 8005e84:	40014800 	.word	0x40014800
 8005e88:	08000c91 	.word	0x08000c91
 8005e8c:	40005800 	.word	0x40005800
 8005e90:	05f5e100 	.word	0x05f5e100
 8005e94:	08000ca1 	.word	0x08000ca1
 8005e98:	02faf080 	.word	0x02faf080
 8005e9c:	e0042000 	.word	0xe0042000
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40003800 	.word	0x40003800
 8005ea8:	00010016 	.word	0x00010016
 8005eac:	200010f0 	.word	0x200010f0
 8005eb0:	200010e8 	.word	0x200010e8
 8005eb4:	20002718 	.word	0x20002718
 8005eb8:	20008000 	.word	0x20008000
 8005ebc:	200010fc 	.word	0x200010fc
 8005ec0:	08001f91 	.word	0x08001f91
 8005ec4:	200010a0 	.word	0x200010a0
 8005ec8:	20000e10 	.word	0x20000e10
 8005ecc:	08002011 	.word	0x08002011
 8005ed0:	08006798 	.word	0x08006798
 8005ed4:	e000ed00 	.word	0xe000ed00
 8005ed8:	05fa0300 	.word	0x05fa0300
 8005edc:	e0001000 	.word	0xe0001000
 8005ee0:	20000ea0 	.word	0x20000ea0
 8005ee4:	080067ac 	.word	0x080067ac
 8005ee8:	20000400 	.word	0x20000400
 8005eec:	08000d11 	.word	0x08000d11
 8005ef0:	0800031d 	.word	0x0800031d
 8005ef4:	08006634 	.word	0x08006634
 8005ef8:	200008b4 	.word	0x200008b4
 8005efc:	20000934 	.word	0x20000934
 8005f00:	200009b4 	.word	0x200009b4
 8005f04:	40011000 	.word	0x40011000
 8005f08:	40004400 	.word	0x40004400
  sdp->panic_msg = NULL;
 8005f0c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  tp->wabase = tdp->wbase;
 8005f10:	f8c3 31d8 	str.w	r3, [r3, #472]	; 0x1d8
 8005f14:	f8c4 c00c 	str.w	ip, [r4, #12]
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8005f18:	f7fc f8e2 	bl	80020e0 <chSchReadyI.isra.0>
  ch_system.state = ch_sys_running;
 8005f1c:	f04f 0302 	mov.w	r3, #2
 8005f20:	703b      	strb	r3, [r7, #0]
 8005f22:	f7fd f86d 	bl	8003000 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005f26:	f385 8811 	msr	BASEPRI, r5
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  chMtxObjectInit(&mutex_bsp2);
 8005f2a:	4842      	ldr	r0, [pc, #264]	; (8006034 <main+0x594>)
 8005f2c:	f7fb ffd0 	bl	8001ed0 <chMtxObjectInit>
  palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 8005f30:	2203      	movs	r2, #3
 8005f32:	4841      	ldr	r0, [pc, #260]	; (8006038 <main+0x598>)
 8005f34:	4659      	mov	r1, fp
 8005f36:	f7fa fe3b 	bl	8000bb0 <_pal_lld_setgroupmode>
 8005f3a:	f38a 8811 	msr	BASEPRI, sl
  __dbg_check_lock();
 8005f3e:	f7fd f877 	bl	8003030 <__dbg_check_lock>
  if (dacp->state == DAC_STOP) {
 8005f42:	7833      	ldrb	r3, [r6, #0]
  dacp->config = config;
 8005f44:	4a3d      	ldr	r2, [pc, #244]	; (800603c <main+0x59c>)
 8005f46:	6132      	str	r2, [r6, #16]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d05a      	beq.n	8006002 <main+0x562>
    dacp->state = DAC_READY;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	7033      	strb	r3, [r6, #0]
  __dbg_check_unlock();
 8005f50:	f7fd f856 	bl	8003000 <__dbg_check_unlock>
 8005f54:	2300      	movs	r3, #0
 8005f56:	f383 8811 	msr	BASEPRI, r3
  dac_lld_put_channel(dacp, channel, sample);
 8005f5a:	f640 7031 	movw	r0, #3889	; 0xf31
 8005f5e:	f7fb fa4f 	bl	8001400 <dac_lld_put_channel.constprop.0>
  chThdSleepMilliseconds(100); //wait for opamp input to settle
 8005f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f66:	f7fc fd73 	bl	8002a50 <chThdSleep>
  palSetPad(GPIOA, GPIOA_heater_enable);
 8005f6a:	4b33      	ldr	r3, [pc, #204]	; (8006038 <main+0x598>)

  /*
   * Create threads
   */

  chThdCreateStatic(waThdBlinker, sizeof(waThdBlinker), NORMALPRIO, ThdBlinker, NULL);
 8005f6c:	4a34      	ldr	r2, [pc, #208]	; (8006040 <main+0x5a0>)
 8005f6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f72:	8318      	strh	r0, [r3, #24]
 8005f74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f78:	4832      	ldr	r0, [pc, #200]	; (8006044 <main+0x5a4>)
 8005f7a:	f7fd f871 	bl	8003060 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdSerial, sizeof(waThdSerial), NORMALPRIO, ThdSerial, NULL);
 8005f7e:	4a32      	ldr	r2, [pc, #200]	; (8006048 <main+0x5a8>)
 8005f80:	4832      	ldr	r0, [pc, #200]	; (800604c <main+0x5ac>)
 8005f82:	f44f 6119 	mov.w	r1, #2448	; 0x990
 8005f86:	f7fd f86b 	bl	8003060 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdBeeper, sizeof(waThdBeeper), NORMALPRIO, ThdBeeper, NULL);
 8005f8a:	4a31      	ldr	r2, [pc, #196]	; (8006050 <main+0x5b0>)
 8005f8c:	4831      	ldr	r0, [pc, #196]	; (8006054 <main+0x5b4>)
 8005f8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f92:	f7fd f865 	bl	8003060 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdGNSS, sizeof(waThdGNSS), NORMALPRIO, ThdGNSS, NULL);
 8005f96:	4a30      	ldr	r2, [pc, #192]	; (8006058 <main+0x5b8>)
 8005f98:	4830      	ldr	r0, [pc, #192]	; (800605c <main+0x5bc>)
 8005f9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f9e:	f7fd f85f 	bl	8003060 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdCntr, sizeof(waThdCntr), NORMALPRIO, ThdCntr, NULL);
 8005fa2:	4a2f      	ldr	r2, [pc, #188]	; (8006060 <main+0x5c0>)
 8005fa4:	482f      	ldr	r0, [pc, #188]	; (8006064 <main+0x5c4>)
 8005fa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005faa:	f7fd f859 	bl	8003060 <chThdCreateStatic.constprop.0.isra.0>
  chThdCreateStatic(waThdDisp, sizeof(waThdDisp), NORMALPRIO, ThdDisp, NULL);
 8005fae:	4a2e      	ldr	r2, [pc, #184]	; (8006068 <main+0x5c8>)
 8005fb0:	482e      	ldr	r0, [pc, #184]	; (800606c <main+0x5cc>)
 8005fb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fb6:	f7fd f853 	bl	8003060 <chThdCreateStatic.constprop.0.isra.0>

  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  myprintf("Thdmain\n");
 8005fba:	482d      	ldr	r0, [pc, #180]	; (8006070 <main+0x5d0>)
 8005fbc:	f7fe fad0 	bl	8004560 <myprintf>
 8005fc0:	2530      	movs	r5, #48	; 0x30
  oip->dbg.lock_cnt = (cnt_t)1;
 8005fc2:	2601      	movs	r6, #1
 8005fc4:	f385 8811 	msr	BASEPRI, r5
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005fc8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	d112      	bne.n	8005ff6 <main+0x556>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8005fd0:	f241 3188 	movw	r1, #5000	; 0x1388
 8005fd4:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8005fd6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8005fda:	f7fc fa41 	bl	8002460 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8005fde:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005fe2:	b95b      	cbnz	r3, 8005ffc <main+0x55c>
 8005fe4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	dd07      	ble.n	8005ffc <main+0x55c>
  oip->dbg.lock_cnt = (cnt_t)0;
 8005fec:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005ff0:	f383 8811 	msr	BASEPRI, r3
}
 8005ff4:	e7e6      	b.n	8005fc4 <main+0x524>
    chSysHalt("SV#4");
 8005ff6:	481f      	ldr	r0, [pc, #124]	; (8006074 <main+0x5d4>)
 8005ff8:	f7fa fe5a 	bl	8000cb0 <chSysHalt>
    chSysHalt("SV#5");
 8005ffc:	481e      	ldr	r0, [pc, #120]	; (8006078 <main+0x5d8>)
 8005ffe:	f7fa fe57 	bl	8000cb0 <chSysHalt>
      rccEnableDAC1(true);
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <main+0x5dc>)
 8006004:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8006006:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800600a:	6411      	str	r1, [r2, #64]	; 0x40
 800600c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800600e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006012:	6611      	str	r1, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 8006014:	6ab1      	ldr	r1, [r6, #40]	; 0x28
      rccEnableDAC1(true);
 8006016:	6e12      	ldr	r2, [r2, #96]	; 0x60
      cr = dacp->params->dac->CR;
 8006018:	6808      	ldr	r0, [r1, #0]
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 800601a:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800601e:	4093      	lsls	r3, r2
      cr = dacp->params->dac->CR;
 8006020:	6802      	ldr	r2, [r0, #0]
      cr &= dacp->params->regmask;
 8006022:	402a      	ands	r2, r5
      cr |= (DAC_CR_EN1 | dacp->config->cr) << dacp->params->regshift;
 8006024:	4313      	orrs	r3, r2
      dacp->params->dac->CR = cr;
 8006026:	6003      	str	r3, [r0, #0]
      dac_lld_put_channel(dacp, channel, dacp->config->init);
 8006028:	f640 70ff 	movw	r0, #4095	; 0xfff
 800602c:	f7fb f9e8 	bl	8001400 <dac_lld_put_channel.constprop.0>
 8006030:	e78c      	b.n	8005f4c <main+0x4ac>
 8006032:	bf00      	nop
 8006034:	200011a4 	.word	0x200011a4
 8006038:	40020000 	.word	0x40020000
 800603c:	080067f4 	.word	0x080067f4
 8006040:	08005091 	.word	0x08005091
 8006044:	20001488 	.word	0x20001488
 8006048:	08004fe1 	.word	0x08004fe1
 800604c:	20001d88 	.word	0x20001d88
 8006050:	080053a1 	.word	0x080053a1
 8006054:	20001248 	.word	0x20001248
 8006058:	08005361 	.word	0x08005361
 800605c:	20001b48 	.word	0x20001b48
 8006060:	08005491 	.word	0x08005491
 8006064:	200016c8 	.word	0x200016c8
 8006068:	080055a1 	.word	0x080055a1
 800606c:	20001908 	.word	0x20001908
 8006070:	0800663c 	.word	0x0800663c
 8006074:	08006448 	.word	0x08006448
 8006078:	08006470 	.word	0x08006470
 800607c:	40023800 	.word	0x40023800

08006080 <memset>:
 8006080:	0783      	lsls	r3, r0, #30
 8006082:	b530      	push	{r4, r5, lr}
 8006084:	d048      	beq.n	8006118 <memset+0x98>
 8006086:	1e54      	subs	r4, r2, #1
 8006088:	2a00      	cmp	r2, #0
 800608a:	d03f      	beq.n	800610c <memset+0x8c>
 800608c:	b2ca      	uxtb	r2, r1
 800608e:	4603      	mov	r3, r0
 8006090:	e001      	b.n	8006096 <memset+0x16>
 8006092:	3c01      	subs	r4, #1
 8006094:	d33a      	bcc.n	800610c <memset+0x8c>
 8006096:	f803 2b01 	strb.w	r2, [r3], #1
 800609a:	079d      	lsls	r5, r3, #30
 800609c:	d1f9      	bne.n	8006092 <memset+0x12>
 800609e:	2c03      	cmp	r4, #3
 80060a0:	d92d      	bls.n	80060fe <memset+0x7e>
 80060a2:	b2cd      	uxtb	r5, r1
 80060a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80060a8:	2c0f      	cmp	r4, #15
 80060aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80060ae:	d936      	bls.n	800611e <memset+0x9e>
 80060b0:	f1a4 0210 	sub.w	r2, r4, #16
 80060b4:	f022 0c0f 	bic.w	ip, r2, #15
 80060b8:	f103 0e20 	add.w	lr, r3, #32
 80060bc:	44e6      	add	lr, ip
 80060be:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80060c2:	f103 0210 	add.w	r2, r3, #16
 80060c6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80060ca:	e942 5502 	strd	r5, r5, [r2, #-8]
 80060ce:	3210      	adds	r2, #16
 80060d0:	4572      	cmp	r2, lr
 80060d2:	d1f8      	bne.n	80060c6 <memset+0x46>
 80060d4:	f10c 0201 	add.w	r2, ip, #1
 80060d8:	f014 0f0c 	tst.w	r4, #12
 80060dc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80060e0:	f004 0c0f 	and.w	ip, r4, #15
 80060e4:	d013      	beq.n	800610e <memset+0x8e>
 80060e6:	f1ac 0304 	sub.w	r3, ip, #4
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	3304      	adds	r3, #4
 80060f0:	4413      	add	r3, r2
 80060f2:	f842 5b04 	str.w	r5, [r2], #4
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d1fb      	bne.n	80060f2 <memset+0x72>
 80060fa:	f00c 0403 	and.w	r4, ip, #3
 80060fe:	b12c      	cbz	r4, 800610c <memset+0x8c>
 8006100:	b2c9      	uxtb	r1, r1
 8006102:	441c      	add	r4, r3
 8006104:	f803 1b01 	strb.w	r1, [r3], #1
 8006108:	429c      	cmp	r4, r3
 800610a:	d1fb      	bne.n	8006104 <memset+0x84>
 800610c:	bd30      	pop	{r4, r5, pc}
 800610e:	4664      	mov	r4, ip
 8006110:	4613      	mov	r3, r2
 8006112:	2c00      	cmp	r4, #0
 8006114:	d1f4      	bne.n	8006100 <memset+0x80>
 8006116:	e7f9      	b.n	800610c <memset+0x8c>
 8006118:	4603      	mov	r3, r0
 800611a:	4614      	mov	r4, r2
 800611c:	e7bf      	b.n	800609e <memset+0x1e>
 800611e:	461a      	mov	r2, r3
 8006120:	46a4      	mov	ip, r4
 8006122:	e7e0      	b.n	80060e6 <memset+0x66>

08006124 <__aeabi_f2ulz>:
 8006124:	b5d0      	push	{r4, r6, r7, lr}
 8006126:	f7fa fc35 	bl	8000994 <__aeabi_f2d>
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <__aeabi_f2ulz+0x38>)
 800612c:	2200      	movs	r2, #0
 800612e:	4606      	mov	r6, r0
 8006130:	460f      	mov	r7, r1
 8006132:	f7fa f9a1 	bl	8000478 <__aeabi_dmul>
 8006136:	f7fa fd17 	bl	8000b68 <__aeabi_d2uiz>
 800613a:	4604      	mov	r4, r0
 800613c:	f7fa fc08 	bl	8000950 <__aeabi_ui2d>
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <__aeabi_f2ulz+0x3c>)
 8006142:	2200      	movs	r2, #0
 8006144:	f7fa f998 	bl	8000478 <__aeabi_dmul>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4630      	mov	r0, r6
 800614e:	4639      	mov	r1, r7
 8006150:	f7fa fac0 	bl	80006d4 <__aeabi_dsub>
 8006154:	f7fa fd08 	bl	8000b68 <__aeabi_d2uiz>
 8006158:	4621      	mov	r1, r4
 800615a:	bdd0      	pop	{r4, r6, r7, pc}
 800615c:	3df00000 	.word	0x3df00000
 8006160:	41f00000 	.word	0x41f00000

08006164 <__udivmoddi4>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	9e08      	ldr	r6, [sp, #32]
 800616a:	460d      	mov	r5, r1
 800616c:	4604      	mov	r4, r0
 800616e:	460f      	mov	r7, r1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d14a      	bne.n	800620a <__udivmoddi4+0xa6>
 8006174:	428a      	cmp	r2, r1
 8006176:	4694      	mov	ip, r2
 8006178:	d965      	bls.n	8006246 <__udivmoddi4+0xe2>
 800617a:	fab2 f382 	clz	r3, r2
 800617e:	b143      	cbz	r3, 8006192 <__udivmoddi4+0x2e>
 8006180:	fa02 fc03 	lsl.w	ip, r2, r3
 8006184:	f1c3 0220 	rsb	r2, r3, #32
 8006188:	409f      	lsls	r7, r3
 800618a:	fa20 f202 	lsr.w	r2, r0, r2
 800618e:	4317      	orrs	r7, r2
 8006190:	409c      	lsls	r4, r3
 8006192:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8006196:	fa1f f58c 	uxth.w	r5, ip
 800619a:	fbb7 f1fe 	udiv	r1, r7, lr
 800619e:	0c22      	lsrs	r2, r4, #16
 80061a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80061a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80061a8:	fb01 f005 	mul.w	r0, r1, r5
 80061ac:	4290      	cmp	r0, r2
 80061ae:	d90a      	bls.n	80061c6 <__udivmoddi4+0x62>
 80061b0:	eb1c 0202 	adds.w	r2, ip, r2
 80061b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80061b8:	f080 811c 	bcs.w	80063f4 <__udivmoddi4+0x290>
 80061bc:	4290      	cmp	r0, r2
 80061be:	f240 8119 	bls.w	80063f4 <__udivmoddi4+0x290>
 80061c2:	3902      	subs	r1, #2
 80061c4:	4462      	add	r2, ip
 80061c6:	1a12      	subs	r2, r2, r0
 80061c8:	b2a4      	uxth	r4, r4
 80061ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80061ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80061d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80061d6:	fb00 f505 	mul.w	r5, r0, r5
 80061da:	42a5      	cmp	r5, r4
 80061dc:	d90a      	bls.n	80061f4 <__udivmoddi4+0x90>
 80061de:	eb1c 0404 	adds.w	r4, ip, r4
 80061e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80061e6:	f080 8107 	bcs.w	80063f8 <__udivmoddi4+0x294>
 80061ea:	42a5      	cmp	r5, r4
 80061ec:	f240 8104 	bls.w	80063f8 <__udivmoddi4+0x294>
 80061f0:	4464      	add	r4, ip
 80061f2:	3802      	subs	r0, #2
 80061f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	2100      	movs	r1, #0
 80061fc:	b11e      	cbz	r6, 8006206 <__udivmoddi4+0xa2>
 80061fe:	40dc      	lsrs	r4, r3
 8006200:	2300      	movs	r3, #0
 8006202:	e9c6 4300 	strd	r4, r3, [r6]
 8006206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620a:	428b      	cmp	r3, r1
 800620c:	d908      	bls.n	8006220 <__udivmoddi4+0xbc>
 800620e:	2e00      	cmp	r6, #0
 8006210:	f000 80ed 	beq.w	80063ee <__udivmoddi4+0x28a>
 8006214:	2100      	movs	r1, #0
 8006216:	e9c6 0500 	strd	r0, r5, [r6]
 800621a:	4608      	mov	r0, r1
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	fab3 f183 	clz	r1, r3
 8006224:	2900      	cmp	r1, #0
 8006226:	d149      	bne.n	80062bc <__udivmoddi4+0x158>
 8006228:	42ab      	cmp	r3, r5
 800622a:	d302      	bcc.n	8006232 <__udivmoddi4+0xce>
 800622c:	4282      	cmp	r2, r0
 800622e:	f200 80f8 	bhi.w	8006422 <__udivmoddi4+0x2be>
 8006232:	1a84      	subs	r4, r0, r2
 8006234:	eb65 0203 	sbc.w	r2, r5, r3
 8006238:	2001      	movs	r0, #1
 800623a:	4617      	mov	r7, r2
 800623c:	2e00      	cmp	r6, #0
 800623e:	d0e2      	beq.n	8006206 <__udivmoddi4+0xa2>
 8006240:	e9c6 4700 	strd	r4, r7, [r6]
 8006244:	e7df      	b.n	8006206 <__udivmoddi4+0xa2>
 8006246:	b902      	cbnz	r2, 800624a <__udivmoddi4+0xe6>
 8006248:	deff      	udf	#255	; 0xff
 800624a:	fab2 f382 	clz	r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 8090 	bne.w	8006374 <__udivmoddi4+0x210>
 8006254:	1a8a      	subs	r2, r1, r2
 8006256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800625a:	fa1f fe8c 	uxth.w	lr, ip
 800625e:	2101      	movs	r1, #1
 8006260:	fbb2 f5f7 	udiv	r5, r2, r7
 8006264:	fb07 2015 	mls	r0, r7, r5, r2
 8006268:	0c22      	lsrs	r2, r4, #16
 800626a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800626e:	fb0e f005 	mul.w	r0, lr, r5
 8006272:	4290      	cmp	r0, r2
 8006274:	d908      	bls.n	8006288 <__udivmoddi4+0x124>
 8006276:	eb1c 0202 	adds.w	r2, ip, r2
 800627a:	f105 38ff 	add.w	r8, r5, #4294967295
 800627e:	d202      	bcs.n	8006286 <__udivmoddi4+0x122>
 8006280:	4290      	cmp	r0, r2
 8006282:	f200 80cb 	bhi.w	800641c <__udivmoddi4+0x2b8>
 8006286:	4645      	mov	r5, r8
 8006288:	1a12      	subs	r2, r2, r0
 800628a:	b2a4      	uxth	r4, r4
 800628c:	fbb2 f0f7 	udiv	r0, r2, r7
 8006290:	fb07 2210 	mls	r2, r7, r0, r2
 8006294:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006298:	fb0e fe00 	mul.w	lr, lr, r0
 800629c:	45a6      	cmp	lr, r4
 800629e:	d908      	bls.n	80062b2 <__udivmoddi4+0x14e>
 80062a0:	eb1c 0404 	adds.w	r4, ip, r4
 80062a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80062a8:	d202      	bcs.n	80062b0 <__udivmoddi4+0x14c>
 80062aa:	45a6      	cmp	lr, r4
 80062ac:	f200 80bb 	bhi.w	8006426 <__udivmoddi4+0x2c2>
 80062b0:	4610      	mov	r0, r2
 80062b2:	eba4 040e 	sub.w	r4, r4, lr
 80062b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80062ba:	e79f      	b.n	80061fc <__udivmoddi4+0x98>
 80062bc:	f1c1 0720 	rsb	r7, r1, #32
 80062c0:	408b      	lsls	r3, r1
 80062c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80062c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80062ca:	fa05 f401 	lsl.w	r4, r5, r1
 80062ce:	fa20 f307 	lsr.w	r3, r0, r7
 80062d2:	40fd      	lsrs	r5, r7
 80062d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80062d8:	4323      	orrs	r3, r4
 80062da:	fbb5 f8f9 	udiv	r8, r5, r9
 80062de:	fa1f fe8c 	uxth.w	lr, ip
 80062e2:	fb09 5518 	mls	r5, r9, r8, r5
 80062e6:	0c1c      	lsrs	r4, r3, #16
 80062e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80062ec:	fb08 f50e 	mul.w	r5, r8, lr
 80062f0:	42a5      	cmp	r5, r4
 80062f2:	fa02 f201 	lsl.w	r2, r2, r1
 80062f6:	fa00 f001 	lsl.w	r0, r0, r1
 80062fa:	d90b      	bls.n	8006314 <__udivmoddi4+0x1b0>
 80062fc:	eb1c 0404 	adds.w	r4, ip, r4
 8006300:	f108 3aff 	add.w	sl, r8, #4294967295
 8006304:	f080 8088 	bcs.w	8006418 <__udivmoddi4+0x2b4>
 8006308:	42a5      	cmp	r5, r4
 800630a:	f240 8085 	bls.w	8006418 <__udivmoddi4+0x2b4>
 800630e:	f1a8 0802 	sub.w	r8, r8, #2
 8006312:	4464      	add	r4, ip
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	b29d      	uxth	r5, r3
 8006318:	fbb4 f3f9 	udiv	r3, r4, r9
 800631c:	fb09 4413 	mls	r4, r9, r3, r4
 8006320:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006324:	fb03 fe0e 	mul.w	lr, r3, lr
 8006328:	45a6      	cmp	lr, r4
 800632a:	d908      	bls.n	800633e <__udivmoddi4+0x1da>
 800632c:	eb1c 0404 	adds.w	r4, ip, r4
 8006330:	f103 35ff 	add.w	r5, r3, #4294967295
 8006334:	d26c      	bcs.n	8006410 <__udivmoddi4+0x2ac>
 8006336:	45a6      	cmp	lr, r4
 8006338:	d96a      	bls.n	8006410 <__udivmoddi4+0x2ac>
 800633a:	3b02      	subs	r3, #2
 800633c:	4464      	add	r4, ip
 800633e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006342:	fba3 9502 	umull	r9, r5, r3, r2
 8006346:	eba4 040e 	sub.w	r4, r4, lr
 800634a:	42ac      	cmp	r4, r5
 800634c:	46c8      	mov	r8, r9
 800634e:	46ae      	mov	lr, r5
 8006350:	d356      	bcc.n	8006400 <__udivmoddi4+0x29c>
 8006352:	d053      	beq.n	80063fc <__udivmoddi4+0x298>
 8006354:	b156      	cbz	r6, 800636c <__udivmoddi4+0x208>
 8006356:	ebb0 0208 	subs.w	r2, r0, r8
 800635a:	eb64 040e 	sbc.w	r4, r4, lr
 800635e:	fa04 f707 	lsl.w	r7, r4, r7
 8006362:	40ca      	lsrs	r2, r1
 8006364:	40cc      	lsrs	r4, r1
 8006366:	4317      	orrs	r7, r2
 8006368:	e9c6 7400 	strd	r7, r4, [r6]
 800636c:	4618      	mov	r0, r3
 800636e:	2100      	movs	r1, #0
 8006370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006374:	f1c3 0120 	rsb	r1, r3, #32
 8006378:	fa02 fc03 	lsl.w	ip, r2, r3
 800637c:	fa20 f201 	lsr.w	r2, r0, r1
 8006380:	fa25 f101 	lsr.w	r1, r5, r1
 8006384:	409d      	lsls	r5, r3
 8006386:	432a      	orrs	r2, r5
 8006388:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800638c:	fa1f fe8c 	uxth.w	lr, ip
 8006390:	fbb1 f0f7 	udiv	r0, r1, r7
 8006394:	fb07 1510 	mls	r5, r7, r0, r1
 8006398:	0c11      	lsrs	r1, r2, #16
 800639a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800639e:	fb00 f50e 	mul.w	r5, r0, lr
 80063a2:	428d      	cmp	r5, r1
 80063a4:	fa04 f403 	lsl.w	r4, r4, r3
 80063a8:	d908      	bls.n	80063bc <__udivmoddi4+0x258>
 80063aa:	eb1c 0101 	adds.w	r1, ip, r1
 80063ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80063b2:	d22f      	bcs.n	8006414 <__udivmoddi4+0x2b0>
 80063b4:	428d      	cmp	r5, r1
 80063b6:	d92d      	bls.n	8006414 <__udivmoddi4+0x2b0>
 80063b8:	3802      	subs	r0, #2
 80063ba:	4461      	add	r1, ip
 80063bc:	1b49      	subs	r1, r1, r5
 80063be:	b292      	uxth	r2, r2
 80063c0:	fbb1 f5f7 	udiv	r5, r1, r7
 80063c4:	fb07 1115 	mls	r1, r7, r5, r1
 80063c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80063cc:	fb05 f10e 	mul.w	r1, r5, lr
 80063d0:	4291      	cmp	r1, r2
 80063d2:	d908      	bls.n	80063e6 <__udivmoddi4+0x282>
 80063d4:	eb1c 0202 	adds.w	r2, ip, r2
 80063d8:	f105 38ff 	add.w	r8, r5, #4294967295
 80063dc:	d216      	bcs.n	800640c <__udivmoddi4+0x2a8>
 80063de:	4291      	cmp	r1, r2
 80063e0:	d914      	bls.n	800640c <__udivmoddi4+0x2a8>
 80063e2:	3d02      	subs	r5, #2
 80063e4:	4462      	add	r2, ip
 80063e6:	1a52      	subs	r2, r2, r1
 80063e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80063ec:	e738      	b.n	8006260 <__udivmoddi4+0xfc>
 80063ee:	4631      	mov	r1, r6
 80063f0:	4630      	mov	r0, r6
 80063f2:	e708      	b.n	8006206 <__udivmoddi4+0xa2>
 80063f4:	4639      	mov	r1, r7
 80063f6:	e6e6      	b.n	80061c6 <__udivmoddi4+0x62>
 80063f8:	4610      	mov	r0, r2
 80063fa:	e6fb      	b.n	80061f4 <__udivmoddi4+0x90>
 80063fc:	4548      	cmp	r0, r9
 80063fe:	d2a9      	bcs.n	8006354 <__udivmoddi4+0x1f0>
 8006400:	ebb9 0802 	subs.w	r8, r9, r2
 8006404:	eb65 0e0c 	sbc.w	lr, r5, ip
 8006408:	3b01      	subs	r3, #1
 800640a:	e7a3      	b.n	8006354 <__udivmoddi4+0x1f0>
 800640c:	4645      	mov	r5, r8
 800640e:	e7ea      	b.n	80063e6 <__udivmoddi4+0x282>
 8006410:	462b      	mov	r3, r5
 8006412:	e794      	b.n	800633e <__udivmoddi4+0x1da>
 8006414:	4640      	mov	r0, r8
 8006416:	e7d1      	b.n	80063bc <__udivmoddi4+0x258>
 8006418:	46d0      	mov	r8, sl
 800641a:	e77b      	b.n	8006314 <__udivmoddi4+0x1b0>
 800641c:	3d02      	subs	r5, #2
 800641e:	4462      	add	r2, ip
 8006420:	e732      	b.n	8006288 <__udivmoddi4+0x124>
 8006422:	4608      	mov	r0, r1
 8006424:	e70a      	b.n	800623c <__udivmoddi4+0xd8>
 8006426:	4464      	add	r4, ip
 8006428:	3802      	subs	r0, #2
 800642a:	e742      	b.n	80062b2 <__udivmoddi4+0x14e>
