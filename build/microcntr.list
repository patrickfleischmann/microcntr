
build/microcntr.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__vectors_base__>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002fd 	.word	0x080002fd
 8000008:	080002ff 	.word	0x080002ff
 800000c:	080002ff 	.word	0x080002ff
 8000010:	080002ff 	.word	0x080002ff
 8000014:	080002ff 	.word	0x080002ff
 8000018:	080002ff 	.word	0x080002ff
 800001c:	080002ff 	.word	0x080002ff
 8000020:	080002ff 	.word	0x080002ff
 8000024:	080002ff 	.word	0x080002ff
 8000028:	080002ff 	.word	0x080002ff
 800002c:	08003ca1 	.word	0x08003ca1
 8000030:	080002ff 	.word	0x080002ff
 8000034:	080002ff 	.word	0x080002ff
 8000038:	080002ff 	.word	0x080002ff
 800003c:	080002ff 	.word	0x080002ff
 8000040:	080002ff 	.word	0x080002ff
 8000044:	080002ff 	.word	0x080002ff
 8000048:	080002ff 	.word	0x080002ff
 800004c:	080002ff 	.word	0x080002ff
 8000050:	080002ff 	.word	0x080002ff
 8000054:	080002ff 	.word	0x080002ff
 8000058:	080002ff 	.word	0x080002ff
 800005c:	080002ff 	.word	0x080002ff
 8000060:	080002ff 	.word	0x080002ff
 8000064:	080002ff 	.word	0x080002ff
 8000068:	080002ff 	.word	0x080002ff
 800006c:	08002e01 	.word	0x08002e01
 8000070:	08002ea1 	.word	0x08002ea1
 8000074:	08002f41 	.word	0x08002f41
 8000078:	08002fe1 	.word	0x08002fe1
 800007c:	08003081 	.word	0x08003081
 8000080:	08003121 	.word	0x08003121
 8000084:	080031c1 	.word	0x080031c1
 8000088:	08002cd1 	.word	0x08002cd1
 800008c:	080002ff 	.word	0x080002ff
 8000090:	080002ff 	.word	0x080002ff
 8000094:	080002ff 	.word	0x080002ff
 8000098:	080002ff 	.word	0x080002ff
 800009c:	080002ff 	.word	0x080002ff
 80000a0:	080002ff 	.word	0x080002ff
 80000a4:	080002ff 	.word	0x080002ff
 80000a8:	08002a21 	.word	0x08002a21
 80000ac:	080002ff 	.word	0x080002ff
 80000b0:	080002ff 	.word	0x080002ff
 80000b4:	080002ff 	.word	0x080002ff
 80000b8:	080002ff 	.word	0x080002ff
 80000bc:	080002ff 	.word	0x080002ff
 80000c0:	080002ff 	.word	0x080002ff
 80000c4:	08003801 	.word	0x08003801
 80000c8:	08003a31 	.word	0x08003a31
 80000cc:	080002ff 	.word	0x080002ff
 80000d0:	080002ff 	.word	0x080002ff
 80000d4:	080002ff 	.word	0x080002ff
 80000d8:	080026d1 	.word	0x080026d1
 80000dc:	080002ff 	.word	0x080002ff
 80000e0:	080002ff 	.word	0x080002ff
 80000e4:	080002ff 	.word	0x080002ff
 80000e8:	080002ff 	.word	0x080002ff
 80000ec:	080002ff 	.word	0x080002ff
 80000f0:	080002ff 	.word	0x080002ff
 80000f4:	080002ff 	.word	0x080002ff
 80000f8:	080002ff 	.word	0x080002ff
 80000fc:	08003261 	.word	0x08003261
 8000100:	080002ff 	.word	0x080002ff
 8000104:	080002ff 	.word	0x080002ff
 8000108:	08002ae1 	.word	0x08002ae1
 800010c:	080002ff 	.word	0x080002ff
 8000110:	080002ff 	.word	0x080002ff
 8000114:	080002ff 	.word	0x080002ff
 8000118:	080002ff 	.word	0x080002ff
 800011c:	080002ff 	.word	0x080002ff
 8000120:	08003301 	.word	0x08003301
 8000124:	080033a1 	.word	0x080033a1
 8000128:	08003441 	.word	0x08003441
 800012c:	080034e1 	.word	0x080034e1
 8000130:	08003581 	.word	0x08003581
 8000134:	080002ff 	.word	0x080002ff
 8000138:	080002ff 	.word	0x080002ff
 800013c:	080002ff 	.word	0x080002ff
 8000140:	080002ff 	.word	0x080002ff
 8000144:	080002ff 	.word	0x080002ff
 8000148:	080002ff 	.word	0x080002ff
 800014c:	080002ff 	.word	0x080002ff
 8000150:	08003621 	.word	0x08003621
 8000154:	080036c1 	.word	0x080036c1
 8000158:	08003761 	.word	0x08003761
 800015c:	080002ff 	.word	0x080002ff
 8000160:	080002ff 	.word	0x080002ff
 8000164:	080002ff 	.word	0x080002ff
 8000168:	080002ff 	.word	0x080002ff
 800016c:	080002ff 	.word	0x080002ff
 8000170:	080002ff 	.word	0x080002ff
 8000174:	080002ff 	.word	0x080002ff
 8000178:	080002ff 	.word	0x080002ff
 800017c:	080002ff 	.word	0x080002ff
 8000180:	080002ff 	.word	0x080002ff
 8000184:	080002ff 	.word	0x080002ff
 8000188:	080002ff 	.word	0x080002ff
 800018c:	080002ff 	.word	0x080002ff
 8000190:	080002ff 	.word	0x080002ff
 8000194:	080002ff 	.word	0x080002ff
 8000198:	080002ff 	.word	0x080002ff
 800019c:	080002ff 	.word	0x080002ff
 80001a0:	080002ff 	.word	0x080002ff
 80001a4:	080002ff 	.word	0x080002ff
 80001a8:	080002ff 	.word	0x080002ff
 80001ac:	080002ff 	.word	0x080002ff
 80001b0:	080002ff 	.word	0x080002ff
 80001b4:	080002ff 	.word	0x080002ff
 80001b8:	080002ff 	.word	0x080002ff
 80001bc:	080002ff 	.word	0x080002ff
 80001c0:	080002ff 	.word	0x080002ff
 80001c4:	080002ff 	.word	0x080002ff
 80001c8:	080002ff 	.word	0x080002ff
 80001cc:	080002ff 	.word	0x080002ff
 80001d0:	080002ff 	.word	0x080002ff
 80001d4:	080002ff 	.word	0x080002ff
 80001d8:	080002ff 	.word	0x080002ff
 80001dc:	080002ff 	.word	0x080002ff

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4837      	ldr	r0, [pc, #220]	; (80002c0 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4836      	ldr	r0, [pc, #216]	; (80002c4 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
 80001ee:	4836      	ldr	r0, [pc, #216]	; (80002c8 <endfiniloop+0xc>)
                ldr     r1, =SCB_VTOR
 80001f0:	4936      	ldr	r1, [pc, #216]	; (80002cc <endfiniloop+0x10>)
                str     r0, [r1]
 80001f2:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001f4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001f8:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001fc:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 8000200:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000204:	6008      	str	r0, [r1, #0]
                dsb
 8000206:	f3bf 8f4f 	dsb	sy
                isb
 800020a:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 800020e:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 8000212:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 8000216:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 800021a:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 800021e:	6008      	str	r0, [r1, #0]
                dsb
 8000220:	f3bf 8f4f 	dsb	sy
                isb
 8000224:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 8000228:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 800022c:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 8000230:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 8000234:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000238:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 800023a:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800023c:	f380 8814 	msr	CONTROL, r0
                isb
 8000240:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000244:	f002 f86c 	bl	8002320 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000248:	f003 fd3a 	bl	8003cc0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800024c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000250:	491f      	ldr	r1, [pc, #124]	; (80002d0 <endfiniloop+0x14>)
                ldr     r2, =__main_stack_end__
 8000252:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <endfiniloop+0x4>)

08000254 <msloop>:
msloop:
                cmp     r1, r2
 8000254:	4291      	cmp	r1, r2
                itt     lo
 8000256:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000258:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800025c:	e7fa      	bcc.n	8000254 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800025e:	491d      	ldr	r1, [pc, #116]	; (80002d4 <endfiniloop+0x18>)
                ldr     r2, =__process_stack_end__
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <endfiniloop+0x8>)

08000262 <psloop>:
psloop:
                cmp     r1, r2
 8000262:	4291      	cmp	r1, r2
                itt     lo
 8000264:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000266:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800026a:	e7fa      	bcc.n	8000262 <psloop>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
 800026c:	491a      	ldr	r1, [pc, #104]	; (80002d8 <endfiniloop+0x1c>)
                ldr     r2, =__data_base__
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <endfiniloop+0x20>)
                ldr     r3, =__data_end__
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <endfiniloop+0x24>)

08000272 <dloop>:
dloop:
                cmp     r2, r3
 8000272:	429a      	cmp	r2, r3
                ittt    lo
 8000274:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000276:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800027a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800027e:	e7f8      	bcc.n	8000272 <dloop>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
 8000280:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000282:	4918      	ldr	r1, [pc, #96]	; (80002e4 <endfiniloop+0x28>)
                ldr     r2, =__bss_end__
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <endfiniloop+0x2c>)

08000286 <bloop>:
bloop:
                cmp     r1, r2
 8000286:	4291      	cmp	r1, r2
                itt     lo
 8000288:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800028a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800028e:	e7fa      	bcc.n	8000286 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000290:	f002 f85e 	bl	8002350 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000294:	f002 f84c 	bl	8002330 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000298:	4c14      	ldr	r4, [pc, #80]	; (80002ec <endfiniloop+0x30>)
                ldr     r5, =__init_array_end__
 800029a:	4d15      	ldr	r5, [pc, #84]	; (80002f0 <endfiniloop+0x34>)

0800029c <initloop>:
initloop:
                cmp     r4, r5
 800029c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800029e:	da03      	bge.n	80002a8 <endinitloop>
                ldr     r1, [r4], #4
 80002a0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002a4:	4788      	blx	r1
                b       initloop
 80002a6:	e7f9      	b.n	800029c <initloop>

080002a8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80002a8:	f003 fdda 	bl	8003e60 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80002ac:	4c11      	ldr	r4, [pc, #68]	; (80002f4 <endfiniloop+0x38>)
                ldr     r5, =__fini_array_end__
 80002ae:	4d12      	ldr	r5, [pc, #72]	; (80002f8 <endfiniloop+0x3c>)

080002b0 <finiloop>:
finiloop:
                cmp     r4, r5
 80002b0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80002b2:	da03      	bge.n	80002bc <endfiniloop>
                ldr     r1, [r4], #4
 80002b4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80002b8:	4788      	blx	r1
                b       finiloop
 80002ba:	e7f9      	b.n	80002b0 <finiloop>

080002bc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80002bc:	f002 b840 	b.w	8002340 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002c0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002c4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002c8:	08000000 	.word	0x08000000
                ldr     r1, =SCB_VTOR
 80002cc:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
 80002d0:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002d4:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002d8:	08004a24 	.word	0x08004a24
                ldr     r2, =__data_base__
 80002dc:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002e0:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002e4:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002e8:	20001870 	.word	0x20001870
                ldr     r4, =__init_array_base__
 80002ec:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002f0:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002f4:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002f8:	080001e0 	.word	0x080001e0

080002fc <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002fc:	e770      	b.n	80001e0 <_crt0_entry>

080002fe <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002fe:	f000 f800 	bl	8000302 <_unhandled_exception>

08000302 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 8000302:	e7fe      	b.n	8000302 <_unhandled_exception>

08000304 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
 8000308:	ed2d 8a10 	vpush	{s16-s31}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 800030c:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000310:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 8000312:	469d      	mov	sp, r3
#endif
#endif

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
 8000314:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800031c <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800031c:	f002 f850 	bl	80023c0 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000320:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000322:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000326:	4628      	mov	r0, r5
                blx     r4
 8000328:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800032a:	2000      	movs	r0, #0
                bl      chThdExit
 800032c:	f003 fc78 	bl	8003c20 <chThdExit>

08000330 <.zombies>:
.zombies:       b       .zombies
 8000330:	e7fe      	b.n	8000330 <.zombies>

08000332 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
 8000332:	f002 f85d 	bl	80023f0 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
 8000336:	f003 fc43 	bl	8003bc0 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
 800033a:	f002 f841 	bl	80023c0 <__dbg_check_unlock>

0800033e <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 800033e:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000340:	e7fe      	b.n	8000340 <__port_exit_from_isr+0x2>
	...

08000344 <memcpy>:
 8000344:	4684      	mov	ip, r0
 8000346:	ea41 0300 	orr.w	r3, r1, r0
 800034a:	f013 0303 	ands.w	r3, r3, #3
 800034e:	d16d      	bne.n	800042c <memcpy+0xe8>
 8000350:	3a40      	subs	r2, #64	; 0x40
 8000352:	d341      	bcc.n	80003d8 <memcpy+0x94>
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a40      	subs	r2, #64	; 0x40
 80003d6:	d2bd      	bcs.n	8000354 <memcpy+0x10>
 80003d8:	3230      	adds	r2, #48	; 0x30
 80003da:	d311      	bcc.n	8000400 <memcpy+0xbc>
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	3a10      	subs	r2, #16
 80003fe:	d2ed      	bcs.n	80003dc <memcpy+0x98>
 8000400:	320c      	adds	r2, #12
 8000402:	d305      	bcc.n	8000410 <memcpy+0xcc>
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	3a04      	subs	r2, #4
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0xc0>
 8000410:	3204      	adds	r2, #4
 8000412:	d008      	beq.n	8000426 <memcpy+0xe2>
 8000414:	07d2      	lsls	r2, r2, #31
 8000416:	bf1c      	itt	ne
 8000418:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800041c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000420:	d301      	bcc.n	8000426 <memcpy+0xe2>
 8000422:	880b      	ldrh	r3, [r1, #0]
 8000424:	8003      	strh	r3, [r0, #0]
 8000426:	4660      	mov	r0, ip
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	2a08      	cmp	r2, #8
 800042e:	d313      	bcc.n	8000458 <memcpy+0x114>
 8000430:	078b      	lsls	r3, r1, #30
 8000432:	d08d      	beq.n	8000350 <memcpy+0xc>
 8000434:	f010 0303 	ands.w	r3, r0, #3
 8000438:	d08a      	beq.n	8000350 <memcpy+0xc>
 800043a:	f1c3 0304 	rsb	r3, r3, #4
 800043e:	1ad2      	subs	r2, r2, r3
 8000440:	07db      	lsls	r3, r3, #31
 8000442:	bf1c      	itt	ne
 8000444:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000448:	f800 3b01 	strbne.w	r3, [r0], #1
 800044c:	d380      	bcc.n	8000350 <memcpy+0xc>
 800044e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000452:	f820 3b02 	strh.w	r3, [r0], #2
 8000456:	e77b      	b.n	8000350 <memcpy+0xc>
 8000458:	3a04      	subs	r2, #4
 800045a:	d3d9      	bcc.n	8000410 <memcpy+0xcc>
 800045c:	3a01      	subs	r2, #1
 800045e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000462:	f800 3b01 	strb.w	r3, [r0], #1
 8000466:	d2f9      	bcs.n	800045c <memcpy+0x118>
 8000468:	780b      	ldrb	r3, [r1, #0]
 800046a:	7003      	strb	r3, [r0, #0]
 800046c:	784b      	ldrb	r3, [r1, #1]
 800046e:	7043      	strb	r3, [r0, #1]
 8000470:	788b      	ldrb	r3, [r1, #2]
 8000472:	7083      	strb	r3, [r0, #2]
 8000474:	4660      	mov	r0, ip
 8000476:	4770      	bx	lr

08000478 <__aeabi_dmul>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800047e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000486:	bf1d      	ittte	ne
 8000488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800048c:	ea94 0f0c 	teqne	r4, ip
 8000490:	ea95 0f0c 	teqne	r5, ip
 8000494:	f000 f8de 	bleq	8000654 <__aeabi_dmul+0x1dc>
 8000498:	442c      	add	r4, r5
 800049a:	ea81 0603 	eor.w	r6, r1, r3
 800049e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004aa:	bf18      	it	ne
 80004ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004b8:	d038      	beq.n	800052c <__aeabi_dmul+0xb4>
 80004ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80004be:	f04f 0500 	mov.w	r5, #0
 80004c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004ce:	f04f 0600 	mov.w	r6, #0
 80004d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004d6:	f09c 0f00 	teq	ip, #0
 80004da:	bf18      	it	ne
 80004dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80004e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004ec:	d204      	bcs.n	80004f8 <__aeabi_dmul+0x80>
 80004ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80004f2:	416d      	adcs	r5, r5
 80004f4:	eb46 0606 	adc.w	r6, r6, r6
 80004f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80004fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800050c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000510:	bf88      	it	hi
 8000512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000516:	d81e      	bhi.n	8000556 <__aeabi_dmul+0xde>
 8000518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800051c:	bf08      	it	eq
 800051e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000522:	f150 0000 	adcs.w	r0, r0, #0
 8000526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000530:	ea46 0101 	orr.w	r1, r6, r1
 8000534:	ea40 0002 	orr.w	r0, r0, r2
 8000538:	ea81 0103 	eor.w	r1, r1, r3
 800053c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000540:	bfc2      	ittt	gt
 8000542:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800054a:	bd70      	popgt	{r4, r5, r6, pc}
 800054c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000550:	f04f 0e00 	mov.w	lr, #0
 8000554:	3c01      	subs	r4, #1
 8000556:	f300 80ab 	bgt.w	80006b0 <__aeabi_dmul+0x238>
 800055a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800055e:	bfde      	ittt	le
 8000560:	2000      	movle	r0, #0
 8000562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000566:	bd70      	pople	{r4, r5, r6, pc}
 8000568:	f1c4 0400 	rsb	r4, r4, #0
 800056c:	3c20      	subs	r4, #32
 800056e:	da35      	bge.n	80005dc <__aeabi_dmul+0x164>
 8000570:	340c      	adds	r4, #12
 8000572:	dc1b      	bgt.n	80005ac <__aeabi_dmul+0x134>
 8000574:	f104 0414 	add.w	r4, r4, #20
 8000578:	f1c4 0520 	rsb	r5, r4, #32
 800057c:	fa00 f305 	lsl.w	r3, r0, r5
 8000580:	fa20 f004 	lsr.w	r0, r0, r4
 8000584:	fa01 f205 	lsl.w	r2, r1, r5
 8000588:	ea40 0002 	orr.w	r0, r0, r2
 800058c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000598:	fa21 f604 	lsr.w	r6, r1, r4
 800059c:	eb42 0106 	adc.w	r1, r2, r6
 80005a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f1c4 040c 	rsb	r4, r4, #12
 80005b0:	f1c4 0520 	rsb	r5, r4, #32
 80005b4:	fa00 f304 	lsl.w	r3, r0, r4
 80005b8:	fa20 f005 	lsr.w	r0, r0, r5
 80005bc:	fa01 f204 	lsl.w	r2, r1, r4
 80005c0:	ea40 0002 	orr.w	r0, r0, r2
 80005c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005cc:	f141 0100 	adc.w	r1, r1, #0
 80005d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005d4:	bf08      	it	eq
 80005d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f205 	lsl.w	r2, r0, r5
 80005e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005e8:	fa20 f304 	lsr.w	r3, r0, r4
 80005ec:	fa01 f205 	lsl.w	r2, r1, r5
 80005f0:	ea43 0302 	orr.w	r3, r3, r2
 80005f4:	fa21 f004 	lsr.w	r0, r1, r4
 80005f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000600:	ea20 0002 	bic.w	r0, r0, r2
 8000604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800060c:	bf08      	it	eq
 800060e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f094 0f00 	teq	r4, #0
 8000618:	d10f      	bne.n	800063a <__aeabi_dmul+0x1c2>
 800061a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800061e:	0040      	lsls	r0, r0, #1
 8000620:	eb41 0101 	adc.w	r1, r1, r1
 8000624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000628:	bf08      	it	eq
 800062a:	3c01      	subeq	r4, #1
 800062c:	d0f7      	beq.n	800061e <__aeabi_dmul+0x1a6>
 800062e:	ea41 0106 	orr.w	r1, r1, r6
 8000632:	f095 0f00 	teq	r5, #0
 8000636:	bf18      	it	ne
 8000638:	4770      	bxne	lr
 800063a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	eb43 0303 	adc.w	r3, r3, r3
 8000644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000648:	bf08      	it	eq
 800064a:	3d01      	subeq	r5, #1
 800064c:	d0f7      	beq.n	800063e <__aeabi_dmul+0x1c6>
 800064e:	ea43 0306 	orr.w	r3, r3, r6
 8000652:	4770      	bx	lr
 8000654:	ea94 0f0c 	teq	r4, ip
 8000658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800065c:	bf18      	it	ne
 800065e:	ea95 0f0c 	teqne	r5, ip
 8000662:	d00c      	beq.n	800067e <__aeabi_dmul+0x206>
 8000664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000668:	bf18      	it	ne
 800066a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800066e:	d1d1      	bne.n	8000614 <__aeabi_dmul+0x19c>
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000682:	bf06      	itte	eq
 8000684:	4610      	moveq	r0, r2
 8000686:	4619      	moveq	r1, r3
 8000688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800068c:	d019      	beq.n	80006c2 <__aeabi_dmul+0x24a>
 800068e:	ea94 0f0c 	teq	r4, ip
 8000692:	d102      	bne.n	800069a <__aeabi_dmul+0x222>
 8000694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000698:	d113      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 800069a:	ea95 0f0c 	teq	r5, ip
 800069e:	d105      	bne.n	80006ac <__aeabi_dmul+0x234>
 80006a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006a4:	bf1c      	itt	ne
 80006a6:	4610      	movne	r0, r2
 80006a8:	4619      	movne	r1, r3
 80006aa:	d10a      	bne.n	80006c2 <__aeabi_dmul+0x24a>
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006ca:	bd70      	pop	{r4, r5, r6, pc}

080006cc <__aeabi_drsub>:
 80006cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e002      	b.n	80006d8 <__adddf3>
 80006d2:	bf00      	nop

080006d4 <__aeabi_dsub>:
 80006d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080006d8 <__adddf3>:
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006e2:	ea94 0f05 	teq	r4, r5
 80006e6:	bf08      	it	eq
 80006e8:	ea90 0f02 	teqeq	r0, r2
 80006ec:	bf1f      	itttt	ne
 80006ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006fe:	f000 80e2 	beq.w	80008c6 <__adddf3+0x1ee>
 8000702:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000706:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800070a:	bfb8      	it	lt
 800070c:	426d      	neglt	r5, r5
 800070e:	dd0c      	ble.n	800072a <__adddf3+0x52>
 8000710:	442c      	add	r4, r5
 8000712:	ea80 0202 	eor.w	r2, r0, r2
 8000716:	ea81 0303 	eor.w	r3, r1, r3
 800071a:	ea82 0000 	eor.w	r0, r2, r0
 800071e:	ea83 0101 	eor.w	r1, r3, r1
 8000722:	ea80 0202 	eor.w	r2, r0, r2
 8000726:	ea81 0303 	eor.w	r3, r1, r3
 800072a:	2d36      	cmp	r5, #54	; 0x36
 800072c:	bf88      	it	hi
 800072e:	bd30      	pophi	{r4, r5, pc}
 8000730:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000734:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000738:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800073c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000740:	d002      	beq.n	8000748 <__adddf3+0x70>
 8000742:	4240      	negs	r0, r0
 8000744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000748:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000754:	d002      	beq.n	800075c <__adddf3+0x84>
 8000756:	4252      	negs	r2, r2
 8000758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075c:	ea94 0f05 	teq	r4, r5
 8000760:	f000 80a7 	beq.w	80008b2 <__adddf3+0x1da>
 8000764:	f1a4 0401 	sub.w	r4, r4, #1
 8000768:	f1d5 0e20 	rsbs	lr, r5, #32
 800076c:	db0d      	blt.n	800078a <__adddf3+0xb2>
 800076e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000772:	fa22 f205 	lsr.w	r2, r2, r5
 8000776:	1880      	adds	r0, r0, r2
 8000778:	f141 0100 	adc.w	r1, r1, #0
 800077c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000780:	1880      	adds	r0, r0, r2
 8000782:	fa43 f305 	asr.w	r3, r3, r5
 8000786:	4159      	adcs	r1, r3
 8000788:	e00e      	b.n	80007a8 <__adddf3+0xd0>
 800078a:	f1a5 0520 	sub.w	r5, r5, #32
 800078e:	f10e 0e20 	add.w	lr, lr, #32
 8000792:	2a01      	cmp	r2, #1
 8000794:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000798:	bf28      	it	cs
 800079a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800079e:	fa43 f305 	asr.w	r3, r3, r5
 80007a2:	18c0      	adds	r0, r0, r3
 80007a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80007a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ac:	d507      	bpl.n	80007be <__adddf3+0xe6>
 80007ae:	f04f 0e00 	mov.w	lr, #0
 80007b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80007b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80007ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80007be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80007c2:	d31b      	bcc.n	80007fc <__adddf3+0x124>
 80007c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80007c8:	d30c      	bcc.n	80007e4 <__adddf3+0x10c>
 80007ca:	0849      	lsrs	r1, r1, #1
 80007cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80007d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007d4:	f104 0401 	add.w	r4, r4, #1
 80007d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80007e0:	f080 809a 	bcs.w	8000918 <__adddf3+0x240>
 80007e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007e8:	bf08      	it	eq
 80007ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007ee:	f150 0000 	adcs.w	r0, r0, #0
 80007f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007f6:	ea41 0105 	orr.w	r1, r1, r5
 80007fa:	bd30      	pop	{r4, r5, pc}
 80007fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000800:	4140      	adcs	r0, r0
 8000802:	eb41 0101 	adc.w	r1, r1, r1
 8000806:	3c01      	subs	r4, #1
 8000808:	bf28      	it	cs
 800080a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800080e:	d2e9      	bcs.n	80007e4 <__adddf3+0x10c>
 8000810:	f091 0f00 	teq	r1, #0
 8000814:	bf04      	itt	eq
 8000816:	4601      	moveq	r1, r0
 8000818:	2000      	moveq	r0, #0
 800081a:	fab1 f381 	clz	r3, r1
 800081e:	bf08      	it	eq
 8000820:	3320      	addeq	r3, #32
 8000822:	f1a3 030b 	sub.w	r3, r3, #11
 8000826:	f1b3 0220 	subs.w	r2, r3, #32
 800082a:	da0c      	bge.n	8000846 <__adddf3+0x16e>
 800082c:	320c      	adds	r2, #12
 800082e:	dd08      	ble.n	8000842 <__adddf3+0x16a>
 8000830:	f102 0c14 	add.w	ip, r2, #20
 8000834:	f1c2 020c 	rsb	r2, r2, #12
 8000838:	fa01 f00c 	lsl.w	r0, r1, ip
 800083c:	fa21 f102 	lsr.w	r1, r1, r2
 8000840:	e00c      	b.n	800085c <__adddf3+0x184>
 8000842:	f102 0214 	add.w	r2, r2, #20
 8000846:	bfd8      	it	le
 8000848:	f1c2 0c20 	rsble	ip, r2, #32
 800084c:	fa01 f102 	lsl.w	r1, r1, r2
 8000850:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000854:	bfdc      	itt	le
 8000856:	ea41 010c 	orrle.w	r1, r1, ip
 800085a:	4090      	lslle	r0, r2
 800085c:	1ae4      	subs	r4, r4, r3
 800085e:	bfa2      	ittt	ge
 8000860:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000864:	4329      	orrge	r1, r5
 8000866:	bd30      	popge	{r4, r5, pc}
 8000868:	ea6f 0404 	mvn.w	r4, r4
 800086c:	3c1f      	subs	r4, #31
 800086e:	da1c      	bge.n	80008aa <__adddf3+0x1d2>
 8000870:	340c      	adds	r4, #12
 8000872:	dc0e      	bgt.n	8000892 <__adddf3+0x1ba>
 8000874:	f104 0414 	add.w	r4, r4, #20
 8000878:	f1c4 0220 	rsb	r2, r4, #32
 800087c:	fa20 f004 	lsr.w	r0, r0, r4
 8000880:	fa01 f302 	lsl.w	r3, r1, r2
 8000884:	ea40 0003 	orr.w	r0, r0, r3
 8000888:	fa21 f304 	lsr.w	r3, r1, r4
 800088c:	ea45 0103 	orr.w	r1, r5, r3
 8000890:	bd30      	pop	{r4, r5, pc}
 8000892:	f1c4 040c 	rsb	r4, r4, #12
 8000896:	f1c4 0220 	rsb	r2, r4, #32
 800089a:	fa20 f002 	lsr.w	r0, r0, r2
 800089e:	fa01 f304 	lsl.w	r3, r1, r4
 80008a2:	ea40 0003 	orr.w	r0, r0, r3
 80008a6:	4629      	mov	r1, r5
 80008a8:	bd30      	pop	{r4, r5, pc}
 80008aa:	fa21 f004 	lsr.w	r0, r1, r4
 80008ae:	4629      	mov	r1, r5
 80008b0:	bd30      	pop	{r4, r5, pc}
 80008b2:	f094 0f00 	teq	r4, #0
 80008b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80008ba:	bf06      	itte	eq
 80008bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80008c0:	3401      	addeq	r4, #1
 80008c2:	3d01      	subne	r5, #1
 80008c4:	e74e      	b.n	8000764 <__adddf3+0x8c>
 80008c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008ca:	bf18      	it	ne
 80008cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008d0:	d029      	beq.n	8000926 <__adddf3+0x24e>
 80008d2:	ea94 0f05 	teq	r4, r5
 80008d6:	bf08      	it	eq
 80008d8:	ea90 0f02 	teqeq	r0, r2
 80008dc:	d005      	beq.n	80008ea <__adddf3+0x212>
 80008de:	ea54 0c00 	orrs.w	ip, r4, r0
 80008e2:	bf04      	itt	eq
 80008e4:	4619      	moveq	r1, r3
 80008e6:	4610      	moveq	r0, r2
 80008e8:	bd30      	pop	{r4, r5, pc}
 80008ea:	ea91 0f03 	teq	r1, r3
 80008ee:	bf1e      	ittt	ne
 80008f0:	2100      	movne	r1, #0
 80008f2:	2000      	movne	r0, #0
 80008f4:	bd30      	popne	{r4, r5, pc}
 80008f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008fa:	d105      	bne.n	8000908 <__adddf3+0x230>
 80008fc:	0040      	lsls	r0, r0, #1
 80008fe:	4149      	adcs	r1, r1
 8000900:	bf28      	it	cs
 8000902:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000906:	bd30      	pop	{r4, r5, pc}
 8000908:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800090c:	bf3c      	itt	cc
 800090e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000912:	bd30      	popcc	{r4, r5, pc}
 8000914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000918:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800091c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	bd30      	pop	{r4, r5, pc}
 8000926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800092a:	bf1a      	itte	ne
 800092c:	4619      	movne	r1, r3
 800092e:	4610      	movne	r0, r2
 8000930:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000934:	bf1c      	itt	ne
 8000936:	460b      	movne	r3, r1
 8000938:	4602      	movne	r2, r0
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	bf06      	itte	eq
 8000940:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000944:	ea91 0f03 	teqeq	r1, r3
 8000948:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800094c:	bd30      	pop	{r4, r5, pc}
 800094e:	bf00      	nop

08000950 <__aeabi_ui2d>:
 8000950:	f090 0f00 	teq	r0, #0
 8000954:	bf04      	itt	eq
 8000956:	2100      	moveq	r1, #0
 8000958:	4770      	bxeq	lr
 800095a:	b530      	push	{r4, r5, lr}
 800095c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000960:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000964:	f04f 0500 	mov.w	r5, #0
 8000968:	f04f 0100 	mov.w	r1, #0
 800096c:	e750      	b.n	8000810 <__adddf3+0x138>
 800096e:	bf00      	nop

08000970 <__aeabi_i2d>:
 8000970:	f090 0f00 	teq	r0, #0
 8000974:	bf04      	itt	eq
 8000976:	2100      	moveq	r1, #0
 8000978:	4770      	bxeq	lr
 800097a:	b530      	push	{r4, r5, lr}
 800097c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000980:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000984:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000988:	bf48      	it	mi
 800098a:	4240      	negmi	r0, r0
 800098c:	f04f 0100 	mov.w	r1, #0
 8000990:	e73e      	b.n	8000810 <__adddf3+0x138>
 8000992:	bf00      	nop

08000994 <__aeabi_f2d>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800099a:	ea4f 0131 	mov.w	r1, r1, rrx
 800099e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80009a2:	bf1f      	itttt	ne
 80009a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80009a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80009b0:	4770      	bxne	lr
 80009b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80009b6:	bf08      	it	eq
 80009b8:	4770      	bxeq	lr
 80009ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80009be:	bf04      	itt	eq
 80009c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80009c4:	4770      	bxeq	lr
 80009c6:	b530      	push	{r4, r5, lr}
 80009c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80009cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009d4:	e71c      	b.n	8000810 <__adddf3+0x138>
 80009d6:	bf00      	nop

080009d8 <__aeabi_ul2d>:
 80009d8:	ea50 0201 	orrs.w	r2, r0, r1
 80009dc:	bf08      	it	eq
 80009de:	4770      	bxeq	lr
 80009e0:	b530      	push	{r4, r5, lr}
 80009e2:	f04f 0500 	mov.w	r5, #0
 80009e6:	e00a      	b.n	80009fe <__aeabi_l2d+0x16>

080009e8 <__aeabi_l2d>:
 80009e8:	ea50 0201 	orrs.w	r2, r0, r1
 80009ec:	bf08      	it	eq
 80009ee:	4770      	bxeq	lr
 80009f0:	b530      	push	{r4, r5, lr}
 80009f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009f6:	d502      	bpl.n	80009fe <__aeabi_l2d+0x16>
 80009f8:	4240      	negs	r0, r0
 80009fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a02:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a0a:	f43f aed8 	beq.w	80007be <__adddf3+0xe6>
 8000a0e:	f04f 0203 	mov.w	r2, #3
 8000a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a16:	bf18      	it	ne
 8000a18:	3203      	addne	r2, #3
 8000a1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a1e:	bf18      	it	ne
 8000a20:	3203      	addne	r2, #3
 8000a22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a32:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a36:	ea40 000e 	orr.w	r0, r0, lr
 8000a3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a3e:	4414      	add	r4, r2
 8000a40:	e6bd      	b.n	80007be <__adddf3+0xe6>
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2iz>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d215      	bcs.n	8000a7a <__aeabi_d2iz+0x36>
 8000a4e:	d511      	bpl.n	8000a74 <__aeabi_d2iz+0x30>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d912      	bls.n	8000a80 <__aeabi_d2iz+0x3c>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	bf18      	it	ne
 8000a70:	4240      	negne	r0, r0
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d105      	bne.n	8000a8c <__aeabi_d2iz+0x48>
 8000a80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	bf08      	it	eq
 8000a86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_uldivmod>:
 8000b34:	b953      	cbnz	r3, 8000b4c <__aeabi_uldivmod+0x18>
 8000b36:	b94a      	cbnz	r2, 8000b4c <__aeabi_uldivmod+0x18>
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	2800      	cmpeq	r0, #0
 8000b3e:	bf1c      	itt	ne
 8000b40:	f04f 31ff 	movne.w	r1, #4294967295
 8000b44:	f04f 30ff 	movne.w	r0, #4294967295
 8000b48:	f000 b80c 	b.w	8000b64 <__aeabi_idiv0>
 8000b4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b54:	f003 fc50 	bl	80043f8 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_idiv0>:
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr
	...

08000bb0 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000bb0:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <notify2+0xc>)
 8000bb2:	68d3      	ldr	r3, [r2, #12]
 8000bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000bb8:	60d3      	str	r3, [r2, #12]
}
 8000bba:	4770      	bx	lr
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <chSysHalt>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 8000bc2:	4903      	ldr	r1, [pc, #12]	; (8000bd0 <chSysHalt+0x10>)
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <chSysHalt+0x14>)
  currcore->dbg.panic_msg = reason;
 8000bc6:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  ch_system.state = ch_sys_halted;
 8000bca:	2203      	movs	r2, #3
 8000bcc:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 8000bce:	e7fe      	b.n	8000bce <chSysHalt+0xe>
 8000bd0:	20000910 	.word	0x20000910
 8000bd4:	20000bf0 	.word	0x20000bf0
	...

08000be0 <__idle_thread>:
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8000be0:	e7fe      	b.n	8000be0 <__idle_thread>
 8000be2:	bf00      	nop
	...

08000bf0 <chTMStartMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000bf0:	4b01      	ldr	r3, [pc, #4]	; (8000bf8 <chTMStartMeasurementX+0x8>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8000bf4:	6083      	str	r3, [r0, #8]
}
 8000bf6:	4770      	bx	lr
 8000bf8:	e0001000 	.word	0xe0001000
 8000bfc:	00000000 	.word	0x00000000

08000c00 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <chTMStopMeasurementX+0x3c>)
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
 8000c04:	6881      	ldr	r1, [r0, #8]
 8000c06:	685b      	ldr	r3, [r3, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000c08:	b410      	push	{r4}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 8000c0a:	6894      	ldr	r4, [r2, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c0c:	6902      	ldr	r2, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000c0e:	1b1b      	subs	r3, r3, r4
 8000c10:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8000c12:	18d2      	adds	r2, r2, r3
 8000c14:	6941      	ldr	r1, [r0, #20]
 8000c16:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8000c18:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8000c1a:	68c4      	ldr	r4, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c1c:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8000c20:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000c22:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000c24:	bf88      	it	hi
 8000c26:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000c28:	3401      	adds	r4, #1
  if (tmp->last < tmp->best) {
 8000c2a:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 8000c2c:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000c30:	6141      	str	r1, [r0, #20]
}
 8000c32:	f85d 4b04 	ldr.w	r4, [sp], #4
    tmp->best = tmp->last;
 8000c36:	bf38      	it	cc
 8000c38:	6003      	strcc	r3, [r0, #0]
}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000bf0 	.word	0x20000bf0
 8000c40:	e0001000 	.word	0xe0001000
	...

08000c50 <adc_lld_start_conversion.constprop.0>:
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
 8000c50:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <adc_lld_start_conversion.constprop.0+0x98>)
 8000c52:	6913      	ldr	r3, [r2, #16]

  /* DMA setup.*/
  mode = adcp->dmamode;
  if (grpp->circular) {
 8000c54:	7819      	ldrb	r1, [r3, #0]
void adc_lld_start_conversion(ADCDriver *adcp) {
 8000c56:	b430      	push	{r4, r5}
  mode = adcp->dmamode;
 8000c58:	6b15      	ldr	r5, [r2, #48]	; 0x30
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
 8000c5a:	68d4      	ldr	r4, [r2, #12]
  if (grpp->circular) {
 8000c5c:	b129      	cbz	r1, 8000c6a <adc_lld_start_conversion.constprop.0+0x1a>
    if (adcp->depth > 1) {
 8000c5e:	2c01      	cmp	r4, #1
    mode |= STM32_DMA_CR_CIRC;
 8000c60:	bf94      	ite	ls
 8000c62:	f445 7580 	orrls.w	r5, r5, #256	; 0x100
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8000c66:	f445 7584 	orrhi.w	r5, r5, #264	; 0x108
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000c6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000c6c:	8858      	ldrh	r0, [r3, #2]
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000c6e:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000c70:	fb00 f404 	mul.w	r4, r0, r4
  adcp->adc->SR    = 0;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->HTR   = grpp->htr;
  adcp->adc->LTR   = grpp->ltr;
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8000c74:	f100 3cff 	add.w	ip, r0, #4294967295
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8000c78:	6890      	ldr	r0, [r2, #8]
 8000c7a:	60c8      	str	r0, [r1, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8000c7c:	604c      	str	r4, [r1, #4]
  dmaStreamSetMode(adcp->dmastp, mode);
 8000c7e:	600d      	str	r5, [r1, #0]
  dmaStreamEnable(adcp->dmastp);
 8000c80:	6808      	ldr	r0, [r1, #0]
  adcp->adc->SR    = 0;
 8000c82:	6a92      	ldr	r2, [r2, #40]	; 0x28
  adcp->adc->SMPR1 = grpp->smpr1;
 8000c84:	695c      	ldr	r4, [r3, #20]
  dmaStreamEnable(adcp->dmastp);
 8000c86:	f040 0001 	orr.w	r0, r0, #1
  adcp->adc->SR    = 0;
 8000c8a:	2500      	movs	r5, #0
  dmaStreamEnable(adcp->dmastp);
 8000c8c:	6008      	str	r0, [r1, #0]
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000c8e:	68d8      	ldr	r0, [r3, #12]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8000c90:	6a19      	ldr	r1, [r3, #32]
  adcp->adc->SR    = 0;
 8000c92:	6015      	str	r5, [r2, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
 8000c94:	60d4      	str	r4, [r2, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 8000c96:	699c      	ldr	r4, [r3, #24]
 8000c98:	6114      	str	r4, [r2, #16]
  adcp->adc->HTR   = grpp->htr;
 8000c9a:	8b9c      	ldrh	r4, [r3, #28]
 8000c9c:	6254      	str	r4, [r2, #36]	; 0x24
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8000c9e:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  adcp->adc->LTR   = grpp->ltr;
 8000ca2:	8bdc      	ldrh	r4, [r3, #30]
 8000ca4:	6294      	str	r4, [r2, #40]	; 0x28
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
 8000ca6:	62d1      	str	r1, [r2, #44]	; 0x2c

  /* Enforcing the mandatory bits in CR2.*/
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8000ca8:	6919      	ldr	r1, [r3, #16]
  adcp->adc->SQR3  = grpp->sqr3;
 8000caa:	e9d3 4309 	ldrd	r4, r3, [r3, #36]	; 0x24
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000cae:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
  adcp->adc->SQR2  = grpp->sqr2;
 8000cb2:	6314      	str	r4, [r2, #48]	; 0x30
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000cb4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  adcp->adc->SQR3  = grpp->sqr3;
 8000cb8:	6353      	str	r3, [r2, #52]	; 0x34

  /* The start method is different dependign if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000cba:	004b      	lsls	r3, r1, #1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
 8000cbc:	6050      	str	r0, [r2, #4]
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
 8000cbe:	d50b      	bpl.n	8000cd8 <adc_lld_start_conversion.constprop.0+0x88>
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8000cc0:	f021 4380 	bic.w	r3, r1, #1073741824	; 0x40000000
 8000cc4:	f240 3003 	movw	r0, #771	; 0x303
 8000cc8:	f023 0302 	bic.w	r3, r3, #2
 8000ccc:	4303      	orrs	r3, r0

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8000cce:	4301      	orrs	r1, r0
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
 8000cd0:	6093      	str	r3, [r2, #8]
  }
  else
    adcp->adc->CR2 = cr2;
}
 8000cd2:	bc30      	pop	{r4, r5}
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
 8000cd4:	6091      	str	r1, [r2, #8]
}
 8000cd6:	4770      	bx	lr
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_DDS | ADC_CR2_ADON;
 8000cd8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8000cdc:	f041 0101 	orr.w	r1, r1, #1
}
 8000ce0:	bc30      	pop	{r4, r5}
    adcp->adc->CR2 = cr2;
 8000ce2:	6091      	str	r1, [r2, #8]
}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000800 	.word	0x20000800
 8000cec:	00000000 	.word	0x00000000

08000cf0 <adc_lld_stop_conversion.isra.0>:
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8000cf0:	680a      	ldr	r2, [r1, #0]
 8000cf2:	6813      	ldr	r3, [r2, #0]
 8000cf4:	f023 031f 	bic.w	r3, r3, #31
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	6813      	ldr	r3, [r2, #0]
 8000cfc:	f013 0301 	ands.w	r3, r3, #1
 8000d00:	d1fb      	bne.n	8000cfa <adc_lld_stop_conversion.isra.0+0xa>
 8000d02:	f891 c009 	ldrb.w	ip, [r1, #9]
 8000d06:	6849      	ldr	r1, [r1, #4]
 8000d08:	223d      	movs	r2, #61	; 0x3d
 8000d0a:	fa02 f20c 	lsl.w	r2, r2, ip
 8000d0e:	600a      	str	r2, [r1, #0]
  adcp->adc->CR1 = 0;
 8000d10:	6043      	str	r3, [r0, #4]
  /* Because ticket #822, preserving injected conversions.*/
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8000d12:	6883      	ldr	r3, [r0, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000d14:	2201      	movs	r2, #1
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
 8000d16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d1a:	6083      	str	r3, [r0, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 8000d1c:	6082      	str	r2, [r0, #8]
}
 8000d1e:	4770      	bx	lr

08000d20 <_ctl>:
}

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
  SerialDriver *sdp = (SerialDriver *)ip;

  osalDbgCheck(sdp != NULL);
 8000d20:	b120      	cbz	r0, 8000d2c <_ctl+0xc>

  switch (operation) {
 8000d22:	2901      	cmp	r1, #1
 8000d24:	d106      	bne.n	8000d34 <_ctl+0x14>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 8000d26:	b90a      	cbnz	r2, 8000d2c <_ctl+0xc>
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
#endif
  }
  return HAL_RET_SUCCESS;
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4770      	bx	lr
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8000d2c:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <_ctl+0x1c>)
 8000d30:	f7ff ff46 	bl	8000bc0 <chSysHalt>
    return HAL_RET_UNKNOWN_CTL;
 8000d34:	f06f 0013 	mvn.w	r0, #19
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	0800481c 	.word	0x0800481c

08000d40 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8000d40:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000d42:	2330      	movs	r3, #48	; 0x30
 8000d44:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8000d48:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <__sch_wakeup+0x94>)
 8000d4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dd3c      	ble.n	8000dcc <__sch_wakeup+0x8c>
 8000d52:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d138      	bne.n	8000dcc <__sch_wakeup+0x8c>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  }
  oip->dbg.lock_cnt = (cnt_t)1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  thread_t *tp = threadref(p);

  (void)vtp;

  chSysLockFromISR();
  switch (tp->state) {
 8000d60:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8000d64:	2b0c      	cmp	r3, #12
 8000d66:	d810      	bhi.n	8000d8a <__sch_wakeup+0x4a>
 8000d68:	e8df f003 	tbb	[pc, r3]
 8000d6c:	260f0f2a 	.word	0x260f0f2a
 8000d70:	0b0f070b 	.word	0x0b0f070b
 8000d74:	0f0f0f0f 	.word	0x0f0f0f0f
 8000d78:	0b          	.byte	0x0b
 8000d79:	00          	.byte	0x00
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8000d7a:	6a88      	ldr	r0, [r1, #40]	; 0x28
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000d7c:	6883      	ldr	r3, [r0, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	6083      	str	r3, [r0, #8]
 *
 * @notapi
 */
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {

  p->prev->next = p->next;
 8000d82:	e9d1 3000 	ldrd	r3, r0, [r1]
 8000d86:	6003      	str	r3, [r0, #0]
  p->next->prev = p->prev;
 8000d88:	6058      	str	r0, [r3, #4]
    /* Any other state, nothing to do.*/
    break;
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8000d8a:	f04f 34ff 	mov.w	r4, #4294967295
  tp->state = CH_STATE_READY;
 8000d8e:	2000      	movs	r0, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000d90:	628c      	str	r4, [r1, #40]	; 0x28
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000d92:	698b      	ldr	r3, [r1, #24]
                                                           ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
  } while (unlikely(pqp->prio >= p->prio));
 8000d94:	688c      	ldr	r4, [r1, #8]
  tp->state = CH_STATE_READY;
 8000d96:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    pqp = pqp->next;
 8000d9a:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000d9c:	6898      	ldr	r0, [r3, #8]
 8000d9e:	42a0      	cmp	r0, r4
 8000da0:	d2fb      	bcs.n	8000d9a <__sch_wakeup+0x5a>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 8000da2:	685c      	ldr	r4, [r3, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  }
  oip->dbg.lock_cnt = (cnt_t)0;
 8000da4:	2000      	movs	r0, #0
 8000da6:	e9c1 3400 	strd	r3, r4, [r1]
  p->prev->next = p;
 8000daa:	6021      	str	r1, [r4, #0]
  pqp->prev     = p;
 8000dac:	6059      	str	r1, [r3, #4]
 8000dae:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000db2:	f380 8811 	msr	BASEPRI, r0
  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  chSysUnlockFromISR();

  return;
}
 8000db6:	bd10      	pop	{r4, pc}
    *tp->u.wttrp = NULL;
 8000db8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000dba:	2000      	movs	r0, #0
 8000dbc:	6018      	str	r0, [r3, #0]
    break;
 8000dbe:	e7e4      	b.n	8000d8a <__sch_wakeup+0x4a>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dc6:	f383 8811 	msr	BASEPRI, r3
}
 8000dca:	bd10      	pop	{r4, pc}
    chSysHalt("SV#6");
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <__sch_wakeup+0x98>)
 8000dce:	f7ff fef7 	bl	8000bc0 <chSysHalt>
 8000dd2:	bf00      	nop
 8000dd4:	20000910 	.word	0x20000910
 8000dd8:	080046c0 	.word	0x080046c0
 8000ddc:	00000000 	.word	0x00000000

08000de0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	2330      	movs	r3, #48	; 0x30
 8000de4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <chCoreAllocFromTop+0x64>)
 8000dea:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8000dee:	ea54 0c05 	orrs.w	ip, r4, r5
 8000df2:	d121      	bne.n	8000e38 <chCoreAllocFromTop+0x58>
  oip->dbg.lock_cnt = (cnt_t)1;
 8000df4:	2401      	movs	r4, #1
 8000df6:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000dfa:	b301      	cbz	r1, 8000e3e <chCoreAllocFromTop+0x5e>
 8000dfc:	f101 3cff 	add.w	ip, r1, #4294967295
 8000e00:	ea1c 0c01 	ands.w	ip, ip, r1
 8000e04:	d11b      	bne.n	8000e3e <chCoreAllocFromTop+0x5e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000e06:	4c10      	ldr	r4, [pc, #64]	; (8000e48 <chCoreAllocFromTop+0x68>)
 8000e08:	6865      	ldr	r5, [r4, #4]
 8000e0a:	4249      	negs	r1, r1
 8000e0c:	1a28      	subs	r0, r5, r0
 8000e0e:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000e10:	6821      	ldr	r1, [r4, #0]
  prev = p - offset;
 8000e12:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000e14:	428a      	cmp	r2, r1
 8000e16:	d308      	bcc.n	8000e2a <chCoreAllocFromTop+0x4a>
 8000e18:	4295      	cmp	r5, r2
 8000e1a:	d306      	bcc.n	8000e2a <chCoreAllocFromTop+0x4a>
  ch_memcore.topmem = prev;
 8000e1c:	6062      	str	r2, [r4, #4]
  oip->dbg.lock_cnt = (cnt_t)0;
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000e24:	f382 8811 	msr	BASEPRI, r2
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
 8000e2a:	2200      	movs	r2, #0
    return NULL;
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000e32:	f382 8811 	msr	BASEPRI, r2
}
 8000e36:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <chCoreAllocFromTop+0x6c>)
 8000e3a:	f7ff fec1 	bl	8000bc0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000e3e:	4804      	ldr	r0, [pc, #16]	; (8000e50 <chCoreAllocFromTop+0x70>)
 8000e40:	f7ff febe 	bl	8000bc0 <chSysHalt>
 8000e44:	20000910 	.word	0x20000910
 8000e48:	20000be8 	.word	0x20000be8
 8000e4c:	080046c8 	.word	0x080046c8
 8000e50:	080047dc 	.word	0x080047dc
	...

08000e60 <chCoreAllocAlignedI>:
 * @api
 */
void chDbgCheckClassI(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <chCoreAllocAlignedI+0x44>)
 8000e62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e66:	2a00      	cmp	r2, #0
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	db15      	blt.n	8000e98 <chCoreAllocAlignedI+0x38>
 8000e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dd11      	ble.n	8000e98 <chCoreAllocAlignedI+0x38>
 8000e74:	b199      	cbz	r1, 8000e9e <chCoreAllocAlignedI+0x3e>
 8000e76:	1e4b      	subs	r3, r1, #1
 8000e78:	400b      	ands	r3, r1
 8000e7a:	d110      	bne.n	8000e9e <chCoreAllocAlignedI+0x3e>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <chCoreAllocAlignedI+0x48>)
 8000e7e:	6854      	ldr	r4, [r2, #4]
 8000e80:	4249      	negs	r1, r1
 8000e82:	1a20      	subs	r0, r4, r0
 8000e84:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000e86:	6811      	ldr	r1, [r2, #0]
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	d303      	bcc.n	8000e94 <chCoreAllocAlignedI+0x34>
 8000e8c:	4284      	cmp	r4, r0
 8000e8e:	d301      	bcc.n	8000e94 <chCoreAllocAlignedI+0x34>
  ch_memcore.topmem = prev;
 8000e90:	6050      	str	r0, [r2, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000e92:	bd10      	pop	{r4, pc}
    return NULL;
 8000e94:	4618      	mov	r0, r3
 8000e96:	bd10      	pop	{r4, pc}
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <chCoreAllocAlignedI+0x4c>)
 8000e9a:	f7ff fe91 	bl	8000bc0 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <chCoreAllocAlignedI+0x50>)
 8000ea0:	f7ff fe8e 	bl	8000bc0 <chSysHalt>
 8000ea4:	20000910 	.word	0x20000910
 8000ea8:	20000be8 	.word	0x20000be8
 8000eac:	080046d0 	.word	0x080046d0
 8000eb0:	080047dc 	.word	0x080047dc
	...

08000ec0 <chEvtBroadcastFlagsI.constprop.0>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <chEvtBroadcastFlagsI.constprop.0+0x9c>)
 8000ec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	db40      	blt.n	8000f4e <chEvtBroadcastFlagsI.constprop.0+0x8e>
 8000ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	dd3c      	ble.n	8000f4e <chEvtBroadcastFlagsI.constprop.0+0x8e>
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000ed4:	4c22      	ldr	r4, [pc, #136]	; (8000f60 <chEvtBroadcastFlagsI.constprop.0+0xa0>)
 8000ed6:	f854 3f04 	ldr.w	r3, [r4, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	d019      	beq.n	8000f12 <chEvtBroadcastFlagsI.constprop.0+0x52>
    tp->u.rdymsg = MSG_OK;
 8000ede:	2500      	movs	r5, #0
  /*lint -restore*/
    elp->flags |= flags;
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	4302      	orrs	r2, r0
 8000ee4:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000ee6:	b110      	cbz	r0, 8000eee <chEvtBroadcastFlagsI.constprop.0+0x2e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000ee8:	691a      	ldr	r2, [r3, #16]
    if ((flags == (eventflags_t)0) ||
 8000eea:	4210      	tst	r0, r2
 8000eec:	d00e      	beq.n	8000f0c <chEvtBroadcastFlagsI.constprop.0+0x4c>
      chEvtSignalI(elp->listener, elp->events);
 8000eee:	685a      	ldr	r2, [r3, #4]
  chDbgCheck(tp != NULL);
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d02f      	beq.n	8000f54 <chEvtBroadcastFlagsI.constprop.0+0x94>
  tp->epending |= events;
 8000ef4:	6899      	ldr	r1, [r3, #8]
 8000ef6:	6b96      	ldr	r6, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ef8:	f892 c024 	ldrb.w	ip, [r2, #36]	; 0x24
  tp->epending |= events;
 8000efc:	4331      	orrs	r1, r6
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000efe:	f1bc 0f0a 	cmp.w	ip, #10
  tp->epending |= events;
 8000f02:	6391      	str	r1, [r2, #56]	; 0x38
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f04:	d01c      	beq.n	8000f40 <chEvtBroadcastFlagsI.constprop.0+0x80>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000f06:	f1bc 0f0b 	cmp.w	ip, #11
 8000f0a:	d003      	beq.n	8000f14 <chEvtBroadcastFlagsI.constprop.0+0x54>
    }
    elp = elp->next;
 8000f0c:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	d1e6      	bne.n	8000ee0 <chEvtBroadcastFlagsI.constprop.0+0x20>
  }
}
 8000f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000f14:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8000f16:	ea36 0101 	bics.w	r1, r6, r1
 8000f1a:	d1f7      	bne.n	8000f0c <chEvtBroadcastFlagsI.constprop.0+0x4c>
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000f1c:	6991      	ldr	r1, [r2, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000f1e:	6897      	ldr	r7, [r2, #8]
    tp->u.rdymsg = MSG_OK;
 8000f20:	6295      	str	r5, [r2, #40]	; 0x28
  tp->state = CH_STATE_READY;
 8000f22:	f882 5024 	strb.w	r5, [r2, #36]	; 0x24
    pqp = pqp->next;
 8000f26:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8000f28:	688e      	ldr	r6, [r1, #8]
 8000f2a:	42be      	cmp	r6, r7
 8000f2c:	d2fb      	bcs.n	8000f26 <chEvtBroadcastFlagsI.constprop.0+0x66>
    elp = elp->next;
 8000f2e:	681b      	ldr	r3, [r3, #0]
  p->prev       = pqp->prev;
 8000f30:	684e      	ldr	r6, [r1, #4]
  p->next       = pqp;
 8000f32:	6011      	str	r1, [r2, #0]
  while (elp != (event_listener_t *)esp) {
 8000f34:	42a3      	cmp	r3, r4
  p->prev       = pqp->prev;
 8000f36:	6056      	str	r6, [r2, #4]
  p->prev->next = p;
 8000f38:	6032      	str	r2, [r6, #0]
  pqp->prev     = p;
 8000f3a:	604a      	str	r2, [r1, #4]
 8000f3c:	d1d0      	bne.n	8000ee0 <chEvtBroadcastFlagsI.constprop.0+0x20>
 8000f3e:	e7e8      	b.n	8000f12 <chEvtBroadcastFlagsI.constprop.0+0x52>
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000f40:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8000f42:	4231      	tst	r1, r6
 8000f44:	d1ea      	bne.n	8000f1c <chEvtBroadcastFlagsI.constprop.0+0x5c>
    elp = elp->next;
 8000f46:	681b      	ldr	r3, [r3, #0]
  while (elp != (event_listener_t *)esp) {
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d1c9      	bne.n	8000ee0 <chEvtBroadcastFlagsI.constprop.0+0x20>
 8000f4c:	e7e1      	b.n	8000f12 <chEvtBroadcastFlagsI.constprop.0+0x52>
    chSysHalt("SV#10");
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <chEvtBroadcastFlagsI.constprop.0+0xa4>)
 8000f50:	f7ff fe36 	bl	8000bc0 <chSysHalt>
  chDbgCheck(tp != NULL);
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <chEvtBroadcastFlagsI.constprop.0+0xa8>)
 8000f56:	f7ff fe33 	bl	8000bc0 <chSysHalt>
 8000f5a:	bf00      	nop
 8000f5c:	20000910 	.word	0x20000910
 8000f60:	2000087c 	.word	0x2000087c
 8000f64:	080046d0 	.word	0x080046d0
 8000f68:	0800480c 	.word	0x0800480c
 8000f6c:	00000000 	.word	0x00000000

08000f70 <vt_insert_first.constprop.0>:
                            sysinterval_t delay) {
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <vt_insert_first.constprop.0+0x5c>)
static void vt_insert_first(virtual_timers_list_t *vtlp,
 8000f72:	b430      	push	{r4, r5}
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {

  dlp->delta      = delta;
  dlp->prev       = dlhp;
 8000f74:	f103 0410 	add.w	r4, r3, #16
  vtlp->lasttime = now;
 8000f78:	61d9      	str	r1, [r3, #28]
 8000f7a:	6044      	str	r4, [r0, #4]
  dlp->next       = dlp->prev->next;
 8000f7c:	691c      	ldr	r4, [r3, #16]
  dlp->delta      = delta;
 8000f7e:	6082      	str	r2, [r0, #8]
 8000f80:	2a02      	cmp	r2, #2
  dlp->next       = dlp->prev->next;
 8000f82:	6004      	str	r4, [r0, #0]
 8000f84:	bf38      	it	cc
 8000f86:	2202      	movcc	r2, #2
  dlp->next->prev = dlp;
 8000f88:	6060      	str	r0, [r4, #4]
  dlhp->next      = dlp;
 8000f8a:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000f8c:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <vt_insert_first.constprop.0+0x60>)

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8000f8e:	188c      	adds	r4, r1, r2
 8000f90:	6344      	str	r4, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000f92:	2400      	movs	r4, #0
 8000f94:	6104      	str	r4, [r0, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000f96:	2402      	movs	r4, #2
 8000f98:	60c4      	str	r4, [r0, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8000f9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000f9c:	eba5 0c01 	sub.w	ip, r5, r1
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8000fa0:	4562      	cmp	r2, ip
 8000fa2:	d903      	bls.n	8000fac <vt_insert_first.constprop.0+0x3c>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8000fa4:	bc30      	pop	{r4, r5}
 8000fa6:	4770      	bx	lr
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4615      	mov	r5, r2
    currdelta += (sysinterval_t)1;
 8000fac:	3401      	adds	r4, #1
  return systime + (systime_t)interval;
 8000fae:	4421      	add	r1, r4
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000fb0:	6341      	str	r1, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8000fb2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000fb4:	1b51      	subs	r1, r2, r5
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8000fb6:	42a1      	cmp	r1, r4
 8000fb8:	d2f6      	bcs.n	8000fa8 <vt_insert_first.constprop.0+0x38>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 8000fba:	2c02      	cmp	r4, #2
 8000fbc:	d9f2      	bls.n	8000fa4 <vt_insert_first.constprop.0+0x34>
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8000fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc0:	f042 0201 	orr.w	r2, r2, #1
}
 8000fc4:	bc30      	pop	{r4, r5}
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000910 	.word	0x20000910
 8000fd0:	40000c00 	.word	0x40000c00
	...

08000fe0 <chSchReadyI.isra.0>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000fe0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <chSchReadyI.isra.0+0x40>)
 8000fe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	db13      	blt.n	8001014 <chSchReadyI.isra.0+0x34>
 8000fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd0f      	ble.n	8001014 <chSchReadyI.isra.0+0x34>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8000ff4:	b188      	cbz	r0, 800101a <chSchReadyI.isra.0+0x3a>
  tp->state = CH_STATE_READY;
 8000ff6:	2200      	movs	r2, #0
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8000ff8:	6983      	ldr	r3, [r0, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8000ffa:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 8000ffc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    pqp = pqp->next;
 8001000:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	428a      	cmp	r2, r1
 8001006:	d2fb      	bcs.n	8001000 <chSchReadyI.isra.0+0x20>
  p->prev       = pqp->prev;
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 800100e:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001010:	6058      	str	r0, [r3, #4]
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
}
 8001012:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <chSchReadyI.isra.0+0x44>)
 8001016:	f7ff fdd3 	bl	8000bc0 <chSysHalt>
  chDbgCheck(tp != NULL);
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <chSchReadyI.isra.0+0x48>)
 800101c:	f7ff fdd0 	bl	8000bc0 <chSysHalt>
 8001020:	20000910 	.word	0x20000910
 8001024:	080046d0 	.word	0x080046d0
 8001028:	080047c4 	.word	0x080047c4
 800102c:	00000000 	.word	0x00000000

08001030 <adc_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001030:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001038:	d10f      	bne.n	800105a <adc_lld_serve_rx_interrupt+0x2a>
    if (adcp->grpp != NULL) {
 800103a:	6905      	ldr	r5, [r0, #16]
 800103c:	b165      	cbz	r5, 8001058 <adc_lld_serve_rx_interrupt+0x28>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 800103e:	068a      	lsls	r2, r1, #26
 8001040:	d540      	bpl.n	80010c4 <adc_lld_serve_rx_interrupt+0x94>
        _adc_isr_full_code(adcp);
 8001042:	782b      	ldrb	r3, [r5, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d04a      	beq.n	80010de <adc_lld_serve_rx_interrupt+0xae>
 8001048:	686b      	ldr	r3, [r5, #4]
 800104a:	b12b      	cbz	r3, 8001058 <adc_lld_serve_rx_interrupt+0x28>
 800104c:	2204      	movs	r2, #4
 800104e:	7002      	strb	r2, [r0, #0]
 8001050:	4798      	blx	r3
 8001052:	7823      	ldrb	r3, [r4, #0]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d06e      	beq.n	8001136 <adc_lld_serve_rx_interrupt+0x106>
}
 8001058:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800105a:	e9d0 010a 	ldrd	r0, r1, [r0, #40]	; 0x28
 800105e:	f7ff fe47 	bl	8000cf0 <adc_lld_stop_conversion.isra.0>
 8001062:	6923      	ldr	r3, [r4, #16]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d034      	beq.n	80010d4 <adc_lld_serve_rx_interrupt+0xa4>
 800106a:	2205      	movs	r2, #5
 800106c:	7022      	strb	r2, [r4, #0]
 800106e:	2101      	movs	r1, #1
 8001070:	4620      	mov	r0, r4
 8001072:	4798      	blx	r3
 8001074:	7823      	ldrb	r3, [r4, #0]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d02c      	beq.n	80010d4 <adc_lld_serve_rx_interrupt+0xa4>
 800107a:	2330      	movs	r3, #48	; 0x30
 800107c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001080:	4d31      	ldr	r5, [pc, #196]	; (8001148 <adc_lld_serve_rx_interrupt+0x118>)
 8001082:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8001086:	2b00      	cmp	r3, #0
 8001088:	dd52      	ble.n	8001130 <adc_lld_serve_rx_interrupt+0x100>
 800108a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14e      	bne.n	8001130 <adc_lld_serve_rx_interrupt+0x100>
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001092:	6960      	ldr	r0, [r4, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 8001094:	2201      	movs	r2, #1
 8001096:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 800109a:	b168      	cbz	r0, 80010b8 <adc_lld_serve_rx_interrupt+0x88>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
    *trp = NULL;
 80010a0:	6163      	str	r3, [r4, #20]
    tp->u.rdymsg = msg;
 80010a2:	6282      	str	r2, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 80010a4:	f7ff ff9c 	bl	8000fe0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80010a8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd3c      	ble.n	800112a <adc_lld_serve_rx_interrupt+0xfa>
 80010b0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	dd38      	ble.n	800112a <adc_lld_serve_rx_interrupt+0xfa>
  oip->dbg.lock_cnt = (cnt_t)0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 80010be:	f383 8811 	msr	BASEPRI, r3
}
 80010c2:	bd70      	pop	{r4, r5, r6, pc}
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80010c4:	06cb      	lsls	r3, r1, #27
 80010c6:	d5c7      	bpl.n	8001058 <adc_lld_serve_rx_interrupt+0x28>
        _adc_isr_half_code(adcp);
 80010c8:	686b      	ldr	r3, [r5, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0c4      	beq.n	8001058 <adc_lld_serve_rx_interrupt+0x28>
}
 80010ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
 80010d2:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80010d4:	2202      	movs	r2, #2
 80010d6:	2300      	movs	r3, #0
 80010d8:	7022      	strb	r2, [r4, #0]
 80010da:	6123      	str	r3, [r4, #16]
 80010dc:	e7cd      	b.n	800107a <adc_lld_serve_rx_interrupt+0x4a>
        _adc_isr_full_code(adcp);
 80010de:	e9d0 010a 	ldrd	r0, r1, [r0, #40]	; 0x28
 80010e2:	f7ff fe05 	bl	8000cf0 <adc_lld_stop_conversion.isra.0>
 80010e6:	686b      	ldr	r3, [r5, #4]
 80010e8:	b343      	cbz	r3, 800113c <adc_lld_serve_rx_interrupt+0x10c>
 80010ea:	2204      	movs	r2, #4
 80010ec:	7022      	strb	r2, [r4, #0]
 80010ee:	4620      	mov	r0, r4
 80010f0:	4798      	blx	r3
 80010f2:	7823      	ldrb	r3, [r4, #0]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d021      	beq.n	800113c <adc_lld_serve_rx_interrupt+0x10c>
 80010f8:	2330      	movs	r3, #48	; 0x30
 80010fa:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80010fe:	4d12      	ldr	r5, [pc, #72]	; (8001148 <adc_lld_serve_rx_interrupt+0x118>)
 8001100:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8001104:	2b00      	cmp	r3, #0
 8001106:	dd13      	ble.n	8001130 <adc_lld_serve_rx_interrupt+0x100>
 8001108:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800110c:	b983      	cbnz	r3, 8001130 <adc_lld_serve_rx_interrupt+0x100>
  if (*trp != NULL) {
 800110e:	6960      	ldr	r0, [r4, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 8001110:	2201      	movs	r2, #1
 8001112:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8001116:	2800      	cmp	r0, #0
 8001118:	d0ce      	beq.n	80010b8 <adc_lld_serve_rx_interrupt+0x88>
    *trp = NULL;
 800111a:	6163      	str	r3, [r4, #20]
    tp->u.rdymsg = msg;
 800111c:	6283      	str	r3, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 800111e:	f7ff ff5f 	bl	8000fe0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8001122:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8001126:	2b00      	cmp	r3, #0
 8001128:	dcc2      	bgt.n	80010b0 <adc_lld_serve_rx_interrupt+0x80>
    chSysHalt("SV#7");
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <adc_lld_serve_rx_interrupt+0x11c>)
 800112c:	f7ff fd48 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#6");
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <adc_lld_serve_rx_interrupt+0x120>)
 8001132:	f7ff fd45 	bl	8000bc0 <chSysHalt>
 8001136:	2303      	movs	r3, #3
 8001138:	7023      	strb	r3, [r4, #0]
}
 800113a:	bd70      	pop	{r4, r5, r6, pc}
        _adc_isr_full_code(adcp);
 800113c:	2202      	movs	r2, #2
 800113e:	2300      	movs	r3, #0
 8001140:	7022      	strb	r2, [r4, #0]
 8001142:	6123      	str	r3, [r4, #16]
 8001144:	e7d8      	b.n	80010f8 <adc_lld_serve_rx_interrupt+0xc8>
 8001146:	bf00      	nop
 8001148:	20000910 	.word	0x20000910
 800114c:	080046d8 	.word	0x080046d8
 8001150:	080046c0 	.word	0x080046c0
	...

08001160 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001160:	b508      	push	{r3, lr}
 * @api
 */
void chDbgCheckClassS(void) {
  os_instance_t *oip = currcore;

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <chSchGoSleepS+0x4c>)
 8001164:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001168:	b9ea      	cbnz	r2, 80011a6 <chSchGoSleepS+0x46>
 800116a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800116e:	2a00      	cmp	r2, #0
 8001170:	dd19      	ble.n	80011a6 <chSchGoSleepS+0x46>
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 8001172:	68d9      	ldr	r1, [r3, #12]
  ch_priority_queue_t *p = pqp->next;
 8001174:	681a      	ldr	r2, [r3, #0]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8001176:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
  pqp->next       = p->next;
 800117a:	6810      	ldr	r0, [r2, #0]
 800117c:	6018      	str	r0, [r3, #0]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 800117e:	f04f 0c01 	mov.w	ip, #1
  pqp->next->prev = pqp;
 8001182:	6043      	str	r3, [r0, #4]
 8001184:	f882 c024 	strb.w	ip, [r2, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8001188:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800118a:	f3ef 8309 	mrs	r3, PSP
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 800118e:	6a08      	ldr	r0, [r1, #32]
 8001190:	3b64      	subs	r3, #100	; 0x64
 8001192:	4298      	cmp	r0, r3
 8001194:	d804      	bhi.n	80011a0 <chSchGoSleepS+0x40>
}
 8001196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chSysSwitch(ntp, otp);
 800119a:	4610      	mov	r0, r2
 800119c:	f7ff b8b2 	b.w	8000304 <__port_switch>
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <chSchGoSleepS+0x50>)
 80011a2:	f7ff fd0d 	bl	8000bc0 <chSysHalt>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <chSchGoSleepS+0x54>)
 80011a8:	f7ff fd0a 	bl	8000bc0 <chSysHalt>
 80011ac:	20000910 	.word	0x20000910
 80011b0:	080046e8 	.word	0x080046e8
 80011b4:	080046e0 	.word	0x080046e0
	...

080011c0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80011c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80011c4:	4d60      	ldr	r5, [pc, #384]	; (8001348 <chSchGoSleepTimeoutS+0x188>)
 80011c6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80011ca:	b086      	sub	sp, #24
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d17b      	bne.n	80012c8 <chSchGoSleepTimeoutS+0x108>
 80011d0:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	dd77      	ble.n	80012c8 <chSchGoSleepTimeoutS+0x108>
  thread_t *tp = __instance_get_currthread(currcore);

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 80011d8:	1c4a      	adds	r2, r1, #1
  thread_t *tp = __instance_get_currthread(currcore);
 80011da:	68ef      	ldr	r7, [r5, #12]
  if (TIME_INFINITE != timeout) {
 80011dc:	d06b      	beq.n	80012b6 <chSchGoSleepTimeoutS+0xf6>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80011de:	2900      	cmp	r1, #0
 80011e0:	d06f      	beq.n	80012c2 <chSchGoSleepTimeoutS+0x102>
  return (bool)(dlhp == dlhp->next);
 80011e2:	46a8      	mov	r8, r5
 80011e4:	4606      	mov	r6, r0
 80011e6:	f858 0f10 	ldr.w	r0, [r8, #16]!
 80011ea:	f8df e170 	ldr.w	lr, [pc, #368]	; 800135c <chSchGoSleepTimeoutS+0x19c>

  /* Timer initialization.*/
  vtp->par     = par;
  vtp->func    = vtfunc;
  vtp->reload  = (sysinterval_t)0;
 80011ee:	9305      	str	r3, [sp, #20]
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80011f0:	4540      	cmp	r0, r8
  vtp->func    = vtfunc;
 80011f2:	4b56      	ldr	r3, [pc, #344]	; (800134c <chSchGoSleepTimeoutS+0x18c>)
 80011f4:	f8de c024 	ldr.w	ip, [lr, #36]	; 0x24
  vtp->par     = par;
 80011f8:	9704      	str	r7, [sp, #16]
  vtp->func    = vtfunc;
 80011fa:	9303      	str	r3, [sp, #12]
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80011fc:	f000 8096 	beq.w	800132c <chSchGoSleepTimeoutS+0x16c>
 8001200:	69eb      	ldr	r3, [r5, #28]
    if (delta < vtlp->dlist.next->delta) {
 8001202:	6884      	ldr	r4, [r0, #8]
 8001204:	ebac 0303 	sub.w	r3, ip, r3
    if (delta < nowdelta) {
 8001208:	18cb      	adds	r3, r1, r3
 800120a:	bf28      	it	cs
 800120c:	460b      	movcs	r3, r1
    if (delta < vtlp->dlist.next->delta) {
 800120e:	429c      	cmp	r4, r3
 8001210:	d924      	bls.n	800125c <chSchGoSleepTimeoutS+0x9c>
  if (delay < currdelta) {
 8001212:	2902      	cmp	r1, #2
 8001214:	460a      	mov	r2, r1
 8001216:	bf38      	it	cc
 8001218:	2202      	movcc	r2, #2
  return systime + (systime_t)interval;
 800121a:	eb0c 0102 	add.w	r1, ip, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800121e:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001222:	f8de 1024 	ldr.w	r1, [lr, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001226:	eba1 0c0c 	sub.w	ip, r1, ip
    if (likely(nowdelta < delay)) {
 800122a:	4562      	cmp	r2, ip
 800122c:	bf98      	it	ls
 800122e:	2202      	movls	r2, #2
 8001230:	d814      	bhi.n	800125c <chSchGoSleepTimeoutS+0x9c>
    currdelta += (sysinterval_t)1;
 8001232:	3201      	adds	r2, #1
  return systime + (systime_t)interval;
 8001234:	eb01 0c02 	add.w	ip, r1, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001238:	f8ce c034 	str.w	ip, [lr, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 800123c:	f8de c024 	ldr.w	ip, [lr, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001240:	ebac 0101 	sub.w	r1, ip, r1
    if (likely(nowdelta < delay)) {
 8001244:	4291      	cmp	r1, r2
 8001246:	d27b      	bcs.n	8001340 <chSchGoSleepTimeoutS+0x180>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 8001248:	2a02      	cmp	r2, #2
 800124a:	d907      	bls.n	800125c <chSchGoSleepTimeoutS+0x9c>
 800124c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	636a      	str	r2, [r5, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8001254:	e002      	b.n	800125c <chSchGoSleepTimeoutS+0x9c>
  while (likely(dlp->delta < delta)) {
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
    dlp = dlp->next;
 8001256:	6800      	ldr	r0, [r0, #0]
    delta -= dlp->delta;
 8001258:	1b1b      	subs	r3, r3, r4
  while (likely(dlp->delta < delta)) {
 800125a:	6884      	ldr	r4, [r0, #8]
 800125c:	429c      	cmp	r4, r3
 800125e:	d3fa      	bcc.n	8001256 <chSchGoSleepTimeoutS+0x96>
  dlp->delta      = delta;
 8001260:	9302      	str	r3, [sp, #8]

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8001262:	6882      	ldr	r2, [r0, #8]
  dlp->next       = dlhp;
 8001264:	9000      	str	r0, [sp, #0]
  dlp->delta -= delta;
 8001266:	1ad2      	subs	r2, r2, r3
  dlp->prev       = dlp->next->prev;
 8001268:	6843      	ldr	r3, [r0, #4]
 800126a:	9301      	str	r3, [sp, #4]
  dlp->prev->next = dlp;
 800126c:	466c      	mov	r4, sp
 800126e:	601c      	str	r4, [r3, #0]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
  dlhp->prev      = dlp;
 8001274:	e9c0 4201 	strd	r4, r2, [r0, #4]
  dlhp->delta = (sysinterval_t)-1;
 8001278:	61ab      	str	r3, [r5, #24]
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
    chSchGoSleepS(newstate);
 800127a:	4630      	mov	r0, r6
 800127c:	f7ff ff70 	bl	8001160 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8001280:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8001284:	2b00      	cmp	r3, #0
 8001286:	db22      	blt.n	80012ce <chSchGoSleepTimeoutS+0x10e>
 8001288:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd1e      	ble.n	80012ce <chSchGoSleepTimeoutS+0x10e>
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8001290:	9b00      	ldr	r3, [sp, #0]
    if (chVTIsArmedI(&vt)) {
 8001292:	b163      	cbz	r3, 80012ae <chSchGoSleepTimeoutS+0xee>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 8001294:	692a      	ldr	r2, [r5, #16]
 8001296:	42a2      	cmp	r2, r4
 8001298:	d01c      	beq.n	80012d4 <chSchGoSleepTimeoutS+0x114>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
 800129a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	600b      	str	r3, [r1, #0]
 80012a2:	4402      	add	r2, r0
 80012a4:	e9c3 1201 	strd	r1, r2, [r3, #4]
    vtp->dlist.next = NULL;

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	61ab      	str	r3, [r5, #24]
  else {
    chSchGoSleepS(newstate);
  }

  return tp->u.rdymsg;
}
 80012ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012b0:	b006      	add	sp, #24
 80012b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chSchGoSleepS(newstate);
 80012b6:	f7ff ff53 	bl	8001160 <chSchGoSleepS>
}
 80012ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012bc:	b006      	add	sp, #24
 80012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80012c2:	4823      	ldr	r0, [pc, #140]	; (8001350 <chSchGoSleepTimeoutS+0x190>)
 80012c4:	f7ff fc7c 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#11");
 80012c8:	4822      	ldr	r0, [pc, #136]	; (8001354 <chSchGoSleepTimeoutS+0x194>)
 80012ca:	f7ff fc79 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#10");
 80012ce:	4822      	ldr	r0, [pc, #136]	; (8001358 <chSchGoSleepTimeoutS+0x198>)
 80012d0:	f7ff fc76 	bl	8000bc0 <chSysHalt>
    return;
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  vtp->dlist.next = NULL;
 80012d4:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80012d6:	4543      	cmp	r3, r8
  dlhp->next       = dlp->next;
 80012d8:	612b      	str	r3, [r5, #16]
  vtp->dlist.next = NULL;
 80012da:	9200      	str	r2, [sp, #0]
  dlhp->next->prev = dlhp;
 80012dc:	f8c3 8004 	str.w	r8, [r3, #4]
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80012e0:	d02b      	beq.n	800133a <chSchGoSleepTimeoutS+0x17a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	9902      	ldr	r1, [sp, #8]
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <chSchGoSleepTimeoutS+0x19c>)
 80012e8:	440a      	add	r2, r1
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	6a41      	ldr	r1, [r0, #36]	; 0x24

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80012ee:	69eb      	ldr	r3, [r5, #28]
 80012f0:	1acc      	subs	r4, r1, r3

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 80012f2:	42a2      	cmp	r2, r4
 80012f4:	d9db      	bls.n	80012ae <chSchGoSleepTimeoutS+0xee>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 80012f6:	1a5b      	subs	r3, r3, r1
 80012f8:	4413      	add	r3, r2
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	bf38      	it	cc
 80012fe:	2302      	movcc	r3, #2
  return systime + (systime_t)interval;
 8001300:	18ca      	adds	r2, r1, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001302:	6342      	str	r2, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001304:	6a42      	ldr	r2, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001306:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 8001308:	4299      	cmp	r1, r3
 800130a:	bf28      	it	cs
 800130c:	2302      	movcs	r3, #2
 800130e:	d3ce      	bcc.n	80012ae <chSchGoSleepTimeoutS+0xee>
    currdelta += (sysinterval_t)1;
 8001310:	3301      	adds	r3, #1
  return systime + (systime_t)interval;
 8001312:	18d1      	adds	r1, r2, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001314:	6341      	str	r1, [r0, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001316:	6a41      	ldr	r1, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001318:	1a8a      	subs	r2, r1, r2
    if (likely(nowdelta < delay)) {
 800131a:	429a      	cmp	r2, r3
 800131c:	d212      	bcs.n	8001344 <chSchGoSleepTimeoutS+0x184>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 800131e:	2b02      	cmp	r3, #2
 8001320:	d9c5      	bls.n	80012ae <chSchGoSleepTimeoutS+0xee>
  currcore->rfcu.mask |= mask;
 8001322:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	636b      	str	r3, [r5, #52]	; 0x34
}
 800132a:	e7c0      	b.n	80012ae <chSchGoSleepTimeoutS+0xee>
      vt_insert_first(vtlp, vtp, now, delay);
 800132c:	466c      	mov	r4, sp
 800132e:	460a      	mov	r2, r1
 8001330:	4620      	mov	r0, r4
 8001332:	4661      	mov	r1, ip
 8001334:	f7ff fe1c 	bl	8000f70 <vt_insert_first.constprop.0>
      return;
 8001338:	e79f      	b.n	800127a <chSchGoSleepTimeoutS+0xba>
  STM32_ST_TIM->DIER = 0U;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <chSchGoSleepTimeoutS+0x19c>)
 800133c:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 800133e:	e7b6      	b.n	80012ae <chSchGoSleepTimeoutS+0xee>
  return (systime_t)STM32_ST_TIM->CNT;
 8001340:	4661      	mov	r1, ip
 8001342:	e776      	b.n	8001232 <chSchGoSleepTimeoutS+0x72>
 8001344:	460a      	mov	r2, r1
 8001346:	e7e3      	b.n	8001310 <chSchGoSleepTimeoutS+0x150>
 8001348:	20000910 	.word	0x20000910
 800134c:	08000d41 	.word	0x08000d41
 8001350:	08004800 	.word	0x08004800
 8001354:	080046e0 	.word	0x080046e0
 8001358:	080046d0 	.word	0x080046d0
 800135c:	40000c00 	.word	0x40000c00

08001360 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8001360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  qnotify_t nfy = iqp->q_notify;
 8001364:	f8d0 a01c 	ldr.w	sl, [r0, #28]
                     size_t n, sysinterval_t timeout) {
 8001368:	b085      	sub	sp, #20
  size_t max = n;

  osalDbgCheck(n > 0U);
 800136a:	2a00      	cmp	r2, #0
 800136c:	f000 8089 	beq.w	8001482 <iqReadTimeout+0x122>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001370:	4690      	mov	r8, r2
 8001372:	460f      	mov	r7, r1
 8001374:	4699      	mov	r9, r3
 8001376:	2230      	movs	r2, #48	; 0x30
 8001378:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800137c:	4e42      	ldr	r6, [pc, #264]	; (8001488 <iqReadTimeout+0x128>)
 800137e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8001382:	430b      	orrs	r3, r1
 8001384:	d177      	bne.n	8001476 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001386:	2301      	movs	r3, #1
 8001388:	46c3      	mov	fp, r8
 800138a:	f8cd 800c 	str.w	r8, [sp, #12]
 800138e:	4604      	mov	r4, r0
 8001390:	9201      	str	r2, [sp, #4]
 8001392:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001396:	46b8      	mov	r8, r7
  if (n > iqGetFullI(iqp)) {
 8001398:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800139a:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 800139c:	455a      	cmp	r2, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800139e:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80013a0:	bf34      	ite	cc
 80013a2:	68a5      	ldrcc	r5, [r4, #8]
 80013a4:	465d      	movcs	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80013a6:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 80013a8:	42aa      	cmp	r2, r5
 80013aa:	d85d      	bhi.n	8001468 <iqReadTimeout+0x108>
  else if (n > s1) {
 80013ac:	d246      	bcs.n	800143c <iqReadTimeout+0xdc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80013ae:	4640      	mov	r0, r8
    s2 = n - s1;
 80013b0:	1aaf      	subs	r7, r5, r2
 80013b2:	9202      	str	r2, [sp, #8]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80013b4:	f7fe ffc6 	bl	8000344 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80013b8:	9a02      	ldr	r2, [sp, #8]
 80013ba:	68e1      	ldr	r1, [r4, #12]
 80013bc:	eb08 0002 	add.w	r0, r8, r2
 80013c0:	463a      	mov	r2, r7
 80013c2:	f7fe ffbf 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80013c6:	68e2      	ldr	r2, [r4, #12]
 80013c8:	443a      	add	r2, r7
    iqp->q_rdptr += n;
 80013ca:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 80013cc:	68a2      	ldr	r2, [r4, #8]
 80013ce:	1b52      	subs	r2, r2, r5
 80013d0:	60a2      	str	r2, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d038      	beq.n	8001448 <iqReadTimeout+0xe8>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 80013d6:	f1ba 0f00 	cmp.w	sl, #0
 80013da:	d001      	beq.n	80013e0 <iqReadTimeout+0x80>
        nfy(iqp);
 80013dc:	4620      	mov	r0, r4
 80013de:	47d0      	blx	sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80013e0:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d149      	bne.n	800147c <iqReadTimeout+0x11c>
 80013e8:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 80013ec:	2900      	cmp	r1, #0
 80013ee:	dd45      	ble.n	800147c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80013f0:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 80013f4:	f382 8811 	msr	BASEPRI, r2
 80013f8:	9b01      	ldr	r3, [sp, #4]
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80013fa:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80013fe:	44a8      	add	r8, r5
 8001400:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001404:	e9d6 2122 	ldrd	r2, r1, [r6, #136]	; 0x88
 8001408:	430a      	orrs	r2, r1
 800140a:	d134      	bne.n	8001476 <iqReadTimeout+0x116>
  oip->dbg.lock_cnt = (cnt_t)1;
 800140c:	2301      	movs	r3, #1
 800140e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 8001412:	f1bb 0f00 	cmp.w	fp, #0
 8001416:	d1bf      	bne.n	8001398 <iqReadTimeout+0x38>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001418:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800141c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001420:	bb62      	cbnz	r2, 800147c <iqReadTimeout+0x11c>
 8001422:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8001426:	2900      	cmp	r1, #0
 8001428:	dd28      	ble.n	800147c <iqReadTimeout+0x11c>
  oip->dbg.lock_cnt = (cnt_t)0;
 800142a:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 800142e:	f382 8811 	msr	BASEPRI, r2
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001432:	eba8 000b 	sub.w	r0, r8, fp
 8001436:	b005      	add	sp, #20
 8001438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800143c:	462a      	mov	r2, r5
 800143e:	4640      	mov	r0, r8
 8001440:	f7fe ff80 	bl	8000344 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8001444:	68e2      	ldr	r2, [r4, #12]
 8001446:	e7c0      	b.n	80013ca <iqReadTimeout+0x6a>
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
 8001448:	68f2      	ldr	r2, [r6, #12]
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
  thread_t *currtp = chThdGetSelfX();

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800144a:	f1b9 0f00 	cmp.w	r9, #0
 800144e:	d0e3      	beq.n	8001418 <iqReadTimeout+0xb8>
  p->prev       = qp->prev;
 8001450:	6861      	ldr	r1, [r4, #4]
 8001452:	6051      	str	r1, [r2, #4]
  p->next       = qp;
 8001454:	6014      	str	r4, [r2, #0]
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001456:	2004      	movs	r0, #4
  p->prev->next = p;
 8001458:	600a      	str	r2, [r1, #0]
  qp->prev      = p;
 800145a:	6062      	str	r2, [r4, #4]
 800145c:	4649      	mov	r1, r9
 800145e:	f7ff feaf 	bl	80011c0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8001462:	2800      	cmp	r0, #0
 8001464:	d098      	beq.n	8001398 <iqReadTimeout+0x38>
 8001466:	e7d7      	b.n	8001418 <iqReadTimeout+0xb8>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001468:	462a      	mov	r2, r5
 800146a:	4640      	mov	r0, r8
 800146c:	f7fe ff6a 	bl	8000344 <memcpy>
    iqp->q_rdptr += n;
 8001470:	69a2      	ldr	r2, [r4, #24]
 8001472:	442a      	add	r2, r5
 8001474:	e7a9      	b.n	80013ca <iqReadTimeout+0x6a>
    chSysHalt("SV#4");
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <iqReadTimeout+0x12c>)
 8001478:	f7ff fba2 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#5");
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <iqReadTimeout+0x130>)
 800147e:	f7ff fb9f 	bl	8000bc0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <iqReadTimeout+0x134>)
 8001484:	f7ff fb9c 	bl	8000bc0 <chSysHalt>
 8001488:	20000910 	.word	0x20000910
 800148c:	080046c8 	.word	0x080046c8
 8001490:	080046f8 	.word	0x080046f8
 8001494:	080047f0 	.word	0x080047f0
	...

080014a0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	300c      	adds	r0, #12
 80014a6:	f7ff bf5b 	b.w	8001360 <iqReadTimeout>
 80014aa:	bf00      	nop
 80014ac:	0000      	movs	r0, r0
	...

080014b0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80014b0:	300c      	adds	r0, #12
 80014b2:	f7ff bf55 	b.w	8001360 <iqReadTimeout>
 80014b6:	bf00      	nop
	...

080014c0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	2330      	movs	r3, #48	; 0x30
 80014c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80014c8:	4e26      	ldr	r6, [pc, #152]	; (8001564 <iqGetTimeout+0xa4>)
 80014ca:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 80014ce:	4313      	orrs	r3, r2
 80014d0:	d144      	bne.n	800155c <iqGetTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	4604      	mov	r4, r0
 80014d6:	460d      	mov	r5, r1
 80014d8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
}
 80014dc:	e00a      	b.n	80014f4 <iqGetTimeout+0x34>
  p->prev       = qp->prev;
 80014de:	6862      	ldr	r2, [r4, #4]
 80014e0:	4629      	mov	r1, r5
 80014e2:	e9c3 4200 	strd	r4, r2, [r3]
 80014e6:	2004      	movs	r0, #4
  p->prev->next = p;
 80014e8:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80014ea:	6063      	str	r3, [r4, #4]
 80014ec:	f7ff fe68 	bl	80011c0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80014f0:	2800      	cmp	r0, #0
 80014f2:	db06      	blt.n	8001502 <iqGetTimeout+0x42>
  while (iqIsEmptyI(iqp)) {
 80014f4:	68a3      	ldr	r3, [r4, #8]
 80014f6:	b983      	cbnz	r3, 800151a <iqGetTimeout+0x5a>
 80014f8:	68f3      	ldr	r3, [r6, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80014fa:	2d00      	cmp	r5, #0
 80014fc:	d1ef      	bne.n	80014de <iqGetTimeout+0x1e>
    return MSG_TIMEOUT;
 80014fe:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001502:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8001506:	bb33      	cbnz	r3, 8001556 <iqGetTimeout+0x96>
 8001508:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 800150c:	2a00      	cmp	r2, #0
 800150e:	dd22      	ble.n	8001556 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001510:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001514:	f383 8811 	msr	BASEPRI, r3
}
 8001518:	bd70      	pop	{r4, r5, r6, pc}
  iqp->q_counter--;
 800151a:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800151c:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 800151e:	3b01      	subs	r3, #1
 8001520:	60a3      	str	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001522:	6923      	ldr	r3, [r4, #16]
  b = *iqp->q_rdptr++;
 8001524:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001526:	429a      	cmp	r2, r3
    iqp->q_rdptr = iqp->q_buffer;
 8001528:	bf28      	it	cs
 800152a:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800152c:	61a2      	str	r2, [r4, #24]
 800152e:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8001530:	bf28      	it	cs
 8001532:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8001534:	69e3      	ldr	r3, [r4, #28]
 8001536:	b10b      	cbz	r3, 800153c <iqGetTimeout+0x7c>
    iqp->q_notify(iqp);
 8001538:	4620      	mov	r0, r4
 800153a:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800153c:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 8001540:	b94b      	cbnz	r3, 8001556 <iqGetTimeout+0x96>
 8001542:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 8001546:	2a00      	cmp	r2, #0
 8001548:	dd05      	ble.n	8001556 <iqGetTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 800154a:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800154e:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001552:	4628      	mov	r0, r5
}
 8001554:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 8001556:	4804      	ldr	r0, [pc, #16]	; (8001568 <iqGetTimeout+0xa8>)
 8001558:	f7ff fb32 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#4");
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <iqGetTimeout+0xac>)
 800155e:	f7ff fb2f 	bl	8000bc0 <chSysHalt>
 8001562:	bf00      	nop
 8001564:	20000910 	.word	0x20000910
 8001568:	080046f8 	.word	0x080046f8
 800156c:	080046c8 	.word	0x080046c8

08001570 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	300c      	adds	r0, #12
 8001576:	f7ff bfa3 	b.w	80014c0 <iqGetTimeout>
 800157a:	bf00      	nop
 800157c:	0000      	movs	r0, r0
	...

08001580 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001580:	300c      	adds	r0, #12
 8001582:	f7ff bf9d 	b.w	80014c0 <iqGetTimeout>
 8001586:	bf00      	nop
	...

08001590 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	4615      	mov	r5, r2
 8001594:	2330      	movs	r3, #48	; 0x30
 8001596:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800159a:	4f26      	ldr	r7, [pc, #152]	; (8001634 <oqPutTimeout+0xa4>)
 800159c:	e9d7 3222 	ldrd	r3, r2, [r7, #136]	; 0x88
 80015a0:	4313      	orrs	r3, r2
 80015a2:	d143      	bne.n	800162c <oqPutTimeout+0x9c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	4604      	mov	r4, r0
 80015a8:	460e      	mov	r6, r1
 80015aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
}
 80015ae:	e00a      	b.n	80015c6 <oqPutTimeout+0x36>
  p->prev       = qp->prev;
 80015b0:	6860      	ldr	r0, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80015b2:	4629      	mov	r1, r5
 80015b4:	e9c3 4000 	strd	r4, r0, [r3]
  p->prev->next = p;
 80015b8:	6003      	str	r3, [r0, #0]
 80015ba:	2004      	movs	r0, #4
  qp->prev      = p;
 80015bc:	6063      	str	r3, [r4, #4]
 80015be:	f7ff fdff 	bl	80011c0 <chSchGoSleepTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80015c2:	2800      	cmp	r0, #0
 80015c4:	db06      	blt.n	80015d4 <oqPutTimeout+0x44>
  while (oqIsFullI(oqp)) {
 80015c6:	68a3      	ldr	r3, [r4, #8]
 80015c8:	b983      	cbnz	r3, 80015ec <oqPutTimeout+0x5c>
 80015ca:	68fb      	ldr	r3, [r7, #12]
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80015cc:	2d00      	cmp	r5, #0
 80015ce:	d1ef      	bne.n	80015b0 <oqPutTimeout+0x20>
    return MSG_TIMEOUT;
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80015d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015d8:	bb2b      	cbnz	r3, 8001626 <oqPutTimeout+0x96>
 80015da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80015de:	2a00      	cmp	r2, #0
 80015e0:	dd21      	ble.n	8001626 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 80015e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015e6:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return MSG_OK;
}
 80015ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  oqp->q_counter--;
 80015ec:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80015ee:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80015f4:	1c53      	adds	r3, r2, #1
 80015f6:	6163      	str	r3, [r4, #20]
 80015f8:	7016      	strb	r6, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80015fa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80015fe:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001600:	bf24      	itt	cs
 8001602:	68e3      	ldrcs	r3, [r4, #12]
 8001604:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8001606:	69e3      	ldr	r3, [r4, #28]
 8001608:	b10b      	cbz	r3, 800160e <oqPutTimeout+0x7e>
    oqp->q_notify(oqp);
 800160a:	4620      	mov	r0, r4
 800160c:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800160e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001612:	b940      	cbnz	r0, 8001626 <oqPutTimeout+0x96>
 8001614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001618:	2b00      	cmp	r3, #0
 800161a:	dd04      	ble.n	8001626 <oqPutTimeout+0x96>
  oip->dbg.lock_cnt = (cnt_t)0;
 800161c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001620:	f380 8811 	msr	BASEPRI, r0
}
 8001624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <oqPutTimeout+0xa8>)
 8001628:	f7ff faca 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#4");
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <oqPutTimeout+0xac>)
 800162e:	f7ff fac7 	bl	8000bc0 <chSysHalt>
 8001632:	bf00      	nop
 8001634:	20000910 	.word	0x20000910
 8001638:	080046f8 	.word	0x080046f8
 800163c:	080046c8 	.word	0x080046c8

08001640 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	3030      	adds	r0, #48	; 0x30
 8001646:	f7ff bfa3 	b.w	8001590 <oqPutTimeout>
 800164a:	bf00      	nop
 800164c:	0000      	movs	r0, r0
	...

08001650 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001650:	3030      	adds	r0, #48	; 0x30
 8001652:	f7ff bf9d 	b.w	8001590 <oqPutTimeout>
 8001656:	bf00      	nop
	...

08001660 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001664:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 8001666:	f8d0 b01c 	ldr.w	fp, [r0, #28]
                      size_t n, sysinterval_t timeout) {
 800166a:	9302      	str	r3, [sp, #8]
  size_t max = n;

  osalDbgCheck(n > 0U);
 800166c:	2a00      	cmp	r2, #0
 800166e:	f000 8081 	beq.w	8001774 <oqWriteTimeout+0x114>
 8001672:	4691      	mov	r9, r2
 8001674:	4688      	mov	r8, r1
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800167c:	4e3f      	ldr	r6, [pc, #252]	; (800177c <oqWriteTimeout+0x11c>)
 800167e:	e9d6 3122 	ldrd	r3, r1, [r6, #136]	; 0x88
 8001682:	430b      	orrs	r3, r1
 8001684:	d170      	bne.n	8001768 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001686:	2301      	movs	r3, #1
 8001688:	4604      	mov	r4, r0
 800168a:	9201      	str	r2, [sp, #4]
 800168c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8001690:	46ca      	mov	sl, r9
  if (n > oqGetEmptyI(oqp)) {
 8001692:	68a3      	ldr	r3, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001694:	e9d4 7004 	ldrd	r7, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8001698:	4553      	cmp	r3, sl
    n = oqGetEmptyI(oqp);
 800169a:	bf34      	ite	cc
 800169c:	68a5      	ldrcc	r5, [r4, #8]
 800169e:	4655      	movcs	r5, sl
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80016a0:	1a3f      	subs	r7, r7, r0
  if (n < s1) {
 80016a2:	42af      	cmp	r7, r5
 80016a4:	d859      	bhi.n	800175a <oqWriteTimeout+0xfa>
  else if (n > s1) {
 80016a6:	d243      	bcs.n	8001730 <oqWriteTimeout+0xd0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80016a8:	463a      	mov	r2, r7
 80016aa:	4641      	mov	r1, r8
 80016ac:	f7fe fe4a 	bl	8000344 <memcpy>
    s2 = n - s1;
 80016b0:	1bea      	subs	r2, r5, r7
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80016b2:	68e0      	ldr	r0, [r4, #12]
 80016b4:	9203      	str	r2, [sp, #12]
 80016b6:	eb08 0107 	add.w	r1, r8, r7
 80016ba:	f7fe fe43 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80016be:	68e3      	ldr	r3, [r4, #12]
 80016c0:	9a03      	ldr	r2, [sp, #12]
 80016c2:	441a      	add	r2, r3
  oqp->q_counter -= n;
 80016c4:	68a3      	ldr	r3, [r4, #8]
    oqp->q_wrptr += n;
 80016c6:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 80016c8:	1b5b      	subs	r3, r3, r5
 80016ca:	60a3      	str	r3, [r4, #8]

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80016cc:	b3b5      	cbz	r5, 800173c <oqWriteTimeout+0xdc>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80016ce:	f1bb 0f00 	cmp.w	fp, #0
 80016d2:	d001      	beq.n	80016d8 <oqWriteTimeout+0x78>
        nfy(oqp);
 80016d4:	4620      	mov	r0, r4
 80016d6:	47d8      	blx	fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80016d8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d146      	bne.n	800176e <oqWriteTimeout+0x10e>
 80016e0:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	dd42      	ble.n	800176e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 80016e8:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 80016ec:	f383 8811 	msr	BASEPRI, r3
 80016f0:	9b01      	ldr	r3, [sp, #4]
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80016f2:	ebaa 0a05 	sub.w	sl, sl, r5
      bp += done;
 80016f6:	44a8      	add	r8, r5
 80016f8:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80016fc:	e9d6 3222 	ldrd	r3, r2, [r6, #136]	; 0x88
 8001700:	4313      	orrs	r3, r2
 8001702:	d131      	bne.n	8001768 <oqWriteTimeout+0x108>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001704:	2301      	movs	r3, #1
 8001706:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
  while (n > 0U) {
 800170a:	f1ba 0f00 	cmp.w	sl, #0
 800170e:	d1c0      	bne.n	8001692 <oqWriteTimeout+0x32>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001710:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8001714:	bb5a      	cbnz	r2, 800176e <oqWriteTimeout+0x10e>
 8001716:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800171a:	2900      	cmp	r1, #0
 800171c:	dd27      	ble.n	800176e <oqWriteTimeout+0x10e>
  oip->dbg.lock_cnt = (cnt_t)0;
 800171e:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8001722:	f382 8811 	msr	BASEPRI, r2
    }
  }

  osalSysUnlock();
  return max - n;
}
 8001726:	eba9 000a 	sub.w	r0, r9, sl
 800172a:	b005      	add	sp, #20
 800172c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001730:	462a      	mov	r2, r5
 8001732:	4641      	mov	r1, r8
 8001734:	f7fe fe06 	bl	8000344 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8001738:	68e2      	ldr	r2, [r4, #12]
 800173a:	e7c3      	b.n	80016c4 <oqWriteTimeout+0x64>
  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800173c:	9902      	ldr	r1, [sp, #8]
 800173e:	68f3      	ldr	r3, [r6, #12]
 8001740:	2900      	cmp	r1, #0
 8001742:	d0e5      	beq.n	8001710 <oqWriteTimeout+0xb0>
  p->prev       = qp->prev;
 8001744:	6862      	ldr	r2, [r4, #4]
  p->next       = qp;
 8001746:	601c      	str	r4, [r3, #0]
  p->prev       = qp->prev;
 8001748:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800174a:	2004      	movs	r0, #4
  p->prev->next = p;
 800174c:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800174e:	6063      	str	r3, [r4, #4]
 8001750:	f7ff fd36 	bl	80011c0 <chSchGoSleepTimeoutS>
      if (msg != MSG_OK) {
 8001754:	2800      	cmp	r0, #0
 8001756:	d09c      	beq.n	8001692 <oqWriteTimeout+0x32>
 8001758:	e7da      	b.n	8001710 <oqWriteTimeout+0xb0>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800175a:	462a      	mov	r2, r5
 800175c:	4641      	mov	r1, r8
 800175e:	f7fe fdf1 	bl	8000344 <memcpy>
    oqp->q_wrptr += n;
 8001762:	6962      	ldr	r2, [r4, #20]
 8001764:	442a      	add	r2, r5
 8001766:	e7ad      	b.n	80016c4 <oqWriteTimeout+0x64>
    chSysHalt("SV#4");
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <oqWriteTimeout+0x120>)
 800176a:	f7ff fa29 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#5");
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <oqWriteTimeout+0x124>)
 8001770:	f7ff fa26 	bl	8000bc0 <chSysHalt>
  osalDbgCheck(n > 0U);
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <oqWriteTimeout+0x128>)
 8001776:	f7ff fa23 	bl	8000bc0 <chSysHalt>
 800177a:	bf00      	nop
 800177c:	20000910 	.word	0x20000910
 8001780:	080046c8 	.word	0x080046c8
 8001784:	080046f8 	.word	0x080046f8
 8001788:	080047b4 	.word	0x080047b4
 800178c:	00000000 	.word	0x00000000

08001790 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	3030      	adds	r0, #48	; 0x30
 8001796:	f7ff bf63 	b.w	8001660 <oqWriteTimeout>
 800179a:	bf00      	nop
 800179c:	0000      	movs	r0, r0
	...

080017a0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80017a0:	3030      	adds	r0, #48	; 0x30
 80017a2:	f7ff bf5d 	b.w	8001660 <oqWriteTimeout>
 80017a6:	bf00      	nop
	...

080017b0 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 80017b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 80017b4:	4c80      	ldr	r4, [pc, #512]	; (80019b8 <Thread1+0x208>)
 80017b6:	4a81      	ldr	r2, [pc, #516]	; (80019bc <Thread1+0x20c>)
 80017b8:	68e3      	ldr	r3, [r4, #12]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    for(float i=30; i<150; i=i*1.1){
      palSetPad(GPIOB, GPIOB_LED1);
 80017ba:	f8df a218 	ldr.w	sl, [pc, #536]	; 80019d4 <Thread1+0x224>
      palClearPad(GPIOC, GPIOC_LED2);
 80017be:	f8df b218 	ldr.w	fp, [pc, #536]	; 80019d8 <Thread1+0x228>
 80017c2:	61da      	str	r2, [r3, #28]
static THD_FUNCTION(Thread1, arg) {
 80017c4:	b083      	sub	sp, #12
      palSetPad(GPIOB, GPIOB_LED1);
 80017c6:	f44f 4880 	mov.w	r8, #16384	; 0x4000
static THD_FUNCTION(Thread1, arg) {
 80017ca:	2311      	movs	r3, #17
    for(float i=30; i<150; i=i*1.1){
 80017cc:	4d7c      	ldr	r5, [pc, #496]	; (80019c0 <Thread1+0x210>)
static THD_FUNCTION(Thread1, arg) {
 80017ce:	9301      	str	r3, [sp, #4]
      palSetPad(GPIOB, GPIOB_LED1);
 80017d0:	4647      	mov	r7, r8
      chThdSleepMilliseconds(i);
 80017d2:	f240 36e7 	movw	r6, #999	; 0x3e7
      palSetPad(GPIOB, GPIOB_LED1);
 80017d6:	f8aa 7018 	strh.w	r7, [sl, #24]
      chThdSleepMilliseconds(i);
 80017da:	4628      	mov	r0, r5
      palClearPad(GPIOC, GPIOC_LED2);
 80017dc:	f8ab 701a 	strh.w	r7, [fp, #26]
      chThdSleepMilliseconds(i);
 80017e0:	f002 fdea 	bl	80043b8 <__aeabi_f2ulz>
 80017e4:	0082      	lsls	r2, r0, #2
 80017e6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 80017ea:	1813      	adds	r3, r2, r0
 80017ec:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
 80017f0:	eb41 020c 	adc.w	r2, r1, ip
 80017f4:	00d2      	lsls	r2, r2, #3
 80017f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	1a1b      	subs	r3, r3, r0
 80017fe:	eb62 0201 	sbc.w	r2, r2, r1
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1818      	adds	r0, r3, r0
 800180c:	eb41 0102 	adc.w	r1, r1, r2
 8001810:	0103      	lsls	r3, r0, #4
 8001812:	0109      	lsls	r1, r1, #4
 8001814:	ea41 7110 	orr.w	r1, r1, r0, lsr #28
 8001818:	1998      	adds	r0, r3, r6
 800181a:	f141 0100 	adc.w	r1, r1, #0
 800181e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001822:	2300      	movs	r3, #0
 8001824:	f7ff f986 	bl	8000b34 <__aeabi_uldivmod>
 8001828:	f04f 0930 	mov.w	r9, #48	; 0x30
 800182c:	4601      	mov	r1, r0
 800182e:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001832:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8001836:	4313      	orrs	r3, r2
 8001838:	f040 80ae 	bne.w	8001998 <Thread1+0x1e8>
  oip->dbg.lock_cnt = (cnt_t)1;
 800183c:	2301      	movs	r3, #1
 800183e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);
 8001842:	2800      	cmp	r0, #0
 8001844:	f000 80ab 	beq.w	800199e <Thread1+0x1ee>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001848:	9000      	str	r0, [sp, #0]
 800184a:	2008      	movs	r0, #8
 800184c:	f7ff fcb8 	bl	80011c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001850:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001854:	9900      	ldr	r1, [sp, #0]
 8001856:	2301      	movs	r3, #1
 8001858:	2a00      	cmp	r2, #0
 800185a:	f040 809a 	bne.w	8001992 <Thread1+0x1e2>
 800185e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001862:	2800      	cmp	r0, #0
 8001864:	f340 8095 	ble.w	8001992 <Thread1+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001868:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 800186c:	f382 8811 	msr	BASEPRI, r2
      palClearPad(GPIOB, GPIOB_LED1);
 8001870:	f8aa 801a 	strh.w	r8, [sl, #26]
      palSetPad(GPIOC, GPIOC_LED2);
 8001874:	f8ab 8018 	strh.w	r8, [fp, #24]
 8001878:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800187c:	e9d4 2022 	ldrd	r2, r0, [r4, #136]	; 0x88
 8001880:	4302      	orrs	r2, r0
 8001882:	f040 8089 	bne.w	8001998 <Thread1+0x1e8>
 8001886:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 8001888:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800188c:	f7ff fc98 	bl	80011c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001890:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001894:	2b00      	cmp	r3, #0
 8001896:	d17c      	bne.n	8001992 <Thread1+0x1e2>
 8001898:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800189c:	2a00      	cmp	r2, #0
 800189e:	dd78      	ble.n	8001992 <Thread1+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 80018a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80018a4:	f383 8811 	msr	BASEPRI, r3
    for(float i=30; i<150; i=i*1.1){
 80018a8:	4628      	mov	r0, r5
 80018aa:	f7ff f873 	bl	8000994 <__aeabi_f2d>
 80018ae:	a33e      	add	r3, pc, #248	; (adr r3, 80019a8 <Thread1+0x1f8>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fde0 	bl	8000478 <__aeabi_dmul>
 80018b8:	f7ff f8ec 	bl	8000a94 <__aeabi_d2f>
 80018bc:	9b01      	ldr	r3, [sp, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	4605      	mov	r5, r0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	d187      	bne.n	80017d6 <Thread1+0x26>
      chThdSleepMilliseconds(i);
    }
    for(float i=150; i>30; i=i*0.9){
      palSetPad(GPIOB, GPIOB_LED1);
 80018c6:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80018ca:	2310      	movs	r3, #16
    for(float i=150; i>30; i=i*0.9){
 80018cc:	4e3d      	ldr	r6, [pc, #244]	; (80019c4 <Thread1+0x214>)
 80018ce:	9300      	str	r3, [sp, #0]
      palSetPad(GPIOB, GPIOB_LED1);
 80018d0:	4647      	mov	r7, r8
      palClearPad(GPIOC, GPIOC_LED2);
      chThdSleepMilliseconds(i);
 80018d2:	f242 7510 	movw	r5, #10000	; 0x2710
      palSetPad(GPIOB, GPIOB_LED1);
 80018d6:	f8aa 7018 	strh.w	r7, [sl, #24]
      chThdSleepMilliseconds(i);
 80018da:	4630      	mov	r0, r6
      palClearPad(GPIOC, GPIOC_LED2);
 80018dc:	f8ab 701a 	strh.w	r7, [fp, #26]
      chThdSleepMilliseconds(i);
 80018e0:	f002 fd6a 	bl	80043b8 <__aeabi_f2ulz>
 80018e4:	fba0 3205 	umull	r3, r2, r0, r5
 80018e8:	fb05 2101 	mla	r1, r5, r1, r2
 80018ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f0:	1898      	adds	r0, r3, r2
 80018f2:	f141 0100 	adc.w	r1, r1, #0
 80018f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fa:	2300      	movs	r3, #0
 80018fc:	f7ff f91a 	bl	8000b34 <__aeabi_uldivmod>
 8001900:	f04f 0930 	mov.w	r9, #48	; 0x30
 8001904:	4601      	mov	r1, r0
 8001906:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800190a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800190e:	4313      	orrs	r3, r2
 8001910:	d142      	bne.n	8001998 <Thread1+0x1e8>
  oip->dbg.lock_cnt = (cnt_t)1;
 8001912:	2301      	movs	r3, #1
 8001914:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8001918:	2800      	cmp	r0, #0
 800191a:	d040      	beq.n	800199e <Thread1+0x1ee>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800191c:	9001      	str	r0, [sp, #4]
 800191e:	2008      	movs	r0, #8
 8001920:	f7ff fc4e 	bl	80011c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001924:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001928:	bb9a      	cbnz	r2, 8001992 <Thread1+0x1e2>
 800192a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800192e:	2800      	cmp	r0, #0
 8001930:	dd2f      	ble.n	8001992 <Thread1+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 8001932:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8001936:	f382 8811 	msr	BASEPRI, r2
      palClearPad(GPIOB, GPIOB_LED1);
 800193a:	f8aa 801a 	strh.w	r8, [sl, #26]
      palSetPad(GPIOC, GPIOC_LED2);
 800193e:	f8ab 8018 	strh.w	r8, [fp, #24]
 8001942:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8001946:	e9d4 2022 	ldrd	r2, r0, [r4, #136]	; 0x88
 800194a:	4302      	orrs	r2, r0
 800194c:	d124      	bne.n	8001998 <Thread1+0x1e8>
  oip->dbg.lock_cnt = (cnt_t)1;
 800194e:	2301      	movs	r3, #1
 8001950:	9901      	ldr	r1, [sp, #4]
 8001952:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001956:	2008      	movs	r0, #8
 8001958:	f7ff fc32 	bl	80011c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 800195c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001960:	b9bb      	cbnz	r3, 8001992 <Thread1+0x1e2>
 8001962:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001966:	2a00      	cmp	r2, #0
 8001968:	dd13      	ble.n	8001992 <Thread1+0x1e2>
  oip->dbg.lock_cnt = (cnt_t)0;
 800196a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800196e:	f383 8811 	msr	BASEPRI, r3
    for(float i=150; i>30; i=i*0.9){
 8001972:	4630      	mov	r0, r6
 8001974:	f7ff f80e 	bl	8000994 <__aeabi_f2d>
 8001978:	a30d      	add	r3, pc, #52	; (adr r3, 80019b0 <Thread1+0x200>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fd7b 	bl	8000478 <__aeabi_dmul>
 8001982:	f7ff f887 	bl	8000a94 <__aeabi_d2f>
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	4606      	mov	r6, r0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	d1a2      	bne.n	80018d6 <Thread1+0x126>
 8001990:	e719      	b.n	80017c6 <Thread1+0x16>
    chSysHalt("SV#5");
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <Thread1+0x218>)
 8001994:	f7ff f914 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#4");
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <Thread1+0x21c>)
 800199a:	f7ff f911 	bl	8000bc0 <chSysHalt>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <Thread1+0x220>)
 80019a0:	f7ff f90e 	bl	8000bc0 <chSysHalt>
 80019a4:	f3af 8000 	nop.w
 80019a8:	9999999a 	.word	0x9999999a
 80019ac:	3ff19999 	.word	0x3ff19999
 80019b0:	cccccccd 	.word	0xcccccccd
 80019b4:	3feccccc 	.word	0x3feccccc
 80019b8:	20000910 	.word	0x20000910
 80019bc:	08004700 	.word	0x08004700
 80019c0:	41f00000 	.word	0x41f00000
 80019c4:	43160000 	.word	0x43160000
 80019c8:	080046f8 	.word	0x080046f8
 80019cc:	080046c8 	.word	0x080046c8
 80019d0:	080047d0 	.word	0x080047d0
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	00000000 	.word	0x00000000

080019e0 <__port_irq_epilogue.part.0>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 80019e0:	b410      	push	{r4}
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 80019e2:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80019e6:	f3ef 8309 	mrs	r3, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 80019ea:	3b68      	subs	r3, #104	; 0x68

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 80019ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ectxp->fpscr = FPU->FPDSCR;
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <__port_irq_epilogue.part.0+0x38>)
    ectxp->xpsr = 0x01000000U;
 80019f2:	61d9      	str	r1, [r3, #28]
    ectxp->fpscr = FPU->FPDSCR;
 80019f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80019f8:	f383 8809 	msr	PSP, r3
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <__port_irq_epilogue.part.0+0x3c>)

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <__port_irq_epilogue.part.0+0x40>)
 8001a00:	6808      	ldr	r0, [r1, #0]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8001a02:	68c9      	ldr	r1, [r1, #12]
    if (chSchIsPreemptionRequired()) {
 8001a04:	6884      	ldr	r4, [r0, #8]
 8001a06:	6888      	ldr	r0, [r1, #8]
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8001a08:	4906      	ldr	r1, [pc, #24]	; (8001a24 <__port_irq_epilogue.part.0+0x44>)
 8001a0a:	4284      	cmp	r4, r0
 8001a0c:	bf88      	it	hi
 8001a0e:	460a      	movhi	r2, r1
 8001a10:	619a      	str	r2, [r3, #24]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ef00 	.word	0xe000ef00
 8001a1c:	20000910 	.word	0x20000910
 8001a20:	0800033e 	.word	0x0800033e
 8001a24:	08000333 	.word	0x08000333
	...

08001a30 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001a30:	b40e      	push	{r1, r2, r3}
 8001a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a36:	ed2d 8b06 	vpush	{d8-d10}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8001a3e:	f853 bb04 	ldr.w	fp, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001a42:	9305      	str	r3, [sp, #20]
    c = *fmt++;
 8001a44:	465d      	mov	r5, fp
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8001a4c:	2900      	cmp	r1, #0
 8001a4e:	f000 82c9 	beq.w	8001fe4 <chprintf+0x5b4>
 8001a52:	4682      	mov	sl, r0
  int n = 0;
 8001a54:	f04f 0900 	mov.w	r9, #0
 8001a58:	e00d      	b.n	8001a76 <chprintf+0x46>
      streamPut(chp, (uint8_t)c);
 8001a5a:	f8da 3000 	ldr.w	r3, [sl]
 8001a5e:	4650      	mov	r0, sl
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4798      	blx	r3
      n++;
 8001a64:	f109 0901 	add.w	r9, r9, #1
      continue;
 8001a68:	46ab      	mov	fp, r5
    c = *fmt++;
 8001a6a:	465d      	mov	r5, fp
 8001a6c:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 8001a70:	2900      	cmp	r1, #0
 8001a72:	f000 80db 	beq.w	8001c2c <chprintf+0x1fc>
    if (c != '%') {
 8001a76:	2925      	cmp	r1, #37	; 0x25
 8001a78:	d1ef      	bne.n	8001a5a <chprintf+0x2a>
    if (*fmt == '-') {
 8001a7a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8001a7e:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8001a80:	bf06      	itte	eq
 8001a82:	f10b 0502 	addeq.w	r5, fp, #2
      left_align = true;
 8001a86:	2301      	moveq	r3, #1
    left_align = false;
 8001a88:	2300      	movne	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
    if (*fmt == '+') {
 8001a8c:	782b      	ldrb	r3, [r5, #0]
 8001a8e:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 8001a90:	bf03      	ittte	eq
 8001a92:	786b      	ldrbeq	r3, [r5, #1]
      do_sign = true;
 8001a94:	f04f 0801 	moveq.w	r8, #1
      fmt++;
 8001a98:	3501      	addeq	r5, #1
    do_sign = false;
 8001a9a:	f04f 0800 	movne.w	r8, #0
    if (*fmt == '0') {
 8001a9e:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8001aa0:	bf03      	ittte	eq
 8001aa2:	3501      	addeq	r5, #1
      filler = '0';
 8001aa4:	461e      	moveq	r6, r3
    if ( *fmt == '*') {
 8001aa6:	782b      	ldrbeq	r3, [r5, #0]
    filler = ' ';
 8001aa8:	2620      	movne	r6, #32
    if ( *fmt == '*') {
 8001aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8001aac:	d148      	bne.n	8001b40 <chprintf+0x110>
      c = *fmt++;
 8001aae:	786b      	ldrb	r3, [r5, #1]
      width = va_arg(ap, int);
 8001ab0:	9f01      	ldr	r7, [sp, #4]
    if (c == '.') {
 8001ab2:	2b2e      	cmp	r3, #46	; 0x2e
      width = va_arg(ap, int);
 8001ab4:	f857 4b04 	ldr.w	r4, [r7], #4
      c = *fmt++;
 8001ab8:	f105 0b02 	add.w	fp, r5, #2
    if (c == '.') {
 8001abc:	d056      	beq.n	8001b6c <chprintf+0x13c>
    precision = 0;
 8001abe:	2500      	movs	r5, #0
    if (c == 'l' || c == 'L') {
 8001ac0:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8001ac4:	2a4c      	cmp	r2, #76	; 0x4c
 8001ac6:	d061      	beq.n	8001b8c <chprintf+0x15c>
    switch (c) {
 8001ac8:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8001acc:	2934      	cmp	r1, #52	; 0x34
 8001ace:	f200 80b5 	bhi.w	8001c3c <chprintf+0x20c>
 8001ad2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001ad6:	00e0      	.short	0x00e0
 8001ad8:	00b300b3 	.word	0x00b300b3
 8001adc:	00b300b3 	.word	0x00b300b3
 8001ae0:	00b300e0 	.word	0x00b300e0
 8001ae4:	00b300b3 	.word	0x00b300b3
 8001ae8:	00b300b3 	.word	0x00b300b3
 8001aec:	0114014d 	.word	0x0114014d
 8001af0:	00b300b3 	.word	0x00b300b3
 8001af4:	00b300b3 	.word	0x00b300b3
 8001af8:	00b30257 	.word	0x00b30257
 8001afc:	011400b3 	.word	0x011400b3
 8001b00:	00b300b3 	.word	0x00b300b3
 8001b04:	00b300b3 	.word	0x00b300b3
 8001b08:	00b300b3 	.word	0x00b300b3
 8001b0c:	00b300b3 	.word	0x00b300b3
 8001b10:	00b300b3 	.word	0x00b300b3
 8001b14:	00e0020f 	.word	0x00e0020f
 8001b18:	017000b3 	.word	0x017000b3
 8001b1c:	00b300b3 	.word	0x00b300b3
 8001b20:	00b300e0 	.word	0x00b300e0
 8001b24:	00b300b3 	.word	0x00b300b3
 8001b28:	00b300b3 	.word	0x00b300b3
 8001b2c:	0114014d 	.word	0x0114014d
 8001b30:	00b300b3 	.word	0x00b300b3
 8001b34:	00b30150 	.word	0x00b30150
 8001b38:	00b30257 	.word	0x00b30257
 8001b3c:	011400b3 	.word	0x011400b3
        c = *fmt++;
 8001b40:	f105 0b01 	add.w	fp, r5, #1
        if (c == 0) {
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d071      	beq.n	8001c2c <chprintf+0x1fc>
      width = 0;
 8001b48:	2400      	movs	r4, #0
 8001b4a:	e005      	b.n	8001b58 <chprintf+0x128>
        c = *fmt++;
 8001b4c:	f81b 3b01 	ldrb.w	r3, [fp], #1
          width = width * 10 + c;
 8001b50:	eb02 0441 	add.w	r4, r2, r1, lsl #1
        if (c == 0) {
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d069      	beq.n	8001c2c <chprintf+0x1fc>
        if (c >= '0' && c <= '9') {
 8001b58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 8001b60:	eb04 0184 	add.w	r1, r4, r4, lsl #2
        if (c >= '0' && c <= '9') {
 8001b64:	d9f2      	bls.n	8001b4c <chprintf+0x11c>
    if (c == '.') {
 8001b66:	2b2e      	cmp	r3, #46	; 0x2e
 8001b68:	9f01      	ldr	r7, [sp, #4]
 8001b6a:	d1a8      	bne.n	8001abe <chprintf+0x8e>
      c = *fmt++;
 8001b6c:	f89b 3000 	ldrb.w	r3, [fp]
      if (c == 0) {
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d05b      	beq.n	8001c2c <chprintf+0x1fc>
      if (c == '*') {
 8001b74:	2b2a      	cmp	r3, #42	; 0x2a
 8001b76:	d148      	bne.n	8001c0a <chprintf+0x1da>
        c = *fmt++;
 8001b78:	f89b 3001 	ldrb.w	r3, [fp, #1]
        precision = va_arg(ap, int);
 8001b7c:	f857 5b04 	ldr.w	r5, [r7], #4
    if (c == 'l' || c == 'L') {
 8001b80:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8001b84:	2a4c      	cmp	r2, #76	; 0x4c
        c = *fmt++;
 8001b86:	f10b 0b02 	add.w	fp, fp, #2
    if (c == 'l' || c == 'L') {
 8001b8a:	d19d      	bne.n	8001ac8 <chprintf+0x98>
      c = *fmt++;
 8001b8c:	f81b 3b01 	ldrb.w	r3, [fp], #1
      if (c == 0) {
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d04b      	beq.n	8001c2c <chprintf+0x1fc>
    switch (c) {
 8001b94:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8001b98:	2a34      	cmp	r2, #52	; 0x34
 8001b9a:	d84f      	bhi.n	8001c3c <chprintf+0x20c>
 8001b9c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001ba0:	004e007b 	.word	0x004e007b
 8001ba4:	004e004e 	.word	0x004e004e
 8001ba8:	007b004e 	.word	0x007b004e
 8001bac:	004e004e 	.word	0x004e004e
 8001bb0:	004e004e 	.word	0x004e004e
 8001bb4:	00e8004e 	.word	0x00e8004e
 8001bb8:	004e00af 	.word	0x004e00af
 8001bbc:	004e004e 	.word	0x004e004e
 8001bc0:	01f2004e 	.word	0x01f2004e
 8001bc4:	004e004e 	.word	0x004e004e
 8001bc8:	004e00af 	.word	0x004e00af
 8001bcc:	004e004e 	.word	0x004e004e
 8001bd0:	004e004e 	.word	0x004e004e
 8001bd4:	004e004e 	.word	0x004e004e
 8001bd8:	004e004e 	.word	0x004e004e
 8001bdc:	01aa004e 	.word	0x01aa004e
 8001be0:	004e007b 	.word	0x004e007b
 8001be4:	004e010b 	.word	0x004e010b
 8001be8:	007b004e 	.word	0x007b004e
 8001bec:	004e004e 	.word	0x004e004e
 8001bf0:	004e004e 	.word	0x004e004e
 8001bf4:	00e8004e 	.word	0x00e8004e
 8001bf8:	004e00af 	.word	0x004e00af
 8001bfc:	00eb004e 	.word	0x00eb004e
 8001c00:	01f2004e 	.word	0x01f2004e
 8001c04:	004e004e 	.word	0x004e004e
 8001c08:	00af      	.short	0x00af
      c = *fmt++;
 8001c0a:	f10b 0b01 	add.w	fp, fp, #1
    precision = 0;
 8001c0e:	2500      	movs	r5, #0
        while (c >= '0' && c <= '9') {
 8001c10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	2a09      	cmp	r2, #9
          precision = precision * 10 + c;
 8001c18:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        while (c >= '0' && c <= '9') {
 8001c1c:	f63f af50 	bhi.w	8001ac0 <chprintf+0x90>
          c = *fmt++;
 8001c20:	f81b 3b01 	ldrb.w	r3, [fp], #1
          precision = precision * 10 + c;
 8001c24:	eb02 0541 	add.w	r5, r2, r1, lsl #1
          if (c == 0) {
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f1      	bne.n	8001c10 <chprintf+0x1e0>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001c2c:	4648      	mov	r0, r9
 8001c2e:	b00c      	add	sp, #48	; 0x30
 8001c30:	ecbd 8b06 	vpop	{d8-d10}
 8001c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c38:	b003      	add	sp, #12
 8001c3a:	4770      	bx	lr
      *p++ = c;
 8001c3c:	f88d 3018 	strb.w	r3, [sp, #24]
      break;
 8001c40:	3c01      	subs	r4, #1
 8001c42:	9701      	str	r7, [sp, #4]
    if (left_align == false) {
 8001c44:	9b00      	ldr	r3, [sp, #0]
 8001c46:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8001c4a:	b923      	cbnz	r3, 8001c56 <chprintf+0x226>
    if (width < 0) {
 8001c4c:	2c00      	cmp	r4, #0
      width = -width;
 8001c4e:	f1c5 0500 	rsb	r5, r5, #0
    if (width < 0) {
 8001c52:	f300 8182 	bgt.w	8001f5a <chprintf+0x52a>
    if (left_align == false) {
 8001c56:	f04f 0800 	mov.w	r8, #0
 8001c5a:	af06      	add	r7, sp, #24
 8001c5c:	f108 0401 	add.w	r4, r8, #1
 8001c60:	443c      	add	r4, r7
      streamPut(chp, (uint8_t)*s++);
 8001c62:	f8da 3000 	ldr.w	r3, [sl]
 8001c66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4650      	mov	r0, sl
 8001c6e:	4798      	blx	r3
    while (--i >= 0) {
 8001c70:	42a7      	cmp	r7, r4
 8001c72:	d1f6      	bne.n	8001c62 <chprintf+0x232>
 8001c74:	f109 0901 	add.w	r9, r9, #1
      n++;
 8001c78:	44c1      	add	r9, r8
    while (width) {
 8001c7a:	2d00      	cmp	r5, #0
 8001c7c:	f43f aef5 	beq.w	8001a6a <chprintf+0x3a>
 8001c80:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)filler);
 8001c82:	f8da 3000 	ldr.w	r3, [sl]
 8001c86:	4631      	mov	r1, r6
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	4650      	mov	r0, sl
 8001c8c:	4798      	blx	r3
    while (width) {
 8001c8e:	3c01      	subs	r4, #1
 8001c90:	d1f7      	bne.n	8001c82 <chprintf+0x252>
      n++;
 8001c92:	44a9      	add	r9, r5
 8001c94:	e6e9      	b.n	8001a6a <chprintf+0x3a>
        l = va_arg(ap, int);
 8001c96:	463b      	mov	r3, r7
 8001c98:	f853 1b04 	ldr.w	r1, [r3], #4
 8001c9c:	9301      	str	r3, [sp, #4]
      if (l < 0) {
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	f2c0 8153 	blt.w	8001f4a <chprintf+0x51a>
        if (do_sign) {
 8001ca4:	f1b8 0f00 	cmp.w	r8, #0
 8001ca8:	f000 8185 	beq.w	8001fb6 <chprintf+0x586>
          *p++ = '+';
 8001cac:	232b      	movs	r3, #43	; 0x2b
 8001cae:	f88d 3018 	strb.w	r3, [sp, #24]
 8001cb2:	af06      	add	r7, sp, #24
 8001cb4:	f10d 0319 	add.w	r3, sp, #25
  q = p + MAX_FILLER;
 8001cb8:	f103 0c0b 	add.w	ip, r3, #11
 8001cbc:	4660      	mov	r0, ip
    i = (int)(l % radix);
 8001cbe:	4ac4      	ldr	r2, [pc, #784]	; (8001fd0 <chprintf+0x5a0>)
 8001cc0:	fba2 5201 	umull	r5, r2, r2, r1
 8001cc4:	08d2      	lsrs	r2, r2, #3
 8001cc6:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 8001cca:	4696      	mov	lr, r2
 8001ccc:	eba1 0245 	sub.w	r2, r1, r5, lsl #1
    i += '0';
 8001cd0:	3230      	adds	r2, #48	; 0x30
    i = (int)(l % radix);
 8001cd2:	460d      	mov	r5, r1
    *--q = i;
 8001cd4:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8001cd6:	2d09      	cmp	r5, #9
    *--q = i;
 8001cd8:	f800 2d01 	strb.w	r2, [r0, #-1]!
    l /= radix;
 8001cdc:	4671      	mov	r1, lr
  } while ((ll /= radix) != 0);
 8001cde:	dcee      	bgt.n	8001cbe <chprintf+0x28e>
  i = (int)(p + MAX_FILLER - q);
 8001ce0:	ebac 0100 	sub.w	r1, ip, r0
 8001ce4:	4419      	add	r1, r3
 8001ce6:	e001      	b.n	8001cec <chprintf+0x2bc>
    *p++ = *q++;
 8001ce8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8001cec:	f803 2b01 	strb.w	r2, [r3], #1
  while (--i);
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	d1f9      	bne.n	8001ce8 <chprintf+0x2b8>
    i = (int)(p - s);
 8001cf4:	1bdb      	subs	r3, r3, r7
    if ((width -= i) < 0) {
 8001cf6:	1ae4      	subs	r4, r4, r3
        i--;
 8001cf8:	f103 38ff 	add.w	r8, r3, #4294967295
 8001cfc:	e02a      	b.n	8001d54 <chprintf+0x324>
    switch (c) {
 8001cfe:	f04f 0c10 	mov.w	ip, #16
        l = va_arg(ap, unsigned int);
 8001d02:	463b      	mov	r3, r7
  q = p + MAX_FILLER;
 8001d04:	f10d 0823 	add.w	r8, sp, #35	; 0x23
        l = va_arg(ap, unsigned int);
 8001d08:	f853 0b04 	ldr.w	r0, [r3], #4
 8001d0c:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
 8001d0e:	4641      	mov	r1, r8
 8001d10:	e000      	b.n	8001d14 <chprintf+0x2e4>
 8001d12:	4611      	mov	r1, r2
    i = (int)(l % radix);
 8001d14:	4605      	mov	r5, r0
 8001d16:	fbb0 f0fc 	udiv	r0, r0, ip
 8001d1a:	fb0c 5710 	mls	r7, ip, r0, r5
    i += '0';
 8001d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
    if (i > '9') {
 8001d22:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8001d24:	bfc8      	it	gt
 8001d26:	f107 0337 	addgt.w	r3, r7, #55	; 0x37
    *--q = i;
 8001d2a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8001d2c:	4565      	cmp	r5, ip
    *--q = i;
 8001d2e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001d32:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
 8001d36:	d2ec      	bcs.n	8001d12 <chprintf+0x2e2>
  i = (int)(p + MAX_FILLER - q);
 8001d38:	af06      	add	r7, sp, #24
 8001d3a:	eba8 0202 	sub.w	r2, r8, r2
 8001d3e:	4638      	mov	r0, r7
 8001d40:	e001      	b.n	8001d46 <chprintf+0x316>
    *p++ = *q++;
 8001d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d46:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8001d4a:	4541      	cmp	r1, r8
 8001d4c:	d1f9      	bne.n	8001d42 <chprintf+0x312>
    if ((width -= i) < 0) {
 8001d4e:	1aa4      	subs	r4, r4, r2
        i--;
 8001d50:	f102 38ff 	add.w	r8, r2, #4294967295
    if (left_align == false) {
 8001d54:	9b00      	ldr	r3, [sp, #0]
 8001d56:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8001d5a:	b923      	cbnz	r3, 8001d66 <chprintf+0x336>
    if (width < 0) {
 8001d5c:	2c00      	cmp	r4, #0
      width = -width;
 8001d5e:	f1c5 0500 	rsb	r5, r5, #0
    if (width < 0) {
 8001d62:	f300 80d0 	bgt.w	8001f06 <chprintf+0x4d6>
    while (--i >= 0) {
 8001d66:	f1b8 0f00 	cmp.w	r8, #0
 8001d6a:	f6bf af77 	bge.w	8001c5c <chprintf+0x22c>
 8001d6e:	e784      	b.n	8001c7a <chprintf+0x24a>
    switch (c) {
 8001d70:	f04f 0c08 	mov.w	ip, #8
 8001d74:	e7c5      	b.n	8001d02 <chprintf+0x2d2>
      if ((s = va_arg(ap, char *)) == 0) {
 8001d76:	463b      	mov	r3, r7
 8001d78:	f853 7b04 	ldr.w	r7, [r3], #4
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	f000 80f9 	beq.w	8001f76 <chprintf+0x546>
      for (p = s; *p && (--precision >= 0); p++)
 8001d84:	783a      	ldrb	r2, [r7, #0]
      if (precision == 0) {
 8001d86:	2d00      	cmp	r5, #0
 8001d88:	f000 8109 	beq.w	8001f9e <chprintf+0x56e>
      for (p = s; *p && (--precision >= 0); p++)
 8001d8c:	2a00      	cmp	r2, #0
 8001d8e:	f000 8108 	beq.w	8001fa2 <chprintf+0x572>
 8001d92:	3d01      	subs	r5, #1
 8001d94:	f100 8105 	bmi.w	8001fa2 <chprintf+0x572>
 8001d98:	463a      	mov	r2, r7
 8001d9a:	e001      	b.n	8001da0 <chprintf+0x370>
 8001d9c:	42e9      	cmn	r1, r5
 8001d9e:	d404      	bmi.n	8001daa <chprintf+0x37a>
 8001da0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001da4:	1ab9      	subs	r1, r7, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f8      	bne.n	8001d9c <chprintf+0x36c>
    i = (int)(p - s);
 8001daa:	1bd2      	subs	r2, r2, r7
    if ((width -= i) < 0) {
 8001dac:	1aa4      	subs	r4, r4, r2
        i--;
 8001dae:	f102 38ff 	add.w	r8, r2, #4294967295
      filler = ' ';
 8001db2:	2620      	movs	r6, #32
 8001db4:	e7ce      	b.n	8001d54 <chprintf+0x324>
      f = (float) va_arg(ap, double);
 8001db6:	3707      	adds	r7, #7
 8001db8:	f027 0307 	bic.w	r3, r7, #7
 8001dbc:	e8f3 0102 	ldrd	r0, r1, [r3], #8
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	f7fe fe67 	bl	8000a94 <__aeabi_d2f>
 8001dc6:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 8001dca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	f100 80c7 	bmi.w	8001f64 <chprintf+0x534>
        if (do_sign) {
 8001dd6:	f1b8 0f00 	cmp.w	r8, #0
 8001dda:	f000 80ef 	beq.w	8001fbc <chprintf+0x58c>
          *p++ = '+';
 8001dde:	232b      	movs	r3, #43	; 0x2b
 8001de0:	f88d 3018 	strb.w	r3, [sp, #24]
 8001de4:	f10d 0819 	add.w	r8, sp, #25
 8001de8:	af06      	add	r7, sp, #24
      p = ftoa(p, f, precision);
 8001dea:	ee18 0a10 	vmov	r0, s16
 8001dee:	f7fe fdd1 	bl	8000994 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8001df2:	3d01      	subs	r5, #1
 8001df4:	2d08      	cmp	r5, #8
      p = ftoa(p, f, precision);
 8001df6:	ec41 0b19 	vmov	d9, r0, r1
  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 8001dfa:	f200 80c6 	bhi.w	8001f8a <chprintf+0x55a>
  precision = pow10[precision - 1];
 8001dfe:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <chprintf+0x5a4>)
 8001e00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8001e04:	9303      	str	r3, [sp, #12]
  l = (long)((num - l) * precision);
 8001e06:	4618      	mov	r0, r3
  precision = pow10[precision - 1];
 8001e08:	461d      	mov	r5, r3
  l = (long)((num - l) * precision);
 8001e0a:	f7fe fda1 	bl	8000950 <__aeabi_ui2d>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8001e0e:	4a70      	ldr	r2, [pc, #448]	; (8001fd0 <chprintf+0x5a0>)
 8001e10:	462b      	mov	r3, r5
 8001e12:	fba2 3503 	umull	r3, r5, r2, r3
  l = (long)((num - l) * precision);
 8001e16:	ec41 0b1a 	vmov	d10, r0, r1
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8001e1a:	08ed      	lsrs	r5, r5, #3
  l = (long)num;
 8001e1c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  q = p + MAX_FILLER;
 8001e20:	f108 0c0b 	add.w	ip, r8, #11
  l = num;
 8001e24:	ee17 1a90 	vmov	r1, s15
  l = (long)num;
 8001e28:	edcd 7a02 	vstr	s15, [sp, #8]
  q = p + MAX_FILLER;
 8001e2c:	4662      	mov	r2, ip
    i = (int)(l % radix);
 8001e2e:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <chprintf+0x5a0>)
 8001e30:	fba3 0301 	umull	r0, r3, r3, r1
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	eba1 034e 	sub.w	r3, r1, lr, lsl #1
    i += '0';
 8001e40:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8001e42:	468e      	mov	lr, r1
    *--q = i;
 8001e44:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8001e46:	f1be 0f09 	cmp.w	lr, #9
    *--q = i;
 8001e4a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8001e4e:	4601      	mov	r1, r0
  } while ((ll /= radix) != 0);
 8001e50:	d8ed      	bhi.n	8001e2e <chprintf+0x3fe>
  i = (int)(p + MAX_FILLER - q);
 8001e52:	ebac 0c02 	sub.w	ip, ip, r2
 8001e56:	eb08 000c 	add.w	r0, r8, ip
 8001e5a:	4641      	mov	r1, r8
 8001e5c:	e001      	b.n	8001e62 <chprintf+0x432>
    *p++ = *q++;
 8001e5e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001e62:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 8001e66:	4281      	cmp	r1, r0
 8001e68:	d1f9      	bne.n	8001e5e <chprintf+0x42e>
  *p++ = '.';
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	232e      	movs	r3, #46	; 0x2e
 8001e6e:	f802 3b0c 	strb.w	r3, [r2], #12
 8001e72:	f10c 3cff 	add.w	ip, ip, #4294967295
  l = (long)((num - l) * precision);
 8001e76:	9802      	ldr	r0, [sp, #8]
  *p++ = '.';
 8001e78:	9202      	str	r2, [sp, #8]
 8001e7a:	44e0      	add	r8, ip
  l = (long)((num - l) * precision);
 8001e7c:	f7fe fd78 	bl	8000970 <__aeabi_i2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	ec51 0b19 	vmov	r0, r1, d9
 8001e88:	f7fe fc24 	bl	80006d4 <__aeabi_dsub>
 8001e8c:	ec53 2b1a 	vmov	r2, r3, d10
 8001e90:	f7fe faf2 	bl	8000478 <__aeabi_dmul>
 8001e94:	f7fe fdd6 	bl	8000a44 <__aeabi_d2iz>
    ll = num;
 8001e98:	9b03      	ldr	r3, [sp, #12]
  q = p + MAX_FILLER;
 8001e9a:	9902      	ldr	r1, [sp, #8]
    ll = num;
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	bf98      	it	ls
 8001ea0:	4605      	movls	r5, r0
  *p++ = '.';
 8001ea2:	f108 0302 	add.w	r3, r8, #2
    i = (int)(l % radix);
 8001ea6:	4a4a      	ldr	r2, [pc, #296]	; (8001fd0 <chprintf+0x5a0>)
 8001ea8:	fba2 c200 	umull	ip, r2, r2, r0
 8001eac:	08d2      	lsrs	r2, r2, #3
 8001eae:	4694      	mov	ip, r2
 8001eb0:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
 8001eb4:	eba0 024e 	sub.w	r2, r0, lr, lsl #1
    l /= radix;
 8001eb8:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 8001eba:	46ac      	mov	ip, r5
 8001ebc:	4d44      	ldr	r5, [pc, #272]	; (8001fd0 <chprintf+0x5a0>)
    i += '0';
 8001ebe:	3230      	adds	r2, #48	; 0x30
    *--q = i;
 8001ec0:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8001ec2:	fba5 e50c 	umull	lr, r5, r5, ip
 8001ec6:	f1bc 0f09 	cmp.w	ip, #9
    *--q = i;
 8001eca:	f801 2d01 	strb.w	r2, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8001ece:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 8001ed2:	d8e8      	bhi.n	8001ea6 <chprintf+0x476>
  i = (int)(p + MAX_FILLER - q);
 8001ed4:	9802      	ldr	r0, [sp, #8]
 8001ed6:	1a40      	subs	r0, r0, r1
 8001ed8:	3002      	adds	r0, #2
 8001eda:	4480      	add	r8, r0
 8001edc:	e001      	b.n	8001ee2 <chprintf+0x4b2>
    *p++ = *q++;
 8001ede:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001ee2:	f803 2b01 	strb.w	r2, [r3], #1
  while (--i);
 8001ee6:	4543      	cmp	r3, r8
 8001ee8:	d1f9      	bne.n	8001ede <chprintf+0x4ae>
    i = (int)(p - s);
 8001eea:	1bdb      	subs	r3, r3, r7
    if ((width -= i) < 0) {
 8001eec:	1ae4      	subs	r4, r4, r3
        i--;
 8001eee:	f103 38ff 	add.w	r8, r3, #4294967295
 8001ef2:	e72f      	b.n	8001d54 <chprintf+0x324>
      *p++ = va_arg(ap, int);
 8001ef4:	463a      	mov	r2, r7
 8001ef6:	3c01      	subs	r4, #1
 8001ef8:	f852 3b04 	ldr.w	r3, [r2], #4
 8001efc:	9201      	str	r2, [sp, #4]
 8001efe:	f88d 3018 	strb.w	r3, [sp, #24]
      filler = ' ';
 8001f02:	2620      	movs	r6, #32
      break;
 8001f04:	e69e      	b.n	8001c44 <chprintf+0x214>
      width = -width;
 8001f06:	462c      	mov	r4, r5
      if ((*s == '-' || *s == '+') && filler == '0') {
 8001f08:	7839      	ldrb	r1, [r7, #0]
 8001f0a:	292d      	cmp	r1, #45	; 0x2d
 8001f0c:	d010      	beq.n	8001f30 <chprintf+0x500>
 8001f0e:	292b      	cmp	r1, #43	; 0x2b
 8001f10:	d00e      	beq.n	8001f30 <chprintf+0x500>
        streamPut(chp, (uint8_t)filler);
 8001f12:	f8da 3000 	ldr.w	r3, [sl]
 8001f16:	4631      	mov	r1, r6
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	4650      	mov	r0, sl
 8001f1c:	4798      	blx	r3
      } while (++width != 0);
 8001f1e:	3501      	adds	r5, #1
 8001f20:	d1f7      	bne.n	8001f12 <chprintf+0x4e2>
    while (--i >= 0) {
 8001f22:	f1b8 0f00 	cmp.w	r8, #0
 8001f26:	eba9 0904 	sub.w	r9, r9, r4
 8001f2a:	f6bf ae97 	bge.w	8001c5c <chprintf+0x22c>
 8001f2e:	e59c      	b.n	8001a6a <chprintf+0x3a>
      if ((*s == '-' || *s == '+') && filler == '0') {
 8001f30:	2e30      	cmp	r6, #48	; 0x30
 8001f32:	d1ee      	bne.n	8001f12 <chprintf+0x4e2>
        streamPut(chp, (uint8_t)*s++);
 8001f34:	f8da 2000 	ldr.w	r2, [sl]
 8001f38:	4650      	mov	r0, sl
 8001f3a:	68d2      	ldr	r2, [r2, #12]
 8001f3c:	3701      	adds	r7, #1
        n++;
 8001f3e:	f109 0901 	add.w	r9, r9, #1
    while (--i >= 0) {
 8001f42:	f108 38ff 	add.w	r8, r8, #4294967295
        streamPut(chp, (uint8_t)*s++);
 8001f46:	4790      	blx	r2
        i--;
 8001f48:	e7e3      	b.n	8001f12 <chprintf+0x4e2>
        *p++ = '-';
 8001f4a:	232d      	movs	r3, #45	; 0x2d
 8001f4c:	f88d 3018 	strb.w	r3, [sp, #24]
        l = -l;
 8001f50:	4249      	negs	r1, r1
        *p++ = '-';
 8001f52:	f10d 0319 	add.w	r3, sp, #25
 8001f56:	af06      	add	r7, sp, #24
 8001f58:	e6ae      	b.n	8001cb8 <chprintf+0x288>
    if (width < 0) {
 8001f5a:	f8dd 8000 	ldr.w	r8, [sp]
      width = -width;
 8001f5e:	462c      	mov	r4, r5
    if (width < 0) {
 8001f60:	af06      	add	r7, sp, #24
 8001f62:	e7d1      	b.n	8001f08 <chprintf+0x4d8>
        *p++ = '-';
 8001f64:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 8001f66:	eeb1 8a48 	vneg.f32	s16, s16
        *p++ = '-';
 8001f6a:	f88d 3018 	strb.w	r3, [sp, #24]
 8001f6e:	f10d 0819 	add.w	r8, sp, #25
 8001f72:	af06      	add	r7, sp, #24
 8001f74:	e739      	b.n	8001dea <chprintf+0x3ba>
        s = "(null)";
 8001f76:	4f18      	ldr	r7, [pc, #96]	; (8001fd8 <chprintf+0x5a8>)
      if (precision == 0) {
 8001f78:	2d00      	cmp	r5, #0
 8001f7a:	f47f af0a 	bne.w	8001d92 <chprintf+0x362>
      for (p = s; *p && (--precision >= 0); p++)
 8001f7e:	f647 75fe 	movw	r5, #32766	; 0x7ffe
 8001f82:	e709      	b.n	8001d98 <chprintf+0x368>
    switch (c) {
 8001f84:	f04f 0c0a 	mov.w	ip, #10
 8001f88:	e6bb      	b.n	8001d02 <chprintf+0x2d2>
 8001f8a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8001fc8 <chprintf+0x598>
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <chprintf+0x5ac>)
 8001f90:	4d13      	ldr	r5, [pc, #76]	; (8001fe0 <chprintf+0x5b0>)
 8001f92:	9303      	str	r3, [sp, #12]
 8001f94:	eeb0 aa47 	vmov.f32	s20, s14
 8001f98:	eef0 aa67 	vmov.f32	s21, s15
 8001f9c:	e73e      	b.n	8001e1c <chprintf+0x3ec>
      for (p = s; *p && (--precision >= 0); p++)
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d1ed      	bne.n	8001f7e <chprintf+0x54e>
    if (left_align == false) {
 8001fa2:	9b00      	ldr	r3, [sp, #0]
 8001fa4:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8001fa8:	b91b      	cbnz	r3, 8001fb2 <chprintf+0x582>
    if (width < 0) {
 8001faa:	2c00      	cmp	r4, #0
      width = -width;
 8001fac:	f1c5 0500 	rsb	r5, r5, #0
    if (width < 0) {
 8001fb0:	dc1a      	bgt.n	8001fe8 <chprintf+0x5b8>
    if (left_align == false) {
 8001fb2:	2620      	movs	r6, #32
 8001fb4:	e661      	b.n	8001c7a <chprintf+0x24a>
    p = tmpbuf;
 8001fb6:	af06      	add	r7, sp, #24
 8001fb8:	463b      	mov	r3, r7
 8001fba:	e67d      	b.n	8001cb8 <chprintf+0x288>
 8001fbc:	af06      	add	r7, sp, #24
 8001fbe:	46b8      	mov	r8, r7
 8001fc0:	e713      	b.n	8001dea <chprintf+0x3ba>
 8001fc2:	bf00      	nop
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	41cdcd65 	.word	0x41cdcd65
 8001fd0:	cccccccd 	.word	0xcccccccd
 8001fd4:	08004950 	.word	0x08004950
 8001fd8:	08004708 	.word	0x08004708
 8001fdc:	3b9aca00 	.word	0x3b9aca00
 8001fe0:	05f5e100 	.word	0x05f5e100
  int n = 0;
 8001fe4:	4689      	mov	r9, r1
  return formatted_bytes;
 8001fe6:	e621      	b.n	8001c2c <chprintf+0x1fc>
      width = -width;
 8001fe8:	462c      	mov	r4, r5
    if (width < 0) {
 8001fea:	f04f 38ff 	mov.w	r8, #4294967295
 8001fee:	2620      	movs	r6, #32
 8001ff0:	e78a      	b.n	8001f08 <chprintf+0x4d8>
 8001ff2:	bf00      	nop
	...

08002000 <get_temp_internal.isra.0>:
  ADC_SQR1_NUM_CH(MY_NUM_CH),       /* SQR1 */
  0,                                /* SQR2 */
  ADC_SQR3_SQ1_N (ADC_CHANNEL_SENSOR)/* SQR3 */
};

float get_temp_internal(void){
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002004:	ed2d 8b04 	vpush	{d8-d9}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002008:	2330      	movs	r3, #48	; 0x30
 800200a:	b083      	sub	sp, #12
 800200c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002010:	4ca8      	ldr	r4, [pc, #672]	; (80022b4 <get_temp_internal.isra.0+0x2b4>)
 8002012:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8002016:	4313      	orrs	r3, r2
 8002018:	f040 8145 	bne.w	80022a6 <get_temp_internal.isra.0+0x2a6>
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 800201c:	4da6      	ldr	r5, [pc, #664]	; (80022b8 <get_temp_internal.isra.0+0x2b8>)
  if (adcp->state == ADC_STOP) {
 800201e:	782a      	ldrb	r2, [r5, #0]
 8002020:	606b      	str	r3, [r5, #4]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002022:	2101      	movs	r1, #1
 8002024:	428a      	cmp	r2, r1
 8002026:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 800202a:	f000 80e6 	beq.w	80021fa <get_temp_internal.isra.0+0x1fa>
#else
  adc_lld_start(adcp);
  msg = HAL_RET_SUCCESS;
#endif
  if (msg == HAL_RET_SUCCESS) {
    adcp->state = ADC_READY;
 800202e:	2302      	movs	r3, #2
 8002030:	702b      	strb	r3, [r5, #0]
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002032:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002036:	2b00      	cmp	r3, #0
 8002038:	f340 8132 	ble.w	80022a0 <get_temp_internal.isra.0+0x2a0>
  oip->dbg.lock_cnt = (cnt_t)0;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002042:	f383 8811 	msr	BASEPRI, r3
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
 8002046:	4a9d      	ldr	r2, [pc, #628]	; (80022bc <get_temp_internal.isra.0+0x2bc>)
 8002048:	6853      	ldr	r3, [r2, #4]
 800204a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800204e:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002052:	6053      	str	r3, [r2, #4]
 8002054:	f38b 8811 	msr	BASEPRI, fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002058:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 800205c:	4313      	orrs	r3, r2
 800205e:	f040 8122 	bne.w	80022a6 <get_temp_internal.isra.0+0x2a6>
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8002062:	2603      	movs	r6, #3
  adcp->samples  = samples;
 8002064:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8002308 <get_temp_internal.isra.0+0x308>
  adcp->grpp     = grpp;
 8002068:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 800230c <get_temp_internal.isra.0+0x30c>
  adcp->samples  = samples;
 800206c:	f8c5 9008 	str.w	r9, [r5, #8]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002070:	2701      	movs	r7, #1
  adcp->depth    = depth;
 8002072:	f04f 0a0a 	mov.w	sl, #10
 8002076:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
  adcp->state    = ADC_ACTIVE;
 800207a:	702e      	strb	r6, [r5, #0]
  adcp->grpp     = grpp;
 800207c:	f8c5 8010 	str.w	r8, [r5, #16]
  adcp->depth    = depth;
 8002080:	f8c5 a00c 	str.w	sl, [r5, #12]
  adc_lld_start_conversion(adcp);
 8002084:	f7fe fde4 	bl	8000c50 <adc_lld_start_conversion.constprop.0>
  return __sch_get_currthread();
 8002088:	68e3      	ldr	r3, [r4, #12]
  tp->u.wttrp = trp;
 800208a:	4a8d      	ldr	r2, [pc, #564]	; (80022c0 <get_temp_internal.isra.0+0x2c0>)
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
  *trp = tp;
 800208e:	616b      	str	r3, [r5, #20]
    chSchGoSleepS(newstate);
 8002090:	4630      	mov	r0, r6
 8002092:	f7ff f865 	bl	8001160 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002096:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800209a:	2a00      	cmp	r2, #0
 800209c:	f040 8100 	bne.w	80022a0 <get_temp_internal.isra.0+0x2a0>
 80020a0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f340 80fb 	ble.w	80022a0 <get_temp_internal.isra.0+0x2a0>
  oip->dbg.lock_cnt = (cnt_t)0;
 80020aa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 80020ae:	f382 8811 	msr	BASEPRI, r2
 80020b2:	f38b 8811 	msr	BASEPRI, fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80020b6:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f040 80f3 	bne.w	80022a6 <get_temp_internal.isra.0+0x2a6>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80020c0:	4651      	mov	r1, sl
 80020c2:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 80020c4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
 80020c8:	f7ff f87a 	bl	80011c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80020cc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	f040 80e5 	bne.w	80022a0 <get_temp_internal.isra.0+0x2a0>
 80020d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f340 80e0 	ble.w	80022a0 <get_temp_internal.isra.0+0x2a0>
  oip->dbg.lock_cnt = (cnt_t)0;
 80020e0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 80020e4:	f382 8811 	msr	BASEPRI, r2
 80020e8:	f38b 8811 	msr	BASEPRI, fp
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80020ec:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f040 80d8 	bne.w	80022a6 <get_temp_internal.isra.0+0x2a6>
  adcp->depth    = depth;
 80020f6:	e9c5 9a02 	strd	r9, sl, [r5, #8]
  oip->dbg.lock_cnt = (cnt_t)1;
 80020fa:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
  adcp->grpp     = grpp;
 80020fe:	f8c5 8010 	str.w	r8, [r5, #16]
  adcp->state    = ADC_ACTIVE;
 8002102:	702e      	strb	r6, [r5, #0]
  adc_lld_start_conversion(adcp);
 8002104:	f7fe fda4 	bl	8000c50 <adc_lld_start_conversion.constprop.0>
  return __sch_get_currthread();
 8002108:	68e3      	ldr	r3, [r4, #12]
  tp->u.wttrp = trp;
 800210a:	4a6d      	ldr	r2, [pc, #436]	; (80022c0 <get_temp_internal.isra.0+0x2c0>)
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
  *trp = tp;
 800210e:	616b      	str	r3, [r5, #20]
 8002110:	4630      	mov	r0, r6
 8002112:	f7ff f825 	bl	8001160 <chSchGoSleepS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002116:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80c0 	bne.w	80022a0 <get_temp_internal.isra.0+0x2a0>
 8002120:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002124:	2b00      	cmp	r3, #0
 8002126:	f340 80bb 	ble.w	80022a0 <get_temp_internal.isra.0+0x2a0>
  oip->dbg.lock_cnt = (cnt_t)0;
 800212a:	2200      	movs	r2, #0
 800212c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8002130:	f382 8811 	msr	BASEPRI, r2
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32DisableTSVREFE(void) {

  ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002134:	4c61      	ldr	r4, [pc, #388]	; (80022bc <get_temp_internal.isra.0+0x2bc>)
 8002136:	6861      	ldr	r1, [r4, #4]
 8002138:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800213c:	464b      	mov	r3, r9
 800213e:	f109 0014 	add.w	r0, r9, #20
 8002142:	6061      	str	r1, [r4, #4]
  adcSTM32DisableTSVREFE();

  uint32_t mean = 0;
  for(uint16_t i=0; i<MY_SAMPLES; ++i){
    //chprintf(bsp, "sample %d = %d\n", i, adc_buf[i]);
    mean += adc_buf[i];
 8002144:	f833 1b02 	ldrh.w	r1, [r3], #2
  for(uint16_t i=0; i<MY_SAMPLES; ++i){
 8002148:	4298      	cmp	r0, r3
    mean += adc_buf[i];
 800214a:	440a      	add	r2, r1
  for(uint16_t i=0; i<MY_SAMPLES; ++i){
 800214c:	d1fa      	bne.n	8002144 <get_temp_internal.isra.0+0x144>
  }

  float t = (float)mean/(float)MY_SAMPLES;
 800214e:	ee07 2a90 	vmov	s15, r2
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800215a:	ee87 8a87 	vdiv.f32	s16, s15, s14
  chprintf(bsp,"mean = %f\n", t);
 800215e:	ee18 0a10 	vmov	r0, s16
 8002162:	f7fe fc17 	bl	8000994 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4856      	ldr	r0, [pc, #344]	; (80022c4 <get_temp_internal.isra.0+0x2c4>)
 800216c:	4956      	ldr	r1, [pc, #344]	; (80022c8 <get_temp_internal.isra.0+0x2c8>)
 800216e:	f7ff fc5f 	bl	8001a30 <chprintf>

  float cal30 = *TEMPSENSOR_CAL1_ADDR;
 8002172:	4b56      	ldr	r3, [pc, #344]	; (80022cc <get_temp_internal.isra.0+0x2cc>)
  float cal110 = *TEMPSENSOR_CAL2_ADDR;
  //chprintf(bsp,"cal30 = %f, cal110 = %f\n", cal30, cal110);


  float slope = (cal110-cal30)/80.0;
 8002174:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80022d0 <get_temp_internal.isra.0+0x2d0>
  float cal30 = *TEMPSENSOR_CAL1_ADDR;
 8002178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  float cal110 = *TEMPSENSOR_CAL2_ADDR;
 800217a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
  float cal30 = *TEMPSENSOR_CAL1_ADDR;
 800217c:	ee08 2a90 	vmov	s17, r2
  float cal110 = *TEMPSENSOR_CAL2_ADDR;
 8002180:	ee07 3a90 	vmov	s15, r3
  float cal30 = *TEMPSENSOR_CAL1_ADDR;
 8002184:	eef8 8a68 	vcvt.f32.u32	s17, s17
  float cal110 = *TEMPSENSOR_CAL2_ADDR;
 8002188:	eef8 7a67 	vcvt.f32.u32	s15, s15
  float slope = (cal110-cal30)/80.0;
 800218c:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8002190:	ee87 9a87 	vdiv.f32	s18, s15, s14
  chprintf(bsp,"slope = %f [counts], %f [mv/deg]\n", slope, slope*3300/4096.0);
 8002194:	ee19 0a10 	vmov	r0, s18
 8002198:	f7fe fbfc 	bl	8000994 <__aeabi_f2d>
 800219c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80022d4 <get_temp_internal.isra.0+0x2d4>
 80021a0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80021a4:	4604      	mov	r4, r0
 80021a6:	ee17 0a90 	vmov	r0, s15
 80021aa:	460d      	mov	r5, r1
 80021ac:	f7fe fbf2 	bl	8000994 <__aeabi_f2d>
 80021b0:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <get_temp_internal.isra.0+0x2d8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	f7fe f960 	bl	8000478 <__aeabi_dmul>
 80021b8:	4606      	mov	r6, r0
 80021ba:	460f      	mov	r7, r1
 80021bc:	4622      	mov	r2, r4
 80021be:	462b      	mov	r3, r5
 80021c0:	e9cd 6700 	strd	r6, r7, [sp]
 80021c4:	4945      	ldr	r1, [pc, #276]	; (80022dc <get_temp_internal.isra.0+0x2dc>)
 80021c6:	483f      	ldr	r0, [pc, #252]	; (80022c4 <get_temp_internal.isra.0+0x2c4>)
 80021c8:	f7ff fc32 	bl	8001a30 <chprintf>

  float temp = (t - cal30) / slope + 30.0;
 80021cc:	ee38 8a68 	vsub.f32	s16, s16, s17
 80021d0:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80021d4:	ee88 7a09 	vdiv.f32	s14, s16, s18
  chprintf(bsp,"temp = %f\n", temp);
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	ee17 0a90 	vmov	r0, s15
 80021e0:	f7fe fbd8 	bl	8000994 <__aeabi_f2d>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4836      	ldr	r0, [pc, #216]	; (80022c4 <get_temp_internal.isra.0+0x2c4>)
 80021ea:	493d      	ldr	r1, [pc, #244]	; (80022e0 <get_temp_internal.isra.0+0x2e0>)

  //TODO calibrate ADC full scale with vrefint
  //VREFIN_CAL, Raw data acquired at temperature of, 30 °C VDDA = 3.3 V, 0x1FFF 7A2A - 0x1FFF 7A2B
  return temp;
}
 80021ec:	b003      	add	sp, #12
 80021ee:	ecbd 8b04 	vpop	{d8-d9}
 80021f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(bsp,"temp = %f\n", temp);
 80021f6:	f7ff bc1b 	b.w	8001a30 <chprintf>
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 80021fa:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <get_temp_internal.isra.0+0x2e4>)
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	04c8      	lsls	r0, r1, #19
 8002200:	d454      	bmi.n	80022ac <get_temp_internal.isra.0+0x2ac>
      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA1(true);
      }
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
        rccEnableDMA2(true);
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <get_temp_internal.isra.0+0x2e8>)
      dma.streams[i].func  = func;
 8002204:	4839      	ldr	r0, [pc, #228]	; (80022ec <get_temp_internal.isra.0+0x2ec>)
      dma.allocated_mask  |= mask;
 8002206:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800220a:	6011      	str	r1, [r2, #0]
        rccEnableDMA2(true);
 800220c:	6b19      	ldr	r1, [r3, #48]	; 0x30
      dma.streams[i].func  = func;
 800220e:	6650      	str	r0, [r2, #100]	; 0x64
        rccEnableDMA2(true);
 8002210:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002214:	6319      	str	r1, [r3, #48]	; 0x30
 8002216:	6d19      	ldr	r1, [r3, #80]	; 0x50
        rccEnableDMAMUX(true);
      }
#endif

      /* Putting the stream in a safe state.*/
      dmaStreamDisable(dmastp);
 8002218:	4835      	ldr	r0, [pc, #212]	; (80022f0 <get_temp_internal.isra.0+0x2f0>)
      dma.streams[i].param = param;
 800221a:	6695      	str	r5, [r2, #104]	; 0x68
        rccEnableDMA2(true);
 800221c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002220:	6519      	str	r1, [r3, #80]	; 0x50
 8002222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8002224:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002226:	f023 031f 	bic.w	r3, r3, #31
 800222a:	6703      	str	r3, [r0, #112]	; 0x70
 800222c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800222e:	f012 0201 	ands.w	r2, r2, #1
 8002232:	d1fb      	bne.n	800222c <get_temp_internal.isra.0+0x22c>
 8002234:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8002310 <get_temp_internal.isra.0+0x310>
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002238:	492e      	ldr	r1, [pc, #184]	; (80022f4 <get_temp_internal.isra.0+0x2f4>)
      rccEnableADC1(true);
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <get_temp_internal.isra.0+0x2e8>)
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 800223c:	4f2e      	ldr	r7, [pc, #184]	; (80022f8 <get_temp_internal.isra.0+0x2f8>)
 800223e:	f04f 0e3d 	mov.w	lr, #61	; 0x3d
 8002242:	f8cc e40c 	str.w	lr, [ip, #1036]	; 0x40c
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002246:	f04f 0c21 	mov.w	ip, #33	; 0x21
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800224a:	6702      	str	r2, [r0, #112]	; 0x70
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800224c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8002250:	f8c0 c084 	str.w	ip, [r0, #132]	; 0x84
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002254:	f04f 0c60 	mov.w	ip, #96	; 0x60
 8002258:	f881 c33c 	strb.w	ip, [r1, #828]	; 0x33c
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800225c:	f8c1 6184 	str.w	r6, [r1, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002260:	604e      	str	r6, [r1, #4]
 8002262:	6787      	str	r7, [r0, #120]	; 0x78
      rccEnableADC1(true);
 8002264:	6c59      	ldr	r1, [r3, #68]	; 0x44
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 8002266:	4e25      	ldr	r6, [pc, #148]	; (80022fc <get_temp_internal.isra.0+0x2fc>)
      rccEnableADC1(true);
 8002268:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800226c:	6459      	str	r1, [r3, #68]	; 0x44
 800226e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002270:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002274:	6659      	str	r1, [r3, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 8002276:	4911      	ldr	r1, [pc, #68]	; (80022bc <get_temp_internal.isra.0+0x2bc>)
      rccEnableADC1(true);
 8002278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
 800227a:	684b      	ldr	r3, [r1, #4]
 800227c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	604b      	str	r3, [r1, #4]
    adcp->adc->CR1 = 0;
 8002286:	6aab      	ldr	r3, [r5, #40]	; 0x28
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002288:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 800228c:	62ee      	str	r6, [r5, #44]	; 0x2c
    adcp->adc->CR2 = ADC_CR2_ADON;
 800228e:	2001      	movs	r0, #1
    adcp->adc->CR1 = 0;
 8002290:	605a      	str	r2, [r3, #4]
    adcp->adc->CR2 = 0;
 8002292:	609a      	str	r2, [r3, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
 8002294:	6098      	str	r0, [r3, #8]
    adcp->state = ADC_READY;
 8002296:	2302      	movs	r3, #2
 8002298:	702b      	strb	r3, [r5, #0]
 800229a:	2900      	cmp	r1, #0
 800229c:	f43f aec9 	beq.w	8002032 <get_temp_internal.isra.0+0x32>
    chSysHalt("SV#5");
 80022a0:	4817      	ldr	r0, [pc, #92]	; (8002300 <get_temp_internal.isra.0+0x300>)
 80022a2:	f7fe fc8d 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#4");
 80022a6:	4817      	ldr	r0, [pc, #92]	; (8002304 <get_temp_internal.isra.0+0x304>)
 80022a8:	f7fe fc8a 	bl	8000bc0 <chSysHalt>
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 80022ac:	681a      	ldr	r2, [r3, #0]
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
 80022ae:	62eb      	str	r3, [r5, #44]	; 0x2c
 80022b0:	deff      	udf	#255	; 0xff
 80022b2:	bf00      	nop
 80022b4:	20000910 	.word	0x20000910
 80022b8:	20000800 	.word	0x20000800
 80022bc:	40012300 	.word	0x40012300
 80022c0:	20000814 	.word	0x20000814
 80022c4:	2000087c 	.word	0x2000087c
 80022c8:	08004710 	.word	0x08004710
 80022cc:	1fff7a00 	.word	0x1fff7a00
 80022d0:	42a00000 	.word	0x42a00000
 80022d4:	454e4000 	.word	0x454e4000
 80022d8:	3f300000 	.word	0x3f300000
 80022dc:	0800471c 	.word	0x0800471c
 80022e0:	08004740 	.word	0x08004740
 80022e4:	20000c18 	.word	0x20000c18
 80022e8:	40023800 	.word	0x40023800
 80022ec:	08001031 	.word	0x08001031
 80022f0:	40026400 	.word	0x40026400
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	4001204c 	.word	0x4001204c
 80022fc:	080048b4 	.word	0x080048b4
 8002300:	080046f8 	.word	0x080046f8
 8002304:	080046c8 	.word	0x080046c8
 8002308:	200008fc 	.word	0x200008fc
 800230c:	080048e4 	.word	0x080048e4
 8002310:	40026000 	.word	0x40026000
	...

08002320 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
	...

08002330 <__late_init>:
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
	...

08002340 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8002340:	e7fe      	b.n	8002340 <__default_exit>
 8002342:	bf00      	nop
	...

08002350 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	4d15      	ldr	r5, [pc, #84]	; (80023a8 <__init_ram_areas+0x58>)
 8002354:	4f15      	ldr	r7, [pc, #84]	; (80023ac <__init_ram_areas+0x5c>)
 8002356:	4916      	ldr	r1, [pc, #88]	; (80023b0 <__init_ram_areas+0x60>)
 8002358:	4816      	ldr	r0, [pc, #88]	; (80023b4 <__init_ram_areas+0x64>)
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <__init_ram_areas+0x68>)
 800235c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8002360:	4281      	cmp	r1, r0
 8002362:	d90d      	bls.n	8002380 <__init_ram_areas+0x30>
 8002364:	3a04      	subs	r2, #4
 8002366:	4603      	mov	r3, r0
      *p = *tp;
 8002368:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800236c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 8002370:	4299      	cmp	r1, r3
 8002372:	d8f9      	bhi.n	8002368 <__init_ram_areas+0x18>
      p++;
 8002374:	1e4b      	subs	r3, r1, #1
 8002376:	1a1b      	subs	r3, r3, r0
 8002378:	f023 0303 	bic.w	r3, r3, #3
 800237c:	3304      	adds	r3, #4
 800237e:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002380:	4287      	cmp	r7, r0
 8002382:	d907      	bls.n	8002394 <__init_ram_areas+0x44>
      *p = 0;
 8002384:	1e7a      	subs	r2, r7, #1
 8002386:	1a12      	subs	r2, r2, r0
 8002388:	f022 0203 	bic.w	r2, r2, #3
 800238c:	3204      	adds	r2, #4
 800238e:	2100      	movs	r1, #0
 8002390:	f001 ffc0 	bl	8004314 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8002394:	42a5      	cmp	r5, r4
 8002396:	d005      	beq.n	80023a4 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 8002398:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 800239c:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 80023a0:	3510      	adds	r5, #16
 80023a2:	e7dd      	b.n	8002360 <__init_ram_areas+0x10>
#endif
}
 80023a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023a6:	bf00      	nop
 80023a8:	08004974 	.word	0x08004974
 80023ac:	20001870 	.word	0x20001870
 80023b0:	20001870 	.word	0x20001870
 80023b4:	20001870 	.word	0x20001870
 80023b8:	08004a24 	.word	0x08004a24
 80023bc:	00000000 	.word	0x00000000

080023c0 <__dbg_check_unlock>:
void __dbg_check_unlock(void) {
 80023c0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <__dbg_check_unlock+0x20>)
 80023c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023c8:	b932      	cbnz	r2, 80023d8 <__dbg_check_unlock+0x18>
 80023ca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80023ce:	2900      	cmp	r1, #0
 80023d0:	dd02      	ble.n	80023d8 <__dbg_check_unlock+0x18>
  oip->dbg.lock_cnt = (cnt_t)0;
 80023d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 80023d6:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <__dbg_check_unlock+0x24>)
 80023da:	f7fe fbf1 	bl	8000bc0 <chSysHalt>
 80023de:	bf00      	nop
 80023e0:	20000910 	.word	0x20000910
 80023e4:	080046f8 	.word	0x080046f8
	...

080023f0 <__dbg_check_lock>:
void __dbg_check_lock(void) {
 80023f0:	b508      	push	{r3, lr}
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <__dbg_check_lock+0x1c>)
 80023f4:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 80023f8:	430a      	orrs	r2, r1
 80023fa:	d103      	bne.n	8002404 <__dbg_check_lock+0x14>
  oip->dbg.lock_cnt = (cnt_t)1;
 80023fc:	2201      	movs	r2, #1
 80023fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8002402:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <__dbg_check_lock+0x20>)
 8002406:	f7fe fbdb 	bl	8000bc0 <chSysHalt>
 800240a:	bf00      	nop
 800240c:	20000910 	.word	0x20000910
 8002410:	080046c8 	.word	0x080046c8
	...

08002420 <ThdSerial>:
 8002420:	4d5d      	ldr	r5, [pc, #372]	; (8002598 <ThdSerial+0x178>)
 8002422:	495e      	ldr	r1, [pc, #376]	; (800259c <ThdSerial+0x17c>)
 8002424:	68ea      	ldr	r2, [r5, #12]
static THD_FUNCTION(ThdSerial, arg) {
 8002426:	b580      	push	{r7, lr}
 8002428:	2330      	movs	r3, #48	; 0x30
 800242a:	61d1      	str	r1, [r2, #28]
 800242c:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002430:	4c5b      	ldr	r4, [pc, #364]	; (80025a0 <ThdSerial+0x180>)
 */
static inline void chSysLock(void) {

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
 8002432:	f7ff ffdd 	bl	80023f0 <__dbg_check_lock>
 8002436:	7a23      	ldrb	r3, [r4, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	f000 809d 	beq.w	8002578 <ThdSerial+0x158>
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800243e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8002440:	4958      	ldr	r1, [pc, #352]	; (80025a4 <ThdSerial+0x184>)
 8002442:	f503 4261 	add.w	r2, r3, #57600	; 0xe100
 8002446:	fba1 1202 	umull	r1, r2, r1, r2
  USART_TypeDef *u = sdp->usart;
 800244a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800244c:	0c12      	lsrs	r2, r2, #16
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800244e:	2140      	movs	r1, #64	; 0x40
  u->BRR = brr;
 8002450:	609a      	str	r2, [r3, #8]
  u->SR = 0;
 8002452:	2600      	movs	r6, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002454:	6119      	str	r1, [r3, #16]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002456:	f242 122c 	movw	r2, #8492	; 0x212c
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800245a:	2101      	movs	r1, #1
 800245c:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800245e:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 8002460:	601e      	str	r6, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002462:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002464:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8002466:	22ff      	movs	r2, #255	; 0xff
#else
  sd_lld_start(sdp, config);
  msg = HAL_RET_SUCCESS;
#endif
  if (msg == HAL_RET_SUCCESS) {
    sdp->state = SD_READY;
 8002468:	2302      	movs	r3, #2
 800246a:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
 800246e:	7223      	strb	r3, [r4, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  __dbg_check_unlock();
 8002470:	f7ff ffa6 	bl	80023c0 <__dbg_check_unlock>
 8002474:	f386 8811 	msr	BASEPRI, r6
  sdWrite(&SD2, (uint8_t*)"Hohoho\n", 8);
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	494a      	ldr	r1, [pc, #296]	; (80025a8 <ThdSerial+0x188>)
 800247e:	484b      	ldr	r0, [pc, #300]	; (80025ac <ThdSerial+0x18c>)
 8002480:	2208      	movs	r2, #8
 8002482:	f7ff f8ed 	bl	8001660 <oqWriteTimeout>
  chprintf(bsp, "I2C_addr = %d\n", temp);
 8002486:	4632      	mov	r2, r6
 8002488:	4949      	ldr	r1, [pc, #292]	; (80025b0 <ThdSerial+0x190>)
 800248a:	4845      	ldr	r0, [pc, #276]	; (80025a0 <ThdSerial+0x180>)
 800248c:	f7ff fad0 	bl	8001a30 <chprintf>
  chprintf(bsp, "I2C_addr = 0x%x\n", temp);
 8002490:	4632      	mov	r2, r6
 8002492:	4948      	ldr	r1, [pc, #288]	; (80025b4 <ThdSerial+0x194>)
 8002494:	4842      	ldr	r0, [pc, #264]	; (80025a0 <ThdSerial+0x180>)
  p->next       = qp;
 8002496:	4e48      	ldr	r6, [pc, #288]	; (80025b8 <ThdSerial+0x198>)
 8002498:	f7ff faca 	bl	8001a30 <chprintf>
  chprintf(bsp, "%f \n", 1.54);
 800249c:	a33c      	add	r3, pc, #240	; (adr r3, 8002590 <ThdSerial+0x170>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	4946      	ldr	r1, [pc, #280]	; (80025bc <ThdSerial+0x19c>)
 80024a4:	483e      	ldr	r0, [pc, #248]	; (80025a0 <ThdSerial+0x180>)
 80024a6:	f7ff fac3 	bl	8001a30 <chprintf>
  get_temp_internal();
 80024aa:	f7ff fda9 	bl	8002000 <get_temp_internal.isra.0>
      sdPut(&SD2, tkn);
 80024ae:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80025ac <ThdSerial+0x18c>
 80024b2:	2730      	movs	r7, #48	; 0x30
 80024b4:	f387 8811 	msr	BASEPRI, r7
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80024b8:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 80024bc:	4313      	orrs	r3, r2
 80024be:	d155      	bne.n	800256c <ThdSerial+0x14c>
  oip->dbg.lock_cnt = (cnt_t)1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
}
 80024c6:	e00c      	b.n	80024e2 <ThdSerial+0xc2>
 80024c8:	68eb      	ldr	r3, [r5, #12]
  p->prev       = qp->prev;
 80024ca:	6922      	ldr	r2, [r4, #16]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80024cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024d0:	e9c3 6200 	strd	r6, r2, [r3]
 80024d4:	2004      	movs	r0, #4
  p->prev->next = p;
 80024d6:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80024d8:	6123      	str	r3, [r4, #16]
 80024da:	f7fe fe71 	bl	80011c0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80024de:	2800      	cmp	r0, #0
 80024e0:	db30      	blt.n	8002544 <ThdSerial+0x124>
  while (iqIsEmptyI(iqp)) {
 80024e2:	6963      	ldr	r3, [r4, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <ThdSerial+0xa8>
  iqp->q_counter--;
 80024e8:	6963      	ldr	r3, [r4, #20]
  b = *iqp->q_rdptr++;
 80024ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
  iqp->q_counter--;
 80024ec:	3b01      	subs	r3, #1
 80024ee:	6163      	str	r3, [r4, #20]
  b = *iqp->q_rdptr++;
 80024f0:	1c53      	adds	r3, r2, #1
 80024f2:	6263      	str	r3, [r4, #36]	; 0x24
 80024f4:	7817      	ldrb	r7, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 80024f6:	69e2      	ldr	r2, [r4, #28]
 80024f8:	4293      	cmp	r3, r2
    iqp->q_rdptr = iqp->q_buffer;
 80024fa:	bf24      	itt	cs
 80024fc:	69a3      	ldrcs	r3, [r4, #24]
 80024fe:	6263      	strcs	r3, [r4, #36]	; 0x24
  if (iqp->q_notify != NULL) {
 8002500:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002502:	b10b      	cbz	r3, 8002508 <ThdSerial+0xe8>
    iqp->q_notify(iqp);
 8002504:	4630      	mov	r0, r6
 8002506:	4798      	blx	r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002508:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800250c:	bb8b      	cbnz	r3, 8002572 <ThdSerial+0x152>
 800250e:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 8002512:	2a00      	cmp	r2, #0
 8002514:	dd2d      	ble.n	8002572 <ThdSerial+0x152>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002516:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f04f 32ff 	mov.w	r2, #4294967295
 8002522:	4639      	mov	r1, r7
 8002524:	4640      	mov	r0, r8
      if((tkn >= '0') && (tkn <= '2')) {
 8002526:	3f30      	subs	r7, #48	; 0x30
      sdPut(&SD2, tkn);
 8002528:	f7ff f832 	bl	8001590 <oqPutTimeout>
      if((tkn >= '0') && (tkn <= '2')) {
 800252c:	2f02      	cmp	r7, #2
 800252e:	d8c0      	bhi.n	80024b2 <ThdSerial+0x92>
 8002530:	2330      	movs	r3, #48	; 0x30
 8002532:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002536:	e9d5 3222 	ldrd	r3, r2, [r5, #136]	; 0x88
 800253a:	4313      	orrs	r3, r2
 800253c:	d116      	bne.n	800256c <ThdSerial+0x14c>
 800253e:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 8002542:	e7b4      	b.n	80024ae <ThdSerial+0x8e>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002544:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8002548:	b99b      	cbnz	r3, 8002572 <ThdSerial+0x152>
 800254a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800254e:	2a00      	cmp	r2, #0
 8002550:	dd0f      	ble.n	8002572 <ThdSerial+0x152>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002552:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 8002556:	f383 8811 	msr	BASEPRI, r3
    if(tkn != MSG_TIMEOUT) {
 800255a:	1c43      	adds	r3, r0, #1
 800255c:	d0aa      	beq.n	80024b4 <ThdSerial+0x94>
      sdPut(&SD2, tkn);
 800255e:	b2c1      	uxtb	r1, r0
 8002560:	f04f 32ff 	mov.w	r2, #4294967295
 8002564:	4640      	mov	r0, r8
 8002566:	f7ff f813 	bl	8001590 <oqPutTimeout>
      if((tkn >= '0') && (tkn <= '2')) {
 800256a:	e7a2      	b.n	80024b2 <ThdSerial+0x92>
    chSysHalt("SV#4");
 800256c:	4814      	ldr	r0, [pc, #80]	; (80025c0 <ThdSerial+0x1a0>)
 800256e:	f7fe fb27 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#5");
 8002572:	4814      	ldr	r0, [pc, #80]	; (80025c4 <ThdSerial+0x1a4>)
 8002574:	f7fe fb24 	bl	8000bc0 <chSysHalt>
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <ThdSerial+0x1a8>)
 800257a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
 8002582:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002584:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002588:	661a      	str	r2, [r3, #96]	; 0x60
 800258a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258c:	e757      	b.n	800243e <ThdSerial+0x1e>
 800258e:	bf00      	nop
 8002590:	0a3d70a4 	.word	0x0a3d70a4
 8002594:	3ff8a3d7 	.word	0x3ff8a3d7
 8002598:	20000910 	.word	0x20000910
 800259c:	0800474c 	.word	0x0800474c
 80025a0:	2000087c 	.word	0x2000087c
 80025a4:	91a2b3c5 	.word	0x91a2b3c5
 80025a8:	0800475c 	.word	0x0800475c
 80025ac:	200008ac 	.word	0x200008ac
 80025b0:	08004764 	.word	0x08004764
 80025b4:	08004774 	.word	0x08004774
 80025b8:	20000888 	.word	0x20000888
 80025bc:	08004788 	.word	0x08004788
 80025c0:	080046c8 	.word	0x080046c8
 80025c4:	080046f8 	.word	0x080046f8
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00000000 	.word	0x00000000

080025d0 <chThdCreateStatic.constprop.0.isra.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	4606      	mov	r6, r0
 80025d4:	460d      	mov	r5, r1
 80025d6:	4614      	mov	r4, r2
 80025d8:	2330      	movs	r3, #48	; 0x30
 80025da:	f383 8811 	msr	BASEPRI, r3
  __dbg_check_lock();
 80025de:	f7ff ff07 	bl	80023f0 <__dbg_check_lock>
  tp = threadref(((uint8_t *)wsp + size -
 80025e2:	f1a5 0c48 	sub.w	ip, r5, #72	; 0x48
 80025e6:	eb06 030c 	add.w	r3, r6, ip
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80025ea:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	2100      	movs	r1, #0
  tp->refs              = (trefs_t)1;
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80025f8:	e943 4109 	strd	r4, r1, [r3, #-36]	; 0x24
  tp->epending          = (eventmask_t)0;
 80025fc:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
  tp->name              = name;
 8002600:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <chThdCreateStatic.constprop.0.isra.0+0xe8>)
 8002602:	61da      	str	r2, [r3, #28]
  tp->state             = CH_STATE_WTSTART;
 8002604:	2102      	movs	r1, #2
  tp->owner             = oip;
 8002606:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <chThdCreateStatic.constprop.0.isra.0+0xec>)
  tp->state             = CH_STATE_WTSTART;
 8002608:	8499      	strh	r1, [r3, #36]	; 0x24
  tp->hdr.pqueue.prio   = prio;
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	6099      	str	r1, [r3, #8]
  p->prev       = qp->prev;
 800260e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002610:	4f2b      	ldr	r7, [pc, #172]	; (80026c0 <chThdCreateStatic.constprop.0.isra.0+0xf0>)
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8002612:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  tp->realprio          = prio;
 8002616:	6419      	str	r1, [r3, #64]	; 0x40
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002618:	f843 7c04 	str.w	r7, [r3, #-4]
  REG_INSERT(oip, tp);
 800261c:	f103 0010 	add.w	r0, r3, #16
  ch_queue_init(&tp->msgqueue);
 8002620:	f103 0130 	add.w	r1, r3, #48	; 0x30
  p->next       = qp;
 8002624:	f102 0728 	add.w	r7, r2, #40	; 0x28
  tp->wabase = (stkalign_t *)wsp;
 8002628:	621e      	str	r6, [r3, #32]
  tp->owner             = oip;
 800262a:	619a      	str	r2, [r3, #24]
  p->prev       = qp->prev;
 800262c:	615c      	str	r4, [r3, #20]
  p->next       = qp;
 800262e:	611f      	str	r7, [r3, #16]
  p->prev->next = p;
 8002630:	6020      	str	r0, [r4, #0]
  qp->prev = qp;
 8002632:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
  ch_list_init(&tp->waiting);
 8002636:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  qp->prev      = p;
 800263a:	62d0      	str	r0, [r2, #44]	; 0x2c
  lp->next = lp;
 800263c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800263e:	bb45      	cbnz	r5, 8002692 <chThdCreateStatic.constprop.0.isra.0+0xc2>
 8002640:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002644:	2900      	cmp	r1, #0
 8002646:	dd24      	ble.n	8002692 <chThdCreateStatic.constprop.0.isra.0+0xc2>
  thread_t *otp = __instance_get_currthread(oip);
 8002648:	68d1      	ldr	r1, [r2, #12]
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 800264a:	6898      	ldr	r0, [r3, #8]
 800264c:	688c      	ldr	r4, [r1, #8]
  ntp->u.rdymsg = msg;
 800264e:	629d      	str	r5, [r3, #40]	; 0x28
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8002650:	42a0      	cmp	r0, r4
 8002652:	d924      	bls.n	800269e <chThdCreateStatic.constprop.0.isra.0+0xce>
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8002654:	6988      	ldr	r0, [r1, #24]
  tp->state = CH_STATE_READY;
 8002656:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
    pqp = pqp->next;
 800265a:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio > p->prio));
 800265c:	6885      	ldr	r5, [r0, #8]
 800265e:	42ac      	cmp	r4, r5
 8002660:	d3fb      	bcc.n	800265a <chThdCreateStatic.constprop.0.isra.0+0x8a>
  p->prev       = pqp->prev;
 8002662:	6844      	ldr	r4, [r0, #4]
 8002664:	e9c1 0400 	strd	r0, r4, [r1]
  p->prev->next = p;
 8002668:	6021      	str	r1, [r4, #0]
    ntp->state = CH_STATE_CURRENT;
 800266a:	2401      	movs	r4, #1
  pqp->prev     = p;
 800266c:	6041      	str	r1, [r0, #4]
 800266e:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8002672:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002674:	f3ef 8209 	mrs	r2, PSP
    chSysSwitch(ntp, otp);
 8002678:	6a08      	ldr	r0, [r1, #32]
 800267a:	3a64      	subs	r2, #100	; 0x64
 800267c:	4290      	cmp	r0, r2
 800267e:	d80b      	bhi.n	8002698 <chThdCreateStatic.constprop.0.isra.0+0xc8>
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fe3f 	bl	8000304 <__port_switch>
  __dbg_check_unlock();
 8002686:	f7ff fe9b 	bl	80023c0 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800268a:	2300      	movs	r3, #0
 800268c:	f383 8811 	msr	BASEPRI, r3
}
 8002690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#11");
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <chThdCreateStatic.constprop.0.isra.0+0xf4>)
 8002694:	f7fe fa94 	bl	8000bc0 <chSysHalt>
 8002698:	480b      	ldr	r0, [pc, #44]	; (80026c8 <chThdCreateStatic.constprop.0.isra.0+0xf8>)
 800269a:	f7fe fa91 	bl	8000bc0 <chSysHalt>
  tp->state = CH_STATE_READY;
 800269e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
    pqp = pqp->next;
 80026a2:	6812      	ldr	r2, [r2, #0]
  } while (unlikely(pqp->prio >= p->prio));
 80026a4:	6891      	ldr	r1, [r2, #8]
 80026a6:	4288      	cmp	r0, r1
 80026a8:	d9fb      	bls.n	80026a2 <chThdCreateStatic.constprop.0.isra.0+0xd2>
  p->prev       = pqp->prev;
 80026aa:	6851      	ldr	r1, [r2, #4]
  p->next       = pqp;
 80026ac:	f846 200c 	str.w	r2, [r6, ip]
  p->prev       = pqp->prev;
 80026b0:	6059      	str	r1, [r3, #4]
  p->prev->next = p;
 80026b2:	600b      	str	r3, [r1, #0]
  pqp->prev     = p;
 80026b4:	6053      	str	r3, [r2, #4]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 80026b6:	e7e6      	b.n	8002686 <chThdCreateStatic.constprop.0.isra.0+0xb6>
 80026b8:	08004790 	.word	0x08004790
 80026bc:	20000910 	.word	0x20000910
 80026c0:	0800031d 	.word	0x0800031d
 80026c4:	080046e0 	.word	0x080046e0
 80026c8:	080046e8 	.word	0x080046e8
 80026cc:	00000000 	.word	0x00000000

080026d0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80026d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d4:	2130      	movs	r1, #48	; 0x30
 80026d6:	b083      	sub	sp, #12
 80026d8:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80026dc:	4caf      	ldr	r4, [pc, #700]	; (800299c <VectorD8+0x2cc>)
 80026de:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f2c0 814b 	blt.w	800297e <VectorD8+0x2ae>
 80026e8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80026ec:	2a00      	cmp	r2, #0
 80026ee:	f040 8146 	bne.w	800297e <VectorD8+0x2ae>
  oip->dbg.isr_cnt++;
 80026f2:	3301      	adds	r3, #1
 80026f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80026f8:	f382 8811 	msr	BASEPRI, r2
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 80026fc:	4ea8      	ldr	r6, [pc, #672]	; (80029a0 <VectorD8+0x2d0>)
 80026fe:	6f77      	ldr	r7, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8002700:	f8d7 900c 	ldr.w	r9, [r7, #12]
  uint16_t sr = u->SR;
 8002704:	f8d7 a000 	ldr.w	sl, [r7]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8002708:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800270c:	f040 80be 	bne.w	800288c <VectorD8+0x1bc>
 8002710:	2330      	movs	r3, #48	; 0x30
 8002712:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002716:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800271a:	2b00      	cmp	r3, #0
 800271c:	f340 812c 	ble.w	8002978 <VectorD8+0x2a8>
 8002720:	f8d4 808c 	ldr.w	r8, [r4, #140]	; 0x8c
 8002724:	f1b8 0f00 	cmp.w	r8, #0
 8002728:	f040 8126 	bne.w	8002978 <VectorD8+0x2a8>
  oip->dbg.lock_cnt = (cnt_t)1;
 800272c:	2301      	movs	r3, #1
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800272e:	f01a 0f2f 	tst.w	sl, #47	; 0x2f
 8002732:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  uint16_t sr = u->SR;
 8002736:	fa1f f58a 	uxth.w	r5, sl
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800273a:	d017      	beq.n	800276c <VectorD8+0x9c>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (ch_queue_notempty(&tqp->queue)) {
 800273c:	f8df a280 	ldr.w	sl, [pc, #640]	; 80029c0 <VectorD8+0x2f0>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8002740:	0728      	lsls	r0, r5, #28
 8002742:	d141      	bne.n	80027c8 <VectorD8+0xf8>
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8002744:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f896 b07c 	ldrb.w	fp, [r6, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 800274c:	d452      	bmi.n	80027f4 <VectorD8+0x124>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 800274e:	683b      	ldr	r3, [r7, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002750:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8002754:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002756:	d1f3      	bne.n	8002740 <VectorD8+0x70>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002758:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800275c:	2b00      	cmp	r3, #0
 800275e:	f340 8108 	ble.w	8002972 <VectorD8+0x2a2>
 8002762:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002766:	2b00      	cmp	r3, #0
 8002768:	f340 8103 	ble.w	8002972 <VectorD8+0x2a2>
  oip->dbg.lock_cnt = (cnt_t)0;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002772:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002776:	f019 0f80 	tst.w	r9, #128	; 0x80
 800277a:	f040 80ab 	bne.w	80028d4 <VectorD8+0x204>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800277e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002782:	d002      	beq.n	800278a <VectorD8+0xba>
 8002784:	066b      	lsls	r3, r5, #25
 8002786:	f100 811d 	bmi.w	80029c4 <VectorD8+0x2f4>
 800278a:	2230      	movs	r2, #48	; 0x30
 800278c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002790:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002794:	2b00      	cmp	r3, #0
 8002796:	f340 80fe 	ble.w	8002996 <VectorD8+0x2c6>
 800279a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800279e:	2900      	cmp	r1, #0
 80027a0:	f040 80f9 	bne.w	8002996 <VectorD8+0x2c6>
  oip->dbg.isr_cnt--;
 80027a4:	3b01      	subs	r3, #1
 80027a6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80027aa:	f381 8811 	msr	BASEPRI, r1
 80027ae:	f382 8811 	msr	BASEPRI, r2
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80027b2:	4b7c      	ldr	r3, [pc, #496]	; (80029a4 <VectorD8+0x2d4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80027ba:	f040 811b 	bne.w	80029f4 <VectorD8+0x324>
 80027be:	f383 8811 	msr	BASEPRI, r3
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 80027c2:	b003      	add	sp, #12
 80027c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sr & USART_SR_ORE)
 80027c8:	f3c5 00c0 	ubfx	r0, r5, #3, #1
 80027cc:	0200      	lsls	r0, r0, #8
  if (sr & USART_SR_PE)
 80027ce:	07e9      	lsls	r1, r5, #31
    sts |= SD_PARITY_ERROR;
 80027d0:	bf48      	it	mi
 80027d2:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 80027d6:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 80027d8:	bf48      	it	mi
 80027da:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 80027de:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 80027e0:	bf48      	it	mi
 80027e2:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80027e6:	f7fe fb6b 	bl	8000ec0 <chEvtBroadcastFlagsI.constprop.0>
    if (sr & USART_SR_RXNE)
 80027ea:	06a9      	lsls	r1, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f896 b07c 	ldrb.w	fp, [r6, #124]	; 0x7c
    if (sr & USART_SR_RXNE)
 80027f2:	d5ac      	bpl.n	800274e <VectorD8+0x7e>
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80027f4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	db44      	blt.n	8002886 <VectorD8+0x1b6>
 80027fc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002800:	2a00      	cmp	r2, #0
 8002802:	dd40      	ble.n	8002886 <VectorD8+0x1b6>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002804:	6972      	ldr	r2, [r6, #20]
 8002806:	2a00      	cmp	r2, #0
 8002808:	d030      	beq.n	800286c <VectorD8+0x19c>
  if (!iqIsFullI(iqp)) {
 800280a:	e9d6 1208 	ldrd	r1, r2, [r6, #32]
 800280e:	4291      	cmp	r1, r2
 8002810:	f000 80b8 	beq.w	8002984 <VectorD8+0x2b4>
    b = (uint8_t)u->DR & sdp->rxmask;
 8002814:	ea0b 0b03 	and.w	fp, fp, r3
    iqp->q_counter++;
 8002818:	6973      	ldr	r3, [r6, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	6173      	str	r3, [r6, #20]
    *iqp->q_wrptr++ = b;
 800281e:	1c4b      	adds	r3, r1, #1
 8002820:	6233      	str	r3, [r6, #32]
 8002822:	f881 b000 	strb.w	fp, [r1]
    if (iqp->q_wrptr >= iqp->q_top) {
 8002826:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
 800282a:	429a      	cmp	r2, r3
 800282c:	d24f      	bcs.n	80028ce <VectorD8+0x1fe>
  return (bool)(qp->next != qp);
 800282e:	68f3      	ldr	r3, [r6, #12]
 8002830:	4553      	cmp	r3, sl
 8002832:	d08c      	beq.n	800274e <VectorD8+0x7e>
  qp->next       = p->next;
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	60f2      	str	r2, [r6, #12]
  qp->next->prev = qp;
 8002838:	f8c2 a004 	str.w	sl, [r2, #4]
 800283c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002840:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
 8002844:	2a00      	cmp	r2, #0
 8002846:	db1e      	blt.n	8002886 <VectorD8+0x1b6>
 8002848:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800284c:	2a00      	cmp	r2, #0
 800284e:	dd1a      	ble.n	8002886 <VectorD8+0x1b6>
 8002850:	6999      	ldr	r1, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8002852:	6898      	ldr	r0, [r3, #8]
  tp->state = CH_STATE_READY;
 8002854:	f883 8024 	strb.w	r8, [r3, #36]	; 0x24
    pqp = pqp->next;
 8002858:	6809      	ldr	r1, [r1, #0]
  } while (unlikely(pqp->prio >= p->prio));
 800285a:	688a      	ldr	r2, [r1, #8]
 800285c:	4282      	cmp	r2, r0
 800285e:	d2fb      	bcs.n	8002858 <VectorD8+0x188>
  p->prev       = pqp->prev;
 8002860:	684a      	ldr	r2, [r1, #4]
  p->next       = pqp;
 8002862:	6019      	str	r1, [r3, #0]
  p->prev       = pqp->prev;
 8002864:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8002866:	6013      	str	r3, [r2, #0]
  pqp->prev     = p;
 8002868:	604b      	str	r3, [r1, #4]
 800286a:	e770      	b.n	800274e <VectorD8+0x7e>
 800286c:	2004      	movs	r0, #4
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	f7fe fb26 	bl	8000ec0 <chEvtBroadcastFlagsI.constprop.0>
 8002874:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8002878:	2a00      	cmp	r2, #0
 800287a:	db04      	blt.n	8002886 <VectorD8+0x1b6>
 800287c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002880:	9b01      	ldr	r3, [sp, #4]
 8002882:	2a00      	cmp	r2, #0
 8002884:	dcc1      	bgt.n	800280a <VectorD8+0x13a>
    chSysHalt("SV#10");
 8002886:	4848      	ldr	r0, [pc, #288]	; (80029a8 <VectorD8+0x2d8>)
 8002888:	f7fe f99a 	bl	8000bc0 <chSysHalt>
 800288c:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002890:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002894:	2b00      	cmp	r3, #0
 8002896:	dd6f      	ble.n	8002978 <VectorD8+0x2a8>
 8002898:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800289c:	2d00      	cmp	r5, #0
 800289e:	d16b      	bne.n	8002978 <VectorD8+0x2a8>
  oip->dbg.lock_cnt = (cnt_t)1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028a6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80028aa:	f7fe fb09 	bl	8000ec0 <chEvtBroadcastFlagsI.constprop.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80028ae:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    u->SR = ~USART_SR_LBD;
 80028b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	603a      	str	r2, [r7, #0]
 80028ba:	dd5a      	ble.n	8002972 <VectorD8+0x2a2>
 80028bc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dd56      	ble.n	8002972 <VectorD8+0x2a2>
  oip->dbg.lock_cnt = (cnt_t)0;
 80028c4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 80028c8:	f385 8811 	msr	BASEPRI, r5
}
 80028cc:	e720      	b.n	8002710 <VectorD8+0x40>
      iqp->q_wrptr = iqp->q_buffer;
 80028ce:	69b3      	ldr	r3, [r6, #24]
 80028d0:	6233      	str	r3, [r6, #32]
 80028d2:	e7ac      	b.n	800282e <VectorD8+0x15e>
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80028d4:	062a      	lsls	r2, r5, #24
 80028d6:	f57f af52 	bpl.w	800277e <VectorD8+0xae>
 80028da:	2330      	movs	r3, #48	; 0x30
 80028dc:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80028e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dd47      	ble.n	8002978 <VectorD8+0x2a8>
 80028e8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80028ec:	2a00      	cmp	r2, #0
 80028ee:	d143      	bne.n	8002978 <VectorD8+0x2a8>
  if (!oqIsEmptyI(oqp)) {
 80028f0:	e9d6 1211 	ldrd	r1, r2, [r6, #68]	; 0x44
  oip->dbg.lock_cnt = (cnt_t)1;
 80028f4:	2001      	movs	r0, #1
 80028f6:	4291      	cmp	r1, r2
 80028f8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 80028fc:	d07f      	beq.n	80029fe <VectorD8+0x32e>
    oqp->q_counter++;
 80028fe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8002900:	3101      	adds	r1, #1
 8002902:	63b1      	str	r1, [r6, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8002904:	1c51      	adds	r1, r2, #1
 8002906:	64b1      	str	r1, [r6, #72]	; 0x48
 8002908:	f892 8000 	ldrb.w	r8, [r2]
    if (oqp->q_rdptr >= oqp->q_top) {
 800290c:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800290e:	4291      	cmp	r1, r2
 8002910:	d301      	bcc.n	8002916 <VectorD8+0x246>
      oqp->q_rdptr = oqp->q_buffer;
 8002912:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8002914:	64b2      	str	r2, [r6, #72]	; 0x48
  return (bool)(qp->next != qp);
 8002916:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8002918:	4a24      	ldr	r2, [pc, #144]	; (80029ac <VectorD8+0x2dc>)
 800291a:	4290      	cmp	r0, r2
 800291c:	d008      	beq.n	8002930 <VectorD8+0x260>
  qp->next       = p->next;
 800291e:	6803      	ldr	r3, [r0, #0]
 8002920:	6333      	str	r3, [r6, #48]	; 0x30
  qp->next->prev = qp;
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	2300      	movs	r3, #0
 8002926:	6283      	str	r3, [r0, #40]	; 0x28
  (void) chSchReadyI(tp);
 8002928:	f7fe fb5a 	bl	8000fe0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800292c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      u->DR = b;
 8002930:	f8c7 8004 	str.w	r8, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dd1c      	ble.n	8002972 <VectorD8+0x2a2>
 8002938:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800293c:	2b00      	cmp	r3, #0
 800293e:	dd18      	ble.n	8002972 <VectorD8+0x2a2>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	e718      	b.n	800277e <VectorD8+0xae>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue)) {
 800294c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d04a      	beq.n	80029e8 <VectorD8+0x318>
  chEvtBroadcastFlagsI(esp, flags);
 8002952:	2010      	movs	r0, #16
 8002954:	f7fe fab4 	bl	8000ec0 <chEvtBroadcastFlagsI.constprop.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002958:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800295c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002960:	ea09 0303 	and.w	r3, r9, r3
 8002964:	2a00      	cmp	r2, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	dd03      	ble.n	8002972 <VectorD8+0x2a2>
 800296a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800296e:	2b00      	cmp	r3, #0
 8002970:	dc3a      	bgt.n	80029e8 <VectorD8+0x318>
    chSysHalt("SV#7");
 8002972:	480f      	ldr	r0, [pc, #60]	; (80029b0 <VectorD8+0x2e0>)
 8002974:	f7fe f924 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#6");
 8002978:	480e      	ldr	r0, [pc, #56]	; (80029b4 <VectorD8+0x2e4>)
 800297a:	f7fe f921 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#8");
 800297e:	480e      	ldr	r0, [pc, #56]	; (80029b8 <VectorD8+0x2e8>)
 8002980:	f7fe f91e 	bl	8000bc0 <chSysHalt>
  if (!iqIsFullI(iqp)) {
 8002984:	6972      	ldr	r2, [r6, #20]
 8002986:	2a00      	cmp	r2, #0
 8002988:	f43f af44 	beq.w	8002814 <VectorD8+0x144>
 800298c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002990:	f7fe fa96 	bl	8000ec0 <chEvtBroadcastFlagsI.constprop.0>
}
 8002994:	e6db      	b.n	800274e <VectorD8+0x7e>
    chSysHalt("SV#9");
 8002996:	4809      	ldr	r0, [pc, #36]	; (80029bc <VectorD8+0x2ec>)
 8002998:	f7fe f912 	bl	8000bc0 <chSysHalt>
 800299c:	20000910 	.word	0x20000910
 80029a0:	2000087c 	.word	0x2000087c
 80029a4:	e000ed00 	.word	0xe000ed00
 80029a8:	080046d0 	.word	0x080046d0
 80029ac:	200008ac 	.word	0x200008ac
 80029b0:	080046d8 	.word	0x080046d8
 80029b4:	080046c0 	.word	0x080046c0
 80029b8:	08004798 	.word	0x08004798
 80029bc:	080047a0 	.word	0x080047a0
 80029c0:	20000888 	.word	0x20000888
 80029c4:	2330      	movs	r3, #48	; 0x30
 80029c6:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80029ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	ddd2      	ble.n	8002978 <VectorD8+0x2a8>
 80029d2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ce      	bne.n	8002978 <VectorD8+0x2a8>
  oip->dbg.lock_cnt = (cnt_t)1;
 80029da:	2301      	movs	r3, #1
 80029dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (oqIsEmptyI(&sdp->oqueue)) {
 80029e0:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d0b1      	beq.n	800294c <VectorD8+0x27c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80029ee:	f383 8811 	msr	BASEPRI, r3
}
 80029f2:	e6ca      	b.n	800278a <VectorD8+0xba>
 80029f4:	b003      	add	sp, #12
 80029f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fa:	f7fe bff1 	b.w	80019e0 <__port_irq_epilogue.part.0>
  if (!oqIsEmptyI(oqp)) {
 80029fe:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8002a00:	2900      	cmp	r1, #0
 8002a02:	f43f af7c 	beq.w	80028fe <VectorD8+0x22e>
  chEvtBroadcastFlagsI(esp, flags);
 8002a06:	2008      	movs	r0, #8
 8002a08:	f7fe fa5a 	bl	8000ec0 <chEvtBroadcastFlagsI.constprop.0>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8002a0c:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8002a10:	ea09 0303 	and.w	r3, r9, r3
 8002a14:	60fb      	str	r3, [r7, #12]
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002a16:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a1a:	e78b      	b.n	8002934 <VectorD8+0x264>
 8002a1c:	0000      	movs	r0, r0
	...

08002a20 <VectorA8>:
/**
 * @brief   TIM1-TRG-COM, TIM11 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_TRGCO_TIM11_HANDLER) {
 8002a20:	b538      	push	{r3, r4, r5, lr}
 8002a22:	2330      	movs	r3, #48	; 0x30
 8002a24:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002a28:	4c26      	ldr	r4, [pc, #152]	; (8002ac4 <VectorA8+0xa4>)
 8002a2a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db3d      	blt.n	8002aae <VectorA8+0x8e>
 8002a32:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002a36:	2800      	cmp	r0, #0
 8002a38:	d139      	bne.n	8002aae <VectorA8+0x8e>
  oip->dbg.isr_cnt++;
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002a40:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  uint32_t sr;

  sr  = gptp->tim->SR;
 8002a44:	4d20      	ldr	r5, [pc, #128]	; (8002ac8 <VectorA8+0xa8>)
 8002a46:	68ea      	ldr	r2, [r5, #12]
 8002a48:	6913      	ldr	r3, [r2, #16]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002a4a:	68d1      	ldr	r1, [r2, #12]
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	b2d9      	uxtb	r1, r3
  gptp->tim->SR = ~sr;
 8002a50:	43c9      	mvns	r1, r1
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8002a52:	07db      	lsls	r3, r3, #31
  gptp->tim->SR = ~sr;
 8002a54:	6111      	str	r1, [r2, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
 8002a56:	d418      	bmi.n	8002a8a <VectorA8+0x6a>
 8002a58:	2230      	movs	r2, #48	; 0x30
 8002a5a:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002a5e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	dd26      	ble.n	8002ab4 <VectorA8+0x94>
 8002a66:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002a6a:	bb19      	cbnz	r1, 8002ab4 <VectorA8+0x94>
  oip->dbg.isr_cnt--;
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002a72:	f381 8811 	msr	BASEPRI, r1
 8002a76:	f382 8811 	msr	BASEPRI, r2
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <VectorA8+0xac>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002a82:	d11a      	bne.n	8002aba <VectorA8+0x9a>
 8002a84:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
    _gpt_isr_invoke_cb(gptp);
 8002a8a:	782b      	ldrb	r3, [r5, #0]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d107      	bne.n	8002aa0 <VectorA8+0x80>
 8002a90:	2302      	movs	r3, #2
 8002a92:	702b      	strb	r3, [r5, #0]
  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
 8002a94:	6010      	str	r0, [r2, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
 8002a96:	6110      	str	r0, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8002a98:	68d3      	ldr	r3, [r2, #12]
 8002a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a9e:	60d3      	str	r3, [r2, #12]
    _gpt_isr_invoke_cb(gptp);
 8002aa0:	686b      	ldr	r3, [r5, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0d7      	beq.n	8002a58 <VectorA8+0x38>
 8002aa8:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <VectorA8+0xa8>)
 8002aaa:	4798      	blx	r3
 8002aac:	e7d4      	b.n	8002a58 <VectorA8+0x38>
    chSysHalt("SV#8");
 8002aae:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <VectorA8+0xb0>)
 8002ab0:	f7fe f886 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8002ab4:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <VectorA8+0xb4>)
 8002ab6:	f7fe f883 	bl	8000bc0 <chSysHalt>
 8002aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002abe:	f7fe bf8f 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8002ac2:	bf00      	nop
 8002ac4:	20000910 	.word	0x20000910
 8002ac8:	20000834 	.word	0x20000834
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	08004798 	.word	0x08004798
 8002ad4:	080047a0 	.word	0x080047a0
	...

08002ae0 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8002ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	2130      	movs	r1, #48	; 0x30
 8002ae6:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002aea:	4c70      	ldr	r4, [pc, #448]	; (8002cac <Vector108+0x1cc>)
 8002aec:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f2c0 808e 	blt.w	8002c12 <Vector108+0x132>
 8002af6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	f040 8089 	bne.w	8002c12 <Vector108+0x132>
  oip->dbg.isr_cnt++;
 8002b00:	3301      	adds	r3, #1
 8002b02:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002b06:	f382 8811 	msr	BASEPRI, r2
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8002b0a:	4d69      	ldr	r5, [pc, #420]	; (8002cb0 <Vector108+0x1d0>)
 8002b0c:	692b      	ldr	r3, [r5, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002b0e:	68ea      	ldr	r2, [r5, #12]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8002b14:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002b16:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8002b18:	612a      	str	r2, [r5, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8002b1a:	d41a      	bmi.n	8002b52 <Vector108+0x72>
 8002b1c:	2230      	movs	r2, #48	; 0x30
 8002b1e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002b22:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	dd70      	ble.n	8002c0c <Vector108+0x12c>
 8002b2a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002b2e:	2900      	cmp	r1, #0
 8002b30:	d16c      	bne.n	8002c0c <Vector108+0x12c>
  oip->dbg.isr_cnt--;
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002b38:	f381 8811 	msr	BASEPRI, r1
 8002b3c:	f382 8811 	msr	BASEPRI, r2
 8002b40:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <Vector108+0x1d4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002b48:	d169      	bne.n	8002c1e <Vector108+0x13e>
 8002b4a:	f383 8811 	msr	BASEPRI, r3
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
}
 8002b4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b52:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002b56:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	dd5c      	ble.n	8002c18 <Vector108+0x138>
 8002b5e:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
 8002b62:	f1ba 0f00 	cmp.w	sl, #0
 8002b66:	d157      	bne.n	8002c18 <Vector108+0x138>
  oip->dbg.lock_cnt = (cnt_t)1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002b6e:	f104 0b10 	add.w	fp, r4, #16
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
    vtlp->lasttime = lasttime;

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
    vtp->dlist.next = NULL;
 8002b72:	46d0      	mov	r8, sl
 8002b74:	f04f 0930 	mov.w	r9, #48	; 0x30
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8002b78:	6926      	ldr	r6, [r4, #16]
 8002b7a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8002b7c:	69e7      	ldr	r7, [r4, #28]
    if (nowdelta < vtp->dlist.delta) {
 8002b7e:	68b2      	ldr	r2, [r6, #8]
 8002b80:	1bc8      	subs	r0, r1, r7
 8002b82:	4290      	cmp	r0, r2
 8002b84:	d35e      	bcc.n	8002c44 <Vector108+0x164>
  return systime + (systime_t)interval;
 8002b86:	4417      	add	r7, r2
  dlp->prev->next = dlp->next;
 8002b88:	e9d6 3200 	ldrd	r3, r2, [r6]
    vtlp->lasttime = lasttime;
 8002b8c:	61e7      	str	r7, [r4, #28]
 8002b8e:	6013      	str	r3, [r2, #0]
  dlp->next->prev = dlp->prev;
 8002b90:	605a      	str	r2, [r3, #4]
    vtp->dlist.next = NULL;
 8002b92:	f8c6 a000 	str.w	sl, [r6]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8002b96:	6923      	ldr	r3, [r4, #16]
 8002b98:	455b      	cmp	r3, fp
 8002b9a:	d050      	beq.n	8002c3e <Vector108+0x15e>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002b9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	dd49      	ble.n	8002c38 <Vector108+0x158>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002ba4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8002ba8:	f388 8811 	msr	BASEPRI, r8
    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();

    vtp->func(vtp, vtp->par);
 8002bac:	e9d6 3103 	ldrd	r3, r1, [r6, #12]
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	4798      	blx	r3
 8002bb4:	f389 8811 	msr	BASEPRI, r9
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002bb8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	dd2b      	ble.n	8002c18 <Vector108+0x138>
 8002bc0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002bc4:	bb42      	cbnz	r2, 8002c18 <Vector108+0x138>

    chSysLockFromISR();

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 8002bc6:	6973      	ldr	r3, [r6, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002bc8:	2101      	movs	r1, #1
 8002bca:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0d2      	beq.n	8002b78 <Vector108+0x98>
 8002bd2:	6a69      	ldr	r1, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002bd4:	eba1 0c07 	sub.w	ip, r1, r7
      now = chVTGetSystemTimeX();
      nowdelta = chTimeDiffX(lasttime, now);

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 8002bd8:	4563      	cmp	r3, ip
 8002bda:	d34c      	bcc.n	8002c76 <Vector108+0x196>
  return (bool)(dlhp == dlhp->next);
 8002bdc:	6920      	ldr	r0, [r4, #16]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002bde:	4558      	cmp	r0, fp
 8002be0:	d021      	beq.n	8002c26 <Vector108+0x146>
  while (likely(dlp->delta < delta)) {
 8002be2:	6882      	ldr	r2, [r0, #8]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d904      	bls.n	8002bf2 <Vector108+0x112>
    dlp = dlp->next;
 8002be8:	6800      	ldr	r0, [r0, #0]
    delta -= dlp->delta;
 8002bea:	1a9b      	subs	r3, r3, r2
  while (likely(dlp->delta < delta)) {
 8002bec:	6882      	ldr	r2, [r0, #8]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3fa      	bcc.n	8002be8 <Vector108+0x108>
  dlp->delta      = delta;
 8002bf2:	60b3      	str	r3, [r6, #8]
  dlp->delta -= delta;
 8002bf4:	6882      	ldr	r2, [r0, #8]
  dlp->next       = dlhp;
 8002bf6:	6030      	str	r0, [r6, #0]
  dlp->delta -= delta;
 8002bf8:	1ad2      	subs	r2, r2, r3
  dlp->prev       = dlp->next->prev;
 8002bfa:	6843      	ldr	r3, [r0, #4]
 8002bfc:	6073      	str	r3, [r6, #4]
  dlp->prev->next = dlp;
 8002bfe:	601e      	str	r6, [r3, #0]
  dlhp->delta = (sysinterval_t)-1;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
  dlp->delta -= delta;
 8002c04:	e9c0 6201 	strd	r6, r2, [r0, #4]
  dlhp->delta = (sysinterval_t)-1;
 8002c08:	61a3      	str	r3, [r4, #24]
}
 8002c0a:	e7b3      	b.n	8002b74 <Vector108+0x94>
    chSysHalt("SV#9");
 8002c0c:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <Vector108+0x1d8>)
 8002c0e:	f7fd ffd7 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#8");
 8002c12:	482a      	ldr	r0, [pc, #168]	; (8002cbc <Vector108+0x1dc>)
 8002c14:	f7fd ffd4 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#6");
 8002c18:	4829      	ldr	r0, [pc, #164]	; (8002cc0 <Vector108+0x1e0>)
 8002c1a:	f7fd ffd1 	bl	8000bc0 <chSysHalt>
 8002c1e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c22:	f7fe bedd 	b.w	80019e0 <__port_irq_epilogue.part.0>
        delay = vtp->reload - nowdelta;
 8002c26:	1a5a      	subs	r2, r3, r1
 8002c28:	443a      	add	r2, r7

        vt_insert_first(vtlp, vtp, now, delay);
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f7fe f9a0 	bl	8000f70 <vt_insert_first.constprop.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002c30:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	dc14      	bgt.n	8002c62 <Vector108+0x182>
    chSysHalt("SV#7");
 8002c38:	4822      	ldr	r0, [pc, #136]	; (8002cc4 <Vector108+0x1e4>)
 8002c3a:	f7fd ffc1 	bl	8000bc0 <chSysHalt>
  STM32_ST_TIM->DIER = 0U;
 8002c3e:	f8c5 a00c 	str.w	sl, [r5, #12]
 8002c42:	e7ab      	b.n	8002b9c <Vector108+0xbc>
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8002c44:	455e      	cmp	r6, fp
 8002c46:	d00c      	beq.n	8002c62 <Vector108+0x182>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtp->dlist.delta -= nowdelta;
 8002c48:	1a52      	subs	r2, r2, r1
 8002c4a:	19d3      	adds	r3, r2, r7
 8002c4c:	2b02      	cmp	r3, #2
  vtlp->lasttime += nowdelta;
 8002c4e:	61e1      	str	r1, [r4, #28]
  vtp->dlist.delta -= nowdelta;
 8002c50:	60b3      	str	r3, [r6, #8]
  if (delay < currdelta) {
 8002c52:	bf38      	it	cc
 8002c54:	2302      	movcc	r3, #2
  return systime + (systime_t)interval;
 8002c56:	18ca      	adds	r2, r1, r3
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002c58:	636a      	str	r2, [r5, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002c5a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002c5c:	1a51      	subs	r1, r2, r1
    if (likely(nowdelta < delay)) {
 8002c5e:	4299      	cmp	r1, r3
 8002c60:	d212      	bcs.n	8002c88 <Vector108+0x1a8>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002c62:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dde6      	ble.n	8002c38 <Vector108+0x158>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002c70:	f383 8811 	msr	BASEPRI, r3
}
 8002c74:	e752      	b.n	8002b1c <Vector108+0x3c>
  currcore->rfcu.mask |= mask;
 8002c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (bool)(dlhp == dlhp->next);
 8002c78:	6920      	ldr	r0, [r4, #16]
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8002c7e:	4558      	cmp	r0, fp
 8002c80:	6363      	str	r3, [r4, #52]	; 0x34
 8002c82:	d0d2      	beq.n	8002c2a <Vector108+0x14a>
 8002c84:	4663      	mov	r3, ip
 8002c86:	e7ac      	b.n	8002be2 <Vector108+0x102>
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002c88:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <Vector108+0x1d0>)
    if (likely(nowdelta < delay)) {
 8002c8a:	2302      	movs	r3, #2
    currdelta += (sysinterval_t)1;
 8002c8c:	3301      	adds	r3, #1
  return systime + (systime_t)interval;
 8002c8e:	18d0      	adds	r0, r2, r3
 8002c90:	6348      	str	r0, [r1, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8002c92:	6a48      	ldr	r0, [r1, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8002c94:	1a82      	subs	r2, r0, r2
    if (likely(nowdelta < delay)) {
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d206      	bcs.n	8002ca8 <Vector108+0x1c8>
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d9e1      	bls.n	8002c62 <Vector108+0x182>
 8002c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002ca6:	e7dc      	b.n	8002c62 <Vector108+0x182>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	e7ef      	b.n	8002c8c <Vector108+0x1ac>
 8002cac:	20000910 	.word	0x20000910
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	080047a0 	.word	0x080047a0
 8002cbc:	08004798 	.word	0x08004798
 8002cc0:	080046c0 	.word	0x080046c0
 8002cc4:	080046d8 	.word	0x080046d8
	...

08002cd0 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	2330      	movs	r3, #48	; 0x30
 8002cd4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002cd8:	4c41      	ldr	r4, [pc, #260]	; (8002de0 <Vector88+0x110>)
 8002cda:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db71      	blt.n	8002dc6 <Vector88+0xf6>
 8002ce2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002ce6:	2a00      	cmp	r2, #0
 8002ce8:	d16d      	bne.n	8002dc6 <Vector88+0xf6>
  oip->dbg.isr_cnt++;
 8002cea:	3301      	adds	r3, #1
 8002cec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002cf0:	f382 8811 	msr	BASEPRI, r2
  if (adcp->grpp != NULL) {
 8002cf4:	4d3b      	ldr	r5, [pc, #236]	; (8002de4 <Vector88+0x114>)
  sr = ADC1->SR;
 8002cf6:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <Vector88+0x118>)
  if (adcp->grpp != NULL) {
 8002cf8:	692e      	ldr	r6, [r5, #16]
  sr = ADC1->SR;
 8002cfa:	6819      	ldr	r1, [r3, #0]
  ADC1->SR = 0;
 8002cfc:	601a      	str	r2, [r3, #0]
  if (adcp->grpp != NULL) {
 8002cfe:	2e00      	cmp	r6, #0
 8002d00:	d036      	beq.n	8002d70 <Vector88+0xa0>
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 8002d02:	068a      	lsls	r2, r1, #26
 8002d04:	d44d      	bmi.n	8002da2 <Vector88+0xd2>
    if (sr & ADC_SR_AWD) {
 8002d06:	07cb      	lsls	r3, r1, #31
 8002d08:	d532      	bpl.n	8002d70 <Vector88+0xa0>
 8002d0a:	2704      	movs	r7, #4
      _adc_isr_error_code(adcp, emask);
 8002d0c:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
 8002d10:	f7fd ffee 	bl	8000cf0 <adc_lld_stop_conversion.isra.0>
 8002d14:	68b3      	ldr	r3, [r6, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d050      	beq.n	8002dbc <Vector88+0xec>
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	4831      	ldr	r0, [pc, #196]	; (8002de4 <Vector88+0x114>)
 8002d1e:	702a      	strb	r2, [r5, #0]
 8002d20:	4639      	mov	r1, r7
 8002d22:	4798      	blx	r3
 8002d24:	782b      	ldrb	r3, [r5, #0]
 8002d26:	2b05      	cmp	r3, #5
 8002d28:	d048      	beq.n	8002dbc <Vector88+0xec>
 8002d2a:	2330      	movs	r3, #48	; 0x30
 8002d2c:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002d30:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	dd4f      	ble.n	8002dd8 <Vector88+0x108>
 8002d38:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d14b      	bne.n	8002dd8 <Vector88+0x108>
  if (*trp != NULL) {
 8002d40:	6968      	ldr	r0, [r5, #20]
  oip->dbg.lock_cnt = (cnt_t)1;
 8002d42:	2201      	movs	r2, #1
 8002d44:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8002d48:	b168      	cbz	r0, 8002d66 <Vector88+0x96>
    tp->u.rdymsg = msg;
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	6282      	str	r2, [r0, #40]	; 0x28
    *trp = NULL;
 8002d50:	616b      	str	r3, [r5, #20]
    (void) chSchReadyI(tp);
 8002d52:	f7fe f945 	bl	8000fe0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002d56:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	dd39      	ble.n	8002dd2 <Vector88+0x102>
 8002d5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	dd35      	ble.n	8002dd2 <Vector88+0x102>
  oip->dbg.lock_cnt = (cnt_t)0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	2230      	movs	r2, #48	; 0x30
 8002d72:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002d76:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	dd26      	ble.n	8002dcc <Vector88+0xfc>
 8002d7e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002d82:	bb19      	cbnz	r1, 8002dcc <Vector88+0xfc>
  oip->dbg.isr_cnt--;
 8002d84:	3b01      	subs	r3, #1
 8002d86:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002d8a:	f381 8811 	msr	BASEPRI, r1
 8002d8e:	f382 8811 	msr	BASEPRI, r2
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <Vector88+0x11c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002d9a:	d10b      	bne.n	8002db4 <Vector88+0xe4>
 8002d9c:	f383 8811 	msr	BASEPRI, r3
}
 8002da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
 8002da2:	782b      	ldrb	r3, [r5, #0]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d1ae      	bne.n	8002d06 <Vector88+0x36>
      emask |= ADC_ERR_OVERFLOW;
 8002da8:	f011 0f01 	tst.w	r1, #1
 8002dac:	bf14      	ite	ne
 8002dae:	2706      	movne	r7, #6
 8002db0:	2702      	moveq	r7, #2
 8002db2:	e7ab      	b.n	8002d0c <Vector88+0x3c>
}
 8002db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002db8:	f7fe be12 	b.w	80019e0 <__port_irq_epilogue.part.0>
      _adc_isr_error_code(adcp, emask);
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	702a      	strb	r2, [r5, #0]
 8002dc2:	612b      	str	r3, [r5, #16]
 8002dc4:	e7b1      	b.n	8002d2a <Vector88+0x5a>
    chSysHalt("SV#8");
 8002dc6:	480a      	ldr	r0, [pc, #40]	; (8002df0 <Vector88+0x120>)
 8002dc8:	f7fd fefa 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <Vector88+0x124>)
 8002dce:	f7fd fef7 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#7");
 8002dd2:	4809      	ldr	r0, [pc, #36]	; (8002df8 <Vector88+0x128>)
 8002dd4:	f7fd fef4 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#6");
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <Vector88+0x12c>)
 8002dda:	f7fd fef1 	bl	8000bc0 <chSysHalt>
 8002dde:	bf00      	nop
 8002de0:	20000910 	.word	0x20000910
 8002de4:	20000800 	.word	0x20000800
 8002de8:	40012000 	.word	0x40012000
 8002dec:	e000ed00 	.word	0xe000ed00
 8002df0:	08004798 	.word	0x08004798
 8002df4:	080047a0 	.word	0x080047a0
 8002df8:	080046d8 	.word	0x080046d8
 8002dfc:	080046c0 	.word	0x080046c0

08002e00 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002e00:	b510      	push	{r4, lr}
 8002e02:	2330      	movs	r3, #48	; 0x30
 8002e04:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002e08:	4c1c      	ldr	r4, [pc, #112]	; (8002e7c <Vector6C+0x7c>)
 8002e0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db2a      	blt.n	8002e68 <Vector6C+0x68>
 8002e12:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002e16:	bb3a      	cbnz	r2, 8002e68 <Vector6C+0x68>
  oip->dbg.isr_cnt++;
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002e1e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <Vector6C+0x80>)
  if (dma.streams[0].func)
 8002e24:	4817      	ldr	r0, [pc, #92]	; (8002e84 <Vector6C+0x84>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e26:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8002e28:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002e2e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8002e30:	b10a      	cbz	r2, 8002e36 <Vector6C+0x36>
    dma.streams[0].func(dma.streams[0].param, flags);
 8002e32:	6880      	ldr	r0, [r0, #8]
 8002e34:	4790      	blx	r2
 8002e36:	2230      	movs	r2, #48	; 0x30
 8002e38:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002e3c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	dd14      	ble.n	8002e6e <Vector6C+0x6e>
 8002e44:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002e48:	b989      	cbnz	r1, 8002e6e <Vector6C+0x6e>
  oip->dbg.isr_cnt--;
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002e50:	f381 8811 	msr	BASEPRI, r1
 8002e54:	f382 8811 	msr	BASEPRI, r2
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <Vector6C+0x88>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002e60:	d108      	bne.n	8002e74 <Vector6C+0x74>
 8002e62:	f383 8811 	msr	BASEPRI, r3
}
 8002e66:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002e68:	4808      	ldr	r0, [pc, #32]	; (8002e8c <Vector6C+0x8c>)
 8002e6a:	f7fd fea9 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8002e6e:	4808      	ldr	r0, [pc, #32]	; (8002e90 <Vector6C+0x90>)
 8002e70:	f7fd fea6 	bl	8000bc0 <chSysHalt>
 8002e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e78:	f7fe bdb2 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8002e7c:	20000910 	.word	0x20000910
 8002e80:	40026000 	.word	0x40026000
 8002e84:	20000c18 	.word	0x20000c18
 8002e88:	e000ed00 	.word	0xe000ed00
 8002e8c:	08004798 	.word	0x08004798
 8002e90:	080047a0 	.word	0x080047a0
	...

08002ea0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	2330      	movs	r3, #48	; 0x30
 8002ea4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002ea8:	4c1d      	ldr	r4, [pc, #116]	; (8002f20 <Vector70+0x80>)
 8002eaa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db2c      	blt.n	8002f0c <Vector70+0x6c>
 8002eb2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002eb6:	bb4a      	cbnz	r2, 8002f0c <Vector70+0x6c>
  oip->dbg.isr_cnt++;
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002ebe:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <Vector70+0x84>)
  if (dma.streams[1].func)
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <Vector70+0x88>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	0989      	lsrs	r1, r1, #6
 8002eca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8002ece:	0188      	lsls	r0, r1, #6
 8002ed0:	6098      	str	r0, [r3, #8]
  if (dma.streams[1].func)
 8002ed2:	68d3      	ldr	r3, [r2, #12]
 8002ed4:	b10b      	cbz	r3, 8002eda <Vector70+0x3a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8002ed6:	6910      	ldr	r0, [r2, #16]
 8002ed8:	4798      	blx	r3
 8002eda:	2230      	movs	r2, #48	; 0x30
 8002edc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002ee0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dd14      	ble.n	8002f12 <Vector70+0x72>
 8002ee8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002eec:	b989      	cbnz	r1, 8002f12 <Vector70+0x72>
  oip->dbg.isr_cnt--;
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002ef4:	f381 8811 	msr	BASEPRI, r1
 8002ef8:	f382 8811 	msr	BASEPRI, r2
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <Vector70+0x8c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002f04:	d108      	bne.n	8002f18 <Vector70+0x78>
 8002f06:	f383 8811 	msr	BASEPRI, r3
}
 8002f0a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002f0c:	4808      	ldr	r0, [pc, #32]	; (8002f30 <Vector70+0x90>)
 8002f0e:	f7fd fe57 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8002f12:	4808      	ldr	r0, [pc, #32]	; (8002f34 <Vector70+0x94>)
 8002f14:	f7fd fe54 	bl	8000bc0 <chSysHalt>
 8002f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f1c:	f7fe bd60 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8002f20:	20000910 	.word	0x20000910
 8002f24:	40026000 	.word	0x40026000
 8002f28:	20000c18 	.word	0x20000c18
 8002f2c:	e000ed00 	.word	0xe000ed00
 8002f30:	08004798 	.word	0x08004798
 8002f34:	080047a0 	.word	0x080047a0
	...

08002f40 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002f40:	b510      	push	{r4, lr}
 8002f42:	2330      	movs	r3, #48	; 0x30
 8002f44:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002f48:	4c1d      	ldr	r4, [pc, #116]	; (8002fc0 <Vector74+0x80>)
 8002f4a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db2c      	blt.n	8002fac <Vector74+0x6c>
 8002f52:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002f56:	bb4a      	cbnz	r2, 8002fac <Vector74+0x6c>
  oip->dbg.isr_cnt++;
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002f5e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <Vector74+0x84>)
  if (dma.streams[2].func)
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <Vector74+0x88>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	0c09      	lsrs	r1, r1, #16
 8002f6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 8002f6e:	0408      	lsls	r0, r1, #16
 8002f70:	6098      	str	r0, [r3, #8]
  if (dma.streams[2].func)
 8002f72:	6953      	ldr	r3, [r2, #20]
 8002f74:	b10b      	cbz	r3, 8002f7a <Vector74+0x3a>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002f76:	6990      	ldr	r0, [r2, #24]
 8002f78:	4798      	blx	r3
 8002f7a:	2230      	movs	r2, #48	; 0x30
 8002f7c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8002f80:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dd14      	ble.n	8002fb2 <Vector74+0x72>
 8002f88:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002f8c:	b989      	cbnz	r1, 8002fb2 <Vector74+0x72>
  oip->dbg.isr_cnt--;
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002f94:	f381 8811 	msr	BASEPRI, r1
 8002f98:	f382 8811 	msr	BASEPRI, r2
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <Vector74+0x8c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002fa4:	d108      	bne.n	8002fb8 <Vector74+0x78>
 8002fa6:	f383 8811 	msr	BASEPRI, r3
}
 8002faa:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8002fac:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <Vector74+0x90>)
 8002fae:	f7fd fe07 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8002fb2:	4808      	ldr	r0, [pc, #32]	; (8002fd4 <Vector74+0x94>)
 8002fb4:	f7fd fe04 	bl	8000bc0 <chSysHalt>
 8002fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fbc:	f7fe bd10 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8002fc0:	20000910 	.word	0x20000910
 8002fc4:	40026000 	.word	0x40026000
 8002fc8:	20000c18 	.word	0x20000c18
 8002fcc:	e000ed00 	.word	0xe000ed00
 8002fd0:	08004798 	.word	0x08004798
 8002fd4:	080047a0 	.word	0x080047a0
	...

08002fe0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	2330      	movs	r3, #48	; 0x30
 8002fe4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8002fe8:	4c1d      	ldr	r4, [pc, #116]	; (8003060 <Vector78+0x80>)
 8002fea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db2c      	blt.n	800304c <Vector78+0x6c>
 8002ff2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8002ff6:	bb4a      	cbnz	r2, 800304c <Vector78+0x6c>
  oip->dbg.isr_cnt++;
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8002ffe:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <Vector78+0x84>)
  if (dma.streams[3].func)
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <Vector78+0x88>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	0d89      	lsrs	r1, r1, #22
 800300a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 800300e:	0588      	lsls	r0, r1, #22
 8003010:	6098      	str	r0, [r3, #8]
  if (dma.streams[3].func)
 8003012:	69d3      	ldr	r3, [r2, #28]
 8003014:	b10b      	cbz	r3, 800301a <Vector78+0x3a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8003016:	6a10      	ldr	r0, [r2, #32]
 8003018:	4798      	blx	r3
 800301a:	2230      	movs	r2, #48	; 0x30
 800301c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003020:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003024:	2b00      	cmp	r3, #0
 8003026:	dd14      	ble.n	8003052 <Vector78+0x72>
 8003028:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800302c:	b989      	cbnz	r1, 8003052 <Vector78+0x72>
  oip->dbg.isr_cnt--;
 800302e:	3b01      	subs	r3, #1
 8003030:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003034:	f381 8811 	msr	BASEPRI, r1
 8003038:	f382 8811 	msr	BASEPRI, r2
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <Vector78+0x8c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003044:	d108      	bne.n	8003058 <Vector78+0x78>
 8003046:	f383 8811 	msr	BASEPRI, r3
}
 800304a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800304c:	4808      	ldr	r0, [pc, #32]	; (8003070 <Vector78+0x90>)
 800304e:	f7fd fdb7 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003052:	4808      	ldr	r0, [pc, #32]	; (8003074 <Vector78+0x94>)
 8003054:	f7fd fdb4 	bl	8000bc0 <chSysHalt>
 8003058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800305c:	f7fe bcc0 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8003060:	20000910 	.word	0x20000910
 8003064:	40026000 	.word	0x40026000
 8003068:	20000c18 	.word	0x20000c18
 800306c:	e000ed00 	.word	0xe000ed00
 8003070:	08004798 	.word	0x08004798
 8003074:	080047a0 	.word	0x080047a0
	...

08003080 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003080:	b510      	push	{r4, lr}
 8003082:	2330      	movs	r3, #48	; 0x30
 8003084:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003088:	4c1c      	ldr	r4, [pc, #112]	; (80030fc <Vector7C+0x7c>)
 800308a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800308e:	2b00      	cmp	r3, #0
 8003090:	db2a      	blt.n	80030e8 <Vector7C+0x68>
 8003092:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003096:	bb3a      	cbnz	r2, 80030e8 <Vector7C+0x68>
  oip->dbg.isr_cnt++;
 8003098:	3301      	adds	r3, #1
 800309a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800309e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <Vector7C+0x80>)
  if (dma.streams[4].func)
 80030a4:	4817      	ldr	r0, [pc, #92]	; (8003104 <Vector7C+0x84>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80030a6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 80030a8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80030aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 80030ae:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 80030b0:	b10a      	cbz	r2, 80030b6 <Vector7C+0x36>
    dma.streams[4].func(dma.streams[4].param, flags);
 80030b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80030b4:	4790      	blx	r2
 80030b6:	2230      	movs	r2, #48	; 0x30
 80030b8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80030bc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	dd14      	ble.n	80030ee <Vector7C+0x6e>
 80030c4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80030c8:	b989      	cbnz	r1, 80030ee <Vector7C+0x6e>
  oip->dbg.isr_cnt--;
 80030ca:	3b01      	subs	r3, #1
 80030cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80030d0:	f381 8811 	msr	BASEPRI, r1
 80030d4:	f382 8811 	msr	BASEPRI, r2
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <Vector7C+0x88>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80030e0:	d108      	bne.n	80030f4 <Vector7C+0x74>
 80030e2:	f383 8811 	msr	BASEPRI, r3
}
 80030e6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80030e8:	4808      	ldr	r0, [pc, #32]	; (800310c <Vector7C+0x8c>)
 80030ea:	f7fd fd69 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 80030ee:	4808      	ldr	r0, [pc, #32]	; (8003110 <Vector7C+0x90>)
 80030f0:	f7fd fd66 	bl	8000bc0 <chSysHalt>
 80030f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f8:	f7fe bc72 	b.w	80019e0 <__port_irq_epilogue.part.0>
 80030fc:	20000910 	.word	0x20000910
 8003100:	40026000 	.word	0x40026000
 8003104:	20000c18 	.word	0x20000c18
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	08004798 	.word	0x08004798
 8003110:	080047a0 	.word	0x080047a0
	...

08003120 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003120:	b510      	push	{r4, lr}
 8003122:	2330      	movs	r3, #48	; 0x30
 8003124:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003128:	4c1d      	ldr	r4, [pc, #116]	; (80031a0 <Vector80+0x80>)
 800312a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800312e:	2b00      	cmp	r3, #0
 8003130:	db2c      	blt.n	800318c <Vector80+0x6c>
 8003132:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003136:	bb4a      	cbnz	r2, 800318c <Vector80+0x6c>
  oip->dbg.isr_cnt++;
 8003138:	3301      	adds	r3, #1
 800313a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800313e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <Vector80+0x84>)
  if (dma.streams[5].func)
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <Vector80+0x88>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	0989      	lsrs	r1, r1, #6
 800314a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800314e:	0188      	lsls	r0, r1, #6
 8003150:	60d8      	str	r0, [r3, #12]
  if (dma.streams[5].func)
 8003152:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003154:	b10b      	cbz	r3, 800315a <Vector80+0x3a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003156:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003158:	4798      	blx	r3
 800315a:	2230      	movs	r2, #48	; 0x30
 800315c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003160:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003164:	2b00      	cmp	r3, #0
 8003166:	dd14      	ble.n	8003192 <Vector80+0x72>
 8003168:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800316c:	b989      	cbnz	r1, 8003192 <Vector80+0x72>
  oip->dbg.isr_cnt--;
 800316e:	3b01      	subs	r3, #1
 8003170:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003174:	f381 8811 	msr	BASEPRI, r1
 8003178:	f382 8811 	msr	BASEPRI, r2
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <Vector80+0x8c>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003184:	d108      	bne.n	8003198 <Vector80+0x78>
 8003186:	f383 8811 	msr	BASEPRI, r3
}
 800318a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800318c:	4808      	ldr	r0, [pc, #32]	; (80031b0 <Vector80+0x90>)
 800318e:	f7fd fd17 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003192:	4808      	ldr	r0, [pc, #32]	; (80031b4 <Vector80+0x94>)
 8003194:	f7fd fd14 	bl	8000bc0 <chSysHalt>
 8003198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800319c:	f7fe bc20 	b.w	80019e0 <__port_irq_epilogue.part.0>
 80031a0:	20000910 	.word	0x20000910
 80031a4:	40026000 	.word	0x40026000
 80031a8:	20000c18 	.word	0x20000c18
 80031ac:	e000ed00 	.word	0xe000ed00
 80031b0:	08004798 	.word	0x08004798
 80031b4:	080047a0 	.word	0x080047a0
	...

080031c0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80031c0:	b510      	push	{r4, lr}
 80031c2:	2330      	movs	r3, #48	; 0x30
 80031c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80031c8:	4c1d      	ldr	r4, [pc, #116]	; (8003240 <Vector84+0x80>)
 80031ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	db2c      	blt.n	800322c <Vector84+0x6c>
 80031d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80031d6:	bb4a      	cbnz	r2, 800322c <Vector84+0x6c>
  oip->dbg.isr_cnt++;
 80031d8:	3301      	adds	r3, #1
 80031da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80031de:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <Vector84+0x84>)
  if (dma.streams[6].func)
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <Vector84+0x88>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	0c09      	lsrs	r1, r1, #16
 80031ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 80031ee:	0408      	lsls	r0, r1, #16
 80031f0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[6].func)
 80031f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80031f4:	b10b      	cbz	r3, 80031fa <Vector84+0x3a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80031f6:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80031f8:	4798      	blx	r3
 80031fa:	2230      	movs	r2, #48	; 0x30
 80031fc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003200:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003204:	2b00      	cmp	r3, #0
 8003206:	dd14      	ble.n	8003232 <Vector84+0x72>
 8003208:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800320c:	b989      	cbnz	r1, 8003232 <Vector84+0x72>
  oip->dbg.isr_cnt--;
 800320e:	3b01      	subs	r3, #1
 8003210:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003214:	f381 8811 	msr	BASEPRI, r1
 8003218:	f382 8811 	msr	BASEPRI, r2
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <Vector84+0x8c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003224:	d108      	bne.n	8003238 <Vector84+0x78>
 8003226:	f383 8811 	msr	BASEPRI, r3
}
 800322a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800322c:	4808      	ldr	r0, [pc, #32]	; (8003250 <Vector84+0x90>)
 800322e:	f7fd fcc7 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003232:	4808      	ldr	r0, [pc, #32]	; (8003254 <Vector84+0x94>)
 8003234:	f7fd fcc4 	bl	8000bc0 <chSysHalt>
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800323c:	f7fe bbd0 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8003240:	20000910 	.word	0x20000910
 8003244:	40026000 	.word	0x40026000
 8003248:	20000c18 	.word	0x20000c18
 800324c:	e000ed00 	.word	0xe000ed00
 8003250:	08004798 	.word	0x08004798
 8003254:	080047a0 	.word	0x080047a0
	...

08003260 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8003260:	b510      	push	{r4, lr}
 8003262:	2330      	movs	r3, #48	; 0x30
 8003264:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003268:	4c1d      	ldr	r4, [pc, #116]	; (80032e0 <VectorFC+0x80>)
 800326a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800326e:	2b00      	cmp	r3, #0
 8003270:	db2c      	blt.n	80032cc <VectorFC+0x6c>
 8003272:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003276:	bb4a      	cbnz	r2, 80032cc <VectorFC+0x6c>
  oip->dbg.isr_cnt++;
 8003278:	3301      	adds	r3, #1
 800327a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800327e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <VectorFC+0x84>)
  if (dma.streams[7].func)
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <VectorFC+0x88>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	0d89      	lsrs	r1, r1, #22
 800328a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 800328e:	0588      	lsls	r0, r1, #22
 8003290:	60d8      	str	r0, [r3, #12]
  if (dma.streams[7].func)
 8003292:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003294:	b10b      	cbz	r3, 800329a <VectorFC+0x3a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8003296:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003298:	4798      	blx	r3
 800329a:	2230      	movs	r2, #48	; 0x30
 800329c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80032a0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	dd14      	ble.n	80032d2 <VectorFC+0x72>
 80032a8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80032ac:	b989      	cbnz	r1, 80032d2 <VectorFC+0x72>
  oip->dbg.isr_cnt--;
 80032ae:	3b01      	subs	r3, #1
 80032b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80032b4:	f381 8811 	msr	BASEPRI, r1
 80032b8:	f382 8811 	msr	BASEPRI, r2
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <VectorFC+0x8c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80032c4:	d108      	bne.n	80032d8 <VectorFC+0x78>
 80032c6:	f383 8811 	msr	BASEPRI, r3
}
 80032ca:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80032cc:	4808      	ldr	r0, [pc, #32]	; (80032f0 <VectorFC+0x90>)
 80032ce:	f7fd fc77 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 80032d2:	4808      	ldr	r0, [pc, #32]	; (80032f4 <VectorFC+0x94>)
 80032d4:	f7fd fc74 	bl	8000bc0 <chSysHalt>
 80032d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032dc:	f7fe bb80 	b.w	80019e0 <__port_irq_epilogue.part.0>
 80032e0:	20000910 	.word	0x20000910
 80032e4:	40026000 	.word	0x40026000
 80032e8:	20000c18 	.word	0x20000c18
 80032ec:	e000ed00 	.word	0xe000ed00
 80032f0:	08004798 	.word	0x08004798
 80032f4:	080047a0 	.word	0x080047a0
	...

08003300 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8003300:	b510      	push	{r4, lr}
 8003302:	2330      	movs	r3, #48	; 0x30
 8003304:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003308:	4c1c      	ldr	r4, [pc, #112]	; (800337c <Vector120+0x7c>)
 800330a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800330e:	2b00      	cmp	r3, #0
 8003310:	db2a      	blt.n	8003368 <Vector120+0x68>
 8003312:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003316:	bb3a      	cbnz	r2, 8003368 <Vector120+0x68>
  oip->dbg.isr_cnt++;
 8003318:	3301      	adds	r3, #1
 800331a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800331e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <Vector120+0x80>)
  if (dma.streams[8].func)
 8003324:	4817      	ldr	r0, [pc, #92]	; (8003384 <Vector120+0x84>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003326:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8003328:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800332a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800332e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8003330:	b10a      	cbz	r2, 8003336 <Vector120+0x36>
    dma.streams[8].func(dma.streams[8].param, flags);
 8003332:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003334:	4790      	blx	r2
 8003336:	2230      	movs	r2, #48	; 0x30
 8003338:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 800333c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003340:	2b00      	cmp	r3, #0
 8003342:	dd14      	ble.n	800336e <Vector120+0x6e>
 8003344:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003348:	b989      	cbnz	r1, 800336e <Vector120+0x6e>
  oip->dbg.isr_cnt--;
 800334a:	3b01      	subs	r3, #1
 800334c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003350:	f381 8811 	msr	BASEPRI, r1
 8003354:	f382 8811 	msr	BASEPRI, r2
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <Vector120+0x88>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003360:	d108      	bne.n	8003374 <Vector120+0x74>
 8003362:	f383 8811 	msr	BASEPRI, r3
}
 8003366:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <Vector120+0x8c>)
 800336a:	f7fd fc29 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 800336e:	4808      	ldr	r0, [pc, #32]	; (8003390 <Vector120+0x90>)
 8003370:	f7fd fc26 	bl	8000bc0 <chSysHalt>
 8003374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003378:	f7fe bb32 	b.w	80019e0 <__port_irq_epilogue.part.0>
 800337c:	20000910 	.word	0x20000910
 8003380:	40026400 	.word	0x40026400
 8003384:	20000c18 	.word	0x20000c18
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	08004798 	.word	0x08004798
 8003390:	080047a0 	.word	0x080047a0
	...

080033a0 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80033a0:	b510      	push	{r4, lr}
 80033a2:	2330      	movs	r3, #48	; 0x30
 80033a4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80033a8:	4c1d      	ldr	r4, [pc, #116]	; (8003420 <Vector124+0x80>)
 80033aa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db2c      	blt.n	800340c <Vector124+0x6c>
 80033b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80033b6:	bb4a      	cbnz	r2, 800340c <Vector124+0x6c>
  oip->dbg.isr_cnt++;
 80033b8:	3301      	adds	r3, #1
 80033ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80033be:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <Vector124+0x84>)
  if (dma.streams[9].func)
 80033c4:	4a18      	ldr	r2, [pc, #96]	; (8003428 <Vector124+0x88>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	0989      	lsrs	r1, r1, #6
 80033ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 80033ce:	0188      	lsls	r0, r1, #6
 80033d0:	6098      	str	r0, [r3, #8]
  if (dma.streams[9].func)
 80033d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80033d4:	b10b      	cbz	r3, 80033da <Vector124+0x3a>
    dma.streams[9].func(dma.streams[9].param, flags);
 80033d6:	6d10      	ldr	r0, [r2, #80]	; 0x50
 80033d8:	4798      	blx	r3
 80033da:	2230      	movs	r2, #48	; 0x30
 80033dc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80033e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dd14      	ble.n	8003412 <Vector124+0x72>
 80033e8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80033ec:	b989      	cbnz	r1, 8003412 <Vector124+0x72>
  oip->dbg.isr_cnt--;
 80033ee:	3b01      	subs	r3, #1
 80033f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80033f4:	f381 8811 	msr	BASEPRI, r1
 80033f8:	f382 8811 	msr	BASEPRI, r2
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <Vector124+0x8c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003404:	d108      	bne.n	8003418 <Vector124+0x78>
 8003406:	f383 8811 	msr	BASEPRI, r3
}
 800340a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800340c:	4808      	ldr	r0, [pc, #32]	; (8003430 <Vector124+0x90>)
 800340e:	f7fd fbd7 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003412:	4808      	ldr	r0, [pc, #32]	; (8003434 <Vector124+0x94>)
 8003414:	f7fd fbd4 	bl	8000bc0 <chSysHalt>
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f7fe bae0 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8003420:	20000910 	.word	0x20000910
 8003424:	40026400 	.word	0x40026400
 8003428:	20000c18 	.word	0x20000c18
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	08004798 	.word	0x08004798
 8003434:	080047a0 	.word	0x080047a0
	...

08003440 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8003440:	b510      	push	{r4, lr}
 8003442:	2330      	movs	r3, #48	; 0x30
 8003444:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003448:	4c1d      	ldr	r4, [pc, #116]	; (80034c0 <Vector128+0x80>)
 800344a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800344e:	2b00      	cmp	r3, #0
 8003450:	db2c      	blt.n	80034ac <Vector128+0x6c>
 8003452:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003456:	bb4a      	cbnz	r2, 80034ac <Vector128+0x6c>
  oip->dbg.isr_cnt++;
 8003458:	3301      	adds	r3, #1
 800345a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800345e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <Vector128+0x84>)
  if (dma.streams[10].func)
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <Vector128+0x88>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	0c09      	lsrs	r1, r1, #16
 800346a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800346e:	0408      	lsls	r0, r1, #16
 8003470:	6098      	str	r0, [r3, #8]
  if (dma.streams[10].func)
 8003472:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003474:	b10b      	cbz	r3, 800347a <Vector128+0x3a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003476:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8003478:	4798      	blx	r3
 800347a:	2230      	movs	r2, #48	; 0x30
 800347c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003480:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003484:	2b00      	cmp	r3, #0
 8003486:	dd14      	ble.n	80034b2 <Vector128+0x72>
 8003488:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800348c:	b989      	cbnz	r1, 80034b2 <Vector128+0x72>
  oip->dbg.isr_cnt--;
 800348e:	3b01      	subs	r3, #1
 8003490:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003494:	f381 8811 	msr	BASEPRI, r1
 8003498:	f382 8811 	msr	BASEPRI, r2
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <Vector128+0x8c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80034a4:	d108      	bne.n	80034b8 <Vector128+0x78>
 80034a6:	f383 8811 	msr	BASEPRI, r3
}
 80034aa:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80034ac:	4808      	ldr	r0, [pc, #32]	; (80034d0 <Vector128+0x90>)
 80034ae:	f7fd fb87 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 80034b2:	4808      	ldr	r0, [pc, #32]	; (80034d4 <Vector128+0x94>)
 80034b4:	f7fd fb84 	bl	8000bc0 <chSysHalt>
 80034b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034bc:	f7fe ba90 	b.w	80019e0 <__port_irq_epilogue.part.0>
 80034c0:	20000910 	.word	0x20000910
 80034c4:	40026400 	.word	0x40026400
 80034c8:	20000c18 	.word	0x20000c18
 80034cc:	e000ed00 	.word	0xe000ed00
 80034d0:	08004798 	.word	0x08004798
 80034d4:	080047a0 	.word	0x080047a0
	...

080034e0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80034e0:	b510      	push	{r4, lr}
 80034e2:	2330      	movs	r3, #48	; 0x30
 80034e4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80034e8:	4c1d      	ldr	r4, [pc, #116]	; (8003560 <Vector12C+0x80>)
 80034ea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db2c      	blt.n	800354c <Vector12C+0x6c>
 80034f2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80034f6:	bb4a      	cbnz	r2, 800354c <Vector12C+0x6c>
  oip->dbg.isr_cnt++;
 80034f8:	3301      	adds	r3, #1
 80034fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80034fe:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003502:	4b18      	ldr	r3, [pc, #96]	; (8003564 <Vector12C+0x84>)
  if (dma.streams[11].func)
 8003504:	4a18      	ldr	r2, [pc, #96]	; (8003568 <Vector12C+0x88>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	0d89      	lsrs	r1, r1, #22
 800350a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 800350e:	0588      	lsls	r0, r1, #22
 8003510:	6098      	str	r0, [r3, #8]
  if (dma.streams[11].func)
 8003512:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003514:	b10b      	cbz	r3, 800351a <Vector12C+0x3a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8003516:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003518:	4798      	blx	r3
 800351a:	2230      	movs	r2, #48	; 0x30
 800351c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003520:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003524:	2b00      	cmp	r3, #0
 8003526:	dd14      	ble.n	8003552 <Vector12C+0x72>
 8003528:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800352c:	b989      	cbnz	r1, 8003552 <Vector12C+0x72>
  oip->dbg.isr_cnt--;
 800352e:	3b01      	subs	r3, #1
 8003530:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003534:	f381 8811 	msr	BASEPRI, r1
 8003538:	f382 8811 	msr	BASEPRI, r2
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <Vector12C+0x8c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003544:	d108      	bne.n	8003558 <Vector12C+0x78>
 8003546:	f383 8811 	msr	BASEPRI, r3
}
 800354a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800354c:	4808      	ldr	r0, [pc, #32]	; (8003570 <Vector12C+0x90>)
 800354e:	f7fd fb37 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003552:	4808      	ldr	r0, [pc, #32]	; (8003574 <Vector12C+0x94>)
 8003554:	f7fd fb34 	bl	8000bc0 <chSysHalt>
 8003558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800355c:	f7fe ba40 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8003560:	20000910 	.word	0x20000910
 8003564:	40026400 	.word	0x40026400
 8003568:	20000c18 	.word	0x20000c18
 800356c:	e000ed00 	.word	0xe000ed00
 8003570:	08004798 	.word	0x08004798
 8003574:	080047a0 	.word	0x080047a0
	...

08003580 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8003580:	b510      	push	{r4, lr}
 8003582:	2330      	movs	r3, #48	; 0x30
 8003584:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003588:	4c1c      	ldr	r4, [pc, #112]	; (80035fc <Vector130+0x7c>)
 800358a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800358e:	2b00      	cmp	r3, #0
 8003590:	db2a      	blt.n	80035e8 <Vector130+0x68>
 8003592:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003596:	bb3a      	cbnz	r2, 80035e8 <Vector130+0x68>
  oip->dbg.isr_cnt++;
 8003598:	3301      	adds	r3, #1
 800359a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800359e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <Vector130+0x80>)
  if (dma.streams[12].func)
 80035a4:	4817      	ldr	r0, [pc, #92]	; (8003604 <Vector130+0x84>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80035a6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80035a8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80035aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80035ae:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 80035b0:	b10a      	cbz	r2, 80035b6 <Vector130+0x36>
    dma.streams[12].func(dma.streams[12].param, flags);
 80035b2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80035b4:	4790      	blx	r2
 80035b6:	2230      	movs	r2, #48	; 0x30
 80035b8:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80035bc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	dd14      	ble.n	80035ee <Vector130+0x6e>
 80035c4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80035c8:	b989      	cbnz	r1, 80035ee <Vector130+0x6e>
  oip->dbg.isr_cnt--;
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80035d0:	f381 8811 	msr	BASEPRI, r1
 80035d4:	f382 8811 	msr	BASEPRI, r2
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <Vector130+0x88>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80035e0:	d108      	bne.n	80035f4 <Vector130+0x74>
 80035e2:	f383 8811 	msr	BASEPRI, r3
}
 80035e6:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80035e8:	4808      	ldr	r0, [pc, #32]	; (800360c <Vector130+0x8c>)
 80035ea:	f7fd fae9 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 80035ee:	4808      	ldr	r0, [pc, #32]	; (8003610 <Vector130+0x90>)
 80035f0:	f7fd fae6 	bl	8000bc0 <chSysHalt>
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f8:	f7fe b9f2 	b.w	80019e0 <__port_irq_epilogue.part.0>
 80035fc:	20000910 	.word	0x20000910
 8003600:	40026400 	.word	0x40026400
 8003604:	20000c18 	.word	0x20000c18
 8003608:	e000ed00 	.word	0xe000ed00
 800360c:	08004798 	.word	0x08004798
 8003610:	080047a0 	.word	0x080047a0
	...

08003620 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8003620:	b510      	push	{r4, lr}
 8003622:	2330      	movs	r3, #48	; 0x30
 8003624:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003628:	4c1d      	ldr	r4, [pc, #116]	; (80036a0 <Vector150+0x80>)
 800362a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800362e:	2b00      	cmp	r3, #0
 8003630:	db2c      	blt.n	800368c <Vector150+0x6c>
 8003632:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003636:	bb4a      	cbnz	r2, 800368c <Vector150+0x6c>
  oip->dbg.isr_cnt++;
 8003638:	3301      	adds	r3, #1
 800363a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800363e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <Vector150+0x84>)
  if (dma.streams[13].func)
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <Vector150+0x88>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	0989      	lsrs	r1, r1, #6
 800364a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 800364e:	0188      	lsls	r0, r1, #6
 8003650:	60d8      	str	r0, [r3, #12]
  if (dma.streams[13].func)
 8003652:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8003654:	b10b      	cbz	r3, 800365a <Vector150+0x3a>
    dma.streams[13].func(dma.streams[13].param, flags);
 8003656:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8003658:	4798      	blx	r3
 800365a:	2230      	movs	r2, #48	; 0x30
 800365c:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003660:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003664:	2b00      	cmp	r3, #0
 8003666:	dd14      	ble.n	8003692 <Vector150+0x72>
 8003668:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800366c:	b989      	cbnz	r1, 8003692 <Vector150+0x72>
  oip->dbg.isr_cnt--;
 800366e:	3b01      	subs	r3, #1
 8003670:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003674:	f381 8811 	msr	BASEPRI, r1
 8003678:	f382 8811 	msr	BASEPRI, r2
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <Vector150+0x8c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003684:	d108      	bne.n	8003698 <Vector150+0x78>
 8003686:	f383 8811 	msr	BASEPRI, r3
}
 800368a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800368c:	4808      	ldr	r0, [pc, #32]	; (80036b0 <Vector150+0x90>)
 800368e:	f7fd fa97 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003692:	4808      	ldr	r0, [pc, #32]	; (80036b4 <Vector150+0x94>)
 8003694:	f7fd fa94 	bl	8000bc0 <chSysHalt>
 8003698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800369c:	f7fe b9a0 	b.w	80019e0 <__port_irq_epilogue.part.0>
 80036a0:	20000910 	.word	0x20000910
 80036a4:	40026400 	.word	0x40026400
 80036a8:	20000c18 	.word	0x20000c18
 80036ac:	e000ed00 	.word	0xe000ed00
 80036b0:	08004798 	.word	0x08004798
 80036b4:	080047a0 	.word	0x080047a0
	...

080036c0 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80036c0:	b510      	push	{r4, lr}
 80036c2:	2330      	movs	r3, #48	; 0x30
 80036c4:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 80036c8:	4c1d      	ldr	r4, [pc, #116]	; (8003740 <Vector154+0x80>)
 80036ca:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db2c      	blt.n	800372c <Vector154+0x6c>
 80036d2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80036d6:	bb4a      	cbnz	r2, 800372c <Vector154+0x6c>
  oip->dbg.isr_cnt++;
 80036d8:	3301      	adds	r3, #1
 80036da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80036de:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <Vector154+0x84>)
  if (dma.streams[14].func)
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <Vector154+0x88>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	0c09      	lsrs	r1, r1, #16
 80036ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 80036ee:	0408      	lsls	r0, r1, #16
 80036f0:	60d8      	str	r0, [r3, #12]
  if (dma.streams[14].func)
 80036f2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80036f4:	b10b      	cbz	r3, 80036fa <Vector154+0x3a>
    dma.streams[14].func(dma.streams[14].param, flags);
 80036f6:	6f90      	ldr	r0, [r2, #120]	; 0x78
 80036f8:	4798      	blx	r3
 80036fa:	2230      	movs	r2, #48	; 0x30
 80036fc:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003700:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003704:	2b00      	cmp	r3, #0
 8003706:	dd14      	ble.n	8003732 <Vector154+0x72>
 8003708:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800370c:	b989      	cbnz	r1, 8003732 <Vector154+0x72>
  oip->dbg.isr_cnt--;
 800370e:	3b01      	subs	r3, #1
 8003710:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003714:	f381 8811 	msr	BASEPRI, r1
 8003718:	f382 8811 	msr	BASEPRI, r2
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <Vector154+0x8c>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003724:	d108      	bne.n	8003738 <Vector154+0x78>
 8003726:	f383 8811 	msr	BASEPRI, r3
}
 800372a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 800372c:	4808      	ldr	r0, [pc, #32]	; (8003750 <Vector154+0x90>)
 800372e:	f7fd fa47 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003732:	4808      	ldr	r0, [pc, #32]	; (8003754 <Vector154+0x94>)
 8003734:	f7fd fa44 	bl	8000bc0 <chSysHalt>
 8003738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800373c:	f7fe b950 	b.w	80019e0 <__port_irq_epilogue.part.0>
 8003740:	20000910 	.word	0x20000910
 8003744:	40026400 	.word	0x40026400
 8003748:	20000c18 	.word	0x20000c18
 800374c:	e000ed00 	.word	0xe000ed00
 8003750:	08004798 	.word	0x08004798
 8003754:	080047a0 	.word	0x080047a0
	...

08003760 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8003760:	b510      	push	{r4, lr}
 8003762:	2330      	movs	r3, #48	; 0x30
 8003764:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003768:	4c1e      	ldr	r4, [pc, #120]	; (80037e4 <Vector158+0x84>)
 800376a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800376e:	2b00      	cmp	r3, #0
 8003770:	db2d      	blt.n	80037ce <Vector158+0x6e>
 8003772:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003776:	bb52      	cbnz	r2, 80037ce <Vector158+0x6e>
  oip->dbg.isr_cnt++;
 8003778:	3301      	adds	r3, #1
 800377a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800377e:	f382 8811 	msr	BASEPRI, r2
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <Vector158+0x88>)
  if (dma.streams[15].func)
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <Vector158+0x8c>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	0d89      	lsrs	r1, r1, #22
 800378a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 800378e:	0588      	lsls	r0, r1, #22
 8003790:	60d8      	str	r0, [r3, #12]
  if (dma.streams[15].func)
 8003792:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8003794:	b113      	cbz	r3, 800379c <Vector158+0x3c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8003796:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 800379a:	4798      	blx	r3
 800379c:	2230      	movs	r2, #48	; 0x30
 800379e:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80037a2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	dd14      	ble.n	80037d4 <Vector158+0x74>
 80037aa:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80037ae:	b989      	cbnz	r1, 80037d4 <Vector158+0x74>
  oip->dbg.isr_cnt--;
 80037b0:	3b01      	subs	r3, #1
 80037b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80037b6:	f381 8811 	msr	BASEPRI, r1
 80037ba:	f382 8811 	msr	BASEPRI, r2
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <Vector158+0x90>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80037c6:	d108      	bne.n	80037da <Vector158+0x7a>
 80037c8:	f383 8811 	msr	BASEPRI, r3
}
 80037cc:	bd10      	pop	{r4, pc}
    chSysHalt("SV#8");
 80037ce:	4809      	ldr	r0, [pc, #36]	; (80037f4 <Vector158+0x94>)
 80037d0:	f7fd f9f6 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 80037d4:	4808      	ldr	r0, [pc, #32]	; (80037f8 <Vector158+0x98>)
 80037d6:	f7fd f9f3 	bl	8000bc0 <chSysHalt>
 80037da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037de:	f7fe b8ff 	b.w	80019e0 <__port_irq_epilogue.part.0>
 80037e2:	bf00      	nop
 80037e4:	20000910 	.word	0x20000910
 80037e8:	40026400 	.word	0x40026400
 80037ec:	20000c18 	.word	0x20000c18
 80037f0:	e000ed00 	.word	0xe000ed00
 80037f4:	08004798 	.word	0x08004798
 80037f8:	080047a0 	.word	0x080047a0
 80037fc:	00000000 	.word	0x00000000

08003800 <VectorC4>:
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	2130      	movs	r1, #48	; 0x30
 8003804:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003808:	4c7d      	ldr	r4, [pc, #500]	; (8003a00 <VectorC4+0x200>)
 800380a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800380e:	2b00      	cmp	r3, #0
 8003810:	f2c0 80e5 	blt.w	80039de <VectorC4+0x1de>
 8003814:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003818:	2a00      	cmp	r2, #0
 800381a:	f040 80e0 	bne.w	80039de <VectorC4+0x1de>
  oip->dbg.isr_cnt++;
 800381e:	3301      	adds	r3, #1
 8003820:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003824:	f382 8811 	msr	BASEPRI, r2
  I2C_TypeDef *dp = i2cp->i2c;
 8003828:	4a76      	ldr	r2, [pc, #472]	; (8003a04 <VectorC4+0x204>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800382a:	4877      	ldr	r0, [pc, #476]	; (8003a08 <VectorC4+0x208>)
  I2C_TypeDef *dp = i2cp->i2c;
 800382c:	6b55      	ldr	r5, [r2, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800382e:	69ab      	ldr	r3, [r5, #24]
  uint32_t event = dp->SR1;
 8003830:	696e      	ldr	r6, [r5, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003832:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8003836:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800383a:	4283      	cmp	r3, r0
 800383c:	d836      	bhi.n	80038ac <VectorC4+0xac>
 800383e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003842:	d90f      	bls.n	8003864 <VectorC4+0x64>
 8003844:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003848:	3b01      	subs	r3, #1
 800384a:	2b10      	cmp	r3, #16
 800384c:	d80d      	bhi.n	800386a <VectorC4+0x6a>
 800384e:	e8df f003 	tbb	[pc, r3]
 8003852:	5942      	.short	0x5942
 8003854:	0c0c0c0c 	.word	0x0c0c0c0c
 8003858:	0c0c6f0c 	.word	0x0c0c6f0c
 800385c:	0c0c0c0c 	.word	0x0c0c0c0c
 8003860:	0c0c      	.short	0x0c0c
 8003862:	74          	.byte	0x74
 8003863:	00          	.byte	0x00
 8003864:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003868:	d035      	beq.n	80038d6 <VectorC4+0xd6>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800386a:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 800386e:	bf18      	it	ne
 8003870:	69ab      	ldrne	r3, [r5, #24]
 8003872:	2230      	movs	r2, #48	; 0x30
 8003874:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003878:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800387c:	2b00      	cmp	r3, #0
 800387e:	f340 80b1 	ble.w	80039e4 <VectorC4+0x1e4>
 8003882:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003886:	2900      	cmp	r1, #0
 8003888:	f040 80ac 	bne.w	80039e4 <VectorC4+0x1e4>
  oip->dbg.isr_cnt--;
 800388c:	3b01      	subs	r3, #1
 800388e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003892:	f381 8811 	msr	BASEPRI, r1
 8003896:	f382 8811 	msr	BASEPRI, r2
 800389a:	4b5c      	ldr	r3, [pc, #368]	; (8003a0c <VectorC4+0x20c>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80038a2:	f040 80a2 	bne.w	80039ea <VectorC4+0x1ea>
 80038a6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80038ac:	4858      	ldr	r0, [pc, #352]	; (8003a10 <VectorC4+0x210>)
 80038ae:	4283      	cmp	r3, r0
 80038b0:	d01d      	beq.n	80038ee <VectorC4+0xee>
 80038b2:	3002      	adds	r0, #2
 80038b4:	4283      	cmp	r3, r0
 80038b6:	d1d8      	bne.n	800386a <VectorC4+0x6a>
    (void)dp->DR; /* Clear BTF.*/
 80038b8:	692b      	ldr	r3, [r5, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80038ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d064      	beq.n	800398e <VectorC4+0x18e>
      i2cp->addr |= 0x01;
 80038c4:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80038c6:	682b      	ldr	r3, [r5, #0]
      i2cp->addr |= 0x01;
 80038c8:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80038cc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 80038d0:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80038d2:	602b      	str	r3, [r5, #0]
      return;
 80038d4:	e7cd      	b.n	8003872 <VectorC4+0x72>
    if ((i2cp->addr >> 8) > 0) {
 80038d6:	8c13      	ldrh	r3, [r2, #32]
 80038d8:	0a1a      	lsrs	r2, r3, #8
 80038da:	d02c      	beq.n	8003936 <VectorC4+0x136>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80038dc:	f002 0206 	and.w	r2, r2, #6
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80038ea:	612b      	str	r3, [r5, #16]
 80038ec:	e7bd      	b.n	800386a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80038ee:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 80038f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80038f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 80038f6:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80038f8:	606b      	str	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmatx);
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6013      	str	r3, [r2, #0]
    break;
 8003902:	e7b2      	b.n	800386a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003904:	686b      	ldr	r3, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003906:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003908:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800390c:	680b      	ldr	r3, [r1, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800390e:	606a      	str	r2, [r5, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8003918:	686a      	ldr	r2, [r5, #4]
 800391a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800391e:	606a      	str	r2, [r5, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d8a1      	bhi.n	800386a <VectorC4+0x6a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800392c:	602b      	str	r3, [r5, #0]
 800392e:	e79c      	b.n	800386a <VectorC4+0x6a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8003930:	8c13      	ldrh	r3, [r2, #32]
 8003932:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003936:	612b      	str	r3, [r5, #16]
    break;
 8003938:	e797      	b.n	800386a <VectorC4+0x6a>
  dmaStreamDisable(i2cp->dmatx);
 800393a:	6b10      	ldr	r0, [r2, #48]	; 0x30
  dp->CR1 = I2C_CR1_SWRST;
 800393c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003940:	602b      	str	r3, [r5, #0]
  dmaStreamDisable(i2cp->dmatx);
 8003942:	6801      	ldr	r1, [r0, #0]
  dp->CR1 = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	602b      	str	r3, [r5, #0]
  dp->CR2 = 0;
 8003948:	606b      	str	r3, [r5, #4]
  dp->SR1 = 0;
 800394a:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 800394c:	680b      	ldr	r3, [r1, #0]
 800394e:	f023 031f 	bic.w	r3, r3, #31
 8003952:	600b      	str	r3, [r1, #0]
 8003954:	680b      	ldr	r3, [r1, #0]
 8003956:	07db      	lsls	r3, r3, #31
 8003958:	d4fc      	bmi.n	8003954 <VectorC4+0x154>
 800395a:	f890 c009 	ldrb.w	ip, [r0, #9]
  dmaStreamDisable(i2cp->dmarx);
 800395e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8003960:	6842      	ldr	r2, [r0, #4]
 8003962:	233d      	movs	r3, #61	; 0x3d
 8003964:	fa03 f30c 	lsl.w	r3, r3, ip
 8003968:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 800396a:	680a      	ldr	r2, [r1, #0]
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f023 031f 	bic.w	r3, r3, #31
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	07db      	lsls	r3, r3, #31
 8003978:	d4fc      	bmi.n	8003974 <VectorC4+0x174>
 800397a:	684a      	ldr	r2, [r1, #4]
 800397c:	7a49      	ldrb	r1, [r1, #9]
 800397e:	233d      	movs	r3, #61	; 0x3d
 8003980:	408b      	lsls	r3, r1
 8003982:	6013      	str	r3, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003984:	686b      	ldr	r3, [r5, #4]
 8003986:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800398a:	606b      	str	r3, [r5, #4]
    break;
 800398c:	e76d      	b.n	800386a <VectorC4+0x6a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800398e:	686b      	ldr	r3, [r5, #4]
 8003990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003994:	606b      	str	r3, [r5, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8003996:	682b      	ldr	r3, [r5, #0]
 8003998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	f381 8811 	msr	BASEPRI, r1
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80039a2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	dd23      	ble.n	80039f2 <VectorC4+0x1f2>
 80039aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80039ae:	bb03      	cbnz	r3, 80039f2 <VectorC4+0x1f2>
  if (*trp != NULL) {
 80039b0:	69d0      	ldr	r0, [r2, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 80039b2:	2101      	movs	r1, #1
 80039b4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
 80039b8:	b158      	cbz	r0, 80039d2 <VectorC4+0x1d2>
    *trp = NULL;
 80039ba:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 80039bc:	6283      	str	r3, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 80039be:	f7fd fb0f 	bl	8000fe0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 80039c2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	dd16      	ble.n	80039f8 <VectorC4+0x1f8>
 80039ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	dd12      	ble.n	80039f8 <VectorC4+0x1f8>
  oip->dbg.lock_cnt = (cnt_t)0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	e745      	b.n	800386a <VectorC4+0x6a>
    chSysHalt("SV#8");
 80039de:	480d      	ldr	r0, [pc, #52]	; (8003a14 <VectorC4+0x214>)
 80039e0:	f7fd f8ee 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 80039e4:	480c      	ldr	r0, [pc, #48]	; (8003a18 <VectorC4+0x218>)
 80039e6:	f7fd f8eb 	bl	8000bc0 <chSysHalt>
}
 80039ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039ee:	f7fd bff7 	b.w	80019e0 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 80039f2:	480a      	ldr	r0, [pc, #40]	; (8003a1c <VectorC4+0x21c>)
 80039f4:	f7fd f8e4 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#7");
 80039f8:	4809      	ldr	r0, [pc, #36]	; (8003a20 <VectorC4+0x220>)
 80039fa:	f7fd f8e1 	bl	8000bc0 <chSysHalt>
 80039fe:	bf00      	nop
 8003a00:	20000910 	.word	0x20000910
 8003a04:	20000844 	.word	0x20000844
 8003a08:	00030011 	.word	0x00030011
 8003a0c:	e000ed00 	.word	0xe000ed00
 8003a10:	00070082 	.word	0x00070082
 8003a14:	08004798 	.word	0x08004798
 8003a18:	080047a0 	.word	0x080047a0
 8003a1c:	080046c0 	.word	0x080046c0
 8003a20:	080046d8 	.word	0x080046d8
	...

08003a30 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 8003a30:	495a      	ldr	r1, [pc, #360]	; (8003b9c <VectorC8+0x16c>)
 8003a32:	6b4a      	ldr	r2, [r1, #52]	; 0x34
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD2.i2c->SR1;
 8003a36:	6955      	ldr	r5, [r2, #20]
 8003a38:	2330      	movs	r3, #48	; 0x30
 8003a3a:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
 8003a3e:	4c58      	ldr	r4, [pc, #352]	; (8003ba0 <VectorC8+0x170>)
 8003a40:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f2c0 8098 	blt.w	8003b7a <VectorC8+0x14a>
 8003a4a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003a4e:	2a00      	cmp	r2, #0
 8003a50:	f040 8093 	bne.w	8003b7a <VectorC8+0x14a>
  oip->dbg.isr_cnt++;
 8003a54:	3301      	adds	r3, #1
 8003a56:	b2a8      	uxth	r0, r5
 8003a58:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003a5c:	f382 8811 	msr	BASEPRI, r2
  dmaStreamDisable(i2cp->dmatx);
 8003a60:	e9d1 760c 	ldrd	r7, r6, [r1, #48]	; 0x30

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8003a64:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
  dmaStreamDisable(i2cp->dmatx);
 8003a68:	683a      	ldr	r2, [r7, #0]
  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	6173      	str	r3, [r6, #20]
  dmaStreamDisable(i2cp->dmatx);
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	f023 031f 	bic.w	r3, r3, #31
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	07db      	lsls	r3, r3, #31
 8003a7a:	d4fc      	bmi.n	8003a76 <VectorC8+0x46>
 8003a7c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8003a80:	687a      	ldr	r2, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8003a82:	6acf      	ldr	r7, [r1, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8003a84:	233d      	movs	r3, #61	; 0x3d
 8003a86:	fa03 f30c 	lsl.w	r3, r3, ip
 8003a8a:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	f023 031f 	bic.w	r3, r3, #31
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	07db      	lsls	r3, r3, #31
 8003a9a:	d4fc      	bmi.n	8003a96 <VectorC8+0x66>
 8003a9c:	f897 c009 	ldrb.w	ip, [r7, #9]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	233d      	movs	r3, #61	; 0x3d
 8003aa4:	fa03 f30c 	lsl.w	r3, r3, ip
 8003aa8:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8003aaa:	f3c0 2300 	ubfx	r3, r0, #8, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8003aae:	0582      	lsls	r2, r0, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8003ab0:	bf48      	it	mi
 8003ab2:	f043 0302 	orrmi.w	r3, r3, #2
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8003ab6:	0547      	lsls	r7, r0, #21
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8003ab8:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8003aba:	d50a      	bpl.n	8003ad2 <VectorC8+0xa2>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8003abc:	6872      	ldr	r2, [r6, #4]
 8003abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac2:	6072      	str	r2, [r6, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003ac4:	6832      	ldr	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	6032      	str	r2, [r6, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003ad0:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8003ad2:	0502      	lsls	r2, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8003ad4:	bf44      	itt	mi
 8003ad6:	f043 0308 	orrmi.w	r3, r3, #8
 8003ada:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8003adc:	0447      	lsls	r7, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 8003ade:	bf44      	itt	mi
 8003ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae4:	608b      	strmi	r3, [r1, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8003ae6:	04c6      	lsls	r6, r0, #19
 8003ae8:	d41c      	bmi.n	8003b24 <VectorC8+0xf4>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003aea:	042a      	lsls	r2, r5, #16
 8003aec:	d41f      	bmi.n	8003b2e <VectorC8+0xfe>
  if (i2cp->errors != I2C_NO_ERROR)
 8003aee:	bb0b      	cbnz	r3, 8003b34 <VectorC8+0x104>
 8003af0:	2230      	movs	r2, #48	; 0x30
 8003af2:	f382 8811 	msr	BASEPRI, r2
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003af6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	dd40      	ble.n	8003b80 <VectorC8+0x150>
 8003afe:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003b02:	2900      	cmp	r1, #0
 8003b04:	d13c      	bne.n	8003b80 <VectorC8+0x150>
  oip->dbg.isr_cnt--;
 8003b06:	3b01      	subs	r3, #1
 8003b08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8003b0c:	f381 8811 	msr	BASEPRI, r1
 8003b10:	f382 8811 	msr	BASEPRI, r2
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <VectorC8+0x174>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8003b1c:	d133      	bne.n	8003b86 <VectorC8+0x156>
 8003b1e:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->errors |= I2C_PEC_ERROR;
 8003b24:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003b28:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8003b2a:	608b      	str	r3, [r1, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003b2c:	d502      	bpl.n	8003b34 <VectorC8+0x104>
    i2cp->errors |= I2C_SMB_ALERT;
 8003b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b32:	608b      	str	r3, [r1, #8]
 8003b34:	2330      	movs	r3, #48	; 0x30
 8003b36:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003b3a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	dd25      	ble.n	8003b8e <VectorC8+0x15e>
 8003b42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003b46:	bb13      	cbnz	r3, 8003b8e <VectorC8+0x15e>
  if (*trp != NULL) {
 8003b48:	69c8      	ldr	r0, [r1, #28]
  oip->dbg.lock_cnt = (cnt_t)1;
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003b50:	b168      	cbz	r0, 8003b6e <VectorC8+0x13e>
    tp->u.rdymsg = msg;
 8003b52:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 8003b56:	61cb      	str	r3, [r1, #28]
    tp->u.rdymsg = msg;
 8003b58:	6282      	str	r2, [r0, #40]	; 0x28
    (void) chSchReadyI(tp);
 8003b5a:	f7fd fa41 	bl	8000fe0 <chSchReadyI.isra.0>
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
 8003b5e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	dd16      	ble.n	8003b94 <VectorC8+0x164>
 8003b66:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	dd12      	ble.n	8003b94 <VectorC8+0x164>
  oip->dbg.lock_cnt = (cnt_t)0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	e7ba      	b.n	8003af0 <VectorC8+0xc0>
    chSysHalt("SV#8");
 8003b7a:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <VectorC8+0x178>)
 8003b7c:	f7fd f820 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#9");
 8003b80:	480a      	ldr	r0, [pc, #40]	; (8003bac <VectorC8+0x17c>)
 8003b82:	f7fd f81d 	bl	8000bc0 <chSysHalt>
}
 8003b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b8a:	f7fd bf29 	b.w	80019e0 <__port_irq_epilogue.part.0>
    chSysHalt("SV#6");
 8003b8e:	4808      	ldr	r0, [pc, #32]	; (8003bb0 <VectorC8+0x180>)
 8003b90:	f7fd f816 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#7");
 8003b94:	4807      	ldr	r0, [pc, #28]	; (8003bb4 <VectorC8+0x184>)
 8003b96:	f7fd f813 	bl	8000bc0 <chSysHalt>
 8003b9a:	bf00      	nop
 8003b9c:	20000844 	.word	0x20000844
 8003ba0:	20000910 	.word	0x20000910
 8003ba4:	e000ed00 	.word	0xe000ed00
 8003ba8:	08004798 	.word	0x08004798
 8003bac:	080047a0 	.word	0x080047a0
 8003bb0:	080046c0 	.word	0x080046c0
 8003bb4:	080046d8 	.word	0x080046d8
	...

08003bc0 <chSchDoPreemption>:
 *
 * @special
 */
void chSchDoPreemption(void) {
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
 8003bc0:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <chSchDoPreemption+0x4c>)
  ch_priority_queue_t *p = pqp->next;
 8003bc2:	6810      	ldr	r0, [r2, #0]
 8003bc4:	68d1      	ldr	r1, [r2, #12]
  pqp->next       = p->next;
 8003bc6:	6803      	ldr	r3, [r0, #0]
void chSchDoPreemption(void) {
 8003bc8:	b510      	push	{r4, lr}
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
 8003bca:	2401      	movs	r4, #1
  pqp->next->prev = pqp;
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 8003bd2:	2400      	movs	r4, #0
  pqp->next       = p->next;
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	f881 4024 	strb.w	r4, [r1, #36]	; 0x24
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8003bda:	698b      	ldr	r3, [r1, #24]
  } while (unlikely(pqp->prio > p->prio));
 8003bdc:	688c      	ldr	r4, [r1, #8]
  __instance_set_currthread(oip, ntp);
 8003bde:	60d0      	str	r0, [r2, #12]
    pqp = pqp->next;
 8003be0:	681b      	ldr	r3, [r3, #0]
  } while (unlikely(pqp->prio > p->prio));
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	42a2      	cmp	r2, r4
 8003be6:	d8fb      	bhi.n	8003be0 <chSchDoPreemption+0x20>
  p->prev       = pqp->prev;
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	e9c1 3200 	strd	r3, r2, [r1]
  p->prev->next = p;
 8003bee:	6011      	str	r1, [r2, #0]
  pqp->prev     = p;
 8003bf0:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003bf2:	f3ef 8309 	mrs	r3, PSP
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8003bf6:	6a0a      	ldr	r2, [r1, #32]
 8003bf8:	3b64      	subs	r3, #100	; 0x64
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d803      	bhi.n	8003c06 <chSchDoPreemption+0x46>
}
 8003bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSysSwitch(ntp, otp);
 8003c02:	f7fc bb7f 	b.w	8000304 <__port_switch>
 8003c06:	4802      	ldr	r0, [pc, #8]	; (8003c10 <chSchDoPreemption+0x50>)
 8003c08:	f7fc ffda 	bl	8000bc0 <chSysHalt>
 8003c0c:	20000910 	.word	0x20000910
 8003c10:	080046e8 	.word	0x080046e8
	...

08003c20 <chThdExit>:
void chThdExit(msg_t msg) {
 8003c20:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c22:	2330      	movs	r3, #48	; 0x30
 8003c24:	f383 8811 	msr	BASEPRI, r3
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <chThdExit+0x74>)
 8003c2a:	e9d3 2122 	ldrd	r2, r1, [r3, #136]	; 0x88
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	d124      	bne.n	8003c7c <chThdExit+0x5c>
  return __sch_get_currthread();
 8003c32:	68da      	ldr	r2, [r3, #12]
  oip->dbg.lock_cnt = (cnt_t)1;
 8003c34:	2401      	movs	r4, #1
 8003c36:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  return (bool)(lp->next != lp);
 8003c3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  currtp->u.exitcode = msg;
 8003c3c:	6290      	str	r0, [r2, #40]	; 0x28
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8003c3e:	f102 0c2c 	add.w	ip, r2, #44	; 0x2c
 8003c42:	459c      	cmp	ip, r3
 8003c44:	d108      	bne.n	8003c58 <chThdExit+0x38>
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8003c46:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8003c4a:	b1d3      	cbz	r3, 8003c82 <chThdExit+0x62>
}
 8003c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8003c50:	200f      	movs	r0, #15
 8003c52:	f7fd ba85 	b.w	8001160 <chSchGoSleepS>
 8003c56:	4623      	mov	r3, r4
  lp->next = p->next;
 8003c58:	681c      	ldr	r4, [r3, #0]
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003c5a:	6998      	ldr	r0, [r3, #24]
  } while (unlikely(pqp->prio >= p->prio));
 8003c5c:	689d      	ldr	r5, [r3, #8]
  lp->next = p->next;
 8003c5e:	62d4      	str	r4, [r2, #44]	; 0x2c
  tp->state = CH_STATE_READY;
 8003c60:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    pqp = pqp->next;
 8003c64:	6800      	ldr	r0, [r0, #0]
  } while (unlikely(pqp->prio >= p->prio));
 8003c66:	6886      	ldr	r6, [r0, #8]
 8003c68:	42ae      	cmp	r6, r5
 8003c6a:	d2fb      	bcs.n	8003c64 <chThdExit+0x44>
  p->prev       = pqp->prev;
 8003c6c:	6845      	ldr	r5, [r0, #4]
  p->next       = pqp;
 8003c6e:	6018      	str	r0, [r3, #0]
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8003c70:	4564      	cmp	r4, ip
  p->prev       = pqp->prev;
 8003c72:	605d      	str	r5, [r3, #4]
  p->prev->next = p;
 8003c74:	602b      	str	r3, [r5, #0]
  pqp->prev     = p;
 8003c76:	6043      	str	r3, [r0, #4]
 8003c78:	d0e5      	beq.n	8003c46 <chThdExit+0x26>
 8003c7a:	e7ec      	b.n	8003c56 <chThdExit+0x36>
    chSysHalt("SV#4");
 8003c7c:	4806      	ldr	r0, [pc, #24]	; (8003c98 <chThdExit+0x78>)
 8003c7e:	f7fc ff9f 	bl	8000bc0 <chSysHalt>
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 8003c82:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8003c86:	079b      	lsls	r3, r3, #30
 8003c88:	d1e0      	bne.n	8003c4c <chThdExit+0x2c>
  p->prev->next = p->next;
 8003c8a:	e9d2 3104 	ldrd	r3, r1, [r2, #16]
 8003c8e:	600b      	str	r3, [r1, #0]
  p->next->prev = p->prev;
 8003c90:	6059      	str	r1, [r3, #4]
  return p;
 8003c92:	e7db      	b.n	8003c4c <chThdExit+0x2c>
 8003c94:	20000910 	.word	0x20000910
 8003c98:	080046c8 	.word	0x080046c8
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003ca0:	f3ef 8309 	mrs	r3, PSP
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8003ca4:	4905      	ldr	r1, [pc, #20]	; (8003cbc <SVC_Handler+0x1c>)
 8003ca6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
    psp += sizeof (struct port_extctx);
 8003cac:	3368      	adds	r3, #104	; 0x68
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8003cae:	634a      	str	r2, [r1, #52]	; 0x34
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003cb0:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f383 8811 	msr	BASEPRI, r3
}
 8003cba:	4770      	bx	lr
 8003cbc:	e000ef00 	.word	0xe000ef00

08003cc0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003cc0:	4b52      	ldr	r3, [pc, #328]	; (8003e0c <__early_init+0x14c>)
  gpiop->OTYPER  = config->otyper;
 8003cc2:	4953      	ldr	r1, [pc, #332]	; (8003e10 <__early_init+0x150>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003cc4:	691a      	ldr	r2, [r3, #16]
  gpiop->MODER   = config->moder;
 8003cc6:	f8df c188 	ldr.w	ip, [pc, #392]	; 8003e50 <__early_init+0x190>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003cca:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8003cce:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003cd0:	611a      	str	r2, [r3, #16]
 8003cd2:	6918      	ldr	r0, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8003cd4:	4c4f      	ldr	r4, [pc, #316]	; (8003e14 <__early_init+0x154>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003cd6:	4f50      	ldr	r7, [pc, #320]	; (8003e18 <__early_init+0x158>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003cd8:	f020 0087 	bic.w	r0, r0, #135	; 0x87
 8003cdc:	6118      	str	r0, [r3, #16]
 8003cde:	6918      	ldr	r0, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8003ce0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ce2:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 8003ce6:	6318      	str	r0, [r3, #48]	; 0x30
 8003ce8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003cea:	f040 0087 	orr.w	r0, r0, #135	; 0x87
 8003cee:	6518      	str	r0, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8003cf0:	2200      	movs	r2, #0
  gpiop->OSPEEDR = config->ospeedr;
 8003cf2:	f06f 0050 	mvn.w	r0, #80	; 0x50
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8003cf6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8003cf8:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003cfa:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8003cfc:	4847      	ldr	r0, [pc, #284]	; (8003e1c <__early_init+0x15c>)
 8003cfe:	60c8      	str	r0, [r1, #12]
  gpiop->AFRL    = config->afrl;
 8003d00:	f44f 40ee 	mov.w	r0, #30464	; 0x7700
  gpiop->ODR     = config->odr;
 8003d04:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8003d06:	6208      	str	r0, [r1, #32]
  gpiop->MODER   = config->moder;
 8003d08:	4845      	ldr	r0, [pc, #276]	; (8003e20 <__early_init+0x160>)
  gpiop->AFRH    = config->afrh;
 8003d0a:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003d0c:	6008      	str	r0, [r1, #0]
  gpiop->OTYPER  = config->otyper;
 8003d0e:	4845      	ldr	r0, [pc, #276]	; (8003e24 <__early_init+0x164>)
  gpiop->PUPDR   = config->pupdr;
 8003d10:	4d45      	ldr	r5, [pc, #276]	; (8003e28 <__early_init+0x168>)
  gpiop->OTYPER  = config->otyper;
 8003d12:	6062      	str	r2, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003d14:	f06f 5600 	mvn.w	r6, #536870912	; 0x20000000
 8003d18:	60a6      	str	r6, [r4, #8]
  gpiop->OTYPER  = config->otyper;
 8003d1a:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
  gpiop->PUPDR   = config->pupdr;
 8003d1e:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 8003d20:	6162      	str	r2, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8003d22:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8003d24:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003d26:	f8c4 c000 	str.w	ip, [r4]
  gpiop->OTYPER  = config->otyper;
 8003d2a:	6042      	str	r2, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003d2c:	6086      	str	r6, [r0, #8]
  gpiop->MODER   = config->moder;
 8003d2e:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  gpiop->PUPDR   = config->pupdr;
 8003d32:	60c5      	str	r5, [r0, #12]
  gpiop->ODR     = config->odr;
 8003d34:	6142      	str	r2, [r0, #20]
  gpiop->PUPDR   = config->pupdr;
 8003d36:	4d3d      	ldr	r5, [pc, #244]	; (8003e2c <__early_init+0x16c>)
  gpiop->AFRL    = config->afrl;
 8003d38:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8003d3a:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003d3c:	6006      	str	r6, [r0, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->OTYPER  = config->otyper;
 8003d42:	604a      	str	r2, [r1, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8003d44:	4c3a      	ldr	r4, [pc, #232]	; (8003e30 <__early_init+0x170>)
  gpiop->OSPEEDR = config->ospeedr;
 8003d46:	6088      	str	r0, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8003d48:	60cd      	str	r5, [r1, #12]
  gpiop->ODR     = config->odr;
 8003d4a:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8003d4c:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8003d4e:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003d50:	600a      	str	r2, [r1, #0]
  PWR->CR = STM32_VOS;
 8003d52:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8003d56:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8003d58:	603a      	str	r2, [r7, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	0791      	lsls	r1, r2, #30
 8003d66:	d5fc      	bpl.n	8003d62 <__early_init+0xa2>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8003d68:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003d6a:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <__early_init+0x14c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8003d6c:	f021 0103 	bic.w	r1, r1, #3
 8003d70:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003d72:	6893      	ldr	r3, [r2, #8]
 8003d74:	f013 030c 	ands.w	r3, r3, #12
 8003d78:	d1fb      	bne.n	8003d72 <__early_init+0xb2>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003d7a:	6811      	ldr	r1, [r2, #0]
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003d7c:	482d      	ldr	r0, [pc, #180]	; (8003e34 <__early_init+0x174>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003d7e:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8003d82:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8003d84:	6093      	str	r3, [r2, #8]
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003d86:	6050      	str	r0, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003d88:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003d8a:	4923      	ldr	r1, [pc, #140]	; (8003e18 <__early_init+0x158>)
  RCC->CR |= RCC_CR_PLLON;
 8003d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d90:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003d92:	684b      	ldr	r3, [r1, #4]
 8003d94:	045a      	lsls	r2, r3, #17
 8003d96:	d5fc      	bpl.n	8003d92 <__early_init+0xd2>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003d98:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <__early_init+0x14c>)
 8003d9a:	6813      	ldr	r3, [r2, #0]
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	d5fc      	bpl.n	8003d9a <__early_init+0xda>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <__early_init+0x178>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003da2:	4c26      	ldr	r4, [pc, #152]	; (8003e3c <__early_init+0x17c>)
 8003da4:	6094      	str	r4, [r2, #8]
    RCC->DCKCFGR = dckcfgr |
 8003da6:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8003da8:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 8003daa:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8003dae:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <__early_init+0x180>)
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d01e      	beq.n	8003df8 <__early_init+0x138>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003dba:	4b22      	ldr	r3, [pc, #136]	; (8003e44 <__early_init+0x184>)
 8003dbc:	f240 7203 	movw	r2, #1795	; 0x703
 8003dc0:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 8003dc2:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <__early_init+0x184>)
 8003dc4:	6813      	ldr	r3, [r2, #0]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d1fa      	bne.n	8003dc4 <__early_init+0x104>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003dce:	4a0f      	ldr	r2, [pc, #60]	; (8003e0c <__early_init+0x14c>)
 8003dd0:	6893      	ldr	r3, [r2, #8]
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003dd8:	6893      	ldr	r3, [r2, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d1fa      	bne.n	8003dd8 <__early_init+0x118>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8003de2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dea:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6653      	str	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 8003df2:	bcf0      	pop	{r4, r5, r6, r7}
 8003df4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8003df6:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8003df8:	4a13      	ldr	r2, [pc, #76]	; (8003e48 <__early_init+0x188>)
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <__early_init+0x18c>)
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d1db      	bne.n	8003dba <__early_init+0xfa>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <__early_init+0x184>)
 8003e04:	f240 1203 	movw	r2, #259	; 0x103
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e7da      	b.n	8003dc2 <__early_init+0x102>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40020000 	.word	0x40020000
 8003e14:	40020400 	.word	0x40020400
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	aaaaaa0a 	.word	0xaaaaaa0a
 8003e20:	280000a0 	.word	0x280000a0
 8003e24:	40020800 	.word	0x40020800
 8003e28:	8aaaaaaa 	.word	0x8aaaaaaa
 8003e2c:	aaaaaaa0 	.word	0xaaaaaaa0
 8003e30:	10000400 	.word	0x10000400
 8003e34:	04001908 	.word	0x04001908
 8003e38:	e0042000 	.word	0xe0042000
 8003e3c:	38881000 	.word	0x38881000
 8003e40:	20006411 	.word	0x20006411
 8003e44:	40023c00 	.word	0x40023c00
 8003e48:	e000ed00 	.word	0xe000ed00
 8003e4c:	410fc241 	.word	0x410fc241
 8003e50:	10000080 	.word	0x10000080
	...

08003e60 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <main+0x88>)
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	f062 0287 	orn	r2, r2, #135	; 0x87
}

/*
 * Application entry point.
 */
int main(void) {
 8003e68:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003e6c:	611a      	str	r2, [r3, #16]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	f002 0287 	and.w	r2, r2, #135	; 0x87
 8003e74:	611a      	str	r2, [r3, #16]
 8003e76:	691a      	ldr	r2, [r3, #16]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8003e7e:	621a      	str	r2, [r3, #32]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003e86:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 8003e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e90:	6258      	str	r0, [r3, #36]	; 0x24
 8003e92:	2100      	movs	r1, #0
 8003e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e96:	6259      	str	r1, [r3, #36]	; 0x24
 8003e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 8003e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8003e9c:	4813      	ldr	r0, [pc, #76]	; (8003eec <main+0x8c>)
  rccEnablePWRInterface(true);
 8003e9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ea4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60
 8003eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8003eae:	6802      	ldr	r2, [r0, #0]
 8003eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb4:	6002      	str	r2, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003eb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003ebc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	d003      	beq.n	8003ecc <main+0x6c>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003ec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ec8:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8003eca:	6719      	str	r1, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8003ecc:	4c07      	ldr	r4, [pc, #28]	; (8003eec <main+0x8c>)
  dma.allocated_mask = 0U;
 8003ece:	4908      	ldr	r1, [pc, #32]	; (8003ef0 <main+0x90>)
 8003ed0:	6860      	ldr	r0, [r4, #4]
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <main+0x94>)
 8003ed4:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8003ed8:	2200      	movs	r2, #0
 8003eda:	6060      	str	r0, [r4, #4]
 8003edc:	4806      	ldr	r0, [pc, #24]	; (8003ef8 <main+0x98>)
 8003ede:	600a      	str	r2, [r1, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003ee0:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8003ee4:	e00c      	b.n	8003f00 <main+0xa0>
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	20000c18 	.word	0x20000c18
 8003ef4:	08004830 	.word	0x08004830
 8003ef8:	40026010 	.word	0x40026010
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8003efc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
 8003f00:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003f02:	330c      	adds	r3, #12
 8003f04:	429c      	cmp	r4, r3
 8003f06:	f101 0108 	add.w	r1, r1, #8
    dma.streams[i].func = NULL;
 8003f0a:	f841 2c04 	str.w	r2, [r1, #-4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003f0e:	d1f5      	bne.n	8003efc <main+0x9c>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003f10:	4bc2      	ldr	r3, [pc, #776]	; (800421c <main+0x3bc>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003f12:	49c3      	ldr	r1, [pc, #780]	; (8004220 <main+0x3c0>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8003f14:	48c3      	ldr	r0, [pc, #780]	; (8004224 <main+0x3c4>)
  rccResetADC();
 8003f16:	4cc4      	ldr	r4, [pc, #784]	; (8004228 <main+0x3c8>)
  SD2.clock = STM32_PCLK1;
 8003f18:	f8df a388 	ldr.w	sl, [pc, #904]	; 80042a4 <main+0x444>
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003f1c:	f04f 3cff 	mov.w	ip, #4294967295
 8003f20:	f8c3 c008 	str.w	ip, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8003f24:	f8c3 c00c 	str.w	ip, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003f28:	f8c1 c008 	str.w	ip, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8003f2c:	f8c1 c00c 	str.w	ip, [r1, #12]
  adcp->state    = ADC_STOP;
 8003f30:	49be      	ldr	r1, [pc, #760]	; (800422c <main+0x3cc>)
 8003f32:	2370      	movs	r3, #112	; 0x70
 8003f34:	f880 331a 	strb.w	r3, [r0, #794]	; 0x31a
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003f38:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
  adcp->grpp     = NULL;
 8003f3c:	e9c1 2203 	strd	r2, r2, [r1, #12]
  adcp->samples  = NULL;
 8003f40:	e9c1 2201 	strd	r2, r2, [r1, #4]
  adcp->thread   = NULL;
 8003f44:	614a      	str	r2, [r1, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8003f46:	620a      	str	r2, [r1, #32]
  ADCD1.dmastp  = NULL;
 8003f48:	62ca      	str	r2, [r1, #44]	; 0x2c
  adcp->state    = ADC_STOP;
 8003f4a:	2601      	movs	r6, #1
 8003f4c:	f8c0 5180 	str.w	r5, [r0, #384]	; 0x180
 8003f50:	f44f 2780 	mov.w	r7, #262144	; 0x40000
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003f54:	6005      	str	r5, [r0, #0]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8003f56:	f880 3332 	strb.w	r3, [r0, #818]	; 0x332
 8003f5a:	25c0      	movs	r5, #192	; 0xc0
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003f5c:	2340      	movs	r3, #64	; 0x40
 8003f5e:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003f62:	6047      	str	r7, [r0, #4]
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8003f64:	f880 5326 	strb.w	r5, [r0, #806]	; 0x326
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003f68:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003f6c:	6043      	str	r3, [r0, #4]
 8003f6e:	700e      	strb	r6, [r1, #0]
  rccResetADC();
 8003f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6263      	str	r3, [r4, #36]	; 0x24
 8003f78:	6a65      	ldr	r5, [r4, #36]	; 0x24
  sdp->vmt = &vmt;
 8003f7a:	4bad      	ldr	r3, [pc, #692]	; (8004230 <main+0x3d0>)
 8003f7c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8003f80:	6265      	str	r5, [r4, #36]	; 0x24
  qp->next = qp;
 8003f82:	f101 0818 	add.w	r8, r1, #24
 8003f86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8003f88:	4daa      	ldr	r5, [pc, #680]	; (8004234 <main+0x3d4>)
  qp->prev = qp;
 8003f8a:	e9c1 8806 	strd	r8, r8, [r1, #24]
  ADCD1.adc     = ADC1;
 8003f8e:	f8df 8318 	ldr.w	r8, [pc, #792]	; 80042a8 <main+0x448>
 8003f92:	f8c1 8028 	str.w	r8, [r1, #40]	; 0x28
 8003f96:	469e      	mov	lr, r3
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 8003f98:	f8df 8310 	ldr.w	r8, [pc, #784]	; 80042ac <main+0x44c>
 8003f9c:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
 8003fa0:	49a5      	ldr	r1, [pc, #660]	; (8004238 <main+0x3d8>)
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8003fa2:	f04f 0860 	mov.w	r8, #96	; 0x60
 8003fa6:	f880 8312 	strb.w	r8, [r0, #786]	; 0x312
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003faa:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003fae:	6007      	str	r7, [r0, #0]
 8003fb0:	f84e 1b04 	str.w	r1, [lr], #4
  iqp->q_top     = bp + size;
 8003fb4:	f103 0164 	add.w	r1, r3, #100	; 0x64
  oqp->q_wrptr   = bp;
 8003fb8:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  iqp->q_top     = bp + size;
 8003fbc:	61d9      	str	r1, [r3, #28]
  oqp->q_buffer  = bp;
 8003fbe:	63d9      	str	r1, [r3, #60]	; 0x3c
  iqp->q_buffer  = bp;
 8003fc0:	f103 0154 	add.w	r1, r3, #84	; 0x54
  iqp->q_wrptr   = bp;
 8003fc4:	e9c3 1108 	strd	r1, r1, [r3, #32]
  iqp->q_buffer  = bp;
 8003fc8:	6199      	str	r1, [r3, #24]
  qp->next = qp;
 8003fca:	f105 010c 	add.w	r1, r5, #12
  qp->prev = qp;
 8003fce:	e9c5 1103 	strd	r1, r1, [r5, #12]
  qp->next = qp;
 8003fd2:	f103 010c 	add.w	r1, r3, #12
  qp->prev = qp;
 8003fd6:	e9c3 1103 	strd	r1, r1, [r3, #12]
  qp->next = qp;
 8003fda:	f103 0130 	add.w	r1, r3, #48	; 0x30
  GPTD11.tim = STM32_TIM11;
 8003fde:	4897      	ldr	r0, [pc, #604]	; (800423c <main+0x3dc>)
  iqp->q_counter = 0;
 8003fe0:	615a      	str	r2, [r3, #20]
  qp->prev = qp;
 8003fe2:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
 8003fe6:	4996      	ldr	r1, [pc, #600]	; (8004240 <main+0x3e0>)
 8003fe8:	60c1      	str	r1, [r0, #12]
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
 8003fea:	f5a1 4170 	sub.w	r1, r1, #61440	; 0xf000
 8003fee:	6369      	str	r1, [r5, #52]	; 0x34
  oqp->q_notify  = onfy;
 8003ff0:	4994      	ldr	r1, [pc, #592]	; (8004244 <main+0x3e4>)
 8003ff2:	64d9      	str	r1, [r3, #76]	; 0x4c
  oqp->q_counter = size;
 8003ff4:	2110      	movs	r1, #16
 8003ff6:	6399      	str	r1, [r3, #56]	; 0x38
  oqp->q_top     = bp + size;
 8003ff8:	f103 0174 	add.w	r1, r3, #116	; 0x74
  I2CD2.dmarx  = NULL;
  I2CD2.dmatx  = NULL;
 8003ffc:	e9c5 220b 	strd	r2, r2, [r5, #44]	; 0x2c
  i2cp->config = NULL;
 8004000:	606a      	str	r2, [r5, #4]
 8004002:	616a      	str	r2, [r5, #20]
  I2CD2.thread = NULL;
 8004004:	61ea      	str	r2, [r5, #28]
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  gptp->config = NULL;
 8004006:	6042      	str	r2, [r0, #4]
  iqp->q_link    = link;
 8004008:	e9c3 230a 	strd	r2, r3, [r3, #40]	; 0x28
  i2cp->state  = I2C_STOP;
 800400c:	702e      	strb	r6, [r5, #0]
  gptp->state  = GPT_STOP;
 800400e:	7006      	strb	r6, [r0, #0]
  oqp->q_top     = bp + size;
 8004010:	6419      	str	r1, [r3, #64]	; 0x40
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8004012:	f8c3 e004 	str.w	lr, [r3, #4]
  sdp->state = SD_STOP;
 8004016:	721e      	strb	r6, [r3, #8]
  oqp->q_link    = link;
 8004018:	651b      	str	r3, [r3, #80]	; 0x50
  ST_ENABLE_CLOCK();
 800401a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  ch_system.state = ch_sys_initializing;
 800401c:	4f8a      	ldr	r7, [pc, #552]	; (8004248 <main+0x3e8>)
 800401e:	f041 0108 	orr.w	r1, r1, #8
 8004022:	6421      	str	r1, [r4, #64]	; 0x40
 8004024:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004026:	f041 0108 	orr.w	r1, r1, #8
 800402a:	6621      	str	r1, [r4, #96]	; 0x60
 800402c:	6e21      	ldr	r1, [r4, #96]	; 0x60
  ST_ENABLE_STOP();
 800402e:	4c87      	ldr	r4, [pc, #540]	; (800424c <main+0x3ec>)
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8004030:	4987      	ldr	r1, [pc, #540]	; (8004250 <main+0x3f0>)
  ST_ENABLE_STOP();
 8004032:	68a0      	ldr	r0, [r4, #8]
 8004034:	f040 0008 	orr.w	r0, r0, #8
 8004038:	60a0      	str	r0, [r4, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800403a:	f242 700f 	movw	r0, #9999	; 0x270f
 800403e:	6288      	str	r0, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004040:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004044:	618a      	str	r2, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8004046:	634a      	str	r2, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004048:	60ca      	str	r2, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 800404a:	604a      	str	r2, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800404c:	614e      	str	r6, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800404e:	600e      	str	r6, [r1, #0]
  tmp->last       = (rtcnt_t)0;
 8004050:	e9cd 2201 	strd	r2, r2, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8004054:	60ba      	str	r2, [r7, #8]
  tmp->n          = (ucnt_t)0;
 8004056:	9203      	str	r2, [sp, #12]
 8004058:	4a7e      	ldr	r2, [pc, #504]	; (8004254 <main+0x3f4>)
  tmp->best       = (rtcnt_t)-1;
 800405a:	f8cd c000 	str.w	ip, [sp]
  tmp->cumulative = (rttime_t)0;
 800405e:	2000      	movs	r0, #0
 8004060:	2100      	movs	r1, #0
 8004062:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004066:	e9c3 a21d 	strd	sl, r2, [r3, #116]	; 0x74
 800406a:	703e      	strb	r6, [r7, #0]
}
 800406c:	2504      	movs	r5, #4
  chTMObjectInit(&tm);
  i = TM_CALIBRATION_LOOP;
  do {
    chTMStartMeasurementX(&tm);
 800406e:	4668      	mov	r0, sp
 8004070:	f7fc fdbe 	bl	8000bf0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8004074:	f7fc fdc4 	bl	8000c00 <chTMStopMeasurementX>
    i--;
  } while (i > 0U);
 8004078:	3d01      	subs	r5, #1
 800407a:	d1f8      	bne.n	800406e <main+0x20e>
 *
 * @notapi
 */
void __heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 800407c:	4a76      	ldr	r2, [pc, #472]	; (8004258 <main+0x3f8>)
  tcp->offset = tm.best;
 800407e:	9800      	ldr	r0, [sp, #0]
  qp->next = qp;
 8004080:	4b76      	ldr	r3, [pc, #472]	; (800425c <main+0x3fc>)
 8004082:	60b8      	str	r0, [r7, #8]
 8004084:	f102 000c 	add.w	r0, r2, #12
  qp->prev = qp;
 8004088:	e9c2 0003 	strd	r0, r0, [r2, #12]
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
  mp->provider = provider;
 800408c:	4874      	ldr	r0, [pc, #464]	; (8004260 <main+0x400>)
 800408e:	6218      	str	r0, [r3, #32]
 8004090:	6398      	str	r0, [r3, #56]	; 0x38
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8004092:	f103 0010 	add.w	r0, r3, #16
 8004096:	6118      	str	r0, [r3, #16]
  mp->align = align;
 8004098:	2004      	movs	r0, #4
 800409a:	61d8      	str	r0, [r3, #28]
 800409c:	6358      	str	r0, [r3, #52]	; 0x34
 800409e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80040a2:	6258      	str	r0, [r3, #36]	; 0x24
 80040a4:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80040a8:	6298      	str	r0, [r3, #40]	; 0x28
 80040aa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80040ae:	63d8      	str	r0, [r3, #60]	; 0x3c
 80040b0:	f103 0040 	add.w	r0, r3, #64	; 0x40
  ch_memcore.basemem = __heap_base__;
 80040b4:	496b      	ldr	r1, [pc, #428]	; (8004264 <main+0x404>)
 80040b6:	6418      	str	r0, [r3, #64]	; 0x40
 80040b8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80040bc:	6458      	str	r0, [r3, #68]	; 0x44
 80040be:	486a      	ldr	r0, [pc, #424]	; (8004268 <main+0x408>)
 80040c0:	6008      	str	r0, [r1, #0]
  ch_memcore.topmem  = __heap_end__;
 80040c2:	486a      	ldr	r0, [pc, #424]	; (800426c <main+0x40c>)
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 80040c4:	4c6a      	ldr	r4, [pc, #424]	; (8004270 <main+0x410>)
 80040c6:	6048      	str	r0, [r1, #4]
 80040c8:	496a      	ldr	r1, [pc, #424]	; (8004274 <main+0x414>)
 80040ca:	6155      	str	r5, [r2, #20]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 80040cc:	e9c2 5501 	strd	r5, r5, [r2, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80040d0:	6011      	str	r1, [r2, #0]

  /* Core associated to this instance.*/
  oip->core_id = core_id;

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 80040d2:	4a69      	ldr	r2, [pc, #420]	; (8004278 <main+0x418>)
 80040d4:	63a2      	str	r2, [r4, #56]	; 0x38
  mp->object_size = size;
 80040d6:	2214      	movs	r2, #20
 80040d8:	619a      	str	r2, [r3, #24]
 80040da:	221c      	movs	r2, #28
 80040dc:	e9c3 3300 	strd	r3, r3, [r3]
 80040e0:	609d      	str	r5, [r3, #8]
  mp->next = NULL;
 80040e2:	615d      	str	r5, [r3, #20]
 80040e4:	62dd      	str	r5, [r3, #44]	; 0x2c
  ch_system.instances[core_id] = oip;
 80040e6:	607c      	str	r4, [r7, #4]
  oip->core_id = core_id;
 80040e8:	6325      	str	r5, [r4, #48]	; 0x30
 80040ea:	f04f 0a30 	mov.w	sl, #48	; 0x30
  mp->object_size = size;
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
 80040f0:	f38a 8811 	msr	BASEPRI, sl
  __ASM volatile ("cpsie i" : : : "memory");
 80040f4:	b662      	cpsie	i
  pqp->prio = (tprio_t)0;
 80040f6:	e9c4 4501 	strd	r4, r5, [r4, #4]
  tp->epending          = (eventmask_t)0;
 80040fa:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040fe:	4b5f      	ldr	r3, [pc, #380]	; (800427c <main+0x41c>)
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
 8004100:	6365      	str	r5, [r4, #52]	; 0x34

  ch_dlist_init(&vtlp->dlist);
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8004102:	61e5      	str	r5, [r4, #28]

  sdp->panic_msg = NULL;

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
 8004104:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8004108:	68d9      	ldr	r1, [r3, #12]
  tp->owner             = oip;
 800410a:	6564      	str	r4, [r4, #84]	; 0x54
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800410c:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 8004110:	4011      	ands	r1, r2
  reg_value  =  (reg_value                                   |
 8004112:	4a5b      	ldr	r2, [pc, #364]	; (8004280 <main+0x420>)
 8004114:	484e      	ldr	r0, [pc, #312]	; (8004250 <main+0x3f0>)
  tp->name              = name;
 8004116:	f8df e198 	ldr.w	lr, [pc, #408]	; 80042b0 <main+0x450>
 800411a:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800411c:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800411e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004122:	4958      	ldr	r1, [pc, #352]	; (8004284 <main+0x424>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004124:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004128:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800412c:	680a      	ldr	r2, [r1, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004134:	2220      	movs	r2, #32
 8004136:	77da      	strb	r2, [r3, #31]
 8004138:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
 800413c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800413e:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 8004142:	461a      	mov	r2, r3
  dlhp->next  = dlhp;
 8004144:	f104 0110 	add.w	r1, r4, #16
  tp->wabase = tdp->wbase;
 8004148:	4b4f      	ldr	r3, [pc, #316]	; (8004288 <main+0x428>)
  pqp->next = pqp;
 800414a:	6024      	str	r4, [r4, #0]
  dlhp->delta = (sysinterval_t)-1;
 800414c:	f04f 3eff 	mov.w	lr, #4294967295
  dlhp->prev  = dlhp;
 8004150:	e9c4 1104 	strd	r1, r1, [r4, #16]
  qp->next = qp;
 8004154:	f104 006c 	add.w	r0, r4, #108	; 0x6c
  tp->hdr.pqueue.prio   = prio;
 8004158:	2180      	movs	r1, #128	; 0x80
  dlhp->delta = (sysinterval_t)-1;
 800415a:	f8c4 e018 	str.w	lr, [r4, #24]
  lp->next = lp;
 800415e:	f104 0e68 	add.w	lr, r4, #104	; 0x68
  sdp->lock_cnt = (cnt_t)1;
 8004162:	2601      	movs	r6, #1
  p->prev       = qp->prev;
 8004164:	f104 0c28 	add.w	ip, r4, #40	; 0x28
  qp->prev = qp;
 8004168:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
 800416c:	6461      	str	r1, [r4, #68]	; 0x44
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 800416e:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
  tp->realprio          = prio;
 8004172:	67e1      	str	r1, [r4, #124]	; 0x7c
  lp->next = lp;
 8004174:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
  p->prev->next = p;
 8004178:	f104 014c 	add.w	r1, r4, #76	; 0x4c
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800417c:	f104 0e3c 	add.w	lr, r4, #60	; 0x3c
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8004180:	4690      	mov	r8, r2
 8004182:	46a9      	mov	r9, r5
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8004184:	4a41      	ldr	r2, [pc, #260]	; (800428c <main+0x42c>)
  p->prev       = qp->prev;
 8004186:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  p->prev->next = p;
 800418a:	62a1      	str	r1, [r4, #40]	; 0x28
 800418c:	e9c4 8908 	strd	r8, r9, [r4, #32]
 8004190:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  sdp->panic_msg = NULL;
 8004194:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 8004198:	f8c4 e00c 	str.w	lr, [r4, #12]
  oip->rlist.current->wabase = oicp->mainthread_base;
 800419c:	65e2      	str	r2, [r4, #92]	; 0x5c
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800419e:	f1a0 0264 	sub.w	r2, r0, #100	; 0x64
 80041a2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 80041a6:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <main+0x430>)
 80041a8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 80041ac:	4a39      	ldr	r2, [pc, #228]	; (8004294 <main+0x434>)
 80041ae:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tp->name              = name;
 80041b2:	4a39      	ldr	r2, [pc, #228]	; (8004298 <main+0x438>)
 80041b4:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  lp->next = lp;
 80041b8:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 80041bc:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  p->prev->next = p;
 80041c0:	f100 0210 	add.w	r2, r0, #16
  tp->state             = CH_STATE_WTSTART;
 80041c4:	f04f 0b02 	mov.w	fp, #2
 80041c8:	64e2      	str	r2, [r4, #76]	; 0x4c
  qp->prev      = p;
 80041ca:	62e2      	str	r2, [r4, #44]	; 0x2c
  qp->next = qp;
 80041cc:	3220      	adds	r2, #32
  p->prev       = qp->prev;
 80041ce:	e9c3 c172 	strd	ip, r1, [r3, #456]	; 0x1c8
  tp->mtxlist           = NULL;
 80041d2:	e9c3 567d 	strd	r5, r6, [r3, #500]	; 0x1f4
  qp->prev = qp;
 80041d6:	e9c3 227a 	strd	r2, r2, [r3, #488]	; 0x1e8
  tp->wabase = tdp->wbase;
 80041da:	f8c3 31d8 	str.w	r3, [r3, #472]	; 0x1d8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80041de:	f8c3 5198 	str.w	r5, [r3, #408]	; 0x198
  tp->hdr.pqueue.prio   = prio;
 80041e2:	f8c3 61c0 	str.w	r6, [r3, #448]	; 0x1c0
  tp->owner             = oip;
 80041e6:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  tp->epending          = (eventmask_t)0;
 80041ea:	f8c3 51f0 	str.w	r5, [r3, #496]	; 0x1f0
  tp->state             = CH_STATE_WTSTART;
 80041ee:	f8a3 b1dc 	strh.w	fp, [r3, #476]	; 0x1dc
  tp->refs              = (trefs_t)1;
 80041f2:	f883 61de 	strb.w	r6, [r3, #478]	; 0x1de
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 80041f6:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 80041fa:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
  return chSchReadyI(chThdCreateSuspendedI(tdp));
 80041fe:	f7fc feef 	bl	8000fe0 <chSchReadyI.isra.0>
  ch_system.state = ch_sys_running;
 8004202:	f887 b000 	strb.w	fp, [r7]
 8004206:	f7fe f8db 	bl	80023c0 <__dbg_check_unlock>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800420a:	f385 8811 	msr	BASEPRI, r5
  chSysInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800420e:	4a23      	ldr	r2, [pc, #140]	; (800429c <main+0x43c>)
 8004210:	4823      	ldr	r0, [pc, #140]	; (80042a0 <main+0x440>)
 8004212:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004216:	f7fe f9db 	bl	80025d0 <chThdCreateStatic.constprop.0.isra.0>
 800421a:	e04b      	b.n	80042b4 <main+0x454>
 800421c:	40026000 	.word	0x40026000
 8004220:	40026400 	.word	0x40026400
 8004224:	e000e100 	.word	0xe000e100
 8004228:	40023800 	.word	0x40023800
 800422c:	20000800 	.word	0x20000800
 8004230:	2000087c 	.word	0x2000087c
 8004234:	20000844 	.word	0x20000844
 8004238:	080049f4 	.word	0x080049f4
 800423c:	20000834 	.word	0x20000834
 8004240:	40014800 	.word	0x40014800
 8004244:	08000bb1 	.word	0x08000bb1
 8004248:	20000bf0 	.word	0x20000bf0
 800424c:	e0042000 	.word	0xe0042000
 8004250:	40000c00 	.word	0x40000c00
 8004254:	02faf080 	.word	0x02faf080
 8004258:	20000bfc 	.word	0x20000bfc
 800425c:	20000ba0 	.word	0x20000ba0
 8004260:	08000e61 	.word	0x08000e61
 8004264:	20000be8 	.word	0x20000be8
 8004268:	20001870 	.word	0x20001870
 800426c:	20008000 	.word	0x20008000
 8004270:	20000910 	.word	0x20000910
 8004274:	08000de1 	.word	0x08000de1
 8004278:	08004910 	.word	0x08004910
 800427c:	e000ed00 	.word	0xe000ed00
 8004280:	05fa0300 	.word	0x05fa0300
 8004284:	e0001000 	.word	0xe0001000
 8004288:	200009a0 	.word	0x200009a0
 800428c:	20000400 	.word	0x20000400
 8004290:	08000be1 	.word	0x08000be1
 8004294:	0800031d 	.word	0x0800031d
 8004298:	080047a8 	.word	0x080047a8
 800429c:	080017b1 	.word	0x080017b1
 80042a0:	20001630 	.word	0x20001630
 80042a4:	40004400 	.word	0x40004400
 80042a8:	40012000 	.word	0x40012000
 80042ac:	00022c16 	.word	0x00022c16
 80042b0:	08004924 	.word	0x08004924

  /* Creating the serial manager thread. */
  chThdCreateStatic(waThdSerial, sizeof(waThdSerial), NORMALPRIO, ThdSerial,
 80042b4:	4a13      	ldr	r2, [pc, #76]	; (8004304 <main+0x4a4>)
 80042b6:	4814      	ldr	r0, [pc, #80]	; (8004308 <main+0x4a8>)
 80042b8:	f44f 6119 	mov.w	r1, #2448	; 0x990
 80042bc:	f7fe f988 	bl	80025d0 <chThdCreateStatic.constprop.0.isra.0>


  while (true) {
    //if (!palReadPad(GPIOC, GPIOC_BUTTON)) {
    //do something
    get_temp_internal();
 80042c0:	f7fd fe9e 	bl	8002000 <get_temp_internal.isra.0>
 80042c4:	f38a 8811 	msr	BASEPRI, sl
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80042c8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d112      	bne.n	80042f6 <main+0x496>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80042d0:	f241 3188 	movw	r1, #5000	; 0x1388
 80042d4:	2008      	movs	r0, #8
  oip->dbg.lock_cnt = (cnt_t)1;
 80042d6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80042da:	f7fc ff71 	bl	80011c0 <chSchGoSleepTimeoutS>
  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
 80042de:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80042e2:	b95b      	cbnz	r3, 80042fc <main+0x49c>
 80042e4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80042e8:	2a00      	cmp	r2, #0
 80042ea:	dd07      	ble.n	80042fc <main+0x49c>
  oip->dbg.lock_cnt = (cnt_t)0;
 80042ec:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80042f0:	f383 8811 	msr	BASEPRI, r3
}
 80042f4:	e7e4      	b.n	80042c0 <main+0x460>
    chSysHalt("SV#4");
 80042f6:	4805      	ldr	r0, [pc, #20]	; (800430c <main+0x4ac>)
 80042f8:	f7fc fc62 	bl	8000bc0 <chSysHalt>
    chSysHalt("SV#5");
 80042fc:	4804      	ldr	r0, [pc, #16]	; (8004310 <main+0x4b0>)
 80042fe:	f7fc fc5f 	bl	8000bc0 <chSysHalt>
 8004302:	bf00      	nop
 8004304:	08002421 	.word	0x08002421
 8004308:	20000ca0 	.word	0x20000ca0
 800430c:	080046c8 	.word	0x080046c8
 8004310:	080046f8 	.word	0x080046f8

08004314 <memset>:
 8004314:	0783      	lsls	r3, r0, #30
 8004316:	b530      	push	{r4, r5, lr}
 8004318:	d048      	beq.n	80043ac <memset+0x98>
 800431a:	1e54      	subs	r4, r2, #1
 800431c:	2a00      	cmp	r2, #0
 800431e:	d03f      	beq.n	80043a0 <memset+0x8c>
 8004320:	b2ca      	uxtb	r2, r1
 8004322:	4603      	mov	r3, r0
 8004324:	e001      	b.n	800432a <memset+0x16>
 8004326:	3c01      	subs	r4, #1
 8004328:	d33a      	bcc.n	80043a0 <memset+0x8c>
 800432a:	f803 2b01 	strb.w	r2, [r3], #1
 800432e:	079d      	lsls	r5, r3, #30
 8004330:	d1f9      	bne.n	8004326 <memset+0x12>
 8004332:	2c03      	cmp	r4, #3
 8004334:	d92d      	bls.n	8004392 <memset+0x7e>
 8004336:	b2cd      	uxtb	r5, r1
 8004338:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800433c:	2c0f      	cmp	r4, #15
 800433e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004342:	d936      	bls.n	80043b2 <memset+0x9e>
 8004344:	f1a4 0210 	sub.w	r2, r4, #16
 8004348:	f022 0c0f 	bic.w	ip, r2, #15
 800434c:	f103 0e20 	add.w	lr, r3, #32
 8004350:	44e6      	add	lr, ip
 8004352:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8004356:	f103 0210 	add.w	r2, r3, #16
 800435a:	e942 5504 	strd	r5, r5, [r2, #-16]
 800435e:	e942 5502 	strd	r5, r5, [r2, #-8]
 8004362:	3210      	adds	r2, #16
 8004364:	4572      	cmp	r2, lr
 8004366:	d1f8      	bne.n	800435a <memset+0x46>
 8004368:	f10c 0201 	add.w	r2, ip, #1
 800436c:	f014 0f0c 	tst.w	r4, #12
 8004370:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004374:	f004 0c0f 	and.w	ip, r4, #15
 8004378:	d013      	beq.n	80043a2 <memset+0x8e>
 800437a:	f1ac 0304 	sub.w	r3, ip, #4
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	3304      	adds	r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	f842 5b04 	str.w	r5, [r2], #4
 800438a:	4293      	cmp	r3, r2
 800438c:	d1fb      	bne.n	8004386 <memset+0x72>
 800438e:	f00c 0403 	and.w	r4, ip, #3
 8004392:	b12c      	cbz	r4, 80043a0 <memset+0x8c>
 8004394:	b2c9      	uxtb	r1, r1
 8004396:	441c      	add	r4, r3
 8004398:	f803 1b01 	strb.w	r1, [r3], #1
 800439c:	429c      	cmp	r4, r3
 800439e:	d1fb      	bne.n	8004398 <memset+0x84>
 80043a0:	bd30      	pop	{r4, r5, pc}
 80043a2:	4664      	mov	r4, ip
 80043a4:	4613      	mov	r3, r2
 80043a6:	2c00      	cmp	r4, #0
 80043a8:	d1f4      	bne.n	8004394 <memset+0x80>
 80043aa:	e7f9      	b.n	80043a0 <memset+0x8c>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4614      	mov	r4, r2
 80043b0:	e7bf      	b.n	8004332 <memset+0x1e>
 80043b2:	461a      	mov	r2, r3
 80043b4:	46a4      	mov	ip, r4
 80043b6:	e7e0      	b.n	800437a <memset+0x66>

080043b8 <__aeabi_f2ulz>:
 80043b8:	b5d0      	push	{r4, r6, r7, lr}
 80043ba:	f7fc faeb 	bl	8000994 <__aeabi_f2d>
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <__aeabi_f2ulz+0x38>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	4606      	mov	r6, r0
 80043c4:	460f      	mov	r7, r1
 80043c6:	f7fc f857 	bl	8000478 <__aeabi_dmul>
 80043ca:	f7fc fbcd 	bl	8000b68 <__aeabi_d2uiz>
 80043ce:	4604      	mov	r4, r0
 80043d0:	f7fc fabe 	bl	8000950 <__aeabi_ui2d>
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <__aeabi_f2ulz+0x3c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	f7fc f84e 	bl	8000478 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4630      	mov	r0, r6
 80043e2:	4639      	mov	r1, r7
 80043e4:	f7fc f976 	bl	80006d4 <__aeabi_dsub>
 80043e8:	f7fc fbbe 	bl	8000b68 <__aeabi_d2uiz>
 80043ec:	4621      	mov	r1, r4
 80043ee:	bdd0      	pop	{r4, r6, r7, pc}
 80043f0:	3df00000 	.word	0x3df00000
 80043f4:	41f00000 	.word	0x41f00000

080043f8 <__udivmoddi4>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	9e08      	ldr	r6, [sp, #32]
 80043fe:	460d      	mov	r5, r1
 8004400:	4604      	mov	r4, r0
 8004402:	460f      	mov	r7, r1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d14a      	bne.n	800449e <__udivmoddi4+0xa6>
 8004408:	428a      	cmp	r2, r1
 800440a:	4694      	mov	ip, r2
 800440c:	d965      	bls.n	80044da <__udivmoddi4+0xe2>
 800440e:	fab2 f382 	clz	r3, r2
 8004412:	b143      	cbz	r3, 8004426 <__udivmoddi4+0x2e>
 8004414:	fa02 fc03 	lsl.w	ip, r2, r3
 8004418:	f1c3 0220 	rsb	r2, r3, #32
 800441c:	409f      	lsls	r7, r3
 800441e:	fa20 f202 	lsr.w	r2, r0, r2
 8004422:	4317      	orrs	r7, r2
 8004424:	409c      	lsls	r4, r3
 8004426:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800442a:	fa1f f58c 	uxth.w	r5, ip
 800442e:	fbb7 f1fe 	udiv	r1, r7, lr
 8004432:	0c22      	lsrs	r2, r4, #16
 8004434:	fb0e 7711 	mls	r7, lr, r1, r7
 8004438:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800443c:	fb01 f005 	mul.w	r0, r1, r5
 8004440:	4290      	cmp	r0, r2
 8004442:	d90a      	bls.n	800445a <__udivmoddi4+0x62>
 8004444:	eb1c 0202 	adds.w	r2, ip, r2
 8004448:	f101 37ff 	add.w	r7, r1, #4294967295
 800444c:	f080 811c 	bcs.w	8004688 <__udivmoddi4+0x290>
 8004450:	4290      	cmp	r0, r2
 8004452:	f240 8119 	bls.w	8004688 <__udivmoddi4+0x290>
 8004456:	3902      	subs	r1, #2
 8004458:	4462      	add	r2, ip
 800445a:	1a12      	subs	r2, r2, r0
 800445c:	b2a4      	uxth	r4, r4
 800445e:	fbb2 f0fe 	udiv	r0, r2, lr
 8004462:	fb0e 2210 	mls	r2, lr, r0, r2
 8004466:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800446a:	fb00 f505 	mul.w	r5, r0, r5
 800446e:	42a5      	cmp	r5, r4
 8004470:	d90a      	bls.n	8004488 <__udivmoddi4+0x90>
 8004472:	eb1c 0404 	adds.w	r4, ip, r4
 8004476:	f100 32ff 	add.w	r2, r0, #4294967295
 800447a:	f080 8107 	bcs.w	800468c <__udivmoddi4+0x294>
 800447e:	42a5      	cmp	r5, r4
 8004480:	f240 8104 	bls.w	800468c <__udivmoddi4+0x294>
 8004484:	4464      	add	r4, ip
 8004486:	3802      	subs	r0, #2
 8004488:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800448c:	1b64      	subs	r4, r4, r5
 800448e:	2100      	movs	r1, #0
 8004490:	b11e      	cbz	r6, 800449a <__udivmoddi4+0xa2>
 8004492:	40dc      	lsrs	r4, r3
 8004494:	2300      	movs	r3, #0
 8004496:	e9c6 4300 	strd	r4, r3, [r6]
 800449a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449e:	428b      	cmp	r3, r1
 80044a0:	d908      	bls.n	80044b4 <__udivmoddi4+0xbc>
 80044a2:	2e00      	cmp	r6, #0
 80044a4:	f000 80ed 	beq.w	8004682 <__udivmoddi4+0x28a>
 80044a8:	2100      	movs	r1, #0
 80044aa:	e9c6 0500 	strd	r0, r5, [r6]
 80044ae:	4608      	mov	r0, r1
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	fab3 f183 	clz	r1, r3
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d149      	bne.n	8004550 <__udivmoddi4+0x158>
 80044bc:	42ab      	cmp	r3, r5
 80044be:	d302      	bcc.n	80044c6 <__udivmoddi4+0xce>
 80044c0:	4282      	cmp	r2, r0
 80044c2:	f200 80f8 	bhi.w	80046b6 <__udivmoddi4+0x2be>
 80044c6:	1a84      	subs	r4, r0, r2
 80044c8:	eb65 0203 	sbc.w	r2, r5, r3
 80044cc:	2001      	movs	r0, #1
 80044ce:	4617      	mov	r7, r2
 80044d0:	2e00      	cmp	r6, #0
 80044d2:	d0e2      	beq.n	800449a <__udivmoddi4+0xa2>
 80044d4:	e9c6 4700 	strd	r4, r7, [r6]
 80044d8:	e7df      	b.n	800449a <__udivmoddi4+0xa2>
 80044da:	b902      	cbnz	r2, 80044de <__udivmoddi4+0xe6>
 80044dc:	deff      	udf	#255	; 0xff
 80044de:	fab2 f382 	clz	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 8090 	bne.w	8004608 <__udivmoddi4+0x210>
 80044e8:	1a8a      	subs	r2, r1, r2
 80044ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80044ee:	fa1f fe8c 	uxth.w	lr, ip
 80044f2:	2101      	movs	r1, #1
 80044f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80044f8:	fb07 2015 	mls	r0, r7, r5, r2
 80044fc:	0c22      	lsrs	r2, r4, #16
 80044fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004502:	fb0e f005 	mul.w	r0, lr, r5
 8004506:	4290      	cmp	r0, r2
 8004508:	d908      	bls.n	800451c <__udivmoddi4+0x124>
 800450a:	eb1c 0202 	adds.w	r2, ip, r2
 800450e:	f105 38ff 	add.w	r8, r5, #4294967295
 8004512:	d202      	bcs.n	800451a <__udivmoddi4+0x122>
 8004514:	4290      	cmp	r0, r2
 8004516:	f200 80cb 	bhi.w	80046b0 <__udivmoddi4+0x2b8>
 800451a:	4645      	mov	r5, r8
 800451c:	1a12      	subs	r2, r2, r0
 800451e:	b2a4      	uxth	r4, r4
 8004520:	fbb2 f0f7 	udiv	r0, r2, r7
 8004524:	fb07 2210 	mls	r2, r7, r0, r2
 8004528:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800452c:	fb0e fe00 	mul.w	lr, lr, r0
 8004530:	45a6      	cmp	lr, r4
 8004532:	d908      	bls.n	8004546 <__udivmoddi4+0x14e>
 8004534:	eb1c 0404 	adds.w	r4, ip, r4
 8004538:	f100 32ff 	add.w	r2, r0, #4294967295
 800453c:	d202      	bcs.n	8004544 <__udivmoddi4+0x14c>
 800453e:	45a6      	cmp	lr, r4
 8004540:	f200 80bb 	bhi.w	80046ba <__udivmoddi4+0x2c2>
 8004544:	4610      	mov	r0, r2
 8004546:	eba4 040e 	sub.w	r4, r4, lr
 800454a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800454e:	e79f      	b.n	8004490 <__udivmoddi4+0x98>
 8004550:	f1c1 0720 	rsb	r7, r1, #32
 8004554:	408b      	lsls	r3, r1
 8004556:	fa22 fc07 	lsr.w	ip, r2, r7
 800455a:	ea4c 0c03 	orr.w	ip, ip, r3
 800455e:	fa05 f401 	lsl.w	r4, r5, r1
 8004562:	fa20 f307 	lsr.w	r3, r0, r7
 8004566:	40fd      	lsrs	r5, r7
 8004568:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800456c:	4323      	orrs	r3, r4
 800456e:	fbb5 f8f9 	udiv	r8, r5, r9
 8004572:	fa1f fe8c 	uxth.w	lr, ip
 8004576:	fb09 5518 	mls	r5, r9, r8, r5
 800457a:	0c1c      	lsrs	r4, r3, #16
 800457c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004580:	fb08 f50e 	mul.w	r5, r8, lr
 8004584:	42a5      	cmp	r5, r4
 8004586:	fa02 f201 	lsl.w	r2, r2, r1
 800458a:	fa00 f001 	lsl.w	r0, r0, r1
 800458e:	d90b      	bls.n	80045a8 <__udivmoddi4+0x1b0>
 8004590:	eb1c 0404 	adds.w	r4, ip, r4
 8004594:	f108 3aff 	add.w	sl, r8, #4294967295
 8004598:	f080 8088 	bcs.w	80046ac <__udivmoddi4+0x2b4>
 800459c:	42a5      	cmp	r5, r4
 800459e:	f240 8085 	bls.w	80046ac <__udivmoddi4+0x2b4>
 80045a2:	f1a8 0802 	sub.w	r8, r8, #2
 80045a6:	4464      	add	r4, ip
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	b29d      	uxth	r5, r3
 80045ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80045b0:	fb09 4413 	mls	r4, r9, r3, r4
 80045b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80045b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80045bc:	45a6      	cmp	lr, r4
 80045be:	d908      	bls.n	80045d2 <__udivmoddi4+0x1da>
 80045c0:	eb1c 0404 	adds.w	r4, ip, r4
 80045c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80045c8:	d26c      	bcs.n	80046a4 <__udivmoddi4+0x2ac>
 80045ca:	45a6      	cmp	lr, r4
 80045cc:	d96a      	bls.n	80046a4 <__udivmoddi4+0x2ac>
 80045ce:	3b02      	subs	r3, #2
 80045d0:	4464      	add	r4, ip
 80045d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80045d6:	fba3 9502 	umull	r9, r5, r3, r2
 80045da:	eba4 040e 	sub.w	r4, r4, lr
 80045de:	42ac      	cmp	r4, r5
 80045e0:	46c8      	mov	r8, r9
 80045e2:	46ae      	mov	lr, r5
 80045e4:	d356      	bcc.n	8004694 <__udivmoddi4+0x29c>
 80045e6:	d053      	beq.n	8004690 <__udivmoddi4+0x298>
 80045e8:	b156      	cbz	r6, 8004600 <__udivmoddi4+0x208>
 80045ea:	ebb0 0208 	subs.w	r2, r0, r8
 80045ee:	eb64 040e 	sbc.w	r4, r4, lr
 80045f2:	fa04 f707 	lsl.w	r7, r4, r7
 80045f6:	40ca      	lsrs	r2, r1
 80045f8:	40cc      	lsrs	r4, r1
 80045fa:	4317      	orrs	r7, r2
 80045fc:	e9c6 7400 	strd	r7, r4, [r6]
 8004600:	4618      	mov	r0, r3
 8004602:	2100      	movs	r1, #0
 8004604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004608:	f1c3 0120 	rsb	r1, r3, #32
 800460c:	fa02 fc03 	lsl.w	ip, r2, r3
 8004610:	fa20 f201 	lsr.w	r2, r0, r1
 8004614:	fa25 f101 	lsr.w	r1, r5, r1
 8004618:	409d      	lsls	r5, r3
 800461a:	432a      	orrs	r2, r5
 800461c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004620:	fa1f fe8c 	uxth.w	lr, ip
 8004624:	fbb1 f0f7 	udiv	r0, r1, r7
 8004628:	fb07 1510 	mls	r5, r7, r0, r1
 800462c:	0c11      	lsrs	r1, r2, #16
 800462e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004632:	fb00 f50e 	mul.w	r5, r0, lr
 8004636:	428d      	cmp	r5, r1
 8004638:	fa04 f403 	lsl.w	r4, r4, r3
 800463c:	d908      	bls.n	8004650 <__udivmoddi4+0x258>
 800463e:	eb1c 0101 	adds.w	r1, ip, r1
 8004642:	f100 38ff 	add.w	r8, r0, #4294967295
 8004646:	d22f      	bcs.n	80046a8 <__udivmoddi4+0x2b0>
 8004648:	428d      	cmp	r5, r1
 800464a:	d92d      	bls.n	80046a8 <__udivmoddi4+0x2b0>
 800464c:	3802      	subs	r0, #2
 800464e:	4461      	add	r1, ip
 8004650:	1b49      	subs	r1, r1, r5
 8004652:	b292      	uxth	r2, r2
 8004654:	fbb1 f5f7 	udiv	r5, r1, r7
 8004658:	fb07 1115 	mls	r1, r7, r5, r1
 800465c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004660:	fb05 f10e 	mul.w	r1, r5, lr
 8004664:	4291      	cmp	r1, r2
 8004666:	d908      	bls.n	800467a <__udivmoddi4+0x282>
 8004668:	eb1c 0202 	adds.w	r2, ip, r2
 800466c:	f105 38ff 	add.w	r8, r5, #4294967295
 8004670:	d216      	bcs.n	80046a0 <__udivmoddi4+0x2a8>
 8004672:	4291      	cmp	r1, r2
 8004674:	d914      	bls.n	80046a0 <__udivmoddi4+0x2a8>
 8004676:	3d02      	subs	r5, #2
 8004678:	4462      	add	r2, ip
 800467a:	1a52      	subs	r2, r2, r1
 800467c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004680:	e738      	b.n	80044f4 <__udivmoddi4+0xfc>
 8004682:	4631      	mov	r1, r6
 8004684:	4630      	mov	r0, r6
 8004686:	e708      	b.n	800449a <__udivmoddi4+0xa2>
 8004688:	4639      	mov	r1, r7
 800468a:	e6e6      	b.n	800445a <__udivmoddi4+0x62>
 800468c:	4610      	mov	r0, r2
 800468e:	e6fb      	b.n	8004488 <__udivmoddi4+0x90>
 8004690:	4548      	cmp	r0, r9
 8004692:	d2a9      	bcs.n	80045e8 <__udivmoddi4+0x1f0>
 8004694:	ebb9 0802 	subs.w	r8, r9, r2
 8004698:	eb65 0e0c 	sbc.w	lr, r5, ip
 800469c:	3b01      	subs	r3, #1
 800469e:	e7a3      	b.n	80045e8 <__udivmoddi4+0x1f0>
 80046a0:	4645      	mov	r5, r8
 80046a2:	e7ea      	b.n	800467a <__udivmoddi4+0x282>
 80046a4:	462b      	mov	r3, r5
 80046a6:	e794      	b.n	80045d2 <__udivmoddi4+0x1da>
 80046a8:	4640      	mov	r0, r8
 80046aa:	e7d1      	b.n	8004650 <__udivmoddi4+0x258>
 80046ac:	46d0      	mov	r8, sl
 80046ae:	e77b      	b.n	80045a8 <__udivmoddi4+0x1b0>
 80046b0:	3d02      	subs	r5, #2
 80046b2:	4462      	add	r2, ip
 80046b4:	e732      	b.n	800451c <__udivmoddi4+0x124>
 80046b6:	4608      	mov	r0, r1
 80046b8:	e70a      	b.n	80044d0 <__udivmoddi4+0xd8>
 80046ba:	4464      	add	r4, ip
 80046bc:	3802      	subs	r0, #2
 80046be:	e742      	b.n	8004546 <__udivmoddi4+0x14e>
